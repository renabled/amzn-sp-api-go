// Code generated by go-swagger; DO NOT EDIT.

package solicitations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new solicitations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for solicitations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateProductReviewAndSellerFeedbackSolicitation(params *CreateProductReviewAndSellerFeedbackSolicitationParams, opts ...ClientOption) (*CreateProductReviewAndSellerFeedbackSolicitationCreated, error)

	GetSolicitationActionsForOrder(params *GetSolicitationActionsForOrderParams, opts ...ClientOption) (*GetSolicitationActionsForOrderOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CreateProductReviewAndSellerFeedbackSolicitation Sends a solicitation to a buyer asking for seller feedback and a product review for the specified order. Send only one productReviewAndSellerFeedback or free form proactive message per order.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) CreateProductReviewAndSellerFeedbackSolicitation(params *CreateProductReviewAndSellerFeedbackSolicitationParams, opts ...ClientOption) (*CreateProductReviewAndSellerFeedbackSolicitationCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProductReviewAndSellerFeedbackSolicitationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createProductReviewAndSellerFeedbackSolicitation",
		Method:             "POST",
		PathPattern:        "/solicitations/v1/orders/{amazonOrderId}/solicitations/productReviewAndSellerFeedback",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProductReviewAndSellerFeedbackSolicitationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateProductReviewAndSellerFeedbackSolicitationCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createProductReviewAndSellerFeedbackSolicitation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetSolicitationActionsForOrder Returns a list of solicitation types that are available for an order that you specify. A solicitation type is represented by an actions object, which contains a path and query parameter(s). You can use the path and parameter(s) to call an operation that sends a solicitation. Currently only the productReviewAndSellerFeedbackSolicitation solicitation type is available.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetSolicitationActionsForOrder(params *GetSolicitationActionsForOrderParams, opts ...ClientOption) (*GetSolicitationActionsForOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSolicitationActionsForOrderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSolicitationActionsForOrder",
		Method:             "GET",
		PathPattern:        "/solicitations/v1/orders/{amazonOrderId}",
		ProducesMediaTypes: []string{"application/hal+json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSolicitationActionsForOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSolicitationActionsForOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSolicitationActionsForOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
