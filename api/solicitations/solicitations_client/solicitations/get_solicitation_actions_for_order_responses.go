// Code generated by go-swagger; DO NOT EDIT.

package solicitations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/solicitations/solicitations_models"
)

// GetSolicitationActionsForOrderReader is a Reader for the GetSolicitationActionsForOrder structure.
type GetSolicitationActionsForOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSolicitationActionsForOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSolicitationActionsForOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSolicitationActionsForOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSolicitationActionsForOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSolicitationActionsForOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSolicitationActionsForOrderRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSolicitationActionsForOrderUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSolicitationActionsForOrderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSolicitationActionsForOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSolicitationActionsForOrderServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSolicitationActionsForOrderOK creates a GetSolicitationActionsForOrderOK with default headers values
func NewGetSolicitationActionsForOrderOK() *GetSolicitationActionsForOrderOK {
	return &GetSolicitationActionsForOrderOK{}
}

/* GetSolicitationActionsForOrderOK describes a response with status code 200, with default header values.

Returns hypermedia links under the _links.actions key that specify which solicitation actions are allowed for the order.
*/
type GetSolicitationActionsForOrderOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderOK) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderOK  %+v", 200, o.Payload)
}
func (o *GetSolicitationActionsForOrderOK) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderBadRequest creates a GetSolicitationActionsForOrderBadRequest with default headers values
func NewGetSolicitationActionsForOrderBadRequest() *GetSolicitationActionsForOrderBadRequest {
	return &GetSolicitationActionsForOrderBadRequest{}
}

/* GetSolicitationActionsForOrderBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSolicitationActionsForOrderBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderBadRequest) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderBadRequest  %+v", 400, o.Payload)
}
func (o *GetSolicitationActionsForOrderBadRequest) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderForbidden creates a GetSolicitationActionsForOrderForbidden with default headers values
func NewGetSolicitationActionsForOrderForbidden() *GetSolicitationActionsForOrderForbidden {
	return &GetSolicitationActionsForOrderForbidden{}
}

/* GetSolicitationActionsForOrderForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSolicitationActionsForOrderForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderForbidden) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderForbidden  %+v", 403, o.Payload)
}
func (o *GetSolicitationActionsForOrderForbidden) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderNotFound creates a GetSolicitationActionsForOrderNotFound with default headers values
func NewGetSolicitationActionsForOrderNotFound() *GetSolicitationActionsForOrderNotFound {
	return &GetSolicitationActionsForOrderNotFound{}
}

/* GetSolicitationActionsForOrderNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetSolicitationActionsForOrderNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderNotFound) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderNotFound  %+v", 404, o.Payload)
}
func (o *GetSolicitationActionsForOrderNotFound) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderRequestEntityTooLarge creates a GetSolicitationActionsForOrderRequestEntityTooLarge with default headers values
func NewGetSolicitationActionsForOrderRequestEntityTooLarge() *GetSolicitationActionsForOrderRequestEntityTooLarge {
	return &GetSolicitationActionsForOrderRequestEntityTooLarge{}
}

/* GetSolicitationActionsForOrderRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetSolicitationActionsForOrderRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetSolicitationActionsForOrderRequestEntityTooLarge) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderUnsupportedMediaType creates a GetSolicitationActionsForOrderUnsupportedMediaType with default headers values
func NewGetSolicitationActionsForOrderUnsupportedMediaType() *GetSolicitationActionsForOrderUnsupportedMediaType {
	return &GetSolicitationActionsForOrderUnsupportedMediaType{}
}

/* GetSolicitationActionsForOrderUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetSolicitationActionsForOrderUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetSolicitationActionsForOrderUnsupportedMediaType) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderTooManyRequests creates a GetSolicitationActionsForOrderTooManyRequests with default headers values
func NewGetSolicitationActionsForOrderTooManyRequests() *GetSolicitationActionsForOrderTooManyRequests {
	return &GetSolicitationActionsForOrderTooManyRequests{}
}

/* GetSolicitationActionsForOrderTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSolicitationActionsForOrderTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetSolicitationActionsForOrderTooManyRequests) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderInternalServerError creates a GetSolicitationActionsForOrderInternalServerError with default headers values
func NewGetSolicitationActionsForOrderInternalServerError() *GetSolicitationActionsForOrderInternalServerError {
	return &GetSolicitationActionsForOrderInternalServerError{}
}

/* GetSolicitationActionsForOrderInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSolicitationActionsForOrderInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSolicitationActionsForOrderInternalServerError) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSolicitationActionsForOrderServiceUnavailable creates a GetSolicitationActionsForOrderServiceUnavailable with default headers values
func NewGetSolicitationActionsForOrderServiceUnavailable() *GetSolicitationActionsForOrderServiceUnavailable {
	return &GetSolicitationActionsForOrderServiceUnavailable{}
}

/* GetSolicitationActionsForOrderServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSolicitationActionsForOrderServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *solicitations_models.GetSolicitationActionsForOrderResponse
}

func (o *GetSolicitationActionsForOrderServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /solicitations/v1/orders/{amazonOrderId}][%d] getSolicitationActionsForOrderServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetSolicitationActionsForOrderServiceUnavailable) GetPayload() *solicitations_models.GetSolicitationActionsForOrderResponse {
	return o.Payload
}

func (o *GetSolicitationActionsForOrderServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(solicitations_models.GetSolicitationActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
