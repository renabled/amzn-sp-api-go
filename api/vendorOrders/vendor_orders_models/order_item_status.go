// Code generated by go-swagger; DO NOT EDIT.

package vendor_orders_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemStatus order item status
//
// swagger:model OrderItemStatus
type OrderItemStatus struct {

	// acknowledgement status
	AcknowledgementStatus *OrderItemStatusAcknowledgementStatus `json:"acknowledgementStatus,omitempty"`

	// Buyer's Standard Identification Number (ASIN) of an item.
	BuyerProductIdentifier string `json:"buyerProductIdentifier,omitempty"`

	// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	// Required: true
	ItemSequenceNumber *string `json:"itemSequenceNumber"`

	// The list Price to Amazon each (list).
	ListPrice *Money `json:"listPrice,omitempty"`

	// The net cost to Amazon each (cost).
	NetCost *Money `json:"netCost,omitempty"`

	// ordered quantity
	OrderedQuantity *OrderItemStatusOrderedQuantity `json:"orderedQuantity,omitempty"`

	// receiving status
	ReceivingStatus *OrderItemStatusReceivingStatus `json:"receivingStatus,omitempty"`

	// The vendor selected product identification of the item.
	VendorProductIdentifier string `json:"vendorProductIdentifier,omitempty"`
}

// Validate validates this order item status
func (m *OrderItemStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcknowledgementStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivingStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatus) validateAcknowledgementStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AcknowledgementStatus) { // not required
		return nil
	}

	if m.AcknowledgementStatus != nil {
		if err := m.AcknowledgementStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgementStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgementStatus")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) validateItemSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("itemSequenceNumber", "body", m.ItemSequenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemStatus) validateListPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ListPrice) { // not required
		return nil
	}

	if m.ListPrice != nil {
		if err := m.ListPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) validateNetCost(formats strfmt.Registry) error {
	if swag.IsZero(m.NetCost) { // not required
		return nil
	}

	if m.NetCost != nil {
		if err := m.NetCost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netCost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netCost")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) validateOrderedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderedQuantity) { // not required
		return nil
	}

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) validateReceivingStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivingStatus) { // not required
		return nil
	}

	if m.ReceivingStatus != nil {
		if err := m.ReceivingStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivingStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivingStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order item status based on the context it is used
func (m *OrderItemStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcknowledgementStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceivingStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatus) contextValidateAcknowledgementStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.AcknowledgementStatus != nil {
		if err := m.AcknowledgementStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgementStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgementStatus")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) contextValidateListPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListPrice != nil {
		if err := m.ListPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) contextValidateNetCost(ctx context.Context, formats strfmt.Registry) error {

	if m.NetCost != nil {
		if err := m.NetCost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netCost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netCost")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) contextValidateOrderedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatus) contextValidateReceivingStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ReceivingStatus != nil {
		if err := m.ReceivingStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivingStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivingStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemStatus) UnmarshalBinary(b []byte) error {
	var res OrderItemStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrderItemStatusAcknowledgementStatus Acknowledgement status information.
//
// swagger:model OrderItemStatusAcknowledgementStatus
type OrderItemStatusAcknowledgementStatus struct {

	// Item quantities accepted by vendor to be shipped.
	AcceptedQuantity *ItemQuantity `json:"acceptedQuantity,omitempty"`

	// Details of item quantity confirmed.
	AcknowledgementStatusDetails []*AcknowledgementStatusDetails `json:"acknowledgementStatusDetails"`

	// Confirmation status of line item.
	// Enum: [ACCEPTED PARTIALLY_ACCEPTED REJECTED UNCONFIRMED]
	ConfirmationStatus string `json:"confirmationStatus,omitempty"`

	// Item quantities rejected by vendor.
	RejectedQuantity *ItemQuantity `json:"rejectedQuantity,omitempty"`
}

// Validate validates this order item status acknowledgement status
func (m *OrderItemStatusAcknowledgementStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcceptedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcknowledgementStatusDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) validateAcceptedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.AcceptedQuantity) { // not required
		return nil
	}

	if m.AcceptedQuantity != nil {
		if err := m.AcceptedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgementStatus" + "." + "acceptedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgementStatus" + "." + "acceptedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) validateAcknowledgementStatusDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AcknowledgementStatusDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.AcknowledgementStatusDetails); i++ {
		if swag.IsZero(m.AcknowledgementStatusDetails[i]) { // not required
			continue
		}

		if m.AcknowledgementStatusDetails[i] != nil {
			if err := m.AcknowledgementStatusDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acknowledgementStatus" + "." + "acknowledgementStatusDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acknowledgementStatus" + "." + "acknowledgementStatusDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var orderItemStatusAcknowledgementStatusTypeConfirmationStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACCEPTED","PARTIALLY_ACCEPTED","REJECTED","UNCONFIRMED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderItemStatusAcknowledgementStatusTypeConfirmationStatusPropEnum = append(orderItemStatusAcknowledgementStatusTypeConfirmationStatusPropEnum, v)
	}
}

const (

	// OrderItemStatusAcknowledgementStatusConfirmationStatusACCEPTED captures enum value "ACCEPTED"
	OrderItemStatusAcknowledgementStatusConfirmationStatusACCEPTED string = "ACCEPTED"

	// OrderItemStatusAcknowledgementStatusConfirmationStatusPARTIALLYACCEPTED captures enum value "PARTIALLY_ACCEPTED"
	OrderItemStatusAcknowledgementStatusConfirmationStatusPARTIALLYACCEPTED string = "PARTIALLY_ACCEPTED"

	// OrderItemStatusAcknowledgementStatusConfirmationStatusREJECTED captures enum value "REJECTED"
	OrderItemStatusAcknowledgementStatusConfirmationStatusREJECTED string = "REJECTED"

	// OrderItemStatusAcknowledgementStatusConfirmationStatusUNCONFIRMED captures enum value "UNCONFIRMED"
	OrderItemStatusAcknowledgementStatusConfirmationStatusUNCONFIRMED string = "UNCONFIRMED"
)

// prop value enum
func (m *OrderItemStatusAcknowledgementStatus) validateConfirmationStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderItemStatusAcknowledgementStatusTypeConfirmationStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) validateConfirmationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmationStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfirmationStatusEnum("acknowledgementStatus"+"."+"confirmationStatus", "body", m.ConfirmationStatus); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) validateRejectedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectedQuantity) { // not required
		return nil
	}

	if m.RejectedQuantity != nil {
		if err := m.RejectedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgementStatus" + "." + "rejectedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgementStatus" + "." + "rejectedQuantity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order item status acknowledgement status based on the context it is used
func (m *OrderItemStatusAcknowledgementStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcceptedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAcknowledgementStatusDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRejectedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) contextValidateAcceptedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.AcceptedQuantity != nil {
		if err := m.AcceptedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgementStatus" + "." + "acceptedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgementStatus" + "." + "acceptedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) contextValidateAcknowledgementStatusDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AcknowledgementStatusDetails); i++ {

		if m.AcknowledgementStatusDetails[i] != nil {
			if err := m.AcknowledgementStatusDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("acknowledgementStatus" + "." + "acknowledgementStatusDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("acknowledgementStatus" + "." + "acknowledgementStatusDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderItemStatusAcknowledgementStatus) contextValidateRejectedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.RejectedQuantity != nil {
		if err := m.RejectedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgementStatus" + "." + "rejectedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgementStatus" + "." + "rejectedQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemStatusAcknowledgementStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemStatusAcknowledgementStatus) UnmarshalBinary(b []byte) error {
	var res OrderItemStatusAcknowledgementStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrderItemStatusOrderedQuantity Ordered quantity information.
//
// swagger:model OrderItemStatusOrderedQuantity
type OrderItemStatusOrderedQuantity struct {

	// Item quantity ordered.
	OrderedQuantity *ItemQuantity `json:"orderedQuantity,omitempty"`

	// Details of item quantity ordered.
	OrderedQuantityDetails []*OrderedQuantityDetails `json:"orderedQuantityDetails"`
}

// Validate validates this order item status ordered quantity
func (m *OrderItemStatusOrderedQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderedQuantityDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatusOrderedQuantity) validateOrderedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderedQuantity) { // not required
		return nil
	}

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity" + "." + "orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity" + "." + "orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatusOrderedQuantity) validateOrderedQuantityDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderedQuantityDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderedQuantityDetails); i++ {
		if swag.IsZero(m.OrderedQuantityDetails[i]) { // not required
			continue
		}

		if m.OrderedQuantityDetails[i] != nil {
			if err := m.OrderedQuantityDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderedQuantity" + "." + "orderedQuantityDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderedQuantity" + "." + "orderedQuantityDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this order item status ordered quantity based on the context it is used
func (m *OrderItemStatusOrderedQuantity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderedQuantityDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatusOrderedQuantity) contextValidateOrderedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity" + "." + "orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity" + "." + "orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItemStatusOrderedQuantity) contextValidateOrderedQuantityDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderedQuantityDetails); i++ {

		if m.OrderedQuantityDetails[i] != nil {
			if err := m.OrderedQuantityDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderedQuantity" + "." + "orderedQuantityDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderedQuantity" + "." + "orderedQuantityDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemStatusOrderedQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemStatusOrderedQuantity) UnmarshalBinary(b []byte) error {
	var res OrderItemStatusOrderedQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrderItemStatusReceivingStatus Item receive status at the buyer's warehouse.
//
// swagger:model OrderItemStatusReceivingStatus
type OrderItemStatusReceivingStatus struct {

	// The date when the most recent item was received at the buyer's warehouse. Must be in ISO-8601 date/time format.
	// Format: date-time
	LastReceiveDate strfmt.DateTime `json:"lastReceiveDate,omitempty"`

	// Receive status of the line item.
	// Enum: [NOT_RECEIVED PARTIALLY_RECEIVED RECEIVED]
	ReceiveStatus string `json:"receiveStatus,omitempty"`

	// The total item quantity received by the buyer so far.
	ReceivedQuantity *ItemQuantity `json:"receivedQuantity,omitempty"`
}

// Validate validates this order item status receiving status
func (m *OrderItemStatusReceivingStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLastReceiveDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiveStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatusReceivingStatus) validateLastReceiveDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastReceiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("receivingStatus"+"."+"lastReceiveDate", "body", "date-time", m.LastReceiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var orderItemStatusReceivingStatusTypeReceiveStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_RECEIVED","PARTIALLY_RECEIVED","RECEIVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderItemStatusReceivingStatusTypeReceiveStatusPropEnum = append(orderItemStatusReceivingStatusTypeReceiveStatusPropEnum, v)
	}
}

const (

	// OrderItemStatusReceivingStatusReceiveStatusNOTRECEIVED captures enum value "NOT_RECEIVED"
	OrderItemStatusReceivingStatusReceiveStatusNOTRECEIVED string = "NOT_RECEIVED"

	// OrderItemStatusReceivingStatusReceiveStatusPARTIALLYRECEIVED captures enum value "PARTIALLY_RECEIVED"
	OrderItemStatusReceivingStatusReceiveStatusPARTIALLYRECEIVED string = "PARTIALLY_RECEIVED"

	// OrderItemStatusReceivingStatusReceiveStatusRECEIVED captures enum value "RECEIVED"
	OrderItemStatusReceivingStatusReceiveStatusRECEIVED string = "RECEIVED"
)

// prop value enum
func (m *OrderItemStatusReceivingStatus) validateReceiveStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderItemStatusReceivingStatusTypeReceiveStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderItemStatusReceivingStatus) validateReceiveStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceiveStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateReceiveStatusEnum("receivingStatus"+"."+"receiveStatus", "body", m.ReceiveStatus); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemStatusReceivingStatus) validateReceivedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivedQuantity) { // not required
		return nil
	}

	if m.ReceivedQuantity != nil {
		if err := m.ReceivedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivingStatus" + "." + "receivedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivingStatus" + "." + "receivedQuantity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order item status receiving status based on the context it is used
func (m *OrderItemStatusReceivingStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReceivedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemStatusReceivingStatus) contextValidateReceivedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.ReceivedQuantity != nil {
		if err := m.ReceivedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivingStatus" + "." + "receivedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivingStatus" + "." + "receivedQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemStatusReceivingStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemStatusReceivingStatus) UnmarshalBinary(b []byte) error {
	var res OrderItemStatusReceivingStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
