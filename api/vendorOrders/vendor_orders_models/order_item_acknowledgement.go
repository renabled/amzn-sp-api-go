// Code generated by go-swagger; DO NOT EDIT.

package vendor_orders_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemAcknowledgement order item acknowledgement
//
// swagger:model OrderItemAcknowledgement
type OrderItemAcknowledgement struct {

	// Details of quantity acknowledged with the above acknowledgement code.
	// Required: true
	AcknowledgedQuantity *ItemQuantity `json:"acknowledgedQuantity"`

	// This indicates the acknowledgement code.
	// Required: true
	// Enum: [Accepted Backordered Rejected]
	AcknowledgementCode *string `json:"acknowledgementCode"`

	// Indicates the reason for rejection.
	// Enum: [TemporarilyUnavailable InvalidProductIdentifier ObsoleteProduct]
	RejectionReason string `json:"rejectionReason,omitempty"`

	// Estimated delivery date per line item. Must be in ISO-8601 date/time format.
	// Format: date-time
	ScheduledDeliveryDate strfmt.DateTime `json:"scheduledDeliveryDate,omitempty"`

	// Estimated ship date per line item. Must be in ISO-8601 date/time format.
	// Format: date-time
	ScheduledShipDate strfmt.DateTime `json:"scheduledShipDate,omitempty"`
}

// Validate validates this order item acknowledgement
func (m *OrderItemAcknowledgement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcknowledgedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAcknowledgementCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectionReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledShipDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemAcknowledgement) validateAcknowledgedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("acknowledgedQuantity", "body", m.AcknowledgedQuantity); err != nil {
		return err
	}

	if m.AcknowledgedQuantity != nil {
		if err := m.AcknowledgedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgedQuantity")
			}
			return err
		}
	}

	return nil
}

var orderItemAcknowledgementTypeAcknowledgementCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Backordered","Rejected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderItemAcknowledgementTypeAcknowledgementCodePropEnum = append(orderItemAcknowledgementTypeAcknowledgementCodePropEnum, v)
	}
}

const (

	// OrderItemAcknowledgementAcknowledgementCodeAccepted captures enum value "Accepted"
	OrderItemAcknowledgementAcknowledgementCodeAccepted string = "Accepted"

	// OrderItemAcknowledgementAcknowledgementCodeBackordered captures enum value "Backordered"
	OrderItemAcknowledgementAcknowledgementCodeBackordered string = "Backordered"

	// OrderItemAcknowledgementAcknowledgementCodeRejected captures enum value "Rejected"
	OrderItemAcknowledgementAcknowledgementCodeRejected string = "Rejected"
)

// prop value enum
func (m *OrderItemAcknowledgement) validateAcknowledgementCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderItemAcknowledgementTypeAcknowledgementCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderItemAcknowledgement) validateAcknowledgementCode(formats strfmt.Registry) error {

	if err := validate.Required("acknowledgementCode", "body", m.AcknowledgementCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateAcknowledgementCodeEnum("acknowledgementCode", "body", *m.AcknowledgementCode); err != nil {
		return err
	}

	return nil
}

var orderItemAcknowledgementTypeRejectionReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TemporarilyUnavailable","InvalidProductIdentifier","ObsoleteProduct"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderItemAcknowledgementTypeRejectionReasonPropEnum = append(orderItemAcknowledgementTypeRejectionReasonPropEnum, v)
	}
}

const (

	// OrderItemAcknowledgementRejectionReasonTemporarilyUnavailable captures enum value "TemporarilyUnavailable"
	OrderItemAcknowledgementRejectionReasonTemporarilyUnavailable string = "TemporarilyUnavailable"

	// OrderItemAcknowledgementRejectionReasonInvalidProductIdentifier captures enum value "InvalidProductIdentifier"
	OrderItemAcknowledgementRejectionReasonInvalidProductIdentifier string = "InvalidProductIdentifier"

	// OrderItemAcknowledgementRejectionReasonObsoleteProduct captures enum value "ObsoleteProduct"
	OrderItemAcknowledgementRejectionReasonObsoleteProduct string = "ObsoleteProduct"
)

// prop value enum
func (m *OrderItemAcknowledgement) validateRejectionReasonEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderItemAcknowledgementTypeRejectionReasonPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderItemAcknowledgement) validateRejectionReason(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectionReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateRejectionReasonEnum("rejectionReason", "body", m.RejectionReason); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemAcknowledgement) validateScheduledDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledDeliveryDate", "body", "date-time", m.ScheduledDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemAcknowledgement) validateScheduledShipDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledShipDate) { // not required
		return nil
	}

	if err := validate.FormatOf("scheduledShipDate", "body", "date-time", m.ScheduledShipDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order item acknowledgement based on the context it is used
func (m *OrderItemAcknowledgement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcknowledgedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemAcknowledgement) contextValidateAcknowledgedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.AcknowledgedQuantity != nil {
		if err := m.AcknowledgedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acknowledgedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acknowledgedQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemAcknowledgement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemAcknowledgement) UnmarshalBinary(b []byte) error {
	var res OrderItemAcknowledgement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
