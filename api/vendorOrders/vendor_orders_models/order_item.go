// Code generated by go-swagger; DO NOT EDIT.

package vendor_orders_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItem order item
//
// swagger:model OrderItem
type OrderItem struct {

	// Amazon Standard Identification Number (ASIN) of an item.
	AmazonProductIdentifier string `json:"amazonProductIdentifier,omitempty"`

	// When true, we will accept backorder confirmations for this item.
	// Required: true
	IsBackOrderAllowed *bool `json:"isBackOrderAllowed"`

	// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	// Required: true
	ItemSequenceNumber *string `json:"itemSequenceNumber"`

	// The price to Amazon each (list).
	ListPrice *Money `json:"listPrice,omitempty"`

	// The price to Amazon each (cost).
	NetCost *Money `json:"netCost,omitempty"`

	// Item quantity ordered.
	// Required: true
	OrderedQuantity *ItemQuantity `json:"orderedQuantity"`

	// The vendor selected product identification of the item.
	VendorProductIdentifier string `json:"vendorProductIdentifier,omitempty"`
}

// Validate validates this order item
func (m *OrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsBackOrderAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) validateIsBackOrderAllowed(formats strfmt.Registry) error {

	if err := validate.Required("isBackOrderAllowed", "body", m.IsBackOrderAllowed); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateItemSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("itemSequenceNumber", "body", m.ItemSequenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateListPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ListPrice) { // not required
		return nil
	}

	if m.ListPrice != nil {
		if err := m.ListPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateNetCost(formats strfmt.Registry) error {
	if swag.IsZero(m.NetCost) { // not required
		return nil
	}

	if m.NetCost != nil {
		if err := m.NetCost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netCost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netCost")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateOrderedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("orderedQuantity", "body", m.OrderedQuantity); err != nil {
		return err
	}

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order item based on the context it is used
func (m *OrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) contextValidateListPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListPrice != nil {
		if err := m.ListPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateNetCost(ctx context.Context, formats strfmt.Registry) error {

	if m.NetCost != nil {
		if err := m.NetCost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netCost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netCost")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateOrderedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItem) UnmarshalBinary(b []byte) error {
	var res OrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
