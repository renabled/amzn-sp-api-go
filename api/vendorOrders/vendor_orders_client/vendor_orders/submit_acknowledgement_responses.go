// Code generated by go-swagger; DO NOT EDIT.

package vendor_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/vendorOrders/vendor_orders_models"
)

// SubmitAcknowledgementReader is a Reader for the SubmitAcknowledgement structure.
type SubmitAcknowledgementReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitAcknowledgementReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSubmitAcknowledgementAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitAcknowledgementBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitAcknowledgementForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitAcknowledgementNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSubmitAcknowledgementRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSubmitAcknowledgementUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSubmitAcknowledgementTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitAcknowledgementInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSubmitAcknowledgementServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitAcknowledgementAccepted creates a SubmitAcknowledgementAccepted with default headers values
func NewSubmitAcknowledgementAccepted() *SubmitAcknowledgementAccepted {
	return &SubmitAcknowledgementAccepted{}
}

/*
SubmitAcknowledgementAccepted describes a response with status code 202, with default header values.

Success.
*/
type SubmitAcknowledgementAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement accepted response has a 2xx status code
func (o *SubmitAcknowledgementAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this submit acknowledgement accepted response has a 3xx status code
func (o *SubmitAcknowledgementAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement accepted response has a 4xx status code
func (o *SubmitAcknowledgementAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit acknowledgement accepted response has a 5xx status code
func (o *SubmitAcknowledgementAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement accepted response a status code equal to that given
func (o *SubmitAcknowledgementAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *SubmitAcknowledgementAccepted) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementAccepted  %+v", 202, o.Payload)
}

func (o *SubmitAcknowledgementAccepted) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementAccepted  %+v", 202, o.Payload)
}

func (o *SubmitAcknowledgementAccepted) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementBadRequest creates a SubmitAcknowledgementBadRequest with default headers values
func NewSubmitAcknowledgementBadRequest() *SubmitAcknowledgementBadRequest {
	return &SubmitAcknowledgementBadRequest{}
}

/*
SubmitAcknowledgementBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SubmitAcknowledgementBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement bad request response has a 2xx status code
func (o *SubmitAcknowledgementBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement bad request response has a 3xx status code
func (o *SubmitAcknowledgementBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement bad request response has a 4xx status code
func (o *SubmitAcknowledgementBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit acknowledgement bad request response has a 5xx status code
func (o *SubmitAcknowledgementBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement bad request response a status code equal to that given
func (o *SubmitAcknowledgementBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubmitAcknowledgementBadRequest) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitAcknowledgementBadRequest) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitAcknowledgementBadRequest) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementForbidden creates a SubmitAcknowledgementForbidden with default headers values
func NewSubmitAcknowledgementForbidden() *SubmitAcknowledgementForbidden {
	return &SubmitAcknowledgementForbidden{}
}

/*
SubmitAcknowledgementForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include `Access Denied`, `Unauthorized,` `Expired Token`, or `Invalid Signature`.
*/
type SubmitAcknowledgementForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement forbidden response has a 2xx status code
func (o *SubmitAcknowledgementForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement forbidden response has a 3xx status code
func (o *SubmitAcknowledgementForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement forbidden response has a 4xx status code
func (o *SubmitAcknowledgementForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit acknowledgement forbidden response has a 5xx status code
func (o *SubmitAcknowledgementForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement forbidden response a status code equal to that given
func (o *SubmitAcknowledgementForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubmitAcknowledgementForbidden) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementForbidden  %+v", 403, o.Payload)
}

func (o *SubmitAcknowledgementForbidden) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementForbidden  %+v", 403, o.Payload)
}

func (o *SubmitAcknowledgementForbidden) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementNotFound creates a SubmitAcknowledgementNotFound with default headers values
func NewSubmitAcknowledgementNotFound() *SubmitAcknowledgementNotFound {
	return &SubmitAcknowledgementNotFound{}
}

/*
SubmitAcknowledgementNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SubmitAcknowledgementNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement not found response has a 2xx status code
func (o *SubmitAcknowledgementNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement not found response has a 3xx status code
func (o *SubmitAcknowledgementNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement not found response has a 4xx status code
func (o *SubmitAcknowledgementNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit acknowledgement not found response has a 5xx status code
func (o *SubmitAcknowledgementNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement not found response a status code equal to that given
func (o *SubmitAcknowledgementNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubmitAcknowledgementNotFound) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementNotFound  %+v", 404, o.Payload)
}

func (o *SubmitAcknowledgementNotFound) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementNotFound  %+v", 404, o.Payload)
}

func (o *SubmitAcknowledgementNotFound) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementRequestEntityTooLarge creates a SubmitAcknowledgementRequestEntityTooLarge with default headers values
func NewSubmitAcknowledgementRequestEntityTooLarge() *SubmitAcknowledgementRequestEntityTooLarge {
	return &SubmitAcknowledgementRequestEntityTooLarge{}
}

/*
SubmitAcknowledgementRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SubmitAcknowledgementRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement request entity too large response has a 2xx status code
func (o *SubmitAcknowledgementRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement request entity too large response has a 3xx status code
func (o *SubmitAcknowledgementRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement request entity too large response has a 4xx status code
func (o *SubmitAcknowledgementRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit acknowledgement request entity too large response has a 5xx status code
func (o *SubmitAcknowledgementRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement request entity too large response a status code equal to that given
func (o *SubmitAcknowledgementRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *SubmitAcknowledgementRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SubmitAcknowledgementRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SubmitAcknowledgementRequestEntityTooLarge) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementUnsupportedMediaType creates a SubmitAcknowledgementUnsupportedMediaType with default headers values
func NewSubmitAcknowledgementUnsupportedMediaType() *SubmitAcknowledgementUnsupportedMediaType {
	return &SubmitAcknowledgementUnsupportedMediaType{}
}

/*
SubmitAcknowledgementUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SubmitAcknowledgementUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement unsupported media type response has a 2xx status code
func (o *SubmitAcknowledgementUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement unsupported media type response has a 3xx status code
func (o *SubmitAcknowledgementUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement unsupported media type response has a 4xx status code
func (o *SubmitAcknowledgementUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit acknowledgement unsupported media type response has a 5xx status code
func (o *SubmitAcknowledgementUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement unsupported media type response a status code equal to that given
func (o *SubmitAcknowledgementUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *SubmitAcknowledgementUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SubmitAcknowledgementUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SubmitAcknowledgementUnsupportedMediaType) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementTooManyRequests creates a SubmitAcknowledgementTooManyRequests with default headers values
func NewSubmitAcknowledgementTooManyRequests() *SubmitAcknowledgementTooManyRequests {
	return &SubmitAcknowledgementTooManyRequests{}
}

/*
SubmitAcknowledgementTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SubmitAcknowledgementTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement too many requests response has a 2xx status code
func (o *SubmitAcknowledgementTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement too many requests response has a 3xx status code
func (o *SubmitAcknowledgementTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement too many requests response has a 4xx status code
func (o *SubmitAcknowledgementTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit acknowledgement too many requests response has a 5xx status code
func (o *SubmitAcknowledgementTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this submit acknowledgement too many requests response a status code equal to that given
func (o *SubmitAcknowledgementTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SubmitAcknowledgementTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitAcknowledgementTooManyRequests) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitAcknowledgementTooManyRequests) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementInternalServerError creates a SubmitAcknowledgementInternalServerError with default headers values
func NewSubmitAcknowledgementInternalServerError() *SubmitAcknowledgementInternalServerError {
	return &SubmitAcknowledgementInternalServerError{}
}

/*
SubmitAcknowledgementInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SubmitAcknowledgementInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement internal server error response has a 2xx status code
func (o *SubmitAcknowledgementInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement internal server error response has a 3xx status code
func (o *SubmitAcknowledgementInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement internal server error response has a 4xx status code
func (o *SubmitAcknowledgementInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit acknowledgement internal server error response has a 5xx status code
func (o *SubmitAcknowledgementInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this submit acknowledgement internal server error response a status code equal to that given
func (o *SubmitAcknowledgementInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubmitAcknowledgementInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitAcknowledgementInternalServerError) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitAcknowledgementInternalServerError) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitAcknowledgementServiceUnavailable creates a SubmitAcknowledgementServiceUnavailable with default headers values
func NewSubmitAcknowledgementServiceUnavailable() *SubmitAcknowledgementServiceUnavailable {
	return &SubmitAcknowledgementServiceUnavailable{}
}

/*
SubmitAcknowledgementServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SubmitAcknowledgementServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.SubmitAcknowledgementResponse
}

// IsSuccess returns true when this submit acknowledgement service unavailable response has a 2xx status code
func (o *SubmitAcknowledgementServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit acknowledgement service unavailable response has a 3xx status code
func (o *SubmitAcknowledgementServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit acknowledgement service unavailable response has a 4xx status code
func (o *SubmitAcknowledgementServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit acknowledgement service unavailable response has a 5xx status code
func (o *SubmitAcknowledgementServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this submit acknowledgement service unavailable response a status code equal to that given
func (o *SubmitAcknowledgementServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SubmitAcknowledgementServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitAcknowledgementServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /vendor/orders/v1/acknowledgements][%d] submitAcknowledgementServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitAcknowledgementServiceUnavailable) GetPayload() *vendor_orders_models.SubmitAcknowledgementResponse {
	return o.Payload
}

func (o *SubmitAcknowledgementServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.SubmitAcknowledgementResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
