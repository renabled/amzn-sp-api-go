// Code generated by go-swagger; DO NOT EDIT.

package vendor_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPurchaseOrdersStatusParams creates a new GetPurchaseOrdersStatusParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPurchaseOrdersStatusParams() *GetPurchaseOrdersStatusParams {
	return &GetPurchaseOrdersStatusParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPurchaseOrdersStatusParamsWithTimeout creates a new GetPurchaseOrdersStatusParams object
// with the ability to set a timeout on a request.
func NewGetPurchaseOrdersStatusParamsWithTimeout(timeout time.Duration) *GetPurchaseOrdersStatusParams {
	return &GetPurchaseOrdersStatusParams{
		timeout: timeout,
	}
}

// NewGetPurchaseOrdersStatusParamsWithContext creates a new GetPurchaseOrdersStatusParams object
// with the ability to set a context for a request.
func NewGetPurchaseOrdersStatusParamsWithContext(ctx context.Context) *GetPurchaseOrdersStatusParams {
	return &GetPurchaseOrdersStatusParams{
		Context: ctx,
	}
}

// NewGetPurchaseOrdersStatusParamsWithHTTPClient creates a new GetPurchaseOrdersStatusParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPurchaseOrdersStatusParamsWithHTTPClient(client *http.Client) *GetPurchaseOrdersStatusParams {
	return &GetPurchaseOrdersStatusParams{
		HTTPClient: client,
	}
}

/* GetPurchaseOrdersStatusParams contains all the parameters to send to the API endpoint
   for the get purchase orders status operation.

   Typically these are written to a http.Request.
*/
type GetPurchaseOrdersStatusParams struct {

	/* CreatedAfter.

	   Purchase orders that became available after this timestamp will be included in the result. Must be in ISO-8601 date/time format.

	   Format: date-time
	*/
	CreatedAfter *strfmt.DateTime

	/* CreatedBefore.

	   Purchase orders that became available before this timestamp will be included in the result. Must be in ISO-8601 date/time format.

	   Format: date-time
	*/
	CreatedBefore *strfmt.DateTime

	/* ItemConfirmationStatus.

	   Filters purchase orders based on their item confirmation status. If the item confirmation status is not included in the filter, purchase orders for all confirmation statuses are included.
	*/
	ItemConfirmationStatus *string

	/* ItemReceiveStatus.

	   Filters purchase orders based on the purchase order's item receive status. If the item receive status is not included in the filter, purchase orders for all receive statuses are included.
	*/
	ItemReceiveStatus *string

	/* Limit.

	   The limit to the number of records returned. Default value is 100 records.

	   Format: int64
	*/
	Limit *int64

	/* NextToken.

	   Used for pagination when there are more purchase orders than the specified result size limit.
	*/
	NextToken *string

	/* OrderingVendorCode.

	   Filters purchase orders based on the specified ordering vendor code. This value should be same as 'sellingParty.partyId' in the purchase order. If not included in filter, all purchase orders for all the vendor codes that exist in the vendor group used to authorize API client application are returned.
	*/
	OrderingVendorCode *string

	/* PurchaseOrderNumber.

	   Provides purchase order status for the specified purchase order number.
	*/
	PurchaseOrderNumber *string

	/* PurchaseOrderStatus.

	   Filters purchase orders based on the specified purchase order status. If not included in filter, this will return purchase orders for all statuses.
	*/
	PurchaseOrderStatus *string

	/* ShipToPartyID.

	   Filters purchase orders for a specific buyer's Fulfillment Center/warehouse by providing ship to location id here. This value should be same as 'shipToParty.partyId' in the purchase order. If not included in filter, this will return purchase orders for all the buyer's warehouses used for vendor group purchase orders.
	*/
	ShipToPartyID *string

	/* SortOrder.

	   Sort in ascending or descending order by purchase order creation date.
	*/
	SortOrder *string

	/* UpdatedAfter.

	   Purchase orders for which the last purchase order update happened after this timestamp will be included in the result. Must be in ISO-8601 date/time format.

	   Format: date-time
	*/
	UpdatedAfter *strfmt.DateTime

	/* UpdatedBefore.

	   Purchase orders for which the last purchase order update happened before this timestamp will be included in the result. Must be in ISO-8601 date/time format.

	   Format: date-time
	*/
	UpdatedBefore *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get purchase orders status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPurchaseOrdersStatusParams) WithDefaults() *GetPurchaseOrdersStatusParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get purchase orders status params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPurchaseOrdersStatusParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithTimeout(timeout time.Duration) *GetPurchaseOrdersStatusParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithContext(ctx context.Context) *GetPurchaseOrdersStatusParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithHTTPClient(client *http.Client) *GetPurchaseOrdersStatusParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedAfter adds the createdAfter to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithCreatedAfter(createdAfter *strfmt.DateTime) *GetPurchaseOrdersStatusParams {
	o.SetCreatedAfter(createdAfter)
	return o
}

// SetCreatedAfter adds the createdAfter to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetCreatedAfter(createdAfter *strfmt.DateTime) {
	o.CreatedAfter = createdAfter
}

// WithCreatedBefore adds the createdBefore to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithCreatedBefore(createdBefore *strfmt.DateTime) *GetPurchaseOrdersStatusParams {
	o.SetCreatedBefore(createdBefore)
	return o
}

// SetCreatedBefore adds the createdBefore to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetCreatedBefore(createdBefore *strfmt.DateTime) {
	o.CreatedBefore = createdBefore
}

// WithItemConfirmationStatus adds the itemConfirmationStatus to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithItemConfirmationStatus(itemConfirmationStatus *string) *GetPurchaseOrdersStatusParams {
	o.SetItemConfirmationStatus(itemConfirmationStatus)
	return o
}

// SetItemConfirmationStatus adds the itemConfirmationStatus to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetItemConfirmationStatus(itemConfirmationStatus *string) {
	o.ItemConfirmationStatus = itemConfirmationStatus
}

// WithItemReceiveStatus adds the itemReceiveStatus to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithItemReceiveStatus(itemReceiveStatus *string) *GetPurchaseOrdersStatusParams {
	o.SetItemReceiveStatus(itemReceiveStatus)
	return o
}

// SetItemReceiveStatus adds the itemReceiveStatus to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetItemReceiveStatus(itemReceiveStatus *string) {
	o.ItemReceiveStatus = itemReceiveStatus
}

// WithLimit adds the limit to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithLimit(limit *int64) *GetPurchaseOrdersStatusParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithNextToken adds the nextToken to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithNextToken(nextToken *string) *GetPurchaseOrdersStatusParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithOrderingVendorCode adds the orderingVendorCode to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithOrderingVendorCode(orderingVendorCode *string) *GetPurchaseOrdersStatusParams {
	o.SetOrderingVendorCode(orderingVendorCode)
	return o
}

// SetOrderingVendorCode adds the orderingVendorCode to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetOrderingVendorCode(orderingVendorCode *string) {
	o.OrderingVendorCode = orderingVendorCode
}

// WithPurchaseOrderNumber adds the purchaseOrderNumber to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithPurchaseOrderNumber(purchaseOrderNumber *string) *GetPurchaseOrdersStatusParams {
	o.SetPurchaseOrderNumber(purchaseOrderNumber)
	return o
}

// SetPurchaseOrderNumber adds the purchaseOrderNumber to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetPurchaseOrderNumber(purchaseOrderNumber *string) {
	o.PurchaseOrderNumber = purchaseOrderNumber
}

// WithPurchaseOrderStatus adds the purchaseOrderStatus to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithPurchaseOrderStatus(purchaseOrderStatus *string) *GetPurchaseOrdersStatusParams {
	o.SetPurchaseOrderStatus(purchaseOrderStatus)
	return o
}

// SetPurchaseOrderStatus adds the purchaseOrderStatus to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetPurchaseOrderStatus(purchaseOrderStatus *string) {
	o.PurchaseOrderStatus = purchaseOrderStatus
}

// WithShipToPartyID adds the shipToPartyID to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithShipToPartyID(shipToPartyID *string) *GetPurchaseOrdersStatusParams {
	o.SetShipToPartyID(shipToPartyID)
	return o
}

// SetShipToPartyID adds the shipToPartyId to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetShipToPartyID(shipToPartyID *string) {
	o.ShipToPartyID = shipToPartyID
}

// WithSortOrder adds the sortOrder to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithSortOrder(sortOrder *string) *GetPurchaseOrdersStatusParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithUpdatedAfter adds the updatedAfter to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithUpdatedAfter(updatedAfter *strfmt.DateTime) *GetPurchaseOrdersStatusParams {
	o.SetUpdatedAfter(updatedAfter)
	return o
}

// SetUpdatedAfter adds the updatedAfter to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetUpdatedAfter(updatedAfter *strfmt.DateTime) {
	o.UpdatedAfter = updatedAfter
}

// WithUpdatedBefore adds the updatedBefore to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) WithUpdatedBefore(updatedBefore *strfmt.DateTime) *GetPurchaseOrdersStatusParams {
	o.SetUpdatedBefore(updatedBefore)
	return o
}

// SetUpdatedBefore adds the updatedBefore to the get purchase orders status params
func (o *GetPurchaseOrdersStatusParams) SetUpdatedBefore(updatedBefore *strfmt.DateTime) {
	o.UpdatedBefore = updatedBefore
}

// WriteToRequest writes these params to a swagger request
func (o *GetPurchaseOrdersStatusParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedAfter != nil {

		// query param createdAfter
		var qrCreatedAfter strfmt.DateTime

		if o.CreatedAfter != nil {
			qrCreatedAfter = *o.CreatedAfter
		}
		qCreatedAfter := qrCreatedAfter.String()
		if qCreatedAfter != "" {

			if err := r.SetQueryParam("createdAfter", qCreatedAfter); err != nil {
				return err
			}
		}
	}

	if o.CreatedBefore != nil {

		// query param createdBefore
		var qrCreatedBefore strfmt.DateTime

		if o.CreatedBefore != nil {
			qrCreatedBefore = *o.CreatedBefore
		}
		qCreatedBefore := qrCreatedBefore.String()
		if qCreatedBefore != "" {

			if err := r.SetQueryParam("createdBefore", qCreatedBefore); err != nil {
				return err
			}
		}
	}

	if o.ItemConfirmationStatus != nil {

		// query param itemConfirmationStatus
		var qrItemConfirmationStatus string

		if o.ItemConfirmationStatus != nil {
			qrItemConfirmationStatus = *o.ItemConfirmationStatus
		}
		qItemConfirmationStatus := qrItemConfirmationStatus
		if qItemConfirmationStatus != "" {

			if err := r.SetQueryParam("itemConfirmationStatus", qItemConfirmationStatus); err != nil {
				return err
			}
		}
	}

	if o.ItemReceiveStatus != nil {

		// query param itemReceiveStatus
		var qrItemReceiveStatus string

		if o.ItemReceiveStatus != nil {
			qrItemReceiveStatus = *o.ItemReceiveStatus
		}
		qItemReceiveStatus := qrItemReceiveStatus
		if qItemReceiveStatus != "" {

			if err := r.SetQueryParam("itemReceiveStatus", qItemReceiveStatus); err != nil {
				return err
			}
		}
	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64

		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {

			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param nextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("nextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.OrderingVendorCode != nil {

		// query param orderingVendorCode
		var qrOrderingVendorCode string

		if o.OrderingVendorCode != nil {
			qrOrderingVendorCode = *o.OrderingVendorCode
		}
		qOrderingVendorCode := qrOrderingVendorCode
		if qOrderingVendorCode != "" {

			if err := r.SetQueryParam("orderingVendorCode", qOrderingVendorCode); err != nil {
				return err
			}
		}
	}

	if o.PurchaseOrderNumber != nil {

		// query param purchaseOrderNumber
		var qrPurchaseOrderNumber string

		if o.PurchaseOrderNumber != nil {
			qrPurchaseOrderNumber = *o.PurchaseOrderNumber
		}
		qPurchaseOrderNumber := qrPurchaseOrderNumber
		if qPurchaseOrderNumber != "" {

			if err := r.SetQueryParam("purchaseOrderNumber", qPurchaseOrderNumber); err != nil {
				return err
			}
		}
	}

	if o.PurchaseOrderStatus != nil {

		// query param purchaseOrderStatus
		var qrPurchaseOrderStatus string

		if o.PurchaseOrderStatus != nil {
			qrPurchaseOrderStatus = *o.PurchaseOrderStatus
		}
		qPurchaseOrderStatus := qrPurchaseOrderStatus
		if qPurchaseOrderStatus != "" {

			if err := r.SetQueryParam("purchaseOrderStatus", qPurchaseOrderStatus); err != nil {
				return err
			}
		}
	}

	if o.ShipToPartyID != nil {

		// query param shipToPartyId
		var qrShipToPartyID string

		if o.ShipToPartyID != nil {
			qrShipToPartyID = *o.ShipToPartyID
		}
		qShipToPartyID := qrShipToPartyID
		if qShipToPartyID != "" {

			if err := r.SetQueryParam("shipToPartyId", qShipToPartyID); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.UpdatedAfter != nil {

		// query param updatedAfter
		var qrUpdatedAfter strfmt.DateTime

		if o.UpdatedAfter != nil {
			qrUpdatedAfter = *o.UpdatedAfter
		}
		qUpdatedAfter := qrUpdatedAfter.String()
		if qUpdatedAfter != "" {

			if err := r.SetQueryParam("updatedAfter", qUpdatedAfter); err != nil {
				return err
			}
		}
	}

	if o.UpdatedBefore != nil {

		// query param updatedBefore
		var qrUpdatedBefore strfmt.DateTime

		if o.UpdatedBefore != nil {
			qrUpdatedBefore = *o.UpdatedBefore
		}
		qUpdatedBefore := qrUpdatedBefore.String()
		if qUpdatedBefore != "" {

			if err := r.SetQueryParam("updatedBefore", qUpdatedBefore); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
