// Code generated by go-swagger; DO NOT EDIT.

package vendor_orders

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/vendorOrders/vendor_orders_models"
)

// GetPurchaseOrdersStatusReader is a Reader for the GetPurchaseOrdersStatus structure.
type GetPurchaseOrdersStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPurchaseOrdersStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPurchaseOrdersStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPurchaseOrdersStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPurchaseOrdersStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPurchaseOrdersStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetPurchaseOrdersStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPurchaseOrdersStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPurchaseOrdersStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetPurchaseOrdersStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPurchaseOrdersStatusOK creates a GetPurchaseOrdersStatusOK with default headers values
func NewGetPurchaseOrdersStatusOK() *GetPurchaseOrdersStatusOK {
	return &GetPurchaseOrdersStatusOK{}
}

/*
GetPurchaseOrdersStatusOK describes a response with status code 200, with default header values.

Success.
*/
type GetPurchaseOrdersStatusOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status o k response has a 2xx status code
func (o *GetPurchaseOrdersStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get purchase orders status o k response has a 3xx status code
func (o *GetPurchaseOrdersStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status o k response has a 4xx status code
func (o *GetPurchaseOrdersStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purchase orders status o k response has a 5xx status code
func (o *GetPurchaseOrdersStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase orders status o k response a status code equal to that given
func (o *GetPurchaseOrdersStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPurchaseOrdersStatusOK) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusOK  %+v", 200, o.Payload)
}

func (o *GetPurchaseOrdersStatusOK) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusOK  %+v", 200, o.Payload)
}

func (o *GetPurchaseOrdersStatusOK) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusBadRequest creates a GetPurchaseOrdersStatusBadRequest with default headers values
func NewGetPurchaseOrdersStatusBadRequest() *GetPurchaseOrdersStatusBadRequest {
	return &GetPurchaseOrdersStatusBadRequest{}
}

/*
GetPurchaseOrdersStatusBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetPurchaseOrdersStatusBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status bad request response has a 2xx status code
func (o *GetPurchaseOrdersStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status bad request response has a 3xx status code
func (o *GetPurchaseOrdersStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status bad request response has a 4xx status code
func (o *GetPurchaseOrdersStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase orders status bad request response has a 5xx status code
func (o *GetPurchaseOrdersStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase orders status bad request response a status code equal to that given
func (o *GetPurchaseOrdersStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetPurchaseOrdersStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetPurchaseOrdersStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetPurchaseOrdersStatusBadRequest) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusForbidden creates a GetPurchaseOrdersStatusForbidden with default headers values
func NewGetPurchaseOrdersStatusForbidden() *GetPurchaseOrdersStatusForbidden {
	return &GetPurchaseOrdersStatusForbidden{}
}

/*
GetPurchaseOrdersStatusForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetPurchaseOrdersStatusForbidden struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status forbidden response has a 2xx status code
func (o *GetPurchaseOrdersStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status forbidden response has a 3xx status code
func (o *GetPurchaseOrdersStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status forbidden response has a 4xx status code
func (o *GetPurchaseOrdersStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase orders status forbidden response has a 5xx status code
func (o *GetPurchaseOrdersStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase orders status forbidden response a status code equal to that given
func (o *GetPurchaseOrdersStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetPurchaseOrdersStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetPurchaseOrdersStatusForbidden) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetPurchaseOrdersStatusForbidden) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusNotFound creates a GetPurchaseOrdersStatusNotFound with default headers values
func NewGetPurchaseOrdersStatusNotFound() *GetPurchaseOrdersStatusNotFound {
	return &GetPurchaseOrdersStatusNotFound{}
}

/*
GetPurchaseOrdersStatusNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetPurchaseOrdersStatusNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status not found response has a 2xx status code
func (o *GetPurchaseOrdersStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status not found response has a 3xx status code
func (o *GetPurchaseOrdersStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status not found response has a 4xx status code
func (o *GetPurchaseOrdersStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase orders status not found response has a 5xx status code
func (o *GetPurchaseOrdersStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase orders status not found response a status code equal to that given
func (o *GetPurchaseOrdersStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPurchaseOrdersStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetPurchaseOrdersStatusNotFound) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetPurchaseOrdersStatusNotFound) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusUnsupportedMediaType creates a GetPurchaseOrdersStatusUnsupportedMediaType with default headers values
func NewGetPurchaseOrdersStatusUnsupportedMediaType() *GetPurchaseOrdersStatusUnsupportedMediaType {
	return &GetPurchaseOrdersStatusUnsupportedMediaType{}
}

/*
GetPurchaseOrdersStatusUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetPurchaseOrdersStatusUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status unsupported media type response has a 2xx status code
func (o *GetPurchaseOrdersStatusUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status unsupported media type response has a 3xx status code
func (o *GetPurchaseOrdersStatusUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status unsupported media type response has a 4xx status code
func (o *GetPurchaseOrdersStatusUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase orders status unsupported media type response has a 5xx status code
func (o *GetPurchaseOrdersStatusUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase orders status unsupported media type response a status code equal to that given
func (o *GetPurchaseOrdersStatusUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetPurchaseOrdersStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetPurchaseOrdersStatusUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetPurchaseOrdersStatusUnsupportedMediaType) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusTooManyRequests creates a GetPurchaseOrdersStatusTooManyRequests with default headers values
func NewGetPurchaseOrdersStatusTooManyRequests() *GetPurchaseOrdersStatusTooManyRequests {
	return &GetPurchaseOrdersStatusTooManyRequests{}
}

/*
GetPurchaseOrdersStatusTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetPurchaseOrdersStatusTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status too many requests response has a 2xx status code
func (o *GetPurchaseOrdersStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status too many requests response has a 3xx status code
func (o *GetPurchaseOrdersStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status too many requests response has a 4xx status code
func (o *GetPurchaseOrdersStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get purchase orders status too many requests response has a 5xx status code
func (o *GetPurchaseOrdersStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get purchase orders status too many requests response a status code equal to that given
func (o *GetPurchaseOrdersStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetPurchaseOrdersStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPurchaseOrdersStatusTooManyRequests) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPurchaseOrdersStatusTooManyRequests) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusInternalServerError creates a GetPurchaseOrdersStatusInternalServerError with default headers values
func NewGetPurchaseOrdersStatusInternalServerError() *GetPurchaseOrdersStatusInternalServerError {
	return &GetPurchaseOrdersStatusInternalServerError{}
}

/*
GetPurchaseOrdersStatusInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetPurchaseOrdersStatusInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status internal server error response has a 2xx status code
func (o *GetPurchaseOrdersStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status internal server error response has a 3xx status code
func (o *GetPurchaseOrdersStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status internal server error response has a 4xx status code
func (o *GetPurchaseOrdersStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purchase orders status internal server error response has a 5xx status code
func (o *GetPurchaseOrdersStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get purchase orders status internal server error response a status code equal to that given
func (o *GetPurchaseOrdersStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPurchaseOrdersStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPurchaseOrdersStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPurchaseOrdersStatusInternalServerError) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPurchaseOrdersStatusServiceUnavailable creates a GetPurchaseOrdersStatusServiceUnavailable with default headers values
func NewGetPurchaseOrdersStatusServiceUnavailable() *GetPurchaseOrdersStatusServiceUnavailable {
	return &GetPurchaseOrdersStatusServiceUnavailable{}
}

/*
GetPurchaseOrdersStatusServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetPurchaseOrdersStatusServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_orders_models.GetPurchaseOrdersStatusResponse
}

// IsSuccess returns true when this get purchase orders status service unavailable response has a 2xx status code
func (o *GetPurchaseOrdersStatusServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get purchase orders status service unavailable response has a 3xx status code
func (o *GetPurchaseOrdersStatusServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get purchase orders status service unavailable response has a 4xx status code
func (o *GetPurchaseOrdersStatusServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get purchase orders status service unavailable response has a 5xx status code
func (o *GetPurchaseOrdersStatusServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get purchase orders status service unavailable response a status code equal to that given
func (o *GetPurchaseOrdersStatusServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetPurchaseOrdersStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetPurchaseOrdersStatusServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /vendor/orders/v1/purchaseOrdersStatus][%d] getPurchaseOrdersStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetPurchaseOrdersStatusServiceUnavailable) GetPayload() *vendor_orders_models.GetPurchaseOrdersStatusResponse {
	return o.Payload
}

func (o *GetPurchaseOrdersStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_orders_models.GetPurchaseOrdersStatusResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
