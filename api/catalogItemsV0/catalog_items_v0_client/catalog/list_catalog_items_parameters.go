// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListCatalogItemsParams creates a new ListCatalogItemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCatalogItemsParams() *ListCatalogItemsParams {
	return &ListCatalogItemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCatalogItemsParamsWithTimeout creates a new ListCatalogItemsParams object
// with the ability to set a timeout on a request.
func NewListCatalogItemsParamsWithTimeout(timeout time.Duration) *ListCatalogItemsParams {
	return &ListCatalogItemsParams{
		timeout: timeout,
	}
}

// NewListCatalogItemsParamsWithContext creates a new ListCatalogItemsParams object
// with the ability to set a context for a request.
func NewListCatalogItemsParamsWithContext(ctx context.Context) *ListCatalogItemsParams {
	return &ListCatalogItemsParams{
		Context: ctx,
	}
}

// NewListCatalogItemsParamsWithHTTPClient creates a new ListCatalogItemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCatalogItemsParamsWithHTTPClient(client *http.Client) *ListCatalogItemsParams {
	return &ListCatalogItemsParams{
		HTTPClient: client,
	}
}

/*
ListCatalogItemsParams contains all the parameters to send to the API endpoint

	for the list catalog items operation.

	Typically these are written to a http.Request.
*/
type ListCatalogItemsParams struct {

	/* EAN.

	   A European article number that uniquely identifies the catalog item, manufacturer, and its attributes.
	*/
	EAN *string

	/* ISBN.

	   The unique commercial book identifier used to identify books internationally.
	*/
	ISBN *string

	/* JAN.

	   A Japanese article number that uniquely identifies the product, manufacturer, and its attributes.
	*/
	JAN *string

	/* MarketplaceID.

	   A marketplace identifier. Specifies the marketplace for which items are returned.
	*/
	MarketplaceID string

	/* Query.

	   Keyword(s) to use to search for items in the catalog. Example: 'harry potter books'.
	*/
	Query *string

	/* QueryContextID.

	   An identifier for the context within which the given search will be performed. A marketplace might provide mechanisms for constraining a search to a subset of potential items. For example, the retail marketplace allows queries to be constrained to a specific category. The QueryContextId parameter specifies such a subset. If it is omitted, the search will be performed using the default context for the marketplace, which will typically contain the largest set of items.
	*/
	QueryContextID *string

	/* SellerSKU.

	   Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
	*/
	SellerSKU *string

	/* UPC.

	   A 12-digit bar code used for retail packaging.
	*/
	UPC *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list catalog items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCatalogItemsParams) WithDefaults() *ListCatalogItemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list catalog items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCatalogItemsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list catalog items params
func (o *ListCatalogItemsParams) WithTimeout(timeout time.Duration) *ListCatalogItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list catalog items params
func (o *ListCatalogItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list catalog items params
func (o *ListCatalogItemsParams) WithContext(ctx context.Context) *ListCatalogItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list catalog items params
func (o *ListCatalogItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list catalog items params
func (o *ListCatalogItemsParams) WithHTTPClient(client *http.Client) *ListCatalogItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list catalog items params
func (o *ListCatalogItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEAN adds the eAN to the list catalog items params
func (o *ListCatalogItemsParams) WithEAN(eAN *string) *ListCatalogItemsParams {
	o.SetEAN(eAN)
	return o
}

// SetEAN adds the eAN to the list catalog items params
func (o *ListCatalogItemsParams) SetEAN(eAN *string) {
	o.EAN = eAN
}

// WithISBN adds the iSBN to the list catalog items params
func (o *ListCatalogItemsParams) WithISBN(iSBN *string) *ListCatalogItemsParams {
	o.SetISBN(iSBN)
	return o
}

// SetISBN adds the iSBN to the list catalog items params
func (o *ListCatalogItemsParams) SetISBN(iSBN *string) {
	o.ISBN = iSBN
}

// WithJAN adds the jAN to the list catalog items params
func (o *ListCatalogItemsParams) WithJAN(jAN *string) *ListCatalogItemsParams {
	o.SetJAN(jAN)
	return o
}

// SetJAN adds the jAN to the list catalog items params
func (o *ListCatalogItemsParams) SetJAN(jAN *string) {
	o.JAN = jAN
}

// WithMarketplaceID adds the marketplaceID to the list catalog items params
func (o *ListCatalogItemsParams) WithMarketplaceID(marketplaceID string) *ListCatalogItemsParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the list catalog items params
func (o *ListCatalogItemsParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithQuery adds the query to the list catalog items params
func (o *ListCatalogItemsParams) WithQuery(query *string) *ListCatalogItemsParams {
	o.SetQuery(query)
	return o
}

// SetQuery adds the query to the list catalog items params
func (o *ListCatalogItemsParams) SetQuery(query *string) {
	o.Query = query
}

// WithQueryContextID adds the queryContextID to the list catalog items params
func (o *ListCatalogItemsParams) WithQueryContextID(queryContextID *string) *ListCatalogItemsParams {
	o.SetQueryContextID(queryContextID)
	return o
}

// SetQueryContextID adds the queryContextId to the list catalog items params
func (o *ListCatalogItemsParams) SetQueryContextID(queryContextID *string) {
	o.QueryContextID = queryContextID
}

// WithSellerSKU adds the sellerSKU to the list catalog items params
func (o *ListCatalogItemsParams) WithSellerSKU(sellerSKU *string) *ListCatalogItemsParams {
	o.SetSellerSKU(sellerSKU)
	return o
}

// SetSellerSKU adds the sellerSKU to the list catalog items params
func (o *ListCatalogItemsParams) SetSellerSKU(sellerSKU *string) {
	o.SellerSKU = sellerSKU
}

// WithUPC adds the uPC to the list catalog items params
func (o *ListCatalogItemsParams) WithUPC(uPC *string) *ListCatalogItemsParams {
	o.SetUPC(uPC)
	return o
}

// SetUPC adds the uPC to the list catalog items params
func (o *ListCatalogItemsParams) SetUPC(uPC *string) {
	o.UPC = uPC
}

// WriteToRequest writes these params to a swagger request
func (o *ListCatalogItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EAN != nil {

		// query param EAN
		var qrEAN string

		if o.EAN != nil {
			qrEAN = *o.EAN
		}
		qEAN := qrEAN
		if qEAN != "" {

			if err := r.SetQueryParam("EAN", qEAN); err != nil {
				return err
			}
		}
	}

	if o.ISBN != nil {

		// query param ISBN
		var qrISBN string

		if o.ISBN != nil {
			qrISBN = *o.ISBN
		}
		qISBN := qrISBN
		if qISBN != "" {

			if err := r.SetQueryParam("ISBN", qISBN); err != nil {
				return err
			}
		}
	}

	if o.JAN != nil {

		// query param JAN
		var qrJAN string

		if o.JAN != nil {
			qrJAN = *o.JAN
		}
		qJAN := qrJAN
		if qJAN != "" {

			if err := r.SetQueryParam("JAN", qJAN); err != nil {
				return err
			}
		}
	}

	// query param MarketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("MarketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	if o.Query != nil {

		// query param Query
		var qrQuery string

		if o.Query != nil {
			qrQuery = *o.Query
		}
		qQuery := qrQuery
		if qQuery != "" {

			if err := r.SetQueryParam("Query", qQuery); err != nil {
				return err
			}
		}
	}

	if o.QueryContextID != nil {

		// query param QueryContextId
		var qrQueryContextID string

		if o.QueryContextID != nil {
			qrQueryContextID = *o.QueryContextID
		}
		qQueryContextID := qrQueryContextID
		if qQueryContextID != "" {

			if err := r.SetQueryParam("QueryContextId", qQueryContextID); err != nil {
				return err
			}
		}
	}

	if o.SellerSKU != nil {

		// query param SellerSKU
		var qrSellerSKU string

		if o.SellerSKU != nil {
			qrSellerSKU = *o.SellerSKU
		}
		qSellerSKU := qrSellerSKU
		if qSellerSKU != "" {

			if err := r.SetQueryParam("SellerSKU", qSellerSKU); err != nil {
				return err
			}
		}
	}

	if o.UPC != nil {

		// query param UPC
		var qrUPC string

		if o.UPC != nil {
			qrUPC = *o.UPC
		}
		qUPC := qrUPC
		if qUPC != "" {

			if err := r.SetQueryParam("UPC", qUPC); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
