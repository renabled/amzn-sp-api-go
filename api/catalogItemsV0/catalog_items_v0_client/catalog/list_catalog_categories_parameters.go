// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListCatalogCategoriesParams creates a new ListCatalogCategoriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListCatalogCategoriesParams() *ListCatalogCategoriesParams {
	return &ListCatalogCategoriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListCatalogCategoriesParamsWithTimeout creates a new ListCatalogCategoriesParams object
// with the ability to set a timeout on a request.
func NewListCatalogCategoriesParamsWithTimeout(timeout time.Duration) *ListCatalogCategoriesParams {
	return &ListCatalogCategoriesParams{
		timeout: timeout,
	}
}

// NewListCatalogCategoriesParamsWithContext creates a new ListCatalogCategoriesParams object
// with the ability to set a context for a request.
func NewListCatalogCategoriesParamsWithContext(ctx context.Context) *ListCatalogCategoriesParams {
	return &ListCatalogCategoriesParams{
		Context: ctx,
	}
}

// NewListCatalogCategoriesParamsWithHTTPClient creates a new ListCatalogCategoriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewListCatalogCategoriesParamsWithHTTPClient(client *http.Client) *ListCatalogCategoriesParams {
	return &ListCatalogCategoriesParams{
		HTTPClient: client,
	}
}

/* ListCatalogCategoriesParams contains all the parameters to send to the API endpoint
   for the list catalog categories operation.

   Typically these are written to a http.Request.
*/
type ListCatalogCategoriesParams struct {

	/* ASIN.

	   The Amazon Standard Identification Number (ASIN) of the item.
	*/
	ASIN *string

	/* MarketplaceID.

	   A marketplace identifier. Specifies the marketplace for the item.
	*/
	MarketplaceID string

	/* SellerSKU.

	   Used to identify items in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
	*/
	SellerSKU *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list catalog categories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCatalogCategoriesParams) WithDefaults() *ListCatalogCategoriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list catalog categories params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListCatalogCategoriesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list catalog categories params
func (o *ListCatalogCategoriesParams) WithTimeout(timeout time.Duration) *ListCatalogCategoriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list catalog categories params
func (o *ListCatalogCategoriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list catalog categories params
func (o *ListCatalogCategoriesParams) WithContext(ctx context.Context) *ListCatalogCategoriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list catalog categories params
func (o *ListCatalogCategoriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list catalog categories params
func (o *ListCatalogCategoriesParams) WithHTTPClient(client *http.Client) *ListCatalogCategoriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list catalog categories params
func (o *ListCatalogCategoriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithASIN adds the aSIN to the list catalog categories params
func (o *ListCatalogCategoriesParams) WithASIN(aSIN *string) *ListCatalogCategoriesParams {
	o.SetASIN(aSIN)
	return o
}

// SetASIN adds the aSIN to the list catalog categories params
func (o *ListCatalogCategoriesParams) SetASIN(aSIN *string) {
	o.ASIN = aSIN
}

// WithMarketplaceID adds the marketplaceID to the list catalog categories params
func (o *ListCatalogCategoriesParams) WithMarketplaceID(marketplaceID string) *ListCatalogCategoriesParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the list catalog categories params
func (o *ListCatalogCategoriesParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithSellerSKU adds the sellerSKU to the list catalog categories params
func (o *ListCatalogCategoriesParams) WithSellerSKU(sellerSKU *string) *ListCatalogCategoriesParams {
	o.SetSellerSKU(sellerSKU)
	return o
}

// SetSellerSKU adds the sellerSKU to the list catalog categories params
func (o *ListCatalogCategoriesParams) SetSellerSKU(sellerSKU *string) {
	o.SellerSKU = sellerSKU
}

// WriteToRequest writes these params to a swagger request
func (o *ListCatalogCategoriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ASIN != nil {

		// query param ASIN
		var qrASIN string

		if o.ASIN != nil {
			qrASIN = *o.ASIN
		}
		qASIN := qrASIN
		if qASIN != "" {

			if err := r.SetQueryParam("ASIN", qASIN); err != nil {
				return err
			}
		}
	}

	// query param MarketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("MarketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	if o.SellerSKU != nil {

		// query param SellerSKU
		var qrSellerSKU string

		if o.SellerSKU != nil {
			qrSellerSKU = *o.SellerSKU
		}
		qSellerSKU := qrSellerSKU
		if qSellerSKU != "" {

			if err := r.SetQueryParam("SellerSKU", qSellerSKU); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
