// Code generated by go-swagger; DO NOT EDIT.

package catalog_items_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RelationshipType Specific variations of the item.
//
// swagger:model RelationshipType
type RelationshipType struct {

	// The color variation of the item.
	Color string `json:"Color,omitempty"`

	// The edition variation of the item.
	Edition string `json:"Edition,omitempty"`

	// The flavor variation of the item.
	Flavor string `json:"Flavor,omitempty"`

	// The gem type variations of the item.
	GemType []string `json:"GemType"`

	// The golf club flex variation of an item.
	GolfClubFlex string `json:"GolfClubFlex,omitempty"`

	// The golf club loft variation of an item.
	GolfClubLoft *DecimalWithUnits `json:"GolfClubLoft,omitempty"`

	// The hand orientation variation of an item.
	HandOrientation string `json:"HandOrientation,omitempty"`

	// The hardware platform variation of an item.
	HardwarePlatform string `json:"HardwarePlatform,omitempty"`

	// The identifiers that uniquely identify the item that is related.
	Identifiers *IdentifierType `json:"Identifiers,omitempty"`

	// The item dimensions relationship of an item.
	ItemDimensions *DimensionType `json:"ItemDimensions,omitempty"`

	// The material type variations of an item.
	MaterialType []string `json:"MaterialType"`

	// The metal type variation of an item.
	MetalType string `json:"MetalType,omitempty"`

	// The model variation of an item.
	Model string `json:"Model,omitempty"`

	// The operating system variations of an item.
	OperatingSystem []string `json:"OperatingSystem"`

	// The package quantity variation of an item.
	PackageQuantity int64 `json:"PackageQuantity,omitempty"`

	// The product type subcategory variation of an item.
	ProductTypeSubcategory string `json:"ProductTypeSubcategory,omitempty"`

	// The ring size variation of an item.
	RingSize string `json:"RingSize,omitempty"`

	// The scent variation of an item.
	Scent string `json:"Scent,omitempty"`

	// The shaft material variation of an item.
	ShaftMaterial string `json:"ShaftMaterial,omitempty"`

	// The size variation of an item.
	Size string `json:"Size,omitempty"`

	// The size per pearl variation of an item.
	SizePerPearl string `json:"SizePerPearl,omitempty"`

	// The total diamond weight variation of an item.
	TotalDiamondWeight *DecimalWithUnits `json:"TotalDiamondWeight,omitempty"`

	// The total gem weight variation of an item.
	TotalGemWeight *DecimalWithUnits `json:"TotalGemWeight,omitempty"`
}

// Validate validates this relationship type
func (m *RelationshipType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGolfClubLoft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiamondWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalGemWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelationshipType) validateGolfClubLoft(formats strfmt.Registry) error {
	if swag.IsZero(m.GolfClubLoft) { // not required
		return nil
	}

	if m.GolfClubLoft != nil {
		if err := m.GolfClubLoft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GolfClubLoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GolfClubLoft")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) validateIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Identifiers) { // not required
		return nil
	}

	if m.Identifiers != nil {
		if err := m.Identifiers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Identifiers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Identifiers")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) validateItemDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemDimensions) { // not required
		return nil
	}

	if m.ItemDimensions != nil {
		if err := m.ItemDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) validateTotalDiamondWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalDiamondWeight) { // not required
		return nil
	}

	if m.TotalDiamondWeight != nil {
		if err := m.TotalDiamondWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalDiamondWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalDiamondWeight")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) validateTotalGemWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalGemWeight) { // not required
		return nil
	}

	if m.TotalGemWeight != nil {
		if err := m.TotalGemWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalGemWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalGemWeight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this relationship type based on the context it is used
func (m *RelationshipType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGolfClubLoft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalDiamondWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalGemWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RelationshipType) contextValidateGolfClubLoft(ctx context.Context, formats strfmt.Registry) error {

	if m.GolfClubLoft != nil {
		if err := m.GolfClubLoft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GolfClubLoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GolfClubLoft")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) contextValidateIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	if m.Identifiers != nil {
		if err := m.Identifiers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Identifiers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Identifiers")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) contextValidateItemDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemDimensions != nil {
		if err := m.ItemDimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) contextValidateTotalDiamondWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalDiamondWeight != nil {
		if err := m.TotalDiamondWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalDiamondWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalDiamondWeight")
			}
			return err
		}
	}

	return nil
}

func (m *RelationshipType) contextValidateTotalGemWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalGemWeight != nil {
		if err := m.TotalGemWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalGemWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalGemWeight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RelationshipType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelationshipType) UnmarshalBinary(b []byte) error {
	var res RelationshipType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
