// Code generated by go-swagger; DO NOT EDIT.

package catalog_items_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AttributeSetListType The attributes of the item.
//
// swagger:model AttributeSetListType
type AttributeSetListType struct {

	// The actor attributes of the item.
	Actor []string `json:"Actor"`

	// The artist attributes of the item.
	Artist []string `json:"Artist"`

	// The aspect ratio attribute of the item.
	AspectRatio string `json:"AspectRatio,omitempty"`

	// The audience rating attribute of the item.
	AudienceRating string `json:"AudienceRating,omitempty"`

	// The author attributes of the item.
	Author []string `json:"Author"`

	// The back finding attribute of the item.
	BackFinding string `json:"BackFinding,omitempty"`

	// The band material type attribute of the item.
	BandMaterialType string `json:"BandMaterialType,omitempty"`

	// The binding attribute of the item.
	Binding string `json:"Binding,omitempty"`

	// The Bluray region attribute of the item.
	BlurayRegion string `json:"BlurayRegion,omitempty"`

	// The brand attribute of the item.
	Brand string `json:"Brand,omitempty"`

	// The CERO age rating attribute of the item.
	CeroAgeRating string `json:"CeroAgeRating,omitempty"`

	// The chain type attribute of the item.
	ChainType string `json:"ChainType,omitempty"`

	// The clasp type attribute of the item.
	ClaspType string `json:"ClaspType,omitempty"`

	// The color attribute of the item.
	Color string `json:"Color,omitempty"`

	// The CPU manufacturer attribute of the item.
	CPUManufacturer string `json:"CpuManufacturer,omitempty"`

	// The CPU speed attribute of the item.
	CPUSpeed *DecimalWithUnits `json:"CpuSpeed,omitempty"`

	// The CPU type attribute of the item.
	CPUType string `json:"CpuType,omitempty"`

	// The creator attributes of the item.
	Creator []*CreatorType `json:"Creator"`

	// The department attribute of the item.
	Department string `json:"Department,omitempty"`

	// The director attributes of the item.
	Director []string `json:"Director"`

	// The display size attribute of the item.
	DisplaySize *DecimalWithUnits `json:"DisplaySize,omitempty"`

	// The edition attribute of the item.
	Edition string `json:"Edition,omitempty"`

	// The episode sequence attribute of the item.
	EpisodeSequence string `json:"EpisodeSequence,omitempty"`

	// The ESRB age rating attribute of the item.
	EsrbAgeRating string `json:"EsrbAgeRating,omitempty"`

	// The feature attributes of the item
	Feature []string `json:"Feature"`

	// The flavor attribute of the item.
	Flavor string `json:"Flavor,omitempty"`

	// The format attributes of the item.
	Format []string `json:"Format"`

	// The gem type attributes of the item.
	GemType []string `json:"GemType"`

	// The genre attribute of the item.
	Genre string `json:"Genre,omitempty"`

	// The golf club flex attribute of the item.
	GolfClubFlex string `json:"GolfClubFlex,omitempty"`

	// The golf club loft attribute of the item.
	GolfClubLoft *DecimalWithUnits `json:"GolfClubLoft,omitempty"`

	// The hand orientation attribute of the item.
	HandOrientation string `json:"HandOrientation,omitempty"`

	// The hard disk interface attribute of the item.
	HardDiskInterface string `json:"HardDiskInterface,omitempty"`

	// The hard disk size attribute of the item.
	HardDiskSize *DecimalWithUnits `json:"HardDiskSize,omitempty"`

	// The hardware platform attribute of the item.
	HardwarePlatform string `json:"HardwarePlatform,omitempty"`

	// The hazardous material type attribute of the item.
	HazardousMaterialType string `json:"HazardousMaterialType,omitempty"`

	// The adult product attribute of the item.
	IsAdultProduct bool `json:"IsAdultProduct,omitempty"`

	// The autographed attribute of the item.
	IsAutographed bool `json:"IsAutographed,omitempty"`

	// The is eligible for trade in attribute of the item.
	IsEligibleForTradeIn bool `json:"IsEligibleForTradeIn,omitempty"`

	// The is memorabilia attribute of the item.
	IsMemorabilia bool `json:"IsMemorabilia,omitempty"`

	// The issues per year attribute of the item.
	IssuesPerYear string `json:"IssuesPerYear,omitempty"`

	// The item dimensions attribute of the item.
	ItemDimensions *DimensionType `json:"ItemDimensions,omitempty"`

	// The item part number attribute of the item.
	ItemPartNumber string `json:"ItemPartNumber,omitempty"`

	// The label attribute of the item.
	Label string `json:"Label,omitempty"`

	// The languages attribute of the item.
	Languages []*LanguageType `json:"Languages"`

	// The legal disclaimer attribute of the item.
	LegalDisclaimer string `json:"LegalDisclaimer,omitempty"`

	// The list price attribute of the item.
	ListPrice *Price `json:"ListPrice,omitempty"`

	// The manufacturer attribute of the item.
	Manufacturer string `json:"Manufacturer,omitempty"`

	// The manufacturer maximum age attribute of the item.
	ManufacturerMaximumAge *DecimalWithUnits `json:"ManufacturerMaximumAge,omitempty"`

	// The manufacturer minimum age attribute of the item.
	ManufacturerMinimumAge *DecimalWithUnits `json:"ManufacturerMinimumAge,omitempty"`

	// The manufacturer parts warranty description attribute of the item.
	ManufacturerPartsWarrantyDescription string `json:"ManufacturerPartsWarrantyDescription,omitempty"`

	// The material type attributes of the item.
	MaterialType []string `json:"MaterialType"`

	// The maximum resolution attribute of the item.
	MaximumResolution *DecimalWithUnits `json:"MaximumResolution,omitempty"`

	// The media type attributes of the item.
	MediaType []string `json:"MediaType"`

	// The metal stamp attribute of the item.
	MetalStamp string `json:"MetalStamp,omitempty"`

	// The metal type attribute of the item.
	MetalType string `json:"MetalType,omitempty"`

	// The model attribute of the item.
	Model string `json:"Model,omitempty"`

	// The number of discs attribute of the item.
	NumberOfDiscs int64 `json:"NumberOfDiscs,omitempty"`

	// The number of issues attribute of the item.
	NumberOfIssues int64 `json:"NumberOfIssues,omitempty"`

	// The number of items attribute of the item.
	NumberOfItems int64 `json:"NumberOfItems,omitempty"`

	// The number of pages attribute of the item.
	NumberOfPages int64 `json:"NumberOfPages,omitempty"`

	// The number of tracks attribute of the item.
	NumberOfTracks int64 `json:"NumberOfTracks,omitempty"`

	// The operating system attributes of the item.
	OperatingSystem []string `json:"OperatingSystem"`

	// The optical zoom attribute of the item.
	OpticalZoom *DecimalWithUnits `json:"OpticalZoom,omitempty"`

	// The package dimensions attribute of the item.
	PackageDimensions *DimensionType `json:"PackageDimensions,omitempty"`

	// The package quantity attribute of the item.
	PackageQuantity int64 `json:"PackageQuantity,omitempty"`

	// The part number attribute of the item.
	PartNumber string `json:"PartNumber,omitempty"`

	// The PEGI rating attribute of the item.
	PegiRating string `json:"PegiRating,omitempty"`

	// The platform attributes of the item.
	Platform []string `json:"Platform"`

	// The processor count attribute of the item.
	ProcessorCount int64 `json:"ProcessorCount,omitempty"`

	// The product group attribute of the item.
	ProductGroup string `json:"ProductGroup,omitempty"`

	// The product type name attribute of the item.
	ProductTypeName string `json:"ProductTypeName,omitempty"`

	// The product type subcategory attribute of the item.
	ProductTypeSubcategory string `json:"ProductTypeSubcategory,omitempty"`

	// The publication date attribute of the item.
	PublicationDate string `json:"PublicationDate,omitempty"`

	// The publisher attribute of the item.
	Publisher string `json:"Publisher,omitempty"`

	// The region code attribute of the item.
	RegionCode string `json:"RegionCode,omitempty"`

	// The release date attribute of the item.
	ReleaseDate string `json:"ReleaseDate,omitempty"`

	// The ring size attribute of the item.
	RingSize string `json:"RingSize,omitempty"`

	// The running time attribute of the item.
	RunningTime *DecimalWithUnits `json:"RunningTime,omitempty"`

	// The scent attribute of the item.
	Scent string `json:"Scent,omitempty"`

	// The season sequence attribute of the item.
	SeasonSequence string `json:"SeasonSequence,omitempty"`

	// The Seikodo product code attribute of the item.
	SeikodoProductCode string `json:"SeikodoProductCode,omitempty"`

	// The shaft material attribute of the item.
	ShaftMaterial string `json:"ShaftMaterial,omitempty"`

	// The size attribute of the item.
	Size string `json:"Size,omitempty"`

	// The size per pearl attribute of the item.
	SizePerPearl string `json:"SizePerPearl,omitempty"`

	// The small image attribute of the item.
	SmallImage *Image `json:"SmallImage,omitempty"`

	// The studio attribute of the item.
	Studio string `json:"Studio,omitempty"`

	// The subscription length attribute of the item.
	SubscriptionLength *DecimalWithUnits `json:"SubscriptionLength,omitempty"`

	// The system memory size attribute of the item.
	SystemMemorySize *DecimalWithUnits `json:"SystemMemorySize,omitempty"`

	// The system memory type attribute of the item.
	SystemMemoryType string `json:"SystemMemoryType,omitempty"`

	// The theatrical release date attribute of the item.
	TheatricalReleaseDate string `json:"TheatricalReleaseDate,omitempty"`

	// The title attribute of the item.
	Title string `json:"Title,omitempty"`

	// The total diamond weight attribute of the item.
	TotalDiamondWeight *DecimalWithUnits `json:"TotalDiamondWeight,omitempty"`

	// The total gem weight attribute of the item.
	TotalGemWeight *DecimalWithUnits `json:"TotalGemWeight,omitempty"`

	// The warranty attribute of the item.
	Warranty string `json:"Warranty,omitempty"`

	// The WEEE tax value attribute of the item.
	WeeeTaxValue *Price `json:"WeeeTaxValue,omitempty"`
}

// Validate validates this attribute set list type
func (m *AttributeSetListType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPUSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplaySize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGolfClubLoft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHardDiskSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManufacturerMaximumAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManufacturerMinimumAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaximumResolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpticalZoom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRunningTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmallImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemMemorySize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalDiamondWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalGemWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeeeTaxValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttributeSetListType) validateCPUSpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.CPUSpeed) { // not required
		return nil
	}

	if m.CPUSpeed != nil {
		if err := m.CPUSpeed.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CpuSpeed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CpuSpeed")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateCreator(formats strfmt.Registry) error {
	if swag.IsZero(m.Creator) { // not required
		return nil
	}

	for i := 0; i < len(m.Creator); i++ {
		if swag.IsZero(m.Creator[i]) { // not required
			continue
		}

		if m.Creator[i] != nil {
			if err := m.Creator[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Creator" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Creator" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttributeSetListType) validateDisplaySize(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplaySize) { // not required
		return nil
	}

	if m.DisplaySize != nil {
		if err := m.DisplaySize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DisplaySize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DisplaySize")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateGolfClubLoft(formats strfmt.Registry) error {
	if swag.IsZero(m.GolfClubLoft) { // not required
		return nil
	}

	if m.GolfClubLoft != nil {
		if err := m.GolfClubLoft.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GolfClubLoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GolfClubLoft")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateHardDiskSize(formats strfmt.Registry) error {
	if swag.IsZero(m.HardDiskSize) { // not required
		return nil
	}

	if m.HardDiskSize != nil {
		if err := m.HardDiskSize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HardDiskSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HardDiskSize")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateItemDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemDimensions) { // not required
		return nil
	}

	if m.ItemDimensions != nil {
		if err := m.ItemDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateLanguages(formats strfmt.Registry) error {
	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	for i := 0; i < len(m.Languages); i++ {
		if swag.IsZero(m.Languages[i]) { // not required
			continue
		}

		if m.Languages[i] != nil {
			if err := m.Languages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Languages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttributeSetListType) validateListPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ListPrice) { // not required
		return nil
	}

	if m.ListPrice != nil {
		if err := m.ListPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListPrice")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateManufacturerMaximumAge(formats strfmt.Registry) error {
	if swag.IsZero(m.ManufacturerMaximumAge) { // not required
		return nil
	}

	if m.ManufacturerMaximumAge != nil {
		if err := m.ManufacturerMaximumAge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManufacturerMaximumAge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ManufacturerMaximumAge")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateManufacturerMinimumAge(formats strfmt.Registry) error {
	if swag.IsZero(m.ManufacturerMinimumAge) { // not required
		return nil
	}

	if m.ManufacturerMinimumAge != nil {
		if err := m.ManufacturerMinimumAge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManufacturerMinimumAge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ManufacturerMinimumAge")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateMaximumResolution(formats strfmt.Registry) error {
	if swag.IsZero(m.MaximumResolution) { // not required
		return nil
	}

	if m.MaximumResolution != nil {
		if err := m.MaximumResolution.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MaximumResolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MaximumResolution")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateOpticalZoom(formats strfmt.Registry) error {
	if swag.IsZero(m.OpticalZoom) { // not required
		return nil
	}

	if m.OpticalZoom != nil {
		if err := m.OpticalZoom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OpticalZoom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OpticalZoom")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validatePackageDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageDimensions) { // not required
		return nil
	}

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateRunningTime(formats strfmt.Registry) error {
	if swag.IsZero(m.RunningTime) { // not required
		return nil
	}

	if m.RunningTime != nil {
		if err := m.RunningTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RunningTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RunningTime")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateSmallImage(formats strfmt.Registry) error {
	if swag.IsZero(m.SmallImage) { // not required
		return nil
	}

	if m.SmallImage != nil {
		if err := m.SmallImage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SmallImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SmallImage")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateSubscriptionLength(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriptionLength) { // not required
		return nil
	}

	if m.SubscriptionLength != nil {
		if err := m.SubscriptionLength.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SubscriptionLength")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateSystemMemorySize(formats strfmt.Registry) error {
	if swag.IsZero(m.SystemMemorySize) { // not required
		return nil
	}

	if m.SystemMemorySize != nil {
		if err := m.SystemMemorySize.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SystemMemorySize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SystemMemorySize")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateTotalDiamondWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalDiamondWeight) { // not required
		return nil
	}

	if m.TotalDiamondWeight != nil {
		if err := m.TotalDiamondWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalDiamondWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalDiamondWeight")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateTotalGemWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalGemWeight) { // not required
		return nil
	}

	if m.TotalGemWeight != nil {
		if err := m.TotalGemWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalGemWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalGemWeight")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) validateWeeeTaxValue(formats strfmt.Registry) error {
	if swag.IsZero(m.WeeeTaxValue) { // not required
		return nil
	}

	if m.WeeeTaxValue != nil {
		if err := m.WeeeTaxValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WeeeTaxValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WeeeTaxValue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this attribute set list type based on the context it is used
func (m *AttributeSetListType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCPUSpeed(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreator(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplaySize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGolfClubLoft(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHardDiskSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLanguages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManufacturerMaximumAge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateManufacturerMinimumAge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMaximumResolution(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpticalZoom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRunningTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSmallImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscriptionLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSystemMemorySize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalDiamondWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalGemWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeeeTaxValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttributeSetListType) contextValidateCPUSpeed(ctx context.Context, formats strfmt.Registry) error {

	if m.CPUSpeed != nil {
		if err := m.CPUSpeed.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CpuSpeed")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CpuSpeed")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateCreator(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Creator); i++ {

		if m.Creator[i] != nil {
			if err := m.Creator[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Creator" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Creator" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttributeSetListType) contextValidateDisplaySize(ctx context.Context, formats strfmt.Registry) error {

	if m.DisplaySize != nil {
		if err := m.DisplaySize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DisplaySize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DisplaySize")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateGolfClubLoft(ctx context.Context, formats strfmt.Registry) error {

	if m.GolfClubLoft != nil {
		if err := m.GolfClubLoft.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GolfClubLoft")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GolfClubLoft")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateHardDiskSize(ctx context.Context, formats strfmt.Registry) error {

	if m.HardDiskSize != nil {
		if err := m.HardDiskSize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HardDiskSize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("HardDiskSize")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateItemDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemDimensions != nil {
		if err := m.ItemDimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateLanguages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Languages); i++ {

		if m.Languages[i] != nil {
			if err := m.Languages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Languages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("Languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AttributeSetListType) contextValidateListPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListPrice != nil {
		if err := m.ListPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListPrice")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateManufacturerMaximumAge(ctx context.Context, formats strfmt.Registry) error {

	if m.ManufacturerMaximumAge != nil {
		if err := m.ManufacturerMaximumAge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManufacturerMaximumAge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ManufacturerMaximumAge")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateManufacturerMinimumAge(ctx context.Context, formats strfmt.Registry) error {

	if m.ManufacturerMinimumAge != nil {
		if err := m.ManufacturerMinimumAge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ManufacturerMinimumAge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ManufacturerMinimumAge")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateMaximumResolution(ctx context.Context, formats strfmt.Registry) error {

	if m.MaximumResolution != nil {
		if err := m.MaximumResolution.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MaximumResolution")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MaximumResolution")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateOpticalZoom(ctx context.Context, formats strfmt.Registry) error {

	if m.OpticalZoom != nil {
		if err := m.OpticalZoom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OpticalZoom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OpticalZoom")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidatePackageDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateRunningTime(ctx context.Context, formats strfmt.Registry) error {

	if m.RunningTime != nil {
		if err := m.RunningTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RunningTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RunningTime")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateSmallImage(ctx context.Context, formats strfmt.Registry) error {

	if m.SmallImage != nil {
		if err := m.SmallImage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SmallImage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SmallImage")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateSubscriptionLength(ctx context.Context, formats strfmt.Registry) error {

	if m.SubscriptionLength != nil {
		if err := m.SubscriptionLength.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionLength")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SubscriptionLength")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateSystemMemorySize(ctx context.Context, formats strfmt.Registry) error {

	if m.SystemMemorySize != nil {
		if err := m.SystemMemorySize.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SystemMemorySize")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SystemMemorySize")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateTotalDiamondWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalDiamondWeight != nil {
		if err := m.TotalDiamondWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalDiamondWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalDiamondWeight")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateTotalGemWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalGemWeight != nil {
		if err := m.TotalGemWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalGemWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalGemWeight")
			}
			return err
		}
	}

	return nil
}

func (m *AttributeSetListType) contextValidateWeeeTaxValue(ctx context.Context, formats strfmt.Registry) error {

	if m.WeeeTaxValue != nil {
		if err := m.WeeeTaxValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("WeeeTaxValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("WeeeTaxValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttributeSetListType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttributeSetListType) UnmarshalBinary(b []byte) error {
	var res AttributeSetListType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
