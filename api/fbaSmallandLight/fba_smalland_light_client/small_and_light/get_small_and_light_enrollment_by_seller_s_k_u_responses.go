// Code generated by go-swagger; DO NOT EDIT.

package small_and_light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fbaSmallandLight/fba_smalland_light_models"
)

// GetSmallAndLightEnrollmentBySellerSKUReader is a Reader for the GetSmallAndLightEnrollmentBySellerSKU structure.
type GetSmallAndLightEnrollmentBySellerSKUReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSmallAndLightEnrollmentBySellerSKUReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSmallAndLightEnrollmentBySellerSKUOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSmallAndLightEnrollmentBySellerSKUBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSmallAndLightEnrollmentBySellerSKUForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSmallAndLightEnrollmentBySellerSKUNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSmallAndLightEnrollmentBySellerSKUTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSmallAndLightEnrollmentBySellerSKUInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSmallAndLightEnrollmentBySellerSKUServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSmallAndLightEnrollmentBySellerSKUOK creates a GetSmallAndLightEnrollmentBySellerSKUOK with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUOK() *GetSmallAndLightEnrollmentBySellerSKUOK {
	return &GetSmallAndLightEnrollmentBySellerSKUOK{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUOK describes a response with status code 200, with default header values.

Success.
*/
type GetSmallAndLightEnrollmentBySellerSKUOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.SmallAndLightEnrollment
}

// IsSuccess returns true when this get small and light enrollment by seller s k u o k response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get small and light enrollment by seller s k u o k response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u o k response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get small and light enrollment by seller s k u o k response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u o k response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSmallAndLightEnrollmentBySellerSKUOK) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUOK  %+v", 200, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUOK) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUOK  %+v", 200, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUOK) GetPayload() *fba_smalland_light_models.SmallAndLightEnrollment {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.SmallAndLightEnrollment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUBadRequest creates a GetSmallAndLightEnrollmentBySellerSKUBadRequest with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUBadRequest() *GetSmallAndLightEnrollmentBySellerSKUBadRequest {
	return &GetSmallAndLightEnrollmentBySellerSKUBadRequest{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSmallAndLightEnrollmentBySellerSKUBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u bad request response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u bad request response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u bad request response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get small and light enrollment by seller s k u bad request response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u bad request response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUBadRequest  %+v", 400, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUBadRequest  %+v", 400, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUForbidden creates a GetSmallAndLightEnrollmentBySellerSKUForbidden with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUForbidden() *GetSmallAndLightEnrollmentBySellerSKUForbidden {
	return &GetSmallAndLightEnrollmentBySellerSKUForbidden{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSmallAndLightEnrollmentBySellerSKUForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u forbidden response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u forbidden response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u forbidden response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get small and light enrollment by seller s k u forbidden response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u forbidden response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUForbidden  %+v", 403, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUForbidden  %+v", 403, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUNotFound creates a GetSmallAndLightEnrollmentBySellerSKUNotFound with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUNotFound() *GetSmallAndLightEnrollmentBySellerSKUNotFound {
	return &GetSmallAndLightEnrollmentBySellerSKUNotFound{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetSmallAndLightEnrollmentBySellerSKUNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u not found response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u not found response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u not found response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get small and light enrollment by seller s k u not found response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u not found response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUNotFound  %+v", 404, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUNotFound  %+v", 404, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge creates a GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge() *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge {
	return &GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge{}
}

/*
GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u request entity too large response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u request entity too large response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u request entity too large response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get small and light enrollment by seller s k u request entity too large response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u request entity too large response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType creates a GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType() *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType {
	return &GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u unsupported media type response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u unsupported media type response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u unsupported media type response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get small and light enrollment by seller s k u unsupported media type response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u unsupported media type response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUTooManyRequests creates a GetSmallAndLightEnrollmentBySellerSKUTooManyRequests with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUTooManyRequests() *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests {
	return &GetSmallAndLightEnrollmentBySellerSKUTooManyRequests{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSmallAndLightEnrollmentBySellerSKUTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u too many requests response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u too many requests response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u too many requests response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get small and light enrollment by seller s k u too many requests response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get small and light enrollment by seller s k u too many requests response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUInternalServerError creates a GetSmallAndLightEnrollmentBySellerSKUInternalServerError with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUInternalServerError() *GetSmallAndLightEnrollmentBySellerSKUInternalServerError {
	return &GetSmallAndLightEnrollmentBySellerSKUInternalServerError{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSmallAndLightEnrollmentBySellerSKUInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u internal server error response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u internal server error response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u internal server error response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get small and light enrollment by seller s k u internal server error response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get small and light enrollment by seller s k u internal server error response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEnrollmentBySellerSKUServiceUnavailable creates a GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable with default headers values
func NewGetSmallAndLightEnrollmentBySellerSKUServiceUnavailable() *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable {
	return &GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable{}
}

/*
GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

// IsSuccess returns true when this get small and light enrollment by seller s k u service unavailable response has a 2xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get small and light enrollment by seller s k u service unavailable response has a 3xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get small and light enrollment by seller s k u service unavailable response has a 4xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get small and light enrollment by seller s k u service unavailable response has a 5xx status code
func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get small and light enrollment by seller s k u service unavailable response a status code equal to that given
func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] getSmallAndLightEnrollmentBySellerSKUServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEnrollmentBySellerSKUServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
