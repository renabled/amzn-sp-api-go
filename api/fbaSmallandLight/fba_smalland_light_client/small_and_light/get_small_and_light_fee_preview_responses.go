// Code generated by go-swagger; DO NOT EDIT.

package small_and_light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fbaSmallandLight/fba_smalland_light_models"
)

// GetSmallAndLightFeePreviewReader is a Reader for the GetSmallAndLightFeePreview structure.
type GetSmallAndLightFeePreviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSmallAndLightFeePreviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSmallAndLightFeePreviewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSmallAndLightFeePreviewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSmallAndLightFeePreviewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSmallAndLightFeePreviewForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSmallAndLightFeePreviewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSmallAndLightFeePreviewTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSmallAndLightFeePreviewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSmallAndLightFeePreviewServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSmallAndLightFeePreviewOK creates a GetSmallAndLightFeePreviewOK with default headers values
func NewGetSmallAndLightFeePreviewOK() *GetSmallAndLightFeePreviewOK {
	return &GetSmallAndLightFeePreviewOK{}
}

/* GetSmallAndLightFeePreviewOK describes a response with status code 200, with default header values.

Success.
*/
type GetSmallAndLightFeePreviewOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.SmallAndLightFeePreviews
}

func (o *GetSmallAndLightFeePreviewOK) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewOK  %+v", 200, o.Payload)
}
func (o *GetSmallAndLightFeePreviewOK) GetPayload() *fba_smalland_light_models.SmallAndLightFeePreviews {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.SmallAndLightFeePreviews)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewBadRequest creates a GetSmallAndLightFeePreviewBadRequest with default headers values
func NewGetSmallAndLightFeePreviewBadRequest() *GetSmallAndLightFeePreviewBadRequest {
	return &GetSmallAndLightFeePreviewBadRequest{}
}

/* GetSmallAndLightFeePreviewBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSmallAndLightFeePreviewBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewBadRequest  %+v", 400, o.Payload)
}
func (o *GetSmallAndLightFeePreviewBadRequest) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewUnauthorized creates a GetSmallAndLightFeePreviewUnauthorized with default headers values
func NewGetSmallAndLightFeePreviewUnauthorized() *GetSmallAndLightFeePreviewUnauthorized {
	return &GetSmallAndLightFeePreviewUnauthorized{}
}

/* GetSmallAndLightFeePreviewUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetSmallAndLightFeePreviewUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewUnauthorized  %+v", 401, o.Payload)
}
func (o *GetSmallAndLightFeePreviewUnauthorized) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewForbidden creates a GetSmallAndLightFeePreviewForbidden with default headers values
func NewGetSmallAndLightFeePreviewForbidden() *GetSmallAndLightFeePreviewForbidden {
	return &GetSmallAndLightFeePreviewForbidden{}
}

/* GetSmallAndLightFeePreviewForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSmallAndLightFeePreviewForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewForbidden  %+v", 403, o.Payload)
}
func (o *GetSmallAndLightFeePreviewForbidden) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewNotFound creates a GetSmallAndLightFeePreviewNotFound with default headers values
func NewGetSmallAndLightFeePreviewNotFound() *GetSmallAndLightFeePreviewNotFound {
	return &GetSmallAndLightFeePreviewNotFound{}
}

/* GetSmallAndLightFeePreviewNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetSmallAndLightFeePreviewNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewNotFound  %+v", 404, o.Payload)
}
func (o *GetSmallAndLightFeePreviewNotFound) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewTooManyRequests creates a GetSmallAndLightFeePreviewTooManyRequests with default headers values
func NewGetSmallAndLightFeePreviewTooManyRequests() *GetSmallAndLightFeePreviewTooManyRequests {
	return &GetSmallAndLightFeePreviewTooManyRequests{}
}

/* GetSmallAndLightFeePreviewTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSmallAndLightFeePreviewTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetSmallAndLightFeePreviewTooManyRequests) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewInternalServerError creates a GetSmallAndLightFeePreviewInternalServerError with default headers values
func NewGetSmallAndLightFeePreviewInternalServerError() *GetSmallAndLightFeePreviewInternalServerError {
	return &GetSmallAndLightFeePreviewInternalServerError{}
}

/* GetSmallAndLightFeePreviewInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSmallAndLightFeePreviewInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSmallAndLightFeePreviewInternalServerError) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightFeePreviewServiceUnavailable creates a GetSmallAndLightFeePreviewServiceUnavailable with default headers values
func NewGetSmallAndLightFeePreviewServiceUnavailable() *GetSmallAndLightFeePreviewServiceUnavailable {
	return &GetSmallAndLightFeePreviewServiceUnavailable{}
}

/* GetSmallAndLightFeePreviewServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSmallAndLightFeePreviewServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightFeePreviewServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/smallAndLight/v1/feePreviews][%d] getSmallAndLightFeePreviewServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetSmallAndLightFeePreviewServiceUnavailable) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightFeePreviewServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
