// Code generated by go-swagger; DO NOT EDIT.

package small_and_light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fbaSmallandLight/fba_smalland_light_models"
)

// PutSmallAndLightEnrollmentBySellerSKUReader is a Reader for the PutSmallAndLightEnrollmentBySellerSKU structure.
type PutSmallAndLightEnrollmentBySellerSKUReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutSmallAndLightEnrollmentBySellerSKUReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutSmallAndLightEnrollmentBySellerSKUOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutSmallAndLightEnrollmentBySellerSKUBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutSmallAndLightEnrollmentBySellerSKUForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPutSmallAndLightEnrollmentBySellerSKUNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutSmallAndLightEnrollmentBySellerSKUTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutSmallAndLightEnrollmentBySellerSKUInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutSmallAndLightEnrollmentBySellerSKUServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutSmallAndLightEnrollmentBySellerSKUOK creates a PutSmallAndLightEnrollmentBySellerSKUOK with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUOK() *PutSmallAndLightEnrollmentBySellerSKUOK {
	return &PutSmallAndLightEnrollmentBySellerSKUOK{}
}

/* PutSmallAndLightEnrollmentBySellerSKUOK describes a response with status code 200, with default header values.

Success.
*/
type PutSmallAndLightEnrollmentBySellerSKUOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.SmallAndLightEnrollment
}

func (o *PutSmallAndLightEnrollmentBySellerSKUOK) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUOK  %+v", 200, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUOK) GetPayload() *fba_smalland_light_models.SmallAndLightEnrollment {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.SmallAndLightEnrollment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUBadRequest creates a PutSmallAndLightEnrollmentBySellerSKUBadRequest with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUBadRequest() *PutSmallAndLightEnrollmentBySellerSKUBadRequest {
	return &PutSmallAndLightEnrollmentBySellerSKUBadRequest{}
}

/* PutSmallAndLightEnrollmentBySellerSKUBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PutSmallAndLightEnrollmentBySellerSKUBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUBadRequest) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUBadRequest  %+v", 400, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUBadRequest) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUForbidden creates a PutSmallAndLightEnrollmentBySellerSKUForbidden with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUForbidden() *PutSmallAndLightEnrollmentBySellerSKUForbidden {
	return &PutSmallAndLightEnrollmentBySellerSKUForbidden{}
}

/* PutSmallAndLightEnrollmentBySellerSKUForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type PutSmallAndLightEnrollmentBySellerSKUForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUForbidden) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUForbidden  %+v", 403, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUForbidden) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUNotFound creates a PutSmallAndLightEnrollmentBySellerSKUNotFound with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUNotFound() *PutSmallAndLightEnrollmentBySellerSKUNotFound {
	return &PutSmallAndLightEnrollmentBySellerSKUNotFound{}
}

/* PutSmallAndLightEnrollmentBySellerSKUNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type PutSmallAndLightEnrollmentBySellerSKUNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUNotFound) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUNotFound  %+v", 404, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUNotFound) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge creates a PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge() *PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge {
	return &PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge{}
}

/* PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKURequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType creates a PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType() *PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType {
	return &PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType{}
}

/* PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUTooManyRequests creates a PutSmallAndLightEnrollmentBySellerSKUTooManyRequests with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUTooManyRequests() *PutSmallAndLightEnrollmentBySellerSKUTooManyRequests {
	return &PutSmallAndLightEnrollmentBySellerSKUTooManyRequests{}
}

/* PutSmallAndLightEnrollmentBySellerSKUTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PutSmallAndLightEnrollmentBySellerSKUTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUTooManyRequests  %+v", 429, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUTooManyRequests) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUInternalServerError creates a PutSmallAndLightEnrollmentBySellerSKUInternalServerError with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUInternalServerError() *PutSmallAndLightEnrollmentBySellerSKUInternalServerError {
	return &PutSmallAndLightEnrollmentBySellerSKUInternalServerError{}
}

/* PutSmallAndLightEnrollmentBySellerSKUInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type PutSmallAndLightEnrollmentBySellerSKUInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUInternalServerError  %+v", 500, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUInternalServerError) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutSmallAndLightEnrollmentBySellerSKUServiceUnavailable creates a PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable with default headers values
func NewPutSmallAndLightEnrollmentBySellerSKUServiceUnavailable() *PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable {
	return &PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable{}
}

/* PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /fba/smallAndLight/v1/enrollments/{sellerSKU}][%d] putSmallAndLightEnrollmentBySellerSKUServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *PutSmallAndLightEnrollmentBySellerSKUServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
