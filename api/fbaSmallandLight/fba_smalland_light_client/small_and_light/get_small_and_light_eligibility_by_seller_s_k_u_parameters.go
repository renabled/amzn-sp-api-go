// Code generated by go-swagger; DO NOT EDIT.

package small_and_light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetSmallAndLightEligibilityBySellerSKUParams creates a new GetSmallAndLightEligibilityBySellerSKUParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetSmallAndLightEligibilityBySellerSKUParams() *GetSmallAndLightEligibilityBySellerSKUParams {
	return &GetSmallAndLightEligibilityBySellerSKUParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetSmallAndLightEligibilityBySellerSKUParamsWithTimeout creates a new GetSmallAndLightEligibilityBySellerSKUParams object
// with the ability to set a timeout on a request.
func NewGetSmallAndLightEligibilityBySellerSKUParamsWithTimeout(timeout time.Duration) *GetSmallAndLightEligibilityBySellerSKUParams {
	return &GetSmallAndLightEligibilityBySellerSKUParams{
		timeout: timeout,
	}
}

// NewGetSmallAndLightEligibilityBySellerSKUParamsWithContext creates a new GetSmallAndLightEligibilityBySellerSKUParams object
// with the ability to set a context for a request.
func NewGetSmallAndLightEligibilityBySellerSKUParamsWithContext(ctx context.Context) *GetSmallAndLightEligibilityBySellerSKUParams {
	return &GetSmallAndLightEligibilityBySellerSKUParams{
		Context: ctx,
	}
}

// NewGetSmallAndLightEligibilityBySellerSKUParamsWithHTTPClient creates a new GetSmallAndLightEligibilityBySellerSKUParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetSmallAndLightEligibilityBySellerSKUParamsWithHTTPClient(client *http.Client) *GetSmallAndLightEligibilityBySellerSKUParams {
	return &GetSmallAndLightEligibilityBySellerSKUParams{
		HTTPClient: client,
	}
}

/*
GetSmallAndLightEligibilityBySellerSKUParams contains all the parameters to send to the API endpoint

	for the get small and light eligibility by seller s k u operation.

	Typically these are written to a http.Request.
*/
type GetSmallAndLightEligibilityBySellerSKUParams struct {

	/* MarketplaceIds.

	   The marketplace for which the eligibility status is retrieved. NOTE: Accepts a single marketplace only.
	*/
	MarketplaceIds []string

	/* SellerSKU.

	   The seller SKU that identifies the item.
	*/
	SellerSKU string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get small and light eligibility by seller s k u params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WithDefaults() *GetSmallAndLightEligibilityBySellerSKUParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get small and light eligibility by seller s k u params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetSmallAndLightEligibilityBySellerSKUParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WithTimeout(timeout time.Duration) *GetSmallAndLightEligibilityBySellerSKUParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WithContext(ctx context.Context) *GetSmallAndLightEligibilityBySellerSKUParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WithHTTPClient(client *http.Client) *GetSmallAndLightEligibilityBySellerSKUParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMarketplaceIds adds the marketplaceIds to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WithMarketplaceIds(marketplaceIds []string) *GetSmallAndLightEligibilityBySellerSKUParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithSellerSKU adds the sellerSKU to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WithSellerSKU(sellerSKU string) *GetSmallAndLightEligibilityBySellerSKUParams {
	o.SetSellerSKU(sellerSKU)
	return o
}

// SetSellerSKU adds the sellerSKU to the get small and light eligibility by seller s k u params
func (o *GetSmallAndLightEligibilityBySellerSKUParams) SetSellerSKU(sellerSKU string) {
	o.SellerSKU = sellerSKU
}

// WriteToRequest writes these params to a swagger request
func (o *GetSmallAndLightEligibilityBySellerSKUParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	// path param sellerSKU
	if err := r.SetPathParam("sellerSKU", o.SellerSKU); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetSmallAndLightEligibilityBySellerSKU binds the parameter marketplaceIds
func (o *GetSmallAndLightEligibilityBySellerSKUParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: ""
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "")

	return marketplaceIdsIS
}
