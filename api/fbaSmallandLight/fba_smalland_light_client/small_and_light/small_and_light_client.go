// Code generated by go-swagger; DO NOT EDIT.

package small_and_light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new small and light API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for small and light API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteSmallAndLightEnrollmentBySellerSKU(params *DeleteSmallAndLightEnrollmentBySellerSKUParams, opts ...ClientOption) (*DeleteSmallAndLightEnrollmentBySellerSKUNoContent, error)

	GetSmallAndLightEligibilityBySellerSKU(params *GetSmallAndLightEligibilityBySellerSKUParams, opts ...ClientOption) (*GetSmallAndLightEligibilityBySellerSKUOK, error)

	GetSmallAndLightEnrollmentBySellerSKU(params *GetSmallAndLightEnrollmentBySellerSKUParams, opts ...ClientOption) (*GetSmallAndLightEnrollmentBySellerSKUOK, error)

	GetSmallAndLightFeePreview(params *GetSmallAndLightFeePreviewParams, opts ...ClientOption) (*GetSmallAndLightFeePreviewOK, error)

	PutSmallAndLightEnrollmentBySellerSKU(params *PutSmallAndLightEnrollmentBySellerSKUParams, opts ...ClientOption) (*PutSmallAndLightEnrollmentBySellerSKUOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	DeleteSmallAndLightEnrollmentBySellerSKU Removes the item indicated by the specified seller SKU from the Small and Light program in the specified marketplace. If the item is not eligible for disenrollment, the ineligibility reasons are returned.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) DeleteSmallAndLightEnrollmentBySellerSKU(params *DeleteSmallAndLightEnrollmentBySellerSKUParams, opts ...ClientOption) (*DeleteSmallAndLightEnrollmentBySellerSKUNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmallAndLightEnrollmentBySellerSKUParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteSmallAndLightEnrollmentBySellerSKU",
		Method:             "DELETE",
		PathPattern:        "/fba/smallAndLight/v1/enrollments/{sellerSKU}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmallAndLightEnrollmentBySellerSKUReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSmallAndLightEnrollmentBySellerSKUNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteSmallAndLightEnrollmentBySellerSKU: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetSmallAndLightEligibilityBySellerSKU Returns the Small and Light program eligibility status of the item indicated by the specified seller SKU in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetSmallAndLightEligibilityBySellerSKU(params *GetSmallAndLightEligibilityBySellerSKUParams, opts ...ClientOption) (*GetSmallAndLightEligibilityBySellerSKUOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmallAndLightEligibilityBySellerSKUParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSmallAndLightEligibilityBySellerSKU",
		Method:             "GET",
		PathPattern:        "/fba/smallAndLight/v1/eligibilities/{sellerSKU}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmallAndLightEligibilityBySellerSKUReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmallAndLightEligibilityBySellerSKUOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmallAndLightEligibilityBySellerSKU: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetSmallAndLightEnrollmentBySellerSKU Returns the Small and Light enrollment status for the item indicated by the specified seller SKU in the specified marketplace.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 10 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetSmallAndLightEnrollmentBySellerSKU(params *GetSmallAndLightEnrollmentBySellerSKUParams, opts ...ClientOption) (*GetSmallAndLightEnrollmentBySellerSKUOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmallAndLightEnrollmentBySellerSKUParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSmallAndLightEnrollmentBySellerSKU",
		Method:             "GET",
		PathPattern:        "/fba/smallAndLight/v1/enrollments/{sellerSKU}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmallAndLightEnrollmentBySellerSKUReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmallAndLightEnrollmentBySellerSKUOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmallAndLightEnrollmentBySellerSKU: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetSmallAndLightFeePreview Returns the Small and Light fee estimates for the specified items. You must include a marketplaceId parameter to retrieve the proper fee estimates for items to be sold in that marketplace. The ordering of items in the response will mirror the order of the items in the request. Duplicate ASIN/price combinations are removed.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 3 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetSmallAndLightFeePreview(params *GetSmallAndLightFeePreviewParams, opts ...ClientOption) (*GetSmallAndLightFeePreviewOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmallAndLightFeePreviewParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSmallAndLightFeePreview",
		Method:             "POST",
		PathPattern:        "/fba/smallAndLight/v1/feePreviews",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmallAndLightFeePreviewReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSmallAndLightFeePreviewOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSmallAndLightFeePreview: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PutSmallAndLightEnrollmentBySellerSKU Enrolls the item indicated by the specified seller SKU in the Small and Light program in the specified marketplace. If the item is not eligible, the ineligibility reasons are returned.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 5 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) PutSmallAndLightEnrollmentBySellerSKU(params *PutSmallAndLightEnrollmentBySellerSKUParams, opts ...ClientOption) (*PutSmallAndLightEnrollmentBySellerSKUOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSmallAndLightEnrollmentBySellerSKUParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putSmallAndLightEnrollmentBySellerSKU",
		Method:             "PUT",
		PathPattern:        "/fba/smallAndLight/v1/enrollments/{sellerSKU}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutSmallAndLightEnrollmentBySellerSKUReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutSmallAndLightEnrollmentBySellerSKUOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putSmallAndLightEnrollmentBySellerSKU: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
