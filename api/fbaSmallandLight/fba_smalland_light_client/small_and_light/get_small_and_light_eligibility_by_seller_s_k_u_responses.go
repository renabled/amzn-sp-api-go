// Code generated by go-swagger; DO NOT EDIT.

package small_and_light

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fbaSmallandLight/fba_smalland_light_models"
)

// GetSmallAndLightEligibilityBySellerSKUReader is a Reader for the GetSmallAndLightEligibilityBySellerSKU structure.
type GetSmallAndLightEligibilityBySellerSKUReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSmallAndLightEligibilityBySellerSKUReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSmallAndLightEligibilityBySellerSKUOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSmallAndLightEligibilityBySellerSKUBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSmallAndLightEligibilityBySellerSKUForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSmallAndLightEligibilityBySellerSKUNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSmallAndLightEligibilityBySellerSKUTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSmallAndLightEligibilityBySellerSKUInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSmallAndLightEligibilityBySellerSKUServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSmallAndLightEligibilityBySellerSKUOK creates a GetSmallAndLightEligibilityBySellerSKUOK with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUOK() *GetSmallAndLightEligibilityBySellerSKUOK {
	return &GetSmallAndLightEligibilityBySellerSKUOK{}
}

/* GetSmallAndLightEligibilityBySellerSKUOK describes a response with status code 200, with default header values.

Success.
*/
type GetSmallAndLightEligibilityBySellerSKUOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.SmallAndLightEligibility
}

func (o *GetSmallAndLightEligibilityBySellerSKUOK) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUOK  %+v", 200, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUOK) GetPayload() *fba_smalland_light_models.SmallAndLightEligibility {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.SmallAndLightEligibility)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUBadRequest creates a GetSmallAndLightEligibilityBySellerSKUBadRequest with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUBadRequest() *GetSmallAndLightEligibilityBySellerSKUBadRequest {
	return &GetSmallAndLightEligibilityBySellerSKUBadRequest{}
}

/* GetSmallAndLightEligibilityBySellerSKUBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSmallAndLightEligibilityBySellerSKUBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUBadRequest  %+v", 400, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUBadRequest) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUForbidden creates a GetSmallAndLightEligibilityBySellerSKUForbidden with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUForbidden() *GetSmallAndLightEligibilityBySellerSKUForbidden {
	return &GetSmallAndLightEligibilityBySellerSKUForbidden{}
}

/* GetSmallAndLightEligibilityBySellerSKUForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSmallAndLightEligibilityBySellerSKUForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUForbidden  %+v", 403, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUForbidden) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUNotFound creates a GetSmallAndLightEligibilityBySellerSKUNotFound with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUNotFound() *GetSmallAndLightEligibilityBySellerSKUNotFound {
	return &GetSmallAndLightEligibilityBySellerSKUNotFound{}
}

/* GetSmallAndLightEligibilityBySellerSKUNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetSmallAndLightEligibilityBySellerSKUNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUNotFound  %+v", 404, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUNotFound) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge creates a GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge with default headers values
func NewGetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge() *GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge {
	return &GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge{}
}

/* GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKURequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKURequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType creates a GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType() *GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType {
	return &GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType{}
}

/* GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUTooManyRequests creates a GetSmallAndLightEligibilityBySellerSKUTooManyRequests with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUTooManyRequests() *GetSmallAndLightEligibilityBySellerSKUTooManyRequests {
	return &GetSmallAndLightEligibilityBySellerSKUTooManyRequests{}
}

/* GetSmallAndLightEligibilityBySellerSKUTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSmallAndLightEligibilityBySellerSKUTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUTooManyRequests) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUInternalServerError creates a GetSmallAndLightEligibilityBySellerSKUInternalServerError with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUInternalServerError() *GetSmallAndLightEligibilityBySellerSKUInternalServerError {
	return &GetSmallAndLightEligibilityBySellerSKUInternalServerError{}
}

/* GetSmallAndLightEligibilityBySellerSKUInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSmallAndLightEligibilityBySellerSKUInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUInternalServerError) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSmallAndLightEligibilityBySellerSKUServiceUnavailable creates a GetSmallAndLightEligibilityBySellerSKUServiceUnavailable with default headers values
func NewGetSmallAndLightEligibilityBySellerSKUServiceUnavailable() *GetSmallAndLightEligibilityBySellerSKUServiceUnavailable {
	return &GetSmallAndLightEligibilityBySellerSKUServiceUnavailable{}
}

/* GetSmallAndLightEligibilityBySellerSKUServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSmallAndLightEligibilityBySellerSKUServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_smalland_light_models.ErrorList
}

func (o *GetSmallAndLightEligibilityBySellerSKUServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/smallAndLight/v1/eligibilities/{sellerSKU}][%d] getSmallAndLightEligibilityBySellerSKUServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetSmallAndLightEligibilityBySellerSKUServiceUnavailable) GetPayload() *fba_smalland_light_models.ErrorList {
	return o.Payload
}

func (o *GetSmallAndLightEligibilityBySellerSKUServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_smalland_light_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
