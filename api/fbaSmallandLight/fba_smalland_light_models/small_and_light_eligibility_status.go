// Code generated by go-swagger; DO NOT EDIT.

package fba_smalland_light_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SmallAndLightEligibilityStatus The Small and Light eligibility status of the item.
//
// swagger:model SmallAndLightEligibilityStatus
type SmallAndLightEligibilityStatus string

func NewSmallAndLightEligibilityStatus(value SmallAndLightEligibilityStatus) *SmallAndLightEligibilityStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SmallAndLightEligibilityStatus.
func (m SmallAndLightEligibilityStatus) Pointer() *SmallAndLightEligibilityStatus {
	return &m
}

const (

	// SmallAndLightEligibilityStatusELIGIBLE captures enum value "ELIGIBLE"
	SmallAndLightEligibilityStatusELIGIBLE SmallAndLightEligibilityStatus = "ELIGIBLE"

	// SmallAndLightEligibilityStatusNOTELIGIBLE captures enum value "NOT_ELIGIBLE"
	SmallAndLightEligibilityStatusNOTELIGIBLE SmallAndLightEligibilityStatus = "NOT_ELIGIBLE"
)

// for schema
var smallAndLightEligibilityStatusEnum []interface{}

func init() {
	var res []SmallAndLightEligibilityStatus
	if err := json.Unmarshal([]byte(`["ELIGIBLE","NOT_ELIGIBLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smallAndLightEligibilityStatusEnum = append(smallAndLightEligibilityStatusEnum, v)
	}
}

func (m SmallAndLightEligibilityStatus) validateSmallAndLightEligibilityStatusEnum(path, location string, value SmallAndLightEligibilityStatus) error {
	if err := validate.EnumCase(path, location, value, smallAndLightEligibilityStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this small and light eligibility status
func (m SmallAndLightEligibilityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSmallAndLightEligibilityStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this small and light eligibility status based on context it is used
func (m SmallAndLightEligibilityStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
