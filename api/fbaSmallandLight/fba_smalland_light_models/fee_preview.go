// Code generated by go-swagger; DO NOT EDIT.

package fba_smalland_light_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FeePreview The fee estimate for a specific item.
//
// swagger:model FeePreview
type FeePreview struct {

	// The Amazon Standard Identification Number (ASIN) value used to identify the item.
	Asin string `json:"asin,omitempty"`

	// One or more unexpected errors occurred during the getSmallAndLightFeePreview operation.
	Errors []*Error `json:"errors"`

	// A list of the Small and Light fees for the item.
	FeeBreakdown []*FeeLineItem `json:"feeBreakdown"`

	// The price that the seller plans to charge for the item.
	Price *MoneyType `json:"price,omitempty"`

	// The total fees charged if the item participated in the Small and Light program.
	TotalFees *MoneyType `json:"totalFees,omitempty"`
}

// Validate validates this fee preview
func (m *FeePreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeBreakdown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeePreview) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FeePreview) validateFeeBreakdown(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeBreakdown) { // not required
		return nil
	}

	for i := 0; i < len(m.FeeBreakdown); i++ {
		if swag.IsZero(m.FeeBreakdown[i]) { // not required
			continue
		}

		if m.FeeBreakdown[i] != nil {
			if err := m.FeeBreakdown[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("feeBreakdown" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("feeBreakdown" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FeePreview) validatePrice(formats strfmt.Registry) error {
	if swag.IsZero(m.Price) { // not required
		return nil
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *FeePreview) validateTotalFees(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalFees) { // not required
		return nil
	}

	if m.TotalFees != nil {
		if err := m.TotalFees.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalFees")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalFees")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fee preview based on the context it is used
func (m *FeePreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeeBreakdown(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeePreview) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Errors); i++ {

		if m.Errors[i] != nil {
			if err := m.Errors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("errors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FeePreview) contextValidateFeeBreakdown(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeeBreakdown); i++ {

		if m.FeeBreakdown[i] != nil {
			if err := m.FeeBreakdown[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("feeBreakdown" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("feeBreakdown" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FeePreview) contextValidatePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.Price != nil {
		if err := m.Price.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

func (m *FeePreview) contextValidateTotalFees(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalFees != nil {
		if err := m.TotalFees.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalFees")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalFees")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeePreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeePreview) UnmarshalBinary(b []byte) error {
	var res FeePreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
