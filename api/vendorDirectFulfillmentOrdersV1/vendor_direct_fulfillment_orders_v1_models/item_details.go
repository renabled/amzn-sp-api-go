// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_orders_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemDetails Updated inventory details for an item.
//
// swagger:model ItemDetails
type ItemDetails struct {

	// Total item quantity available in the warehouse.
	// Required: true
	AvailableQuantity *ItemQuantity `json:"availableQuantity"`

	// The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
	BuyerProductIdentifier string `json:"buyerProductIdentifier,omitempty"`

	// When true, the item is permanently unavailable.
	IsObsolete bool `json:"isObsolete,omitempty"`

	// The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
	VendorProductIdentifier string `json:"vendorProductIdentifier,omitempty"`
}

// Validate validates this item details
func (m *ItemDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemDetails) validateAvailableQuantity(formats strfmt.Registry) error {

	if err := validate.Required("availableQuantity", "body", m.AvailableQuantity); err != nil {
		return err
	}

	if m.AvailableQuantity != nil {
		if err := m.AvailableQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availableQuantity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item details based on the context it is used
func (m *ItemDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemDetails) contextValidateAvailableQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailableQuantity != nil {
		if err := m.AvailableQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("availableQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("availableQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemDetails) UnmarshalBinary(b []byte) error {
	var res ItemDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
