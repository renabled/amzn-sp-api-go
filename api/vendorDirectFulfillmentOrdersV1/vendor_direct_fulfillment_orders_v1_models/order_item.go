// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_orders_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItem An order item.
//
// swagger:model OrderItem
type OrderItem struct {

	// Buyer's standard identification number (ASIN) of an item.
	BuyerProductIdentifier string `json:"buyerProductIdentifier,omitempty"`

	// Gift message and wrapId details.
	GiftDetails *GiftDetails `json:"giftDetails,omitempty"`

	// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	// Required: true
	ItemSequenceNumber *string `json:"itemSequenceNumber"`

	// Net price (before tax) to vendor with currency details.
	// Required: true
	NetPrice *Money `json:"netPrice"`

	// Item quantity ordered.
	// Required: true
	OrderedQuantity *ItemQuantity `json:"orderedQuantity"`

	// Details for the scheduled delivery shipment.
	ScheduledDeliveryShipment *ScheduledDeliveryShipment `json:"scheduledDeliveryShipment,omitempty"`

	// tax details
	TaxDetails *OrderItemTaxDetails `json:"taxDetails,omitempty"`

	// Title for the item.
	Title string `json:"title,omitempty"`

	// The price to Amazon each (cost).
	TotalPrice *Money `json:"totalPrice,omitempty"`

	// The vendor selected product identification of the item.
	VendorProductIdentifier string `json:"vendorProductIdentifier,omitempty"`
}

// Validate validates this order item
func (m *OrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGiftDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDeliveryShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) validateGiftDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.GiftDetails) { // not required
		return nil
	}

	if m.GiftDetails != nil {
		if err := m.GiftDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("giftDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("giftDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateItemSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("itemSequenceNumber", "body", m.ItemSequenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateNetPrice(formats strfmt.Registry) error {

	if err := validate.Required("netPrice", "body", m.NetPrice); err != nil {
		return err
	}

	if m.NetPrice != nil {
		if err := m.NetPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateOrderedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("orderedQuantity", "body", m.OrderedQuantity); err != nil {
		return err
	}

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateScheduledDeliveryShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDeliveryShipment) { // not required
		return nil
	}

	if m.ScheduledDeliveryShipment != nil {
		if err := m.ScheduledDeliveryShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDeliveryShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDeliveryShipment")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateTaxDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxDetails) { // not required
		return nil
	}

	if m.TaxDetails != nil {
		if err := m.TaxDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateTotalPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalPrice) { // not required
		return nil
	}

	if m.TotalPrice != nil {
		if err := m.TotalPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPrice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order item based on the context it is used
func (m *OrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGiftDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledDeliveryShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) contextValidateGiftDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.GiftDetails != nil {
		if err := m.GiftDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("giftDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("giftDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateNetPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.NetPrice != nil {
		if err := m.NetPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateOrderedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateScheduledDeliveryShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduledDeliveryShipment != nil {
		if err := m.ScheduledDeliveryShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDeliveryShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDeliveryShipment")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateTaxDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxDetails != nil {
		if err := m.TaxDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateTotalPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalPrice != nil {
		if err := m.TotalPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItem) UnmarshalBinary(b []byte) error {
	var res OrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// OrderItemTaxDetails Total tax details for the line item.
//
// swagger:model OrderItemTaxDetails
type OrderItemTaxDetails struct {

	// Tax details.
	TaxLineItem TaxLineItem `json:"taxLineItem,omitempty"`
}

// Validate validates this order item tax details
func (m *OrderItemTaxDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaxLineItem(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemTaxDetails) validateTaxLineItem(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxLineItem) { // not required
		return nil
	}

	if err := m.TaxLineItem.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxDetails" + "." + "taxLineItem")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxDetails" + "." + "taxLineItem")
		}
		return err
	}

	return nil
}

// ContextValidate validate this order item tax details based on the context it is used
func (m *OrderItemTaxDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaxLineItem(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemTaxDetails) contextValidateTaxLineItem(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TaxLineItem.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxDetails" + "." + "taxLineItem")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxDetails" + "." + "taxLineItem")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemTaxDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemTaxDetails) UnmarshalBinary(b []byte) error {
	var res OrderItemTaxDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
