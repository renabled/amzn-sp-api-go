// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_orders_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentDates Shipment dates.
//
// swagger:model ShipmentDates
type ShipmentDates struct {

	// Delivery date promised to the Amazon customer.
	// Format: date-time
	PromisedDeliveryDate strfmt.DateTime `json:"promisedDeliveryDate,omitempty"`

	// Time by which the vendor is required to ship the order.
	// Required: true
	// Format: date-time
	RequiredShipDate *strfmt.DateTime `json:"requiredShipDate"`
}

// Validate validates this shipment dates
func (m *ShipmentDates) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePromisedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredShipDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentDates) validatePromisedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PromisedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("promisedDeliveryDate", "body", "date-time", m.PromisedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDates) validateRequiredShipDate(formats strfmt.Registry) error {

	if err := validate.Required("requiredShipDate", "body", m.RequiredShipDate); err != nil {
		return err
	}

	if err := validate.FormatOf("requiredShipDate", "body", "date-time", m.RequiredShipDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shipment dates based on context it is used
func (m *ShipmentDates) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentDates) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentDates) UnmarshalBinary(b []byte) error {
	var res ShipmentDates
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
