// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConfirmTransportationOptionsRequest The `confirmTransportationOptions` request.
// Example: {"transportationSelections":[{"contactInformation":{"email":"email@email.com","name":"John Smithy","phoneNumber":"1234567890"},"deliveryWindow":{"start":"2024-01-01T00:00Z"},"shipmentId":"sh1234abcd-1234-abcd-5678-1234abcd5678","transportationOptionId":"to1234abcd-1234-abcd-5678-1234abcd5678"}]}
//
// swagger:model ConfirmTransportationOptionsRequest
type ConfirmTransportationOptionsRequest struct {

	// Information needed to confirm one of the available transportation options.
	// Required: true
	// Min Items: 1
	TransportationSelections []*TransportationSelection `json:"transportationSelections"`
}

// Validate validates this confirm transportation options request
func (m *ConfirmTransportationOptionsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransportationSelections(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfirmTransportationOptionsRequest) validateTransportationSelections(formats strfmt.Registry) error {

	if err := validate.Required("transportationSelections", "body", m.TransportationSelections); err != nil {
		return err
	}

	iTransportationSelectionsSize := int64(len(m.TransportationSelections))

	if err := validate.MinItems("transportationSelections", "body", iTransportationSelectionsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.TransportationSelections); i++ {
		if swag.IsZero(m.TransportationSelections[i]) { // not required
			continue
		}

		if m.TransportationSelections[i] != nil {
			if err := m.TransportationSelections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transportationSelections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transportationSelections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this confirm transportation options request based on the context it is used
func (m *ConfirmTransportationOptionsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransportationSelections(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConfirmTransportationOptionsRequest) contextValidateTransportationSelections(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransportationSelections); i++ {

		if m.TransportationSelections[i] != nil {
			if err := m.TransportationSelections[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transportationSelections" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transportationSelections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConfirmTransportationOptionsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConfirmTransportationOptionsRequest) UnmarshalBinary(b []byte) error {
	var res ConfirmTransportationOptionsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
