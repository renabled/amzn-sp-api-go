// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Shipment Contains information pertaining to a shipment in an inbound plan.
//
// swagger:model Shipment
type Shipment struct {

	// A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
	// Max Length: 1024
	// Min Length: 1
	AmazonReferenceID string `json:"amazonReferenceId,omitempty"`

	// contact information
	ContactInformation *ContactInformation `json:"contactInformation,omitempty"`

	// dates
	Dates *Dates `json:"dates,omitempty"`

	// destination
	// Required: true
	Destination *ShipmentDestination `json:"destination"`

	// Identifier to an inbound plan.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	InboundPlanID *string `json:"inboundPlanId"`

	// The name of the shipment.
	Name string `json:"name,omitempty"`

	// pallet information
	PalletInformation *PalletInformation `json:"palletInformation,omitempty"`

	// Identifier to a placement option. A placement option represents the shipment splits and destinations of SKUs.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PlacementOptionID *string `json:"placementOptionId"`

	// Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	SelectedTransportationOptionID string `json:"selectedTransportationOptionId,omitempty"`

	// List of self ship appointment details.
	SelfShipAppointmentDetails []*SelfShipAppointmentDetails `json:"selfShipAppointmentDetails"`

	// The confirmed shipment ID which shows up on labels (for example, FBA1234ABCD).
	// Max Length: 1024
	// Min Length: 1
	ShipmentConfirmationID string `json:"shipmentConfirmationId,omitempty"`

	// Identifier to a shipment. A shipment contains the boxes and units being inbounded.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	ShipmentID *string `json:"shipmentId"`

	// source
	// Required: true
	Source *ShipmentSource `json:"source"`

	// The status of a shipment. The state of the shipment will typically start in `WORKING` and transition to `READY_TO_SHIP` once required actions are complete prior to being picked up or shipped out. Can be `ABANDONED`, `CANCELLED`, `CHECKED_IN`, `CLOSED`, `DELETED`, `DELIVERED`, `IN_TRANSIT`, `MIXED`, `READY_TO_SHIP`, `RECEIVING`, `SHIPPED`, or `WORKING`.
	// Max Length: 1024
	// Min Length: 1
	Status string `json:"status,omitempty"`

	// tracking details
	TrackingDetails *TrackingDetails `json:"trackingDetails,omitempty"`
}

// Validate validates this shipment
func (m *Shipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInboundPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePalletInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacementOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelectedTransportationOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfShipAppointmentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentConfirmationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Shipment) validateAmazonReferenceID(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonReferenceID) { // not required
		return nil
	}

	if err := validate.MinLength("amazonReferenceId", "body", m.AmazonReferenceID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("amazonReferenceId", "body", m.AmazonReferenceID, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validateContactInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactInformation) { // not required
		return nil
	}

	if m.ContactInformation != nil {
		if err := m.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateDates(formats strfmt.Registry) error {
	if swag.IsZero(m.Dates) { // not required
		return nil
	}

	if m.Dates != nil {
		if err := m.Dates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dates")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	if m.Destination != nil {
		if err := m.Destination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateInboundPlanID(formats strfmt.Registry) error {

	if err := validate.Required("inboundPlanId", "body", m.InboundPlanID); err != nil {
		return err
	}

	if err := validate.MinLength("inboundPlanId", "body", *m.InboundPlanID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("inboundPlanId", "body", *m.InboundPlanID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("inboundPlanId", "body", *m.InboundPlanID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validatePalletInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.PalletInformation) { // not required
		return nil
	}

	if m.PalletInformation != nil {
		if err := m.PalletInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("palletInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("palletInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validatePlacementOptionID(formats strfmt.Registry) error {

	if err := validate.Required("placementOptionId", "body", m.PlacementOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("placementOptionId", "body", *m.PlacementOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("placementOptionId", "body", *m.PlacementOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("placementOptionId", "body", *m.PlacementOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validateSelectedTransportationOptionID(formats strfmt.Registry) error {
	if swag.IsZero(m.SelectedTransportationOptionID) { // not required
		return nil
	}

	if err := validate.MinLength("selectedTransportationOptionId", "body", m.SelectedTransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("selectedTransportationOptionId", "body", m.SelectedTransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("selectedTransportationOptionId", "body", m.SelectedTransportationOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validateSelfShipAppointmentDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.SelfShipAppointmentDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.SelfShipAppointmentDetails); i++ {
		if swag.IsZero(m.SelfShipAppointmentDetails[i]) { // not required
			continue
		}

		if m.SelfShipAppointmentDetails[i] != nil {
			if err := m.SelfShipAppointmentDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selfShipAppointmentDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("selfShipAppointmentDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Shipment) validateShipmentConfirmationID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentConfirmationID) { // not required
		return nil
	}

	if err := validate.MinLength("shipmentConfirmationId", "body", m.ShipmentConfirmationID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentConfirmationId", "body", m.ShipmentConfirmationID, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.MinLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("shipmentId", "body", *m.ShipmentID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validateSource(formats strfmt.Registry) error {

	if err := validate.Required("source", "body", m.Source); err != nil {
		return err
	}

	if m.Source != nil {
		if err := m.Source.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := validate.MinLength("status", "body", m.Status, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", m.Status, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Shipment) validateTrackingDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingDetails) { // not required
		return nil
	}

	if m.TrackingDetails != nil {
		if err := m.TrackingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment based on the context it is used
func (m *Shipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePalletInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSelfShipAppointmentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Shipment) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInformation != nil {
		if err := m.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateDates(ctx context.Context, formats strfmt.Registry) error {

	if m.Dates != nil {
		if err := m.Dates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dates")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateDestination(ctx context.Context, formats strfmt.Registry) error {

	if m.Destination != nil {
		if err := m.Destination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destination")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidatePalletInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.PalletInformation != nil {
		if err := m.PalletInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("palletInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("palletInformation")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateSelfShipAppointmentDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SelfShipAppointmentDetails); i++ {

		if m.SelfShipAppointmentDetails[i] != nil {
			if err := m.SelfShipAppointmentDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("selfShipAppointmentDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("selfShipAppointmentDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Shipment) contextValidateSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Source != nil {
		if err := m.Source.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("source")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateTrackingDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TrackingDetails != nil {
		if err := m.TrackingDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Shipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Shipment) UnmarshalBinary(b []byte) error {
	var res Shipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
