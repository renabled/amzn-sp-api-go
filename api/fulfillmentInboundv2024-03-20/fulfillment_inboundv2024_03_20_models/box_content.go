// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BoxContent Specifies contents in a box. Each `BoxContent` minimally contains a mapping of an MSKU to the prep owner, label owner and its quantity in the box. It also contains the MSKU expiration date and manufacturing lot code if applicable.
// Example: {"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantityInBox":10}
//
// swagger:model BoxContent
type BoxContent struct {

	// The date in ISO 8601 format for when the MSKU expires.
	// Pattern: ^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
	Expiration string `json:"expiration,omitempty"`

	// label owner
	// Required: true
	LabelOwner *LabelOwner `json:"labelOwner"`

	// The manufacturing lot code.
	// Max Length: 256
	// Min Length: 1
	ManufacturingLotCode string `json:"manufacturingLotCode,omitempty"`

	// The merchant SKU, a merchant-supplied identifier for a specific SKU.
	// Required: true
	// Max Length: 40
	// Min Length: 1
	Msku *string `json:"msku"`

	// prep owner
	// Required: true
	PrepOwner *PrepOwner `json:"prepOwner"`

	// The number of units of the given MSKU in the box.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	QuantityInBox *int64 `json:"quantityInBox"`
}

// Validate validates this box content
func (m *BoxContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManufacturingLotCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityInBox(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoxContent) validateExpiration(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.Pattern("expiration", "body", m.Expiration, `^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$`); err != nil {
		return err
	}

	return nil
}

func (m *BoxContent) validateLabelOwner(formats strfmt.Registry) error {

	if err := validate.Required("labelOwner", "body", m.LabelOwner); err != nil {
		return err
	}

	if err := validate.Required("labelOwner", "body", m.LabelOwner); err != nil {
		return err
	}

	if m.LabelOwner != nil {
		if err := m.LabelOwner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelOwner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelOwner")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContent) validateManufacturingLotCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ManufacturingLotCode) { // not required
		return nil
	}

	if err := validate.MinLength("manufacturingLotCode", "body", m.ManufacturingLotCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("manufacturingLotCode", "body", m.ManufacturingLotCode, 256); err != nil {
		return err
	}

	return nil
}

func (m *BoxContent) validateMsku(formats strfmt.Registry) error {

	if err := validate.Required("msku", "body", m.Msku); err != nil {
		return err
	}

	if err := validate.MinLength("msku", "body", *m.Msku, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("msku", "body", *m.Msku, 40); err != nil {
		return err
	}

	return nil
}

func (m *BoxContent) validatePrepOwner(formats strfmt.Registry) error {

	if err := validate.Required("prepOwner", "body", m.PrepOwner); err != nil {
		return err
	}

	if err := validate.Required("prepOwner", "body", m.PrepOwner); err != nil {
		return err
	}

	if m.PrepOwner != nil {
		if err := m.PrepOwner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepOwner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prepOwner")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContent) validateQuantityInBox(formats strfmt.Registry) error {

	if err := validate.Required("quantityInBox", "body", m.QuantityInBox); err != nil {
		return err
	}

	if err := validate.MinimumInt("quantityInBox", "body", *m.QuantityInBox, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantityInBox", "body", *m.QuantityInBox, 10000, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this box content based on the context it is used
func (m *BoxContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrepOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoxContent) contextValidateLabelOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelOwner != nil {
		if err := m.LabelOwner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelOwner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelOwner")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContent) contextValidatePrepOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.PrepOwner != nil {
		if err := m.PrepOwner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepOwner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prepOwner")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoxContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoxContent) UnmarshalBinary(b []byte) error {
	var res BoxContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
