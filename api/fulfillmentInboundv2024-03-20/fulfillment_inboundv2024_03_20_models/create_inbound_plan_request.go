// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateInboundPlanRequest The `createInboundPlan` request.
// Example: {"contactInformation":{"email":"email@email.com","phoneNumber":"1234567890"},"destinationMarketplaces":["ATVPDKIKX0DER"],"items":[{"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantity":10}],"name":"My inbound plan","sourceAddress":{"addressLine1":"123 example street","addressLine2":"Floor 19","city":"Toronto","companyName":"Acme","countryCode":"CA","name":"name","postalCode":"M1M1M1","stateOrProvinceCode":"ON"}}
//
// swagger:model CreateInboundPlanRequest
type CreateInboundPlanRequest struct {

	// contact information
	// Required: true
	ContactInformation *ContactInformation `json:"contactInformation"`

	// Marketplaces where the items need to be shipped to. Currently only one marketplace can be selected in this request.
	// Required: true
	// Max Items: 1
	// Min Items: 1
	DestinationMarketplaces []string `json:"destinationMarketplaces"`

	// Items included in this plan.
	// Required: true
	// Max Items: 2000
	// Min Items: 1
	Items []*ItemInput `json:"items"`

	// Name for the Inbound Plan. If one isn't provided, a default name will be provided.
	// Max Length: 40
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// source address
	// Required: true
	SourceAddress *Address `json:"sourceAddress"`
}

// Validate validates this create inbound plan request
func (m *CreateInboundPlanRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationMarketplaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInboundPlanRequest) validateContactInformation(formats strfmt.Registry) error {

	if err := validate.Required("contactInformation", "body", m.ContactInformation); err != nil {
		return err
	}

	if m.ContactInformation != nil {
		if err := m.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *CreateInboundPlanRequest) validateDestinationMarketplaces(formats strfmt.Registry) error {

	if err := validate.Required("destinationMarketplaces", "body", m.DestinationMarketplaces); err != nil {
		return err
	}

	iDestinationMarketplacesSize := int64(len(m.DestinationMarketplaces))

	if err := validate.MinItems("destinationMarketplaces", "body", iDestinationMarketplacesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("destinationMarketplaces", "body", iDestinationMarketplacesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.DestinationMarketplaces); i++ {

		if err := validate.MinLength("destinationMarketplaces"+"."+strconv.Itoa(i), "body", m.DestinationMarketplaces[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("destinationMarketplaces"+"."+strconv.Itoa(i), "body", m.DestinationMarketplaces[i], 256); err != nil {
			return err
		}

	}

	return nil
}

func (m *CreateInboundPlanRequest) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	iItemsSize := int64(len(m.Items))

	if err := validate.MinItems("items", "body", iItemsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("items", "body", iItemsSize, 2000); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateInboundPlanRequest) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 40); err != nil {
		return err
	}

	return nil
}

func (m *CreateInboundPlanRequest) validateSourceAddress(formats strfmt.Registry) error {

	if err := validate.Required("sourceAddress", "body", m.SourceAddress); err != nil {
		return err
	}

	if m.SourceAddress != nil {
		if err := m.SourceAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create inbound plan request based on the context it is used
func (m *CreateInboundPlanRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateInboundPlanRequest) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInformation != nil {
		if err := m.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *CreateInboundPlanRequest) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateInboundPlanRequest) contextValidateSourceAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceAddress != nil {
		if err := m.SourceAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateInboundPlanRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateInboundPlanRequest) UnmarshalBinary(b []byte) error {
	var res CreateInboundPlanRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
