// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Region Representation of a location used within the inbounding experience.
//
// swagger:model Region
type Region struct {

	// ISO 3166 standard alpha-2 country code.
	// Max Length: 1024
	// Min Length: 1
	CountryCode string `json:"countryCode,omitempty"`

	// State.
	// Max Length: 1024
	// Min Length: 1
	State string `json:"state,omitempty"`

	// An identifier for a warehouse, such as a FC, IXD, upstream storage.
	// Max Length: 1024
	// Min Length: 1
	WarehouseID string `json:"warehouseId,omitempty"`
}

// Validate validates this region
func (m *Region) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarehouseID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Region) validateCountryCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.MinLength("countryCode", "body", m.CountryCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("countryCode", "body", m.CountryCode, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	if err := validate.MinLength("state", "body", m.State, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("state", "body", m.State, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Region) validateWarehouseID(formats strfmt.Registry) error {
	if swag.IsZero(m.WarehouseID) { // not required
		return nil
	}

	if err := validate.MinLength("warehouseId", "body", m.WarehouseID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("warehouseId", "body", m.WarehouseID, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this region based on context it is used
func (m *Region) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Region) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Region) UnmarshalBinary(b []byte) error {
	var res Region
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
