// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackingOptionSummary Summary information about a packing option.
// Example: {"packingOptionId":"po1234abcd-1234-abcd-5678-1234abcd5678","status":"OFFERED"}
//
// swagger:model PackingOptionSummary
type PackingOptionSummary struct {

	// Identifier to a packing option.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PackingOptionID *string `json:"packingOptionId"`

	// The status of a packing option. Can be 'OFFERED', 'ACCEPTED', or 'EXPIRED'.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	Status *string `json:"status"`
}

// Validate validates this packing option summary
func (m *PackingOptionSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackingOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackingOptionSummary) validatePackingOptionID(formats strfmt.Registry) error {

	if err := validate.Required("packingOptionId", "body", m.PackingOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("packingOptionId", "body", *m.PackingOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("packingOptionId", "body", *m.PackingOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("packingOptionId", "body", *m.PackingOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PackingOptionSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("status", "body", *m.Status, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", *m.Status, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this packing option summary based on context it is used
func (m *PackingOptionSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PackingOptionSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackingOptionSummary) UnmarshalBinary(b []byte) error {
	var res PackingOptionSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
