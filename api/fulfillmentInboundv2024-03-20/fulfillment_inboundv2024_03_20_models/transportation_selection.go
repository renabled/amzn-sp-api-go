// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationSelection The transportation option selected to confirm.
//
// swagger:model TransportationSelection
type TransportationSelection struct {

	// contact information
	ContactInformation *ContactInformation `json:"contactInformation,omitempty"`

	// The range of dates within which the seller expects that their shipment will be delivered to Amazon.
	//
	DeliveryWindow *WindowInput `json:"deliveryWindow,omitempty"`

	// Shipment ID that the transportation Option is for.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	ShipmentID *string `json:"shipmentId"`

	// Transportation option being selected for the provided shipment.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	TransportationOptionID *string `json:"transportationOptionId"`
}

// Validate validates this transportation selection
func (m *TransportationSelection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationSelection) validateContactInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactInformation) { // not required
		return nil
	}

	if m.ContactInformation != nil {
		if err := m.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationSelection) validateDeliveryWindow(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryWindow) { // not required
		return nil
	}

	if m.DeliveryWindow != nil {
		if err := m.DeliveryWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryWindow")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationSelection) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.MinLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("shipmentId", "body", *m.ShipmentID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TransportationSelection) validateTransportationOptionID(formats strfmt.Registry) error {

	if err := validate.Required("transportationOptionId", "body", m.TransportationOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("transportationOptionId", "body", *m.TransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("transportationOptionId", "body", *m.TransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("transportationOptionId", "body", *m.TransportationOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transportation selection based on the context it is used
func (m *TransportationSelection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeliveryWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationSelection) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInformation != nil {
		if err := m.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationSelection) contextValidateDeliveryWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryWindow != nil {
		if err := m.DeliveryWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportationSelection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationSelection) UnmarshalBinary(b []byte) error {
	var res TransportationSelection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
