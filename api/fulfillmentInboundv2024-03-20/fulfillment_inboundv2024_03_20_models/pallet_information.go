// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PalletInformation Pallet information, including weight, dimensions, quantity, stackability, freight class, and declared value.
//
// swagger:model PalletInformation
type PalletInformation struct {

	// declared value
	DeclaredValue *Currency `json:"declaredValue,omitempty"`

	// Freight class. Can be `NONE`, `FC_50`, `FC_55`, `FC_60`, `FC_65`, `FC_70`, `FC_77_5`, `FC_85`, `FC_92_5`, `FC_100`, `FC_110`, `FC_125`, `FC_150`, `FC_175`, `FC_200`, `FC_250`, `FC_300`, `FC_400`, or `FC_500`.
	// Max Length: 1024
	// Min Length: 1
	FreightClass string `json:"freightClass,omitempty"`

	// Set pallet configuration for Less-Than-Truckload (LTL).
	// Required: true
	Pallets []*PalletInput `json:"pallets"`
}

// Validate validates this pallet information
func (m *PalletInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeclaredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreightClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePallets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PalletInformation) validateDeclaredValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DeclaredValue) { // not required
		return nil
	}

	if m.DeclaredValue != nil {
		if err := m.DeclaredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("declaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("declaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *PalletInformation) validateFreightClass(formats strfmt.Registry) error {
	if swag.IsZero(m.FreightClass) { // not required
		return nil
	}

	if err := validate.MinLength("freightClass", "body", m.FreightClass, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("freightClass", "body", m.FreightClass, 1024); err != nil {
		return err
	}

	return nil
}

func (m *PalletInformation) validatePallets(formats strfmt.Registry) error {

	if err := validate.Required("pallets", "body", m.Pallets); err != nil {
		return err
	}

	for i := 0; i < len(m.Pallets); i++ {
		if swag.IsZero(m.Pallets[i]) { // not required
			continue
		}

		if m.Pallets[i] != nil {
			if err := m.Pallets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pallets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pallets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this pallet information based on the context it is used
func (m *PalletInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeclaredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePallets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PalletInformation) contextValidateDeclaredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DeclaredValue != nil {
		if err := m.DeclaredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("declaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("declaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *PalletInformation) contextValidatePallets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pallets); i++ {

		if m.Pallets[i] != nil {
			if err := m.Pallets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pallets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pallets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PalletInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PalletInformation) UnmarshalBinary(b []byte) error {
	var res PalletInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
