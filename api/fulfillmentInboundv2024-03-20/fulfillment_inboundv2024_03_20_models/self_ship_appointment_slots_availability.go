// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SelfShipAppointmentSlotsAvailability The self ship appointment time slots availability and an expiration date for which the slots can be scheduled.
//
// swagger:model SelfShipAppointmentSlotsAvailability
type SelfShipAppointmentSlotsAvailability struct {

	// ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
	// Format: date-time
	ExpiresAt strfmt.DateTime `json:"expiresAt,omitempty"`

	// List of appointment slots.
	Slots []*AppointmentSlot `json:"slots"`
}

// Validate validates this self ship appointment slots availability
func (m *SelfShipAppointmentSlotsAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlots(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelfShipAppointmentSlotsAvailability) validateExpiresAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiresAt) { // not required
		return nil
	}

	if err := validate.FormatOf("expiresAt", "body", "date-time", m.ExpiresAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SelfShipAppointmentSlotsAvailability) validateSlots(formats strfmt.Registry) error {
	if swag.IsZero(m.Slots) { // not required
		return nil
	}

	for i := 0; i < len(m.Slots); i++ {
		if swag.IsZero(m.Slots[i]) { // not required
			continue
		}

		if m.Slots[i] != nil {
			if err := m.Slots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this self ship appointment slots availability based on the context it is used
func (m *SelfShipAppointmentSlotsAvailability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSlots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelfShipAppointmentSlotsAvailability) contextValidateSlots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Slots); i++ {

		if m.Slots[i] != nil {
			if err := m.Slots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("slots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("slots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SelfShipAppointmentSlotsAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelfShipAppointmentSlotsAvailability) UnmarshalBinary(b []byte) error {
	var res SelfShipAppointmentSlotsAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
