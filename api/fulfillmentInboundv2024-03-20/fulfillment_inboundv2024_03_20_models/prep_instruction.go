// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrepInstruction Information pertaining to the preparation of inbound goods.
//
// swagger:model PrepInstruction
type PrepInstruction struct {

	// fee
	Fee *Currency `json:"fee,omitempty"`

	// In some situations, special preparations are required for items and this field reflects the owner of the
	//         preparations. Options include `AMAZON` or `SELLER`.
	// Max Length: 1024
	// Min Length: 1
	PrepOwner string `json:"prepOwner,omitempty"`

	// Type of preparation that should be done. Can be `ITEM_LABELING`, `ITEM_BUBBLEWRAP`, `ITEM_POLYBAGGING`, `ITEM_TAPING`, `ITEM_BLACK_SHRINKWRAP`, `ITEM_HANG_GARMENT`, `ITEM_BOXING`, `ITEM_SETCREAT`, `ITEM_RMOVHANG`, `ITEM_SUFFOSTK`, `ITEM_CAP_SEALING`, `ITEM_DEBUNDLE`, `ITEM_SETSTK`, `ITEM_SIOC`, `ITEM_NO_PREP`, `ADULT`, `BABY`, `TEXTILE`, `HANGER`, `FRAGILE`, `LIQUID`, `SHARP`, `SMALL`, `PERFORATED`, `GRANULAR`, `SET`, `FC_PROVIDED`, `UNKNOWN`, or `NONE`.
	// Max Length: 1024
	// Min Length: 1
	PrepType string `json:"prepType,omitempty"`
}

// Validate validates this prep instruction
func (m *PrepInstruction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrepInstruction) validateFee(formats strfmt.Registry) error {
	if swag.IsZero(m.Fee) { // not required
		return nil
	}

	if m.Fee != nil {
		if err := m.Fee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fee")
			}
			return err
		}
	}

	return nil
}

func (m *PrepInstruction) validatePrepOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.PrepOwner) { // not required
		return nil
	}

	if err := validate.MinLength("prepOwner", "body", m.PrepOwner, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("prepOwner", "body", m.PrepOwner, 1024); err != nil {
		return err
	}

	return nil
}

func (m *PrepInstruction) validatePrepType(formats strfmt.Registry) error {
	if swag.IsZero(m.PrepType) { // not required
		return nil
	}

	if err := validate.MinLength("prepType", "body", m.PrepType, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("prepType", "body", m.PrepType, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this prep instruction based on the context it is used
func (m *PrepInstruction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrepInstruction) contextValidateFee(ctx context.Context, formats strfmt.Registry) error {

	if m.Fee != nil {
		if err := m.Fee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrepInstruction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrepInstruction) UnmarshalBinary(b []byte) error {
	var res PrepInstruction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
