// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BoxInput Input information for a given box.
// Example: {"boxId":"FBA10ABC0YY100001","contentInformationSource":"BOX_CONTENT_PROVIDED","contents":[{"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantityInBox":10}],"dimensions":{"height":5,"length":3,"unitOfMeasurement":"CM","width":4},"quantity":2,"templateName":"templateName","weight":{"unit":"KG","value":5.5}}
//
// swagger:model BoxInput
type BoxInput struct {

	// The ID of the box to update that was provided by Amazon. This ID is comprised of the external shipment ID
	//         (which is generated after transportation has been confirmed) and the index of the box.
	// Max Length: 1024
	// Min Length: 1
	BoxID string `json:"boxId,omitempty"`

	// content information source
	// Required: true
	ContentInformationSource *BoxContentInformationSource `json:"contentInformationSource"`

	// The Contents of the box containing a list of MSKUs and their quantity. If `boxAttribute` is `BARCODE_2D` or `MANUAL_PROCESS`, user should provide ALL of the items that could be in the box, without specifying item quantities.
	Contents []*BoxContent `json:"contents"`

	// dimensions
	// Required: true
	Dimensions *Dimensions `json:"dimensions"`

	// The number of containers where all other properties like weight or dimensions are identical.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	Quantity *int64 `json:"quantity"`

	// The seller-provided name for a 'type' of box (or a group of boxes with the same contents), which will be used to identify all created boxes of that type. When providing bulk box information, this value must be unique from the other box types. When providing individual boxes with existing IDs, this value can be shared between many boxes that have the same contents.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	TemplateName *string `json:"templateName"`

	// weight
	// Required: true
	Weight *Weight `json:"weight"`
}

// Validate validates this box input
func (m *BoxInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoxID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentInformationSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContents(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoxInput) validateBoxID(formats strfmt.Registry) error {
	if swag.IsZero(m.BoxID) { // not required
		return nil
	}

	if err := validate.MinLength("boxId", "body", m.BoxID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("boxId", "body", m.BoxID, 1024); err != nil {
		return err
	}

	return nil
}

func (m *BoxInput) validateContentInformationSource(formats strfmt.Registry) error {

	if err := validate.Required("contentInformationSource", "body", m.ContentInformationSource); err != nil {
		return err
	}

	if err := validate.Required("contentInformationSource", "body", m.ContentInformationSource); err != nil {
		return err
	}

	if m.ContentInformationSource != nil {
		if err := m.ContentInformationSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentInformationSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentInformationSource")
			}
			return err
		}
	}

	return nil
}

func (m *BoxInput) validateContents(formats strfmt.Registry) error {
	if swag.IsZero(m.Contents) { // not required
		return nil
	}

	for i := 0; i < len(m.Contents); i++ {
		if swag.IsZero(m.Contents[i]) { // not required
			continue
		}

		if m.Contents[i] != nil {
			if err := m.Contents[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BoxInput) validateDimensions(formats strfmt.Registry) error {

	if err := validate.Required("dimensions", "body", m.Dimensions); err != nil {
		return err
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *BoxInput) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.MinimumInt("quantity", "body", *m.Quantity, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", *m.Quantity, 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *BoxInput) validateTemplateName(formats strfmt.Registry) error {

	if err := validate.Required("templateName", "body", m.TemplateName); err != nil {
		return err
	}

	if err := validate.MinLength("templateName", "body", *m.TemplateName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("templateName", "body", *m.TemplateName, 1024); err != nil {
		return err
	}

	return nil
}

func (m *BoxInput) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("weight", "body", m.Weight); err != nil {
		return err
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this box input based on the context it is used
func (m *BoxInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContentInformationSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoxInput) contextValidateContentInformationSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentInformationSource != nil {
		if err := m.ContentInformationSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentInformationSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentInformationSource")
			}
			return err
		}
	}

	return nil
}

func (m *BoxInput) contextValidateContents(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Contents); i++ {

		if m.Contents[i] != nil {
			if err := m.Contents[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("contents" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("contents" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BoxInput) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Dimensions != nil {
		if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *BoxInput) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoxInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoxInput) UnmarshalBinary(b []byte) error {
	var res BoxInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
