// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateShipmentDeliveryWindowRequest The `updateShipmentDeliveryWindow` request.
// Example: {"deliveryWindow":{"start":"2024-01-01T00:00Z"}}
//
// swagger:model UpdateShipmentDeliveryWindowRequest
type UpdateShipmentDeliveryWindowRequest struct {

	// The range of dates within which the seller expects that their shipment will be delivered to Amazon.
	//
	// Required: true
	DeliveryWindow *WindowInput `json:"deliveryWindow"`
}

// Validate validates this update shipment delivery window request
func (m *UpdateShipmentDeliveryWindowRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryWindow(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipmentDeliveryWindowRequest) validateDeliveryWindow(formats strfmt.Registry) error {

	if err := validate.Required("deliveryWindow", "body", m.DeliveryWindow); err != nil {
		return err
	}

	if m.DeliveryWindow != nil {
		if err := m.DeliveryWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryWindow")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update shipment delivery window request based on the context it is used
func (m *UpdateShipmentDeliveryWindowRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeliveryWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipmentDeliveryWindowRequest) contextValidateDeliveryWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryWindow != nil {
		if err := m.DeliveryWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShipmentDeliveryWindowRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShipmentDeliveryWindowRequest) UnmarshalBinary(b []byte) error {
	var res UpdateShipmentDeliveryWindowRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
