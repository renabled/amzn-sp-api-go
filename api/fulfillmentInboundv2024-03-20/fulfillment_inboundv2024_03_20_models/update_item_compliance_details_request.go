// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateItemComplianceDetailsRequest The `updateItemComplianceDetails` request.
// Example: {"msku":"Sunglasses","taxDetails":{"declaredValue":{"amount":5.5,"code":"CAD"},"hsnCode":"hsnCode"}}
//
// swagger:model UpdateItemComplianceDetailsRequest
type UpdateItemComplianceDetailsRequest struct {

	// The merchant SKU, a merchant-supplied identifier for a specific SKU.
	// Required: true
	// Max Length: 40
	// Min Length: 1
	Msku *string `json:"msku"`

	// tax details
	// Required: true
	TaxDetails *TaxDetails `json:"taxDetails"`
}

// Validate validates this update item compliance details request
func (m *UpdateItemComplianceDetailsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateItemComplianceDetailsRequest) validateMsku(formats strfmt.Registry) error {

	if err := validate.Required("msku", "body", m.Msku); err != nil {
		return err
	}

	if err := validate.MinLength("msku", "body", *m.Msku, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("msku", "body", *m.Msku, 40); err != nil {
		return err
	}

	return nil
}

func (m *UpdateItemComplianceDetailsRequest) validateTaxDetails(formats strfmt.Registry) error {

	if err := validate.Required("taxDetails", "body", m.TaxDetails); err != nil {
		return err
	}

	if m.TaxDetails != nil {
		if err := m.TaxDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update item compliance details request based on the context it is used
func (m *UpdateItemComplianceDetailsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaxDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateItemComplianceDetailsRequest) contextValidateTaxDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxDetails != nil {
		if err := m.TaxDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateItemComplianceDetailsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateItemComplianceDetailsRequest) UnmarshalBinary(b []byte) error {
	var res UpdateItemComplianceDetailsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
