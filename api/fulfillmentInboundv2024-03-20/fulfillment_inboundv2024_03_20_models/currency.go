// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Currency Currency definition.
//
// swagger:model Currency
type Currency struct {

	// Decimal value of the currency.
	// Required: true
	Amount *float64 `json:"amount"`

	// ISO 4217 standard of a currency code.
	// Required: true
	// Max Length: 3
	// Min Length: 3
	Code *string `json:"code"`
}

// Validate validates this currency
func (m *Currency) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Currency) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	return nil
}

func (m *Currency) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.MinLength("code", "body", *m.Code, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("code", "body", *m.Code, 3); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this currency based on context it is used
func (m *Currency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Currency) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Currency) UnmarshalBinary(b []byte) error {
	var res Currency
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
