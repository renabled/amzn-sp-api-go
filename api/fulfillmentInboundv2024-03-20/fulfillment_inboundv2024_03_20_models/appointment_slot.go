// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppointmentSlot The fulfillment center appointment slot for the transportation option.
//
// swagger:model AppointmentSlot
type AppointmentSlot struct {

	// An identifier to a self-ship appointment slot.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	SlotID *string `json:"slotId"`

	// slot time
	// Required: true
	SlotTime *AppointmentSlotTime `json:"slotTime"`
}

// Validate validates this appointment slot
func (m *AppointmentSlot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSlotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppointmentSlot) validateSlotID(formats strfmt.Registry) error {

	if err := validate.Required("slotId", "body", m.SlotID); err != nil {
		return err
	}

	if err := validate.MinLength("slotId", "body", *m.SlotID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("slotId", "body", *m.SlotID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("slotId", "body", *m.SlotID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *AppointmentSlot) validateSlotTime(formats strfmt.Registry) error {

	if err := validate.Required("slotTime", "body", m.SlotTime); err != nil {
		return err
	}

	if m.SlotTime != nil {
		if err := m.SlotTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slotTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slotTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this appointment slot based on the context it is used
func (m *AppointmentSlot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSlotTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppointmentSlot) contextValidateSlotTime(ctx context.Context, formats strfmt.Registry) error {

	if m.SlotTime != nil {
		if err := m.SlotTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slotTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slotTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppointmentSlot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppointmentSlot) UnmarshalBinary(b []byte) error {
	var res AppointmentSlot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
