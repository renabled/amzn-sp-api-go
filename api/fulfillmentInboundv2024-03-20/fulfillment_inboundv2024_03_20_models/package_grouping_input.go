// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageGroupingInput Packing information for the inbound plan.
// Example: {"boxes":[{"boxId":"boxId","contentInformationSource":"BOX_CONTENT_PROVIDED","contents":[{"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantityInBox":10}],"dimensions":{"height":5,"length":3,"unitOfMeasurement":"CM","width":4},"quantity":2,"templateName":"templateName","weight":{"unit":"KG","value":5.5}}],"packingGroupId":"pg1234abcd-1234-abcd-5678-1234abcd5678","shipmentId":"sh1234abcd-1234-abcd-5678-1234abcd5678"}
//
// swagger:model PackageGroupingInput
type PackageGroupingInput struct {

	// Box level information being provided.
	// Required: true
	// Max Items: 5000
	// Min Items: 1
	Boxes []*BoxInput `json:"boxes"`

	// The ID of the `packingGroup` that packages are grouped according to. The `PackingGroupId` can only be provided before placement confirmation, and it must belong to the confirmed `PackingOption`. One of `ShipmentId` or `PackingGroupId` must be provided with every request.
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PackingGroupID string `json:"packingGroupId,omitempty"`

	// The ID of the shipment that packages are grouped according to. The `ShipmentId` can only be provided after placement confirmation, and the shipment must belong to the confirmed placement option. One of `ShipmentId` or `PackingGroupId` must be provided with every request.
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	ShipmentID string `json:"shipmentId,omitempty"`
}

// Validate validates this package grouping input
func (m *PackageGroupingInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackingGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageGroupingInput) validateBoxes(formats strfmt.Registry) error {

	if err := validate.Required("boxes", "body", m.Boxes); err != nil {
		return err
	}

	iBoxesSize := int64(len(m.Boxes))

	if err := validate.MinItems("boxes", "body", iBoxesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("boxes", "body", iBoxesSize, 5000); err != nil {
		return err
	}

	for i := 0; i < len(m.Boxes); i++ {
		if swag.IsZero(m.Boxes[i]) { // not required
			continue
		}

		if m.Boxes[i] != nil {
			if err := m.Boxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boxes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PackageGroupingInput) validatePackingGroupID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackingGroupID) { // not required
		return nil
	}

	if err := validate.MinLength("packingGroupId", "body", m.PackingGroupID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("packingGroupId", "body", m.PackingGroupID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("packingGroupId", "body", m.PackingGroupID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PackageGroupingInput) validateShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentID) { // not required
		return nil
	}

	if err := validate.MinLength("shipmentId", "body", m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentId", "body", m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("shipmentId", "body", m.ShipmentID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this package grouping input based on the context it is used
func (m *PackageGroupingInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageGroupingInput) contextValidateBoxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Boxes); i++ {

		if m.Boxes[i] != nil {
			if err := m.Boxes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boxes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageGroupingInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageGroupingInput) UnmarshalBinary(b []byte) error {
	var res PackageGroupingInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
