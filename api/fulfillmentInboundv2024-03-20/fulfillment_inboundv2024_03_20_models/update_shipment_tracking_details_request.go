// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateShipmentTrackingDetailsRequest The `updateShipmentTrackingDetails` request.
// Example: {"trackingDetails":{"spdTrackingDetail":{"spdTrackingItems":[{"boxId":"FBA10ABC0YY100001","trackingId":"FBA10002000"}]}}}
//
// swagger:model UpdateShipmentTrackingDetailsRequest
type UpdateShipmentTrackingDetailsRequest struct {

	// tracking details
	// Required: true
	TrackingDetails *TrackingDetailsInput `json:"trackingDetails"`
}

// Validate validates this update shipment tracking details request
func (m *UpdateShipmentTrackingDetailsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTrackingDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipmentTrackingDetailsRequest) validateTrackingDetails(formats strfmt.Registry) error {

	if err := validate.Required("trackingDetails", "body", m.TrackingDetails); err != nil {
		return err
	}

	if m.TrackingDetails != nil {
		if err := m.TrackingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update shipment tracking details request based on the context it is used
func (m *UpdateShipmentTrackingDetailsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTrackingDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipmentTrackingDetailsRequest) contextValidateTrackingDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TrackingDetails != nil {
		if err := m.TrackingDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShipmentTrackingDetailsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShipmentTrackingDetailsRequest) UnmarshalBinary(b []byte) error {
	var res UpdateShipmentTrackingDetailsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
