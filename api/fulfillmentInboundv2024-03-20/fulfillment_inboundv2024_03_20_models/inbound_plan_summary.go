// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundPlanSummary A light-weight inbound plan.
// Example: {"contactInformation":{"email":"email@email.com","phoneNumber":"1234567890"},"createdAt":"2023-03-08T13:15:30Z","inboundPlanId":"wf1234abcd-1234-abcd-5678-1234abcd5678","lastUpdatedAt":"2023-03-08T13:15:30Z","marketplaceIds":["A2EUQ1WTGCTBG2"],"name":"FBA (03/08/2023, 01:15 PM)","sourceAddress":{"addressLine1":"123 example street","addressLine2":"Floor 19","city":"Toronto","companyName":"Acme","countryCode":"CA","name":"name","postalCode":"M1M1M1","stateOrProvinceCode":"ON"},"status":"ACTIVE"}
//
// swagger:model InboundPlanSummary
type InboundPlanSummary struct {

	// contact information
	// Required: true
	ContactInformation *ContactInformation `json:"contactInformation"`

	// The ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
	// Required: true
	// Format: date-time
	CreatedAt *strfmt.DateTime `json:"createdAt"`

	// Identifier to an inbound plan.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	InboundPlanID *string `json:"inboundPlanId"`

	// ISO 8601 datetime with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
	// Required: true
	// Format: date-time
	LastUpdatedAt *strfmt.DateTime `json:"lastUpdatedAt"`

	// Marketplace IDs.
	// Required: true
	MarketplaceIds []string `json:"marketplaceIds"`

	// Human-readable name of the inbound plan.
	// Required: true
	Name *string `json:"name"`

	// source address
	// Required: true
	SourceAddress *Address `json:"sourceAddress"`

	// Current status of the inbound plan. Can be 'ACTIVE', 'VOIDED', or 'SHIPPED'.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	Status *string `json:"status"`
}

// Validate validates this inbound plan summary
func (m *InboundPlanSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInboundPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundPlanSummary) validateContactInformation(formats strfmt.Registry) error {

	if err := validate.Required("contactInformation", "body", m.ContactInformation); err != nil {
		return err
	}

	if m.ContactInformation != nil {
		if err := m.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *InboundPlanSummary) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("createdAt", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InboundPlanSummary) validateInboundPlanID(formats strfmt.Registry) error {

	if err := validate.Required("inboundPlanId", "body", m.InboundPlanID); err != nil {
		return err
	}

	if err := validate.MinLength("inboundPlanId", "body", *m.InboundPlanID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("inboundPlanId", "body", *m.InboundPlanID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("inboundPlanId", "body", *m.InboundPlanID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *InboundPlanSummary) validateLastUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("lastUpdatedAt", "body", m.LastUpdatedAt); err != nil {
		return err
	}

	if err := validate.FormatOf("lastUpdatedAt", "body", "date-time", m.LastUpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InboundPlanSummary) validateMarketplaceIds(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceIds", "body", m.MarketplaceIds); err != nil {
		return err
	}

	for i := 0; i < len(m.MarketplaceIds); i++ {

		if err := validate.MinLength("marketplaceIds"+"."+strconv.Itoa(i), "body", m.MarketplaceIds[i], 1); err != nil {
			return err
		}

		if err := validate.MaxLength("marketplaceIds"+"."+strconv.Itoa(i), "body", m.MarketplaceIds[i], 256); err != nil {
			return err
		}

	}

	return nil
}

func (m *InboundPlanSummary) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *InboundPlanSummary) validateSourceAddress(formats strfmt.Registry) error {

	if err := validate.Required("sourceAddress", "body", m.SourceAddress); err != nil {
		return err
	}

	if m.SourceAddress != nil {
		if err := m.SourceAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundPlanSummary) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("status", "body", *m.Status, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", *m.Status, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inbound plan summary based on the context it is used
func (m *InboundPlanSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundPlanSummary) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInformation != nil {
		if err := m.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *InboundPlanSummary) contextValidateSourceAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceAddress != nil {
		if err := m.SourceAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sourceAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sourceAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundPlanSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundPlanSummary) UnmarshalBinary(b []byte) error {
	var res InboundPlanSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
