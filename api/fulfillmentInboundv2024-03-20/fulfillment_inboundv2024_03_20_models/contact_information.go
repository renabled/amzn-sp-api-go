// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContactInformation The seller's contact information.
// Example: {"email":"email@email.com","phoneNumber":"1234567890"}
//
// swagger:model ContactInformation
type ContactInformation struct {

	// Email address.
	// Max Length: 1024
	// Min Length: 1
	Email string `json:"email,omitempty"`

	// The name belonging to the contact. This field is required when contact information is being provided for
	//         Less-Than-Truckload (LTL) carrier shipments.
	// Max Length: 1024
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// The phone number of the seller.
	// Required: true
	// Max Length: 20
	// Min Length: 1
	PhoneNumber *string `json:"phoneNumber"`
}

// Validate validates this contact information
func (m *ContactInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContactInformation) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", m.Email, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", m.Email, 1024); err != nil {
		return err
	}

	return nil
}

func (m *ContactInformation) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 1024); err != nil {
		return err
	}

	return nil
}

func (m *ContactInformation) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumber", "body", m.PhoneNumber); err != nil {
		return err
	}

	if err := validate.MinLength("phoneNumber", "body", *m.PhoneNumber, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("phoneNumber", "body", *m.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contact information based on context it is used
func (m *ContactInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ContactInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContactInformation) UnmarshalBinary(b []byte) error {
	var res ContactInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
