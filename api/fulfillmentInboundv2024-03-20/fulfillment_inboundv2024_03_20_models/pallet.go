// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pallet Contains information about a pallet that is used in the inbound plan. The pallet is a container that holds multiple items or boxes.
//
// swagger:model Pallet
type Pallet struct {

	// dimensions
	Dimensions *Dimensions `json:"dimensions,omitempty"`

	// Primary key to uniquely identify a Package (Box or Pallet).
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PackageID *string `json:"packageId"`

	// The number of containers where all other properties like weight or dimensions are identical.
	// Maximum: 10000
	// Minimum: 1
	Quantity int64 `json:"quantity,omitempty"`

	// stackability
	Stackability Stackability `json:"stackability,omitempty"`

	// weight
	Weight *Weight `json:"weight,omitempty"`
}

// Validate validates this pallet
func (m *Pallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pallet) validateDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Pallet) validatePackageID(formats strfmt.Registry) error {

	if err := validate.Required("packageId", "body", m.PackageID); err != nil {
		return err
	}

	if err := validate.MinLength("packageId", "body", *m.PackageID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("packageId", "body", *m.PackageID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("packageId", "body", *m.PackageID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *Pallet) validateQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", m.Quantity, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", m.Quantity, 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *Pallet) validateStackability(formats strfmt.Registry) error {
	if swag.IsZero(m.Stackability) { // not required
		return nil
	}

	if err := m.Stackability.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stackability")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stackability")
		}
		return err
	}

	return nil
}

func (m *Pallet) validateWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pallet based on the context it is used
func (m *Pallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStackability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pallet) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Dimensions != nil {
		if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Pallet) contextValidateStackability(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Stackability.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stackability")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stackability")
		}
		return err
	}

	return nil
}

func (m *Pallet) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pallet) UnmarshalBinary(b []byte) error {
	var res Pallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
