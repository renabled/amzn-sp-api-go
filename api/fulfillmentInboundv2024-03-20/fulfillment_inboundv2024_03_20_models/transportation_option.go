// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationOption Contains information pertaining to a transportation option and the related carrier.
//
// swagger:model TransportationOption
type TransportationOption struct {

	// appointment slot
	AppointmentSlot *AppointmentSlot `json:"appointmentSlot,omitempty"`

	// carrier
	// Required: true
	Carrier *Carrier `json:"carrier"`

	// Identifier to an inbound plan.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	InboundPlanID *string `json:"inboundPlanId"`

	// The identifier of a placement option. A placement option represents the shipment splits and destinations of SKUs.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PlacementOptionID *string `json:"placementOptionId"`

	// quote
	Quote *Quote `json:"quote,omitempty"`

	// Identifier to a shipment. A shipment contains the boxes and units being inbounded.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	ShipmentID *string `json:"shipmentId"`

	// The shipping mode associated with the transportation option. Available modes are ground small parcel, freight less-than-truckload (LTL), freight full-truckload (FTL) palletized, freight FTL non-palletized, ocean less-than-container-load (LCL), ocean full-container load (FCL), air small parcel, and air small parcel express.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	ShippingMode *string `json:"shippingMode"`

	// The shipping solution associated with the transportation option. Available solutions are Amazon-partnered carrier or 'use your own carrier'.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	ShippingSolution *string `json:"shippingSolution"`

	// Identifier to a transportation option. A transportation option represent one option for how to send a shipment.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	TransportationOptionID *string `json:"transportationOptionId"`
}

// Validate validates this transportation option
func (m *TransportationOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointmentSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInboundPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacementOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationOption) validateAppointmentSlot(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentSlot) { // not required
		return nil
	}

	if m.AppointmentSlot != nil {
		if err := m.AppointmentSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentSlot")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) validateCarrier(formats strfmt.Registry) error {

	if err := validate.Required("carrier", "body", m.Carrier); err != nil {
		return err
	}

	if m.Carrier != nil {
		if err := m.Carrier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrier")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) validateInboundPlanID(formats strfmt.Registry) error {

	if err := validate.Required("inboundPlanId", "body", m.InboundPlanID); err != nil {
		return err
	}

	if err := validate.MinLength("inboundPlanId", "body", *m.InboundPlanID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("inboundPlanId", "body", *m.InboundPlanID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("inboundPlanId", "body", *m.InboundPlanID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validatePlacementOptionID(formats strfmt.Registry) error {

	if err := validate.Required("placementOptionId", "body", m.PlacementOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("placementOptionId", "body", *m.PlacementOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("placementOptionId", "body", *m.PlacementOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("placementOptionId", "body", *m.PlacementOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateQuote(formats strfmt.Registry) error {
	if swag.IsZero(m.Quote) { // not required
		return nil
	}

	if m.Quote != nil {
		if err := m.Quote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quote")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.MinLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("shipmentId", "body", *m.ShipmentID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateShippingMode(formats strfmt.Registry) error {

	if err := validate.Required("shippingMode", "body", m.ShippingMode); err != nil {
		return err
	}

	if err := validate.MinLength("shippingMode", "body", *m.ShippingMode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("shippingMode", "body", *m.ShippingMode, 1024); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateShippingSolution(formats strfmt.Registry) error {

	if err := validate.Required("shippingSolution", "body", m.ShippingSolution); err != nil {
		return err
	}

	if err := validate.MinLength("shippingSolution", "body", *m.ShippingSolution, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("shippingSolution", "body", *m.ShippingSolution, 1024); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateTransportationOptionID(formats strfmt.Registry) error {

	if err := validate.Required("transportationOptionId", "body", m.TransportationOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("transportationOptionId", "body", *m.TransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("transportationOptionId", "body", *m.TransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("transportationOptionId", "body", *m.TransportationOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transportation option based on the context it is used
func (m *TransportationOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointmentSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationOption) contextValidateAppointmentSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.AppointmentSlot != nil {
		if err := m.AppointmentSlot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentSlot")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) contextValidateCarrier(ctx context.Context, formats strfmt.Registry) error {

	if m.Carrier != nil {
		if err := m.Carrier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrier")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) contextValidateQuote(ctx context.Context, formats strfmt.Registry) error {

	if m.Quote != nil {
		if err := m.Quote.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportationOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationOption) UnmarshalBinary(b []byte) error {
	var res TransportationOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
