// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxDetails Information used to determine the tax compliance.
//
// swagger:model TaxDetails
type TaxDetails struct {

	// declared value
	DeclaredValue *Currency `json:"declaredValue,omitempty"`

	// Harmonized System of Nomenclature code.
	// Max Length: 1024
	// Min Length: 1
	HsnCode string `json:"hsnCode,omitempty"`

	// List of tax rates.
	TaxRates []*TaxRate `json:"taxRates"`
}

// Validate validates this tax details
func (m *TaxDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeclaredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHsnCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxRates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDetails) validateDeclaredValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DeclaredValue) { // not required
		return nil
	}

	if m.DeclaredValue != nil {
		if err := m.DeclaredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("declaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("declaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *TaxDetails) validateHsnCode(formats strfmt.Registry) error {
	if swag.IsZero(m.HsnCode) { // not required
		return nil
	}

	if err := validate.MinLength("hsnCode", "body", m.HsnCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hsnCode", "body", m.HsnCode, 1024); err != nil {
		return err
	}

	return nil
}

func (m *TaxDetails) validateTaxRates(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxRates) { // not required
		return nil
	}

	for i := 0; i < len(m.TaxRates); i++ {
		if swag.IsZero(m.TaxRates[i]) { // not required
			continue
		}

		if m.TaxRates[i] != nil {
			if err := m.TaxRates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxRates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxRates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this tax details based on the context it is used
func (m *TaxDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeclaredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDetails) contextValidateDeclaredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DeclaredValue != nil {
		if err := m.DeclaredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("declaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("declaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *TaxDetails) contextValidateTaxRates(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxRates); i++ {

		if m.TaxRates[i] != nil {
			if err := m.TaxRates[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxRates" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxRates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxDetails) UnmarshalBinary(b []byte) error {
	var res TaxDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
