// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inboundv2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OperationStatus The status of an operation.
//
// swagger:model OperationStatus
type OperationStatus string

func NewOperationStatus(value OperationStatus) *OperationStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OperationStatus.
func (m OperationStatus) Pointer() *OperationStatus {
	return &m
}

const (

	// OperationStatusSUCCESS captures enum value "SUCCESS"
	OperationStatusSUCCESS OperationStatus = "SUCCESS"

	// OperationStatusFAILED captures enum value "FAILED"
	OperationStatusFAILED OperationStatus = "FAILED"

	// OperationStatusINPROGRESS captures enum value "IN_PROGRESS"
	OperationStatusINPROGRESS OperationStatus = "IN_PROGRESS"
)

// for schema
var operationStatusEnum []interface{}

func init() {
	var res []OperationStatus
	if err := json.Unmarshal([]byte(`["SUCCESS","FAILED","IN_PROGRESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationStatusEnum = append(operationStatusEnum, v)
	}
}

func (m OperationStatus) validateOperationStatusEnum(path, location string, value OperationStatus) error {
	if err := validate.EnumCase(path, location, value, operationStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this operation status
func (m OperationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOperationStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this operation status based on context it is used
func (m OperationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
