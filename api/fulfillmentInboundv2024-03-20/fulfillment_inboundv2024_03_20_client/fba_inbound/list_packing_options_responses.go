// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// ListPackingOptionsReader is a Reader for the ListPackingOptions structure.
type ListPackingOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPackingOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPackingOptionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPackingOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPackingOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPackingOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListPackingOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListPackingOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListPackingOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPackingOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListPackingOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListPackingOptionsOK creates a ListPackingOptionsOK with default headers values
func NewListPackingOptionsOK() *ListPackingOptionsOK {
	return &ListPackingOptionsOK{}
}

/*
ListPackingOptionsOK describes a response with status code 200, with default header values.

ListPackingOptions 200 response
*/
type ListPackingOptionsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ListPackingOptionsResponse
}

// IsSuccess returns true when this list packing options o k response has a 2xx status code
func (o *ListPackingOptionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list packing options o k response has a 3xx status code
func (o *ListPackingOptionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options o k response has a 4xx status code
func (o *ListPackingOptionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing options o k response has a 5xx status code
func (o *ListPackingOptionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options o k response a status code equal to that given
func (o *ListPackingOptionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListPackingOptionsOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsOK  %+v", 200, o.Payload)
}

func (o *ListPackingOptionsOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsOK  %+v", 200, o.Payload)
}

func (o *ListPackingOptionsOK) GetPayload() *fulfillment_inboundv2024_03_20_models.ListPackingOptionsResponse {
	return o.Payload
}

func (o *ListPackingOptionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ListPackingOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsBadRequest creates a ListPackingOptionsBadRequest with default headers values
func NewListPackingOptionsBadRequest() *ListPackingOptionsBadRequest {
	return &ListPackingOptionsBadRequest{}
}

/*
ListPackingOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListPackingOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options bad request response has a 2xx status code
func (o *ListPackingOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options bad request response has a 3xx status code
func (o *ListPackingOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options bad request response has a 4xx status code
func (o *ListPackingOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing options bad request response has a 5xx status code
func (o *ListPackingOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options bad request response a status code equal to that given
func (o *ListPackingOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListPackingOptionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPackingOptionsBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPackingOptionsBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsForbidden creates a ListPackingOptionsForbidden with default headers values
func NewListPackingOptionsForbidden() *ListPackingOptionsForbidden {
	return &ListPackingOptionsForbidden{}
}

/*
ListPackingOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListPackingOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options forbidden response has a 2xx status code
func (o *ListPackingOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options forbidden response has a 3xx status code
func (o *ListPackingOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options forbidden response has a 4xx status code
func (o *ListPackingOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing options forbidden response has a 5xx status code
func (o *ListPackingOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options forbidden response a status code equal to that given
func (o *ListPackingOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListPackingOptionsForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsForbidden  %+v", 403, o.Payload)
}

func (o *ListPackingOptionsForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsForbidden  %+v", 403, o.Payload)
}

func (o *ListPackingOptionsForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsNotFound creates a ListPackingOptionsNotFound with default headers values
func NewListPackingOptionsNotFound() *ListPackingOptionsNotFound {
	return &ListPackingOptionsNotFound{}
}

/*
ListPackingOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListPackingOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options not found response has a 2xx status code
func (o *ListPackingOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options not found response has a 3xx status code
func (o *ListPackingOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options not found response has a 4xx status code
func (o *ListPackingOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing options not found response has a 5xx status code
func (o *ListPackingOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options not found response a status code equal to that given
func (o *ListPackingOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListPackingOptionsNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsNotFound  %+v", 404, o.Payload)
}

func (o *ListPackingOptionsNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsNotFound  %+v", 404, o.Payload)
}

func (o *ListPackingOptionsNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsRequestEntityTooLarge creates a ListPackingOptionsRequestEntityTooLarge with default headers values
func NewListPackingOptionsRequestEntityTooLarge() *ListPackingOptionsRequestEntityTooLarge {
	return &ListPackingOptionsRequestEntityTooLarge{}
}

/*
ListPackingOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListPackingOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options request entity too large response has a 2xx status code
func (o *ListPackingOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options request entity too large response has a 3xx status code
func (o *ListPackingOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options request entity too large response has a 4xx status code
func (o *ListPackingOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing options request entity too large response has a 5xx status code
func (o *ListPackingOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options request entity too large response a status code equal to that given
func (o *ListPackingOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListPackingOptionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListPackingOptionsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListPackingOptionsRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsUnsupportedMediaType creates a ListPackingOptionsUnsupportedMediaType with default headers values
func NewListPackingOptionsUnsupportedMediaType() *ListPackingOptionsUnsupportedMediaType {
	return &ListPackingOptionsUnsupportedMediaType{}
}

/*
ListPackingOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListPackingOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options unsupported media type response has a 2xx status code
func (o *ListPackingOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options unsupported media type response has a 3xx status code
func (o *ListPackingOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options unsupported media type response has a 4xx status code
func (o *ListPackingOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing options unsupported media type response has a 5xx status code
func (o *ListPackingOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options unsupported media type response a status code equal to that given
func (o *ListPackingOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListPackingOptionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListPackingOptionsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListPackingOptionsUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsTooManyRequests creates a ListPackingOptionsTooManyRequests with default headers values
func NewListPackingOptionsTooManyRequests() *ListPackingOptionsTooManyRequests {
	return &ListPackingOptionsTooManyRequests{}
}

/*
ListPackingOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListPackingOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options too many requests response has a 2xx status code
func (o *ListPackingOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options too many requests response has a 3xx status code
func (o *ListPackingOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options too many requests response has a 4xx status code
func (o *ListPackingOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list packing options too many requests response has a 5xx status code
func (o *ListPackingOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list packing options too many requests response a status code equal to that given
func (o *ListPackingOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListPackingOptionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListPackingOptionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListPackingOptionsTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsInternalServerError creates a ListPackingOptionsInternalServerError with default headers values
func NewListPackingOptionsInternalServerError() *ListPackingOptionsInternalServerError {
	return &ListPackingOptionsInternalServerError{}
}

/*
ListPackingOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListPackingOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options internal server error response has a 2xx status code
func (o *ListPackingOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options internal server error response has a 3xx status code
func (o *ListPackingOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options internal server error response has a 4xx status code
func (o *ListPackingOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing options internal server error response has a 5xx status code
func (o *ListPackingOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list packing options internal server error response a status code equal to that given
func (o *ListPackingOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListPackingOptionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPackingOptionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPackingOptionsInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPackingOptionsServiceUnavailable creates a ListPackingOptionsServiceUnavailable with default headers values
func NewListPackingOptionsServiceUnavailable() *ListPackingOptionsServiceUnavailable {
	return &ListPackingOptionsServiceUnavailable{}
}

/*
ListPackingOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListPackingOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list packing options service unavailable response has a 2xx status code
func (o *ListPackingOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list packing options service unavailable response has a 3xx status code
func (o *ListPackingOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list packing options service unavailable response has a 4xx status code
func (o *ListPackingOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list packing options service unavailable response has a 5xx status code
func (o *ListPackingOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list packing options service unavailable response a status code equal to that given
func (o *ListPackingOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListPackingOptionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListPackingOptionsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] listPackingOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListPackingOptionsServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPackingOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
