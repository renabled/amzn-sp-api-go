// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// ListInboundPlanBoxesReader is a Reader for the ListInboundPlanBoxes structure.
type ListInboundPlanBoxesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListInboundPlanBoxesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListInboundPlanBoxesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListInboundPlanBoxesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListInboundPlanBoxesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListInboundPlanBoxesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListInboundPlanBoxesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListInboundPlanBoxesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListInboundPlanBoxesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListInboundPlanBoxesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListInboundPlanBoxesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListInboundPlanBoxesOK creates a ListInboundPlanBoxesOK with default headers values
func NewListInboundPlanBoxesOK() *ListInboundPlanBoxesOK {
	return &ListInboundPlanBoxesOK{}
}

/*
ListInboundPlanBoxesOK describes a response with status code 200, with default header values.

ListInboundPlanBoxes 200 response
*/
type ListInboundPlanBoxesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ListInboundPlanBoxesResponse
}

// IsSuccess returns true when this list inbound plan boxes o k response has a 2xx status code
func (o *ListInboundPlanBoxesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list inbound plan boxes o k response has a 3xx status code
func (o *ListInboundPlanBoxesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes o k response has a 4xx status code
func (o *ListInboundPlanBoxesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan boxes o k response has a 5xx status code
func (o *ListInboundPlanBoxesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes o k response a status code equal to that given
func (o *ListInboundPlanBoxesOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListInboundPlanBoxesOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesOK  %+v", 200, o.Payload)
}

func (o *ListInboundPlanBoxesOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesOK  %+v", 200, o.Payload)
}

func (o *ListInboundPlanBoxesOK) GetPayload() *fulfillment_inboundv2024_03_20_models.ListInboundPlanBoxesResponse {
	return o.Payload
}

func (o *ListInboundPlanBoxesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ListInboundPlanBoxesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesBadRequest creates a ListInboundPlanBoxesBadRequest with default headers values
func NewListInboundPlanBoxesBadRequest() *ListInboundPlanBoxesBadRequest {
	return &ListInboundPlanBoxesBadRequest{}
}

/*
ListInboundPlanBoxesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListInboundPlanBoxesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes bad request response has a 2xx status code
func (o *ListInboundPlanBoxesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes bad request response has a 3xx status code
func (o *ListInboundPlanBoxesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes bad request response has a 4xx status code
func (o *ListInboundPlanBoxesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan boxes bad request response has a 5xx status code
func (o *ListInboundPlanBoxesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes bad request response a status code equal to that given
func (o *ListInboundPlanBoxesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListInboundPlanBoxesBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesBadRequest  %+v", 400, o.Payload)
}

func (o *ListInboundPlanBoxesBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesBadRequest  %+v", 400, o.Payload)
}

func (o *ListInboundPlanBoxesBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesForbidden creates a ListInboundPlanBoxesForbidden with default headers values
func NewListInboundPlanBoxesForbidden() *ListInboundPlanBoxesForbidden {
	return &ListInboundPlanBoxesForbidden{}
}

/*
ListInboundPlanBoxesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListInboundPlanBoxesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes forbidden response has a 2xx status code
func (o *ListInboundPlanBoxesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes forbidden response has a 3xx status code
func (o *ListInboundPlanBoxesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes forbidden response has a 4xx status code
func (o *ListInboundPlanBoxesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan boxes forbidden response has a 5xx status code
func (o *ListInboundPlanBoxesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes forbidden response a status code equal to that given
func (o *ListInboundPlanBoxesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListInboundPlanBoxesForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesForbidden  %+v", 403, o.Payload)
}

func (o *ListInboundPlanBoxesForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesForbidden  %+v", 403, o.Payload)
}

func (o *ListInboundPlanBoxesForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesNotFound creates a ListInboundPlanBoxesNotFound with default headers values
func NewListInboundPlanBoxesNotFound() *ListInboundPlanBoxesNotFound {
	return &ListInboundPlanBoxesNotFound{}
}

/*
ListInboundPlanBoxesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListInboundPlanBoxesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes not found response has a 2xx status code
func (o *ListInboundPlanBoxesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes not found response has a 3xx status code
func (o *ListInboundPlanBoxesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes not found response has a 4xx status code
func (o *ListInboundPlanBoxesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan boxes not found response has a 5xx status code
func (o *ListInboundPlanBoxesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes not found response a status code equal to that given
func (o *ListInboundPlanBoxesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListInboundPlanBoxesNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesNotFound  %+v", 404, o.Payload)
}

func (o *ListInboundPlanBoxesNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesNotFound  %+v", 404, o.Payload)
}

func (o *ListInboundPlanBoxesNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesRequestEntityTooLarge creates a ListInboundPlanBoxesRequestEntityTooLarge with default headers values
func NewListInboundPlanBoxesRequestEntityTooLarge() *ListInboundPlanBoxesRequestEntityTooLarge {
	return &ListInboundPlanBoxesRequestEntityTooLarge{}
}

/*
ListInboundPlanBoxesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListInboundPlanBoxesRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes request entity too large response has a 2xx status code
func (o *ListInboundPlanBoxesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes request entity too large response has a 3xx status code
func (o *ListInboundPlanBoxesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes request entity too large response has a 4xx status code
func (o *ListInboundPlanBoxesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan boxes request entity too large response has a 5xx status code
func (o *ListInboundPlanBoxesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes request entity too large response a status code equal to that given
func (o *ListInboundPlanBoxesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListInboundPlanBoxesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListInboundPlanBoxesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListInboundPlanBoxesRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesUnsupportedMediaType creates a ListInboundPlanBoxesUnsupportedMediaType with default headers values
func NewListInboundPlanBoxesUnsupportedMediaType() *ListInboundPlanBoxesUnsupportedMediaType {
	return &ListInboundPlanBoxesUnsupportedMediaType{}
}

/*
ListInboundPlanBoxesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListInboundPlanBoxesUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes unsupported media type response has a 2xx status code
func (o *ListInboundPlanBoxesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes unsupported media type response has a 3xx status code
func (o *ListInboundPlanBoxesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes unsupported media type response has a 4xx status code
func (o *ListInboundPlanBoxesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan boxes unsupported media type response has a 5xx status code
func (o *ListInboundPlanBoxesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes unsupported media type response a status code equal to that given
func (o *ListInboundPlanBoxesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListInboundPlanBoxesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListInboundPlanBoxesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListInboundPlanBoxesUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesTooManyRequests creates a ListInboundPlanBoxesTooManyRequests with default headers values
func NewListInboundPlanBoxesTooManyRequests() *ListInboundPlanBoxesTooManyRequests {
	return &ListInboundPlanBoxesTooManyRequests{}
}

/*
ListInboundPlanBoxesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListInboundPlanBoxesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes too many requests response has a 2xx status code
func (o *ListInboundPlanBoxesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes too many requests response has a 3xx status code
func (o *ListInboundPlanBoxesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes too many requests response has a 4xx status code
func (o *ListInboundPlanBoxesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan boxes too many requests response has a 5xx status code
func (o *ListInboundPlanBoxesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan boxes too many requests response a status code equal to that given
func (o *ListInboundPlanBoxesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListInboundPlanBoxesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListInboundPlanBoxesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListInboundPlanBoxesTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesInternalServerError creates a ListInboundPlanBoxesInternalServerError with default headers values
func NewListInboundPlanBoxesInternalServerError() *ListInboundPlanBoxesInternalServerError {
	return &ListInboundPlanBoxesInternalServerError{}
}

/*
ListInboundPlanBoxesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListInboundPlanBoxesInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes internal server error response has a 2xx status code
func (o *ListInboundPlanBoxesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes internal server error response has a 3xx status code
func (o *ListInboundPlanBoxesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes internal server error response has a 4xx status code
func (o *ListInboundPlanBoxesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan boxes internal server error response has a 5xx status code
func (o *ListInboundPlanBoxesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list inbound plan boxes internal server error response a status code equal to that given
func (o *ListInboundPlanBoxesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListInboundPlanBoxesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInboundPlanBoxesInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInboundPlanBoxesInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanBoxesServiceUnavailable creates a ListInboundPlanBoxesServiceUnavailable with default headers values
func NewListInboundPlanBoxesServiceUnavailable() *ListInboundPlanBoxesServiceUnavailable {
	return &ListInboundPlanBoxesServiceUnavailable{}
}

/*
ListInboundPlanBoxesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListInboundPlanBoxesServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan boxes service unavailable response has a 2xx status code
func (o *ListInboundPlanBoxesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan boxes service unavailable response has a 3xx status code
func (o *ListInboundPlanBoxesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan boxes service unavailable response has a 4xx status code
func (o *ListInboundPlanBoxesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan boxes service unavailable response has a 5xx status code
func (o *ListInboundPlanBoxesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list inbound plan boxes service unavailable response a status code equal to that given
func (o *ListInboundPlanBoxesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListInboundPlanBoxesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListInboundPlanBoxesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes][%d] listInboundPlanBoxesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListInboundPlanBoxesServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanBoxesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
