// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// ConfirmPlacementOptionReader is a Reader for the ConfirmPlacementOption structure.
type ConfirmPlacementOptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmPlacementOptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewConfirmPlacementOptionAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmPlacementOptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmPlacementOptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmPlacementOptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmPlacementOptionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmPlacementOptionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmPlacementOptionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmPlacementOptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmPlacementOptionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmPlacementOptionAccepted creates a ConfirmPlacementOptionAccepted with default headers values
func NewConfirmPlacementOptionAccepted() *ConfirmPlacementOptionAccepted {
	return &ConfirmPlacementOptionAccepted{}
}

/*
ConfirmPlacementOptionAccepted describes a response with status code 202, with default header values.

ConfirmPlacementOption 202 response
*/
type ConfirmPlacementOptionAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ConfirmPlacementOptionResponse
}

// IsSuccess returns true when this confirm placement option accepted response has a 2xx status code
func (o *ConfirmPlacementOptionAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm placement option accepted response has a 3xx status code
func (o *ConfirmPlacementOptionAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option accepted response has a 4xx status code
func (o *ConfirmPlacementOptionAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm placement option accepted response has a 5xx status code
func (o *ConfirmPlacementOptionAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option accepted response a status code equal to that given
func (o *ConfirmPlacementOptionAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ConfirmPlacementOptionAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionAccepted  %+v", 202, o.Payload)
}

func (o *ConfirmPlacementOptionAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionAccepted  %+v", 202, o.Payload)
}

func (o *ConfirmPlacementOptionAccepted) GetPayload() *fulfillment_inboundv2024_03_20_models.ConfirmPlacementOptionResponse {
	return o.Payload
}

func (o *ConfirmPlacementOptionAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ConfirmPlacementOptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionBadRequest creates a ConfirmPlacementOptionBadRequest with default headers values
func NewConfirmPlacementOptionBadRequest() *ConfirmPlacementOptionBadRequest {
	return &ConfirmPlacementOptionBadRequest{}
}

/*
ConfirmPlacementOptionBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmPlacementOptionBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option bad request response has a 2xx status code
func (o *ConfirmPlacementOptionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option bad request response has a 3xx status code
func (o *ConfirmPlacementOptionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option bad request response has a 4xx status code
func (o *ConfirmPlacementOptionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm placement option bad request response has a 5xx status code
func (o *ConfirmPlacementOptionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option bad request response a status code equal to that given
func (o *ConfirmPlacementOptionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmPlacementOptionBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmPlacementOptionBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmPlacementOptionBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionForbidden creates a ConfirmPlacementOptionForbidden with default headers values
func NewConfirmPlacementOptionForbidden() *ConfirmPlacementOptionForbidden {
	return &ConfirmPlacementOptionForbidden{}
}

/*
ConfirmPlacementOptionForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmPlacementOptionForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option forbidden response has a 2xx status code
func (o *ConfirmPlacementOptionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option forbidden response has a 3xx status code
func (o *ConfirmPlacementOptionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option forbidden response has a 4xx status code
func (o *ConfirmPlacementOptionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm placement option forbidden response has a 5xx status code
func (o *ConfirmPlacementOptionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option forbidden response a status code equal to that given
func (o *ConfirmPlacementOptionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmPlacementOptionForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmPlacementOptionForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmPlacementOptionForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionNotFound creates a ConfirmPlacementOptionNotFound with default headers values
func NewConfirmPlacementOptionNotFound() *ConfirmPlacementOptionNotFound {
	return &ConfirmPlacementOptionNotFound{}
}

/*
ConfirmPlacementOptionNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmPlacementOptionNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option not found response has a 2xx status code
func (o *ConfirmPlacementOptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option not found response has a 3xx status code
func (o *ConfirmPlacementOptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option not found response has a 4xx status code
func (o *ConfirmPlacementOptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm placement option not found response has a 5xx status code
func (o *ConfirmPlacementOptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option not found response a status code equal to that given
func (o *ConfirmPlacementOptionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmPlacementOptionNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmPlacementOptionNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmPlacementOptionNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionRequestEntityTooLarge creates a ConfirmPlacementOptionRequestEntityTooLarge with default headers values
func NewConfirmPlacementOptionRequestEntityTooLarge() *ConfirmPlacementOptionRequestEntityTooLarge {
	return &ConfirmPlacementOptionRequestEntityTooLarge{}
}

/*
ConfirmPlacementOptionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmPlacementOptionRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option request entity too large response has a 2xx status code
func (o *ConfirmPlacementOptionRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option request entity too large response has a 3xx status code
func (o *ConfirmPlacementOptionRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option request entity too large response has a 4xx status code
func (o *ConfirmPlacementOptionRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm placement option request entity too large response has a 5xx status code
func (o *ConfirmPlacementOptionRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option request entity too large response a status code equal to that given
func (o *ConfirmPlacementOptionRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ConfirmPlacementOptionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmPlacementOptionRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmPlacementOptionRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionUnsupportedMediaType creates a ConfirmPlacementOptionUnsupportedMediaType with default headers values
func NewConfirmPlacementOptionUnsupportedMediaType() *ConfirmPlacementOptionUnsupportedMediaType {
	return &ConfirmPlacementOptionUnsupportedMediaType{}
}

/*
ConfirmPlacementOptionUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmPlacementOptionUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option unsupported media type response has a 2xx status code
func (o *ConfirmPlacementOptionUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option unsupported media type response has a 3xx status code
func (o *ConfirmPlacementOptionUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option unsupported media type response has a 4xx status code
func (o *ConfirmPlacementOptionUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm placement option unsupported media type response has a 5xx status code
func (o *ConfirmPlacementOptionUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option unsupported media type response a status code equal to that given
func (o *ConfirmPlacementOptionUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ConfirmPlacementOptionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmPlacementOptionUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmPlacementOptionUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionTooManyRequests creates a ConfirmPlacementOptionTooManyRequests with default headers values
func NewConfirmPlacementOptionTooManyRequests() *ConfirmPlacementOptionTooManyRequests {
	return &ConfirmPlacementOptionTooManyRequests{}
}

/*
ConfirmPlacementOptionTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmPlacementOptionTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option too many requests response has a 2xx status code
func (o *ConfirmPlacementOptionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option too many requests response has a 3xx status code
func (o *ConfirmPlacementOptionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option too many requests response has a 4xx status code
func (o *ConfirmPlacementOptionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm placement option too many requests response has a 5xx status code
func (o *ConfirmPlacementOptionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm placement option too many requests response a status code equal to that given
func (o *ConfirmPlacementOptionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmPlacementOptionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmPlacementOptionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmPlacementOptionTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionInternalServerError creates a ConfirmPlacementOptionInternalServerError with default headers values
func NewConfirmPlacementOptionInternalServerError() *ConfirmPlacementOptionInternalServerError {
	return &ConfirmPlacementOptionInternalServerError{}
}

/*
ConfirmPlacementOptionInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmPlacementOptionInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option internal server error response has a 2xx status code
func (o *ConfirmPlacementOptionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option internal server error response has a 3xx status code
func (o *ConfirmPlacementOptionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option internal server error response has a 4xx status code
func (o *ConfirmPlacementOptionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm placement option internal server error response has a 5xx status code
func (o *ConfirmPlacementOptionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm placement option internal server error response a status code equal to that given
func (o *ConfirmPlacementOptionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmPlacementOptionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmPlacementOptionInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmPlacementOptionInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmPlacementOptionServiceUnavailable creates a ConfirmPlacementOptionServiceUnavailable with default headers values
func NewConfirmPlacementOptionServiceUnavailable() *ConfirmPlacementOptionServiceUnavailable {
	return &ConfirmPlacementOptionServiceUnavailable{}
}

/*
ConfirmPlacementOptionServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmPlacementOptionServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm placement option service unavailable response has a 2xx status code
func (o *ConfirmPlacementOptionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm placement option service unavailable response has a 3xx status code
func (o *ConfirmPlacementOptionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm placement option service unavailable response has a 4xx status code
func (o *ConfirmPlacementOptionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm placement option service unavailable response has a 5xx status code
func (o *ConfirmPlacementOptionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm placement option service unavailable response a status code equal to that given
func (o *ConfirmPlacementOptionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmPlacementOptionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmPlacementOptionServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation][%d] confirmPlacementOptionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmPlacementOptionServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmPlacementOptionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
