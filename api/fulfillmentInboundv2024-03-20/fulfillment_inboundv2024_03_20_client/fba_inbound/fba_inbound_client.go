// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new fba inbound API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fba inbound API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelInboundPlan(params *CancelInboundPlanParams, opts ...ClientOption) (*CancelInboundPlanAccepted, error)

	CancelSelfShipAppointment(params *CancelSelfShipAppointmentParams, opts ...ClientOption) (*CancelSelfShipAppointmentAccepted, error)

	ConfirmPackingOption(params *ConfirmPackingOptionParams, opts ...ClientOption) (*ConfirmPackingOptionAccepted, error)

	ConfirmPlacementOption(params *ConfirmPlacementOptionParams, opts ...ClientOption) (*ConfirmPlacementOptionAccepted, error)

	ConfirmTransportationOptions(params *ConfirmTransportationOptionsParams, opts ...ClientOption) (*ConfirmTransportationOptionsAccepted, error)

	CreateInboundPlan(params *CreateInboundPlanParams, opts ...ClientOption) (*CreateInboundPlanAccepted, error)

	GeneratePackingOptions(params *GeneratePackingOptionsParams, opts ...ClientOption) (*GeneratePackingOptionsAccepted, error)

	GeneratePlacementOptions(params *GeneratePlacementOptionsParams, opts ...ClientOption) (*GeneratePlacementOptionsAccepted, error)

	GenerateSelfShipAppointmentSlots(params *GenerateSelfShipAppointmentSlotsParams, opts ...ClientOption) (*GenerateSelfShipAppointmentSlotsCreated, error)

	GenerateTransportationOptions(params *GenerateTransportationOptionsParams, opts ...ClientOption) (*GenerateTransportationOptionsAccepted, error)

	GetDeliveryChallanDocument(params *GetDeliveryChallanDocumentParams, opts ...ClientOption) (*GetDeliveryChallanDocumentOK, error)

	GetInboundOperationStatus(params *GetInboundOperationStatusParams, opts ...ClientOption) (*GetInboundOperationStatusOK, error)

	GetInboundPlan(params *GetInboundPlanParams, opts ...ClientOption) (*GetInboundPlanOK, error)

	GetSelfShipAppointmentSlots(params *GetSelfShipAppointmentSlotsParams, opts ...ClientOption) (*GetSelfShipAppointmentSlotsOK, error)

	GetShipment(params *GetShipmentParams, opts ...ClientOption) (*GetShipmentOK, error)

	ListInboundPlanBoxes(params *ListInboundPlanBoxesParams, opts ...ClientOption) (*ListInboundPlanBoxesOK, error)

	ListInboundPlanItems(params *ListInboundPlanItemsParams, opts ...ClientOption) (*ListInboundPlanItemsOK, error)

	ListInboundPlanPallets(params *ListInboundPlanPalletsParams, opts ...ClientOption) (*ListInboundPlanPalletsOK, error)

	ListInboundPlans(params *ListInboundPlansParams, opts ...ClientOption) (*ListInboundPlansOK, error)

	ListItemComplianceDetails(params *ListItemComplianceDetailsParams, opts ...ClientOption) (*ListItemComplianceDetailsOK, error)

	ListPackingGroupItems(params *ListPackingGroupItemsParams, opts ...ClientOption) (*ListPackingGroupItemsOK, error)

	ListPackingOptions(params *ListPackingOptionsParams, opts ...ClientOption) (*ListPackingOptionsOK, error)

	ListPlacementOptions(params *ListPlacementOptionsParams, opts ...ClientOption) (*ListPlacementOptionsOK, error)

	ListTransportationOptions(params *ListTransportationOptionsParams, opts ...ClientOption) (*ListTransportationOptionsOK, error)

	ScheduleSelfShipAppointment(params *ScheduleSelfShipAppointmentParams, opts ...ClientOption) (*ScheduleSelfShipAppointmentOK, error)

	SetPackingInformation(params *SetPackingInformationParams, opts ...ClientOption) (*SetPackingInformationAccepted, error)

	UpdateItemComplianceDetails(params *UpdateItemComplianceDetailsParams, opts ...ClientOption) (*UpdateItemComplianceDetailsAccepted, error)

	UpdateShipmentDeliveryWindow(params *UpdateShipmentDeliveryWindowParams, opts ...ClientOption) (*UpdateShipmentDeliveryWindowAccepted, error)

	UpdateShipmentTrackingDetails(params *UpdateShipmentTrackingDetailsParams, opts ...ClientOption) (*UpdateShipmentTrackingDetailsAccepted, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CancelInboundPlan Cancels an Inbound Plan. Charges may apply if the cancellation is performed outside of a void window. The window
	  for Amazon Partnered Carriers is 24 hours for Small Parcel Delivery (SPD) and one hour for Less-Than-Truckload (LTL) carrier shipments.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) CancelInboundPlan(params *CancelInboundPlanParams, opts ...ClientOption) (*CancelInboundPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelInboundPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelInboundPlan",
		Method:             "PUT",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/cancellation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelInboundPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelInboundPlanAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelInboundPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CancelSelfShipAppointment Cancels a self-ship appointment slot against a shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) CancelSelfShipAppointment(params *CancelSelfShipAppointmentParams, opts ...ClientOption) (*CancelSelfShipAppointmentAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelSelfShipAppointmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelSelfShipAppointment",
		Method:             "PUT",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/cancellation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelSelfShipAppointmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelSelfShipAppointmentAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelSelfShipAppointment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ConfirmPackingOption Confirms the packing option for an inbound plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ConfirmPackingOption(params *ConfirmPackingOptionParams, opts ...ClientOption) (*ConfirmPackingOptionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmPackingOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "confirmPackingOption",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/confirmation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmPackingOptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmPackingOptionAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmPackingOption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ConfirmPlacementOption Confirms the placement option for an inbound plan. Once confirmed, it cannot be changed for the Inbound Plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ConfirmPlacementOption(params *ConfirmPlacementOptionParams, opts ...ClientOption) (*ConfirmPlacementOptionAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmPlacementOptionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "confirmPlacementOption",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions/{placementOptionId}/confirmation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmPlacementOptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmPlacementOptionAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmPlacementOption: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ConfirmTransportationOptions Confirms all the transportation options for an inbound plan. A placement option must be confirmed prior to use of this API. Once confirmed, new transportation options can not be generated or confirmed for the Inbound Plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ConfirmTransportationOptions(params *ConfirmTransportationOptionsParams, opts ...ClientOption) (*ConfirmTransportationOptionsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmTransportationOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "confirmTransportationOptions",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions/confirmation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmTransportationOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmTransportationOptionsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmTransportationOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateInboundPlan Creates an inbound plan. An inbound plan contains all the necessary information to send shipments into Amazon's fufillment network.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) CreateInboundPlan(params *CreateInboundPlanParams, opts ...ClientOption) (*CreateInboundPlanAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInboundPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInboundPlan",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInboundPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInboundPlanAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInboundPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GeneratePackingOptions Generates available packing options for the inbound plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GeneratePackingOptions(params *GeneratePackingOptionsParams, opts ...ClientOption) (*GeneratePackingOptionsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneratePackingOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generatePackingOptions",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneratePackingOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneratePackingOptionsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generatePackingOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GeneratePlacementOptions Generates placement options for the inbound plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GeneratePlacementOptions(params *GeneratePlacementOptionsParams, opts ...ClientOption) (*GeneratePlacementOptionsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGeneratePlacementOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generatePlacementOptions",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GeneratePlacementOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GeneratePlacementOptionsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generatePlacementOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GenerateSelfShipAppointmentSlots Initiates the process of generating the appointment slots list.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GenerateSelfShipAppointmentSlots(params *GenerateSelfShipAppointmentSlotsParams, opts ...ClientOption) (*GenerateSelfShipAppointmentSlotsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateSelfShipAppointmentSlotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateSelfShipAppointmentSlots",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateSelfShipAppointmentSlotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateSelfShipAppointmentSlotsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateSelfShipAppointmentSlots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GenerateTransportationOptions Generates available transportation options for a given placement option.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GenerateTransportationOptions(params *GenerateTransportationOptionsParams, opts ...ClientOption) (*GenerateTransportationOptionsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateTransportationOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateTransportationOptions",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateTransportationOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateTransportationOptionsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateTransportationOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetDeliveryChallanDocument Provide delivery challan document for PCP transportation in IN marketplace.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetDeliveryChallanDocument(params *GetDeliveryChallanDocumentParams, opts ...ClientOption) (*GetDeliveryChallanDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeliveryChallanDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getDeliveryChallanDocument",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryChallanDocument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDeliveryChallanDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDeliveryChallanDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getDeliveryChallanDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInboundOperationStatus Gets the status of the processing of an asynchronous API call.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetInboundOperationStatus(params *GetInboundOperationStatusParams, opts ...ClientOption) (*GetInboundOperationStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundOperationStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInboundOperationStatus",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/operations/{operationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundOperationStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundOperationStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInboundOperationStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInboundPlan Fetches the top level information about an inbound plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetInboundPlan(params *GetInboundPlanParams, opts ...ClientOption) (*GetInboundPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInboundPlan",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInboundPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetSelfShipAppointmentSlots Retrieves a list of available self-ship appointment slots used to drop off a shipment at a warehouse.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetSelfShipAppointmentSlots(params *GetSelfShipAppointmentSlotsParams, opts ...ClientOption) (*GetSelfShipAppointmentSlotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSelfShipAppointmentSlotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSelfShipAppointmentSlots",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSelfShipAppointmentSlotsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSelfShipAppointmentSlotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSelfShipAppointmentSlots: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetShipment Provides the full details for a specific shipment within an inbound plan. The `transportationOptionId` inside `acceptedTransportationSelection` can be used to retrieve the transportation details for the shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetShipment(params *GetShipmentParams, opts ...ClientOption) (*GetShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShipment",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListInboundPlanBoxes Provides a paginated list of box packages in an inbound plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListInboundPlanBoxes(params *ListInboundPlanBoxesParams, opts ...ClientOption) (*ListInboundPlanBoxesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInboundPlanBoxesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInboundPlanBoxes",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/boxes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInboundPlanBoxesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInboundPlanBoxesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listInboundPlanBoxes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListInboundPlanItems Provides a paginated list of item packages in an inbound plan.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListInboundPlanItems(params *ListInboundPlanItemsParams, opts ...ClientOption) (*ListInboundPlanItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInboundPlanItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInboundPlanItems",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInboundPlanItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInboundPlanItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listInboundPlanItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListInboundPlanPallets Provides a paginated list of pallet packages in an inbound plan. An inbound plan will have pallets when the related details are provided after generating Less-Than-Truckload (LTL) carrier shipments.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListInboundPlanPallets(params *ListInboundPlanPalletsParams, opts ...ClientOption) (*ListInboundPlanPalletsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInboundPlanPalletsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInboundPlanPallets",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/pallets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInboundPlanPalletsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInboundPlanPalletsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listInboundPlanPallets: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListInboundPlans Provides a list of inbound plans with minimal information.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListInboundPlans(params *ListInboundPlansParams, opts ...ClientOption) (*ListInboundPlansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInboundPlansParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInboundPlans",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInboundPlansReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInboundPlansOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listInboundPlans: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListItemComplianceDetails List the inbound compliance details for MSKUs in a given marketplace.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListItemComplianceDetails(params *ListItemComplianceDetailsParams, opts ...ClientOption) (*ListItemComplianceDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListItemComplianceDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listItemComplianceDetails",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/items/compliance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListItemComplianceDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListItemComplianceDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listItemComplianceDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListPackingGroupItems Retrieves a list of all items in a packing options's packing group. Packing options must first be generated by the corresponding endpoint before packing group items can be listed.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListPackingGroupItems(params *ListPackingGroupItemsParams, opts ...ClientOption) (*ListPackingGroupItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPackingGroupItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPackingGroupItems",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions/{packingOptionId}/packingGroups/{packingGroupId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPackingGroupItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPackingGroupItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPackingGroupItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListPackingOptions Retrieves a list of all packing options for an inbound plan. Packing options must first be generated by the corresponding endpoint before becoming available.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListPackingOptions(params *ListPackingOptionsParams, opts ...ClientOption) (*ListPackingOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPackingOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPackingOptions",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPackingOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPackingOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPackingOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListPlacementOptions Provides a list of all placement options for an inbound plan. Placement options must first be generated by the corresponding endpoint before becoming available.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListPlacementOptions(params *ListPlacementOptionsParams, opts ...ClientOption) (*ListPlacementOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPlacementOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listPlacementOptions",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/placementOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPlacementOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListPlacementOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listPlacementOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ListTransportationOptions Retrieves all transportation options for a shipment. Transportation options must first be generated by the corresponding endpoint before becoming available.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ListTransportationOptions(params *ListTransportationOptionsParams, opts ...ClientOption) (*ListTransportationOptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListTransportationOptionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listTransportationOptions",
		Method:             "GET",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/transportationOptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListTransportationOptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListTransportationOptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listTransportationOptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ScheduleSelfShipAppointment Confirms or reschedules a self-ship appointment slot against a shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) ScheduleSelfShipAppointment(params *ScheduleSelfShipAppointmentParams, opts ...ClientOption) (*ScheduleSelfShipAppointmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewScheduleSelfShipAppointmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "scheduleSelfShipAppointment",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/selfShipAppointmentSlots/{slotId}/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ScheduleSelfShipAppointmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ScheduleSelfShipAppointmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for scheduleSelfShipAppointment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SetPackingInformation Sets packing information for an inbound plan. This should be called after an inbound plan is created to populate
	  the box level information required for planning and transportation estimates.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 0.05 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) SetPackingInformation(params *SetPackingInformationParams, opts ...ClientOption) (*SetPackingInformationAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetPackingInformationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "setPackingInformation",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SetPackingInformationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetPackingInformationAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for setPackingInformation: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateItemComplianceDetails Update compliance details for list of MSKUs. The details provided here are only used for the IN marketplace compliance validation.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) UpdateItemComplianceDetails(params *UpdateItemComplianceDetailsParams, opts ...ClientOption) (*UpdateItemComplianceDetailsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateItemComplianceDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateItemComplianceDetails",
		Method:             "PUT",
		PathPattern:        "/inbound/fba/2024-03-20/items/compliance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateItemComplianceDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateItemComplianceDetailsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateItemComplianceDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateShipmentDeliveryWindow Update the time window that a shipment will be delivered to the warehouse. The window is used to provide the expected time that a non-Amazon partnered carrier will arrive at the warehouse.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) UpdateShipmentDeliveryWindow(params *UpdateShipmentDeliveryWindowParams, opts ...ClientOption) (*UpdateShipmentDeliveryWindowAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateShipmentDeliveryWindowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateShipmentDeliveryWindow",
		Method:             "POST",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateShipmentDeliveryWindowReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateShipmentDeliveryWindowAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateShipmentDeliveryWindow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateShipmentTrackingDetails Updates a shipment's tracking details.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1 | 1 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, refer to [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) UpdateShipmentTrackingDetails(params *UpdateShipmentTrackingDetailsParams, opts ...ClientOption) (*UpdateShipmentTrackingDetailsAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateShipmentTrackingDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateShipmentTrackingDetails",
		Method:             "PUT",
		PathPattern:        "/inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/trackingDetails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateShipmentTrackingDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateShipmentTrackingDetailsAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateShipmentTrackingDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
