// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// UpdateShipmentDeliveryWindowReader is a Reader for the UpdateShipmentDeliveryWindow structure.
type UpdateShipmentDeliveryWindowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateShipmentDeliveryWindowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateShipmentDeliveryWindowAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateShipmentDeliveryWindowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateShipmentDeliveryWindowForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateShipmentDeliveryWindowNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateShipmentDeliveryWindowRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateShipmentDeliveryWindowUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateShipmentDeliveryWindowTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateShipmentDeliveryWindowInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateShipmentDeliveryWindowServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateShipmentDeliveryWindowAccepted creates a UpdateShipmentDeliveryWindowAccepted with default headers values
func NewUpdateShipmentDeliveryWindowAccepted() *UpdateShipmentDeliveryWindowAccepted {
	return &UpdateShipmentDeliveryWindowAccepted{}
}

/*
UpdateShipmentDeliveryWindowAccepted describes a response with status code 202, with default header values.

UpdateShipmentDeliveryWindow 202 response
*/
type UpdateShipmentDeliveryWindowAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.UpdateShipmentDeliveryWindowResponse
}

// IsSuccess returns true when this update shipment delivery window accepted response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update shipment delivery window accepted response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window accepted response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment delivery window accepted response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window accepted response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateShipmentDeliveryWindowAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowAccepted  %+v", 202, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowAccepted  %+v", 202, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowAccepted) GetPayload() *fulfillment_inboundv2024_03_20_models.UpdateShipmentDeliveryWindowResponse {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.UpdateShipmentDeliveryWindowResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowBadRequest creates a UpdateShipmentDeliveryWindowBadRequest with default headers values
func NewUpdateShipmentDeliveryWindowBadRequest() *UpdateShipmentDeliveryWindowBadRequest {
	return &UpdateShipmentDeliveryWindowBadRequest{}
}

/*
UpdateShipmentDeliveryWindowBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateShipmentDeliveryWindowBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window bad request response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window bad request response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window bad request response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment delivery window bad request response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window bad request response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateShipmentDeliveryWindowBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowForbidden creates a UpdateShipmentDeliveryWindowForbidden with default headers values
func NewUpdateShipmentDeliveryWindowForbidden() *UpdateShipmentDeliveryWindowForbidden {
	return &UpdateShipmentDeliveryWindowForbidden{}
}

/*
UpdateShipmentDeliveryWindowForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateShipmentDeliveryWindowForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window forbidden response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window forbidden response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window forbidden response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment delivery window forbidden response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window forbidden response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateShipmentDeliveryWindowForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowForbidden  %+v", 403, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowNotFound creates a UpdateShipmentDeliveryWindowNotFound with default headers values
func NewUpdateShipmentDeliveryWindowNotFound() *UpdateShipmentDeliveryWindowNotFound {
	return &UpdateShipmentDeliveryWindowNotFound{}
}

/*
UpdateShipmentDeliveryWindowNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateShipmentDeliveryWindowNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window not found response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window not found response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window not found response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment delivery window not found response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window not found response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateShipmentDeliveryWindowNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowNotFound  %+v", 404, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowRequestEntityTooLarge creates a UpdateShipmentDeliveryWindowRequestEntityTooLarge with default headers values
func NewUpdateShipmentDeliveryWindowRequestEntityTooLarge() *UpdateShipmentDeliveryWindowRequestEntityTooLarge {
	return &UpdateShipmentDeliveryWindowRequestEntityTooLarge{}
}

/*
UpdateShipmentDeliveryWindowRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateShipmentDeliveryWindowRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window request entity too large response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window request entity too large response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window request entity too large response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment delivery window request entity too large response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window request entity too large response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowUnsupportedMediaType creates a UpdateShipmentDeliveryWindowUnsupportedMediaType with default headers values
func NewUpdateShipmentDeliveryWindowUnsupportedMediaType() *UpdateShipmentDeliveryWindowUnsupportedMediaType {
	return &UpdateShipmentDeliveryWindowUnsupportedMediaType{}
}

/*
UpdateShipmentDeliveryWindowUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateShipmentDeliveryWindowUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window unsupported media type response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window unsupported media type response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window unsupported media type response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment delivery window unsupported media type response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window unsupported media type response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowTooManyRequests creates a UpdateShipmentDeliveryWindowTooManyRequests with default headers values
func NewUpdateShipmentDeliveryWindowTooManyRequests() *UpdateShipmentDeliveryWindowTooManyRequests {
	return &UpdateShipmentDeliveryWindowTooManyRequests{}
}

/*
UpdateShipmentDeliveryWindowTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateShipmentDeliveryWindowTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window too many requests response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window too many requests response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window too many requests response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment delivery window too many requests response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment delivery window too many requests response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateShipmentDeliveryWindowTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowInternalServerError creates a UpdateShipmentDeliveryWindowInternalServerError with default headers values
func NewUpdateShipmentDeliveryWindowInternalServerError() *UpdateShipmentDeliveryWindowInternalServerError {
	return &UpdateShipmentDeliveryWindowInternalServerError{}
}

/*
UpdateShipmentDeliveryWindowInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateShipmentDeliveryWindowInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window internal server error response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window internal server error response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window internal server error response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment delivery window internal server error response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update shipment delivery window internal server error response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateShipmentDeliveryWindowInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentDeliveryWindowServiceUnavailable creates a UpdateShipmentDeliveryWindowServiceUnavailable with default headers values
func NewUpdateShipmentDeliveryWindowServiceUnavailable() *UpdateShipmentDeliveryWindowServiceUnavailable {
	return &UpdateShipmentDeliveryWindowServiceUnavailable{}
}

/*
UpdateShipmentDeliveryWindowServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateShipmentDeliveryWindowServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment delivery window service unavailable response has a 2xx status code
func (o *UpdateShipmentDeliveryWindowServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment delivery window service unavailable response has a 3xx status code
func (o *UpdateShipmentDeliveryWindowServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment delivery window service unavailable response has a 4xx status code
func (o *UpdateShipmentDeliveryWindowServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment delivery window service unavailable response has a 5xx status code
func (o *UpdateShipmentDeliveryWindowServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update shipment delivery window service unavailable response a status code equal to that given
func (o *UpdateShipmentDeliveryWindowServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateShipmentDeliveryWindowServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindow][%d] updateShipmentDeliveryWindowServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateShipmentDeliveryWindowServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentDeliveryWindowServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
