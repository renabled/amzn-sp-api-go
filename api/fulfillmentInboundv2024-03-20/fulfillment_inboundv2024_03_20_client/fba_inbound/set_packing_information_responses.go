// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// SetPackingInformationReader is a Reader for the SetPackingInformation structure.
type SetPackingInformationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPackingInformationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSetPackingInformationAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetPackingInformationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetPackingInformationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetPackingInformationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSetPackingInformationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSetPackingInformationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetPackingInformationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetPackingInformationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSetPackingInformationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetPackingInformationAccepted creates a SetPackingInformationAccepted with default headers values
func NewSetPackingInformationAccepted() *SetPackingInformationAccepted {
	return &SetPackingInformationAccepted{}
}

/*
SetPackingInformationAccepted describes a response with status code 202, with default header values.

SetPackingInformation 202 response
*/
type SetPackingInformationAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.SetPackingInformationResponse
}

// IsSuccess returns true when this set packing information accepted response has a 2xx status code
func (o *SetPackingInformationAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set packing information accepted response has a 3xx status code
func (o *SetPackingInformationAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information accepted response has a 4xx status code
func (o *SetPackingInformationAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this set packing information accepted response has a 5xx status code
func (o *SetPackingInformationAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information accepted response a status code equal to that given
func (o *SetPackingInformationAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *SetPackingInformationAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationAccepted  %+v", 202, o.Payload)
}

func (o *SetPackingInformationAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationAccepted  %+v", 202, o.Payload)
}

func (o *SetPackingInformationAccepted) GetPayload() *fulfillment_inboundv2024_03_20_models.SetPackingInformationResponse {
	return o.Payload
}

func (o *SetPackingInformationAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.SetPackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationBadRequest creates a SetPackingInformationBadRequest with default headers values
func NewSetPackingInformationBadRequest() *SetPackingInformationBadRequest {
	return &SetPackingInformationBadRequest{}
}

/*
SetPackingInformationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SetPackingInformationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information bad request response has a 2xx status code
func (o *SetPackingInformationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information bad request response has a 3xx status code
func (o *SetPackingInformationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information bad request response has a 4xx status code
func (o *SetPackingInformationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set packing information bad request response has a 5xx status code
func (o *SetPackingInformationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information bad request response a status code equal to that given
func (o *SetPackingInformationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SetPackingInformationBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationBadRequest  %+v", 400, o.Payload)
}

func (o *SetPackingInformationBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationBadRequest  %+v", 400, o.Payload)
}

func (o *SetPackingInformationBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationForbidden creates a SetPackingInformationForbidden with default headers values
func NewSetPackingInformationForbidden() *SetPackingInformationForbidden {
	return &SetPackingInformationForbidden{}
}

/*
SetPackingInformationForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SetPackingInformationForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information forbidden response has a 2xx status code
func (o *SetPackingInformationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information forbidden response has a 3xx status code
func (o *SetPackingInformationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information forbidden response has a 4xx status code
func (o *SetPackingInformationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set packing information forbidden response has a 5xx status code
func (o *SetPackingInformationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information forbidden response a status code equal to that given
func (o *SetPackingInformationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SetPackingInformationForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationForbidden  %+v", 403, o.Payload)
}

func (o *SetPackingInformationForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationForbidden  %+v", 403, o.Payload)
}

func (o *SetPackingInformationForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationNotFound creates a SetPackingInformationNotFound with default headers values
func NewSetPackingInformationNotFound() *SetPackingInformationNotFound {
	return &SetPackingInformationNotFound{}
}

/*
SetPackingInformationNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SetPackingInformationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information not found response has a 2xx status code
func (o *SetPackingInformationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information not found response has a 3xx status code
func (o *SetPackingInformationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information not found response has a 4xx status code
func (o *SetPackingInformationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set packing information not found response has a 5xx status code
func (o *SetPackingInformationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information not found response a status code equal to that given
func (o *SetPackingInformationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SetPackingInformationNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationNotFound  %+v", 404, o.Payload)
}

func (o *SetPackingInformationNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationNotFound  %+v", 404, o.Payload)
}

func (o *SetPackingInformationNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationRequestEntityTooLarge creates a SetPackingInformationRequestEntityTooLarge with default headers values
func NewSetPackingInformationRequestEntityTooLarge() *SetPackingInformationRequestEntityTooLarge {
	return &SetPackingInformationRequestEntityTooLarge{}
}

/*
SetPackingInformationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SetPackingInformationRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information request entity too large response has a 2xx status code
func (o *SetPackingInformationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information request entity too large response has a 3xx status code
func (o *SetPackingInformationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information request entity too large response has a 4xx status code
func (o *SetPackingInformationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this set packing information request entity too large response has a 5xx status code
func (o *SetPackingInformationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information request entity too large response a status code equal to that given
func (o *SetPackingInformationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *SetPackingInformationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SetPackingInformationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SetPackingInformationRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationUnsupportedMediaType creates a SetPackingInformationUnsupportedMediaType with default headers values
func NewSetPackingInformationUnsupportedMediaType() *SetPackingInformationUnsupportedMediaType {
	return &SetPackingInformationUnsupportedMediaType{}
}

/*
SetPackingInformationUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SetPackingInformationUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information unsupported media type response has a 2xx status code
func (o *SetPackingInformationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information unsupported media type response has a 3xx status code
func (o *SetPackingInformationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information unsupported media type response has a 4xx status code
func (o *SetPackingInformationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this set packing information unsupported media type response has a 5xx status code
func (o *SetPackingInformationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information unsupported media type response a status code equal to that given
func (o *SetPackingInformationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *SetPackingInformationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SetPackingInformationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SetPackingInformationUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationTooManyRequests creates a SetPackingInformationTooManyRequests with default headers values
func NewSetPackingInformationTooManyRequests() *SetPackingInformationTooManyRequests {
	return &SetPackingInformationTooManyRequests{}
}

/*
SetPackingInformationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SetPackingInformationTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information too many requests response has a 2xx status code
func (o *SetPackingInformationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information too many requests response has a 3xx status code
func (o *SetPackingInformationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information too many requests response has a 4xx status code
func (o *SetPackingInformationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set packing information too many requests response has a 5xx status code
func (o *SetPackingInformationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set packing information too many requests response a status code equal to that given
func (o *SetPackingInformationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SetPackingInformationTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetPackingInformationTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetPackingInformationTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationInternalServerError creates a SetPackingInformationInternalServerError with default headers values
func NewSetPackingInformationInternalServerError() *SetPackingInformationInternalServerError {
	return &SetPackingInformationInternalServerError{}
}

/*
SetPackingInformationInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SetPackingInformationInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information internal server error response has a 2xx status code
func (o *SetPackingInformationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information internal server error response has a 3xx status code
func (o *SetPackingInformationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information internal server error response has a 4xx status code
func (o *SetPackingInformationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set packing information internal server error response has a 5xx status code
func (o *SetPackingInformationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set packing information internal server error response a status code equal to that given
func (o *SetPackingInformationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SetPackingInformationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationInternalServerError  %+v", 500, o.Payload)
}

func (o *SetPackingInformationInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationInternalServerError  %+v", 500, o.Payload)
}

func (o *SetPackingInformationInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPackingInformationServiceUnavailable creates a SetPackingInformationServiceUnavailable with default headers values
func NewSetPackingInformationServiceUnavailable() *SetPackingInformationServiceUnavailable {
	return &SetPackingInformationServiceUnavailable{}
}

/*
SetPackingInformationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SetPackingInformationServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set packing information service unavailable response has a 2xx status code
func (o *SetPackingInformationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set packing information service unavailable response has a 3xx status code
func (o *SetPackingInformationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set packing information service unavailable response has a 4xx status code
func (o *SetPackingInformationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this set packing information service unavailable response has a 5xx status code
func (o *SetPackingInformationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this set packing information service unavailable response a status code equal to that given
func (o *SetPackingInformationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SetPackingInformationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SetPackingInformationServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingInformation][%d] setPackingInformationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SetPackingInformationServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPackingInformationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
