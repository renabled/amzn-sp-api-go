// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// ListInboundPlanItemsReader is a Reader for the ListInboundPlanItems structure.
type ListInboundPlanItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListInboundPlanItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListInboundPlanItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListInboundPlanItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListInboundPlanItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListInboundPlanItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListInboundPlanItemsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListInboundPlanItemsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListInboundPlanItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListInboundPlanItemsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListInboundPlanItemsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListInboundPlanItemsOK creates a ListInboundPlanItemsOK with default headers values
func NewListInboundPlanItemsOK() *ListInboundPlanItemsOK {
	return &ListInboundPlanItemsOK{}
}

/*
ListInboundPlanItemsOK describes a response with status code 200, with default header values.

ListInboundPlanItems 200 response
*/
type ListInboundPlanItemsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ListInboundPlanItemsResponse
}

// IsSuccess returns true when this list inbound plan items o k response has a 2xx status code
func (o *ListInboundPlanItemsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list inbound plan items o k response has a 3xx status code
func (o *ListInboundPlanItemsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items o k response has a 4xx status code
func (o *ListInboundPlanItemsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan items o k response has a 5xx status code
func (o *ListInboundPlanItemsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items o k response a status code equal to that given
func (o *ListInboundPlanItemsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListInboundPlanItemsOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsOK  %+v", 200, o.Payload)
}

func (o *ListInboundPlanItemsOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsOK  %+v", 200, o.Payload)
}

func (o *ListInboundPlanItemsOK) GetPayload() *fulfillment_inboundv2024_03_20_models.ListInboundPlanItemsResponse {
	return o.Payload
}

func (o *ListInboundPlanItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ListInboundPlanItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsBadRequest creates a ListInboundPlanItemsBadRequest with default headers values
func NewListInboundPlanItemsBadRequest() *ListInboundPlanItemsBadRequest {
	return &ListInboundPlanItemsBadRequest{}
}

/*
ListInboundPlanItemsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListInboundPlanItemsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items bad request response has a 2xx status code
func (o *ListInboundPlanItemsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items bad request response has a 3xx status code
func (o *ListInboundPlanItemsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items bad request response has a 4xx status code
func (o *ListInboundPlanItemsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan items bad request response has a 5xx status code
func (o *ListInboundPlanItemsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items bad request response a status code equal to that given
func (o *ListInboundPlanItemsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListInboundPlanItemsBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsBadRequest  %+v", 400, o.Payload)
}

func (o *ListInboundPlanItemsBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsBadRequest  %+v", 400, o.Payload)
}

func (o *ListInboundPlanItemsBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsForbidden creates a ListInboundPlanItemsForbidden with default headers values
func NewListInboundPlanItemsForbidden() *ListInboundPlanItemsForbidden {
	return &ListInboundPlanItemsForbidden{}
}

/*
ListInboundPlanItemsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListInboundPlanItemsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items forbidden response has a 2xx status code
func (o *ListInboundPlanItemsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items forbidden response has a 3xx status code
func (o *ListInboundPlanItemsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items forbidden response has a 4xx status code
func (o *ListInboundPlanItemsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan items forbidden response has a 5xx status code
func (o *ListInboundPlanItemsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items forbidden response a status code equal to that given
func (o *ListInboundPlanItemsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListInboundPlanItemsForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsForbidden  %+v", 403, o.Payload)
}

func (o *ListInboundPlanItemsForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsForbidden  %+v", 403, o.Payload)
}

func (o *ListInboundPlanItemsForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsNotFound creates a ListInboundPlanItemsNotFound with default headers values
func NewListInboundPlanItemsNotFound() *ListInboundPlanItemsNotFound {
	return &ListInboundPlanItemsNotFound{}
}

/*
ListInboundPlanItemsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListInboundPlanItemsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items not found response has a 2xx status code
func (o *ListInboundPlanItemsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items not found response has a 3xx status code
func (o *ListInboundPlanItemsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items not found response has a 4xx status code
func (o *ListInboundPlanItemsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan items not found response has a 5xx status code
func (o *ListInboundPlanItemsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items not found response a status code equal to that given
func (o *ListInboundPlanItemsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListInboundPlanItemsNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsNotFound  %+v", 404, o.Payload)
}

func (o *ListInboundPlanItemsNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsNotFound  %+v", 404, o.Payload)
}

func (o *ListInboundPlanItemsNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsRequestEntityTooLarge creates a ListInboundPlanItemsRequestEntityTooLarge with default headers values
func NewListInboundPlanItemsRequestEntityTooLarge() *ListInboundPlanItemsRequestEntityTooLarge {
	return &ListInboundPlanItemsRequestEntityTooLarge{}
}

/*
ListInboundPlanItemsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListInboundPlanItemsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items request entity too large response has a 2xx status code
func (o *ListInboundPlanItemsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items request entity too large response has a 3xx status code
func (o *ListInboundPlanItemsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items request entity too large response has a 4xx status code
func (o *ListInboundPlanItemsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan items request entity too large response has a 5xx status code
func (o *ListInboundPlanItemsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items request entity too large response a status code equal to that given
func (o *ListInboundPlanItemsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListInboundPlanItemsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListInboundPlanItemsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListInboundPlanItemsRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsUnsupportedMediaType creates a ListInboundPlanItemsUnsupportedMediaType with default headers values
func NewListInboundPlanItemsUnsupportedMediaType() *ListInboundPlanItemsUnsupportedMediaType {
	return &ListInboundPlanItemsUnsupportedMediaType{}
}

/*
ListInboundPlanItemsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListInboundPlanItemsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items unsupported media type response has a 2xx status code
func (o *ListInboundPlanItemsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items unsupported media type response has a 3xx status code
func (o *ListInboundPlanItemsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items unsupported media type response has a 4xx status code
func (o *ListInboundPlanItemsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan items unsupported media type response has a 5xx status code
func (o *ListInboundPlanItemsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items unsupported media type response a status code equal to that given
func (o *ListInboundPlanItemsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListInboundPlanItemsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListInboundPlanItemsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListInboundPlanItemsUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsTooManyRequests creates a ListInboundPlanItemsTooManyRequests with default headers values
func NewListInboundPlanItemsTooManyRequests() *ListInboundPlanItemsTooManyRequests {
	return &ListInboundPlanItemsTooManyRequests{}
}

/*
ListInboundPlanItemsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListInboundPlanItemsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items too many requests response has a 2xx status code
func (o *ListInboundPlanItemsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items too many requests response has a 3xx status code
func (o *ListInboundPlanItemsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items too many requests response has a 4xx status code
func (o *ListInboundPlanItemsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inbound plan items too many requests response has a 5xx status code
func (o *ListInboundPlanItemsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list inbound plan items too many requests response a status code equal to that given
func (o *ListInboundPlanItemsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListInboundPlanItemsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListInboundPlanItemsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListInboundPlanItemsTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsInternalServerError creates a ListInboundPlanItemsInternalServerError with default headers values
func NewListInboundPlanItemsInternalServerError() *ListInboundPlanItemsInternalServerError {
	return &ListInboundPlanItemsInternalServerError{}
}

/*
ListInboundPlanItemsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListInboundPlanItemsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items internal server error response has a 2xx status code
func (o *ListInboundPlanItemsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items internal server error response has a 3xx status code
func (o *ListInboundPlanItemsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items internal server error response has a 4xx status code
func (o *ListInboundPlanItemsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan items internal server error response has a 5xx status code
func (o *ListInboundPlanItemsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list inbound plan items internal server error response a status code equal to that given
func (o *ListInboundPlanItemsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListInboundPlanItemsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInboundPlanItemsInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInboundPlanItemsInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInboundPlanItemsServiceUnavailable creates a ListInboundPlanItemsServiceUnavailable with default headers values
func NewListInboundPlanItemsServiceUnavailable() *ListInboundPlanItemsServiceUnavailable {
	return &ListInboundPlanItemsServiceUnavailable{}
}

/*
ListInboundPlanItemsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListInboundPlanItemsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list inbound plan items service unavailable response has a 2xx status code
func (o *ListInboundPlanItemsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inbound plan items service unavailable response has a 3xx status code
func (o *ListInboundPlanItemsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inbound plan items service unavailable response has a 4xx status code
func (o *ListInboundPlanItemsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inbound plan items service unavailable response has a 5xx status code
func (o *ListInboundPlanItemsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list inbound plan items service unavailable response a status code equal to that given
func (o *ListInboundPlanItemsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListInboundPlanItemsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListInboundPlanItemsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/items][%d] listInboundPlanItemsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListInboundPlanItemsServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListInboundPlanItemsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
