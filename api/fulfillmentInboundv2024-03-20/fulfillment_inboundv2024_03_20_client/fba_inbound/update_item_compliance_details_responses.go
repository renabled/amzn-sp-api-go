// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundv2024-03-20/fulfillment_inboundv2024_03_20_models"
)

// UpdateItemComplianceDetailsReader is a Reader for the UpdateItemComplianceDetails structure.
type UpdateItemComplianceDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateItemComplianceDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewUpdateItemComplianceDetailsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateItemComplianceDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateItemComplianceDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateItemComplianceDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateItemComplianceDetailsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateItemComplianceDetailsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateItemComplianceDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateItemComplianceDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateItemComplianceDetailsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateItemComplianceDetailsAccepted creates a UpdateItemComplianceDetailsAccepted with default headers values
func NewUpdateItemComplianceDetailsAccepted() *UpdateItemComplianceDetailsAccepted {
	return &UpdateItemComplianceDetailsAccepted{}
}

/*
UpdateItemComplianceDetailsAccepted describes a response with status code 202, with default header values.

UpdateItemComplianceDetails 202 response
*/
type UpdateItemComplianceDetailsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.UpdateItemComplianceDetailsResponse
}

// IsSuccess returns true when this update item compliance details accepted response has a 2xx status code
func (o *UpdateItemComplianceDetailsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update item compliance details accepted response has a 3xx status code
func (o *UpdateItemComplianceDetailsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details accepted response has a 4xx status code
func (o *UpdateItemComplianceDetailsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this update item compliance details accepted response has a 5xx status code
func (o *UpdateItemComplianceDetailsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details accepted response a status code equal to that given
func (o *UpdateItemComplianceDetailsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *UpdateItemComplianceDetailsAccepted) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsAccepted  %+v", 202, o.Payload)
}

func (o *UpdateItemComplianceDetailsAccepted) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsAccepted  %+v", 202, o.Payload)
}

func (o *UpdateItemComplianceDetailsAccepted) GetPayload() *fulfillment_inboundv2024_03_20_models.UpdateItemComplianceDetailsResponse {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.UpdateItemComplianceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsBadRequest creates a UpdateItemComplianceDetailsBadRequest with default headers values
func NewUpdateItemComplianceDetailsBadRequest() *UpdateItemComplianceDetailsBadRequest {
	return &UpdateItemComplianceDetailsBadRequest{}
}

/*
UpdateItemComplianceDetailsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateItemComplianceDetailsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details bad request response has a 2xx status code
func (o *UpdateItemComplianceDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details bad request response has a 3xx status code
func (o *UpdateItemComplianceDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details bad request response has a 4xx status code
func (o *UpdateItemComplianceDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update item compliance details bad request response has a 5xx status code
func (o *UpdateItemComplianceDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details bad request response a status code equal to that given
func (o *UpdateItemComplianceDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateItemComplianceDetailsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateItemComplianceDetailsBadRequest) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateItemComplianceDetailsBadRequest) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsForbidden creates a UpdateItemComplianceDetailsForbidden with default headers values
func NewUpdateItemComplianceDetailsForbidden() *UpdateItemComplianceDetailsForbidden {
	return &UpdateItemComplianceDetailsForbidden{}
}

/*
UpdateItemComplianceDetailsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateItemComplianceDetailsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details forbidden response has a 2xx status code
func (o *UpdateItemComplianceDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details forbidden response has a 3xx status code
func (o *UpdateItemComplianceDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details forbidden response has a 4xx status code
func (o *UpdateItemComplianceDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update item compliance details forbidden response has a 5xx status code
func (o *UpdateItemComplianceDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details forbidden response a status code equal to that given
func (o *UpdateItemComplianceDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateItemComplianceDetailsForbidden) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateItemComplianceDetailsForbidden) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateItemComplianceDetailsForbidden) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsNotFound creates a UpdateItemComplianceDetailsNotFound with default headers values
func NewUpdateItemComplianceDetailsNotFound() *UpdateItemComplianceDetailsNotFound {
	return &UpdateItemComplianceDetailsNotFound{}
}

/*
UpdateItemComplianceDetailsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateItemComplianceDetailsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details not found response has a 2xx status code
func (o *UpdateItemComplianceDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details not found response has a 3xx status code
func (o *UpdateItemComplianceDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details not found response has a 4xx status code
func (o *UpdateItemComplianceDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update item compliance details not found response has a 5xx status code
func (o *UpdateItemComplianceDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details not found response a status code equal to that given
func (o *UpdateItemComplianceDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateItemComplianceDetailsNotFound) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateItemComplianceDetailsNotFound) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateItemComplianceDetailsNotFound) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsRequestEntityTooLarge creates a UpdateItemComplianceDetailsRequestEntityTooLarge with default headers values
func NewUpdateItemComplianceDetailsRequestEntityTooLarge() *UpdateItemComplianceDetailsRequestEntityTooLarge {
	return &UpdateItemComplianceDetailsRequestEntityTooLarge{}
}

/*
UpdateItemComplianceDetailsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateItemComplianceDetailsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details request entity too large response has a 2xx status code
func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details request entity too large response has a 3xx status code
func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details request entity too large response has a 4xx status code
func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update item compliance details request entity too large response has a 5xx status code
func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details request entity too large response a status code equal to that given
func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsUnsupportedMediaType creates a UpdateItemComplianceDetailsUnsupportedMediaType with default headers values
func NewUpdateItemComplianceDetailsUnsupportedMediaType() *UpdateItemComplianceDetailsUnsupportedMediaType {
	return &UpdateItemComplianceDetailsUnsupportedMediaType{}
}

/*
UpdateItemComplianceDetailsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateItemComplianceDetailsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details unsupported media type response has a 2xx status code
func (o *UpdateItemComplianceDetailsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details unsupported media type response has a 3xx status code
func (o *UpdateItemComplianceDetailsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details unsupported media type response has a 4xx status code
func (o *UpdateItemComplianceDetailsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update item compliance details unsupported media type response has a 5xx status code
func (o *UpdateItemComplianceDetailsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details unsupported media type response a status code equal to that given
func (o *UpdateItemComplianceDetailsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateItemComplianceDetailsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateItemComplianceDetailsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateItemComplianceDetailsUnsupportedMediaType) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsTooManyRequests creates a UpdateItemComplianceDetailsTooManyRequests with default headers values
func NewUpdateItemComplianceDetailsTooManyRequests() *UpdateItemComplianceDetailsTooManyRequests {
	return &UpdateItemComplianceDetailsTooManyRequests{}
}

/*
UpdateItemComplianceDetailsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateItemComplianceDetailsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details too many requests response has a 2xx status code
func (o *UpdateItemComplianceDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details too many requests response has a 3xx status code
func (o *UpdateItemComplianceDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details too many requests response has a 4xx status code
func (o *UpdateItemComplianceDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update item compliance details too many requests response has a 5xx status code
func (o *UpdateItemComplianceDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update item compliance details too many requests response a status code equal to that given
func (o *UpdateItemComplianceDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateItemComplianceDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateItemComplianceDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateItemComplianceDetailsTooManyRequests) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsInternalServerError creates a UpdateItemComplianceDetailsInternalServerError with default headers values
func NewUpdateItemComplianceDetailsInternalServerError() *UpdateItemComplianceDetailsInternalServerError {
	return &UpdateItemComplianceDetailsInternalServerError{}
}

/*
UpdateItemComplianceDetailsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateItemComplianceDetailsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details internal server error response has a 2xx status code
func (o *UpdateItemComplianceDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details internal server error response has a 3xx status code
func (o *UpdateItemComplianceDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details internal server error response has a 4xx status code
func (o *UpdateItemComplianceDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update item compliance details internal server error response has a 5xx status code
func (o *UpdateItemComplianceDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update item compliance details internal server error response a status code equal to that given
func (o *UpdateItemComplianceDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateItemComplianceDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateItemComplianceDetailsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateItemComplianceDetailsInternalServerError) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateItemComplianceDetailsServiceUnavailable creates a UpdateItemComplianceDetailsServiceUnavailable with default headers values
func NewUpdateItemComplianceDetailsServiceUnavailable() *UpdateItemComplianceDetailsServiceUnavailable {
	return &UpdateItemComplianceDetailsServiceUnavailable{}
}

/*
UpdateItemComplianceDetailsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateItemComplianceDetailsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inboundv2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update item compliance details service unavailable response has a 2xx status code
func (o *UpdateItemComplianceDetailsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update item compliance details service unavailable response has a 3xx status code
func (o *UpdateItemComplianceDetailsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update item compliance details service unavailable response has a 4xx status code
func (o *UpdateItemComplianceDetailsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update item compliance details service unavailable response has a 5xx status code
func (o *UpdateItemComplianceDetailsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update item compliance details service unavailable response a status code equal to that given
func (o *UpdateItemComplianceDetailsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateItemComplianceDetailsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateItemComplianceDetailsServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/items/compliance][%d] updateItemComplianceDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateItemComplianceDetailsServiceUnavailable) GetPayload() *fulfillment_inboundv2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateItemComplianceDetailsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inboundv2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
