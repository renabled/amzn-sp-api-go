// Code generated by go-swagger; DO NOT EDIT.

package messaging_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateUnexpectedProblemRequest The request schema for the createUnexpectedProblem operation.
//
// swagger:model CreateUnexpectedProblemRequest
type CreateUnexpectedProblemRequest struct {

	// The text to be sent to the buyer. Only links related to unexpected problem calls are allowed. Do not include HTML or email addresses. The text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
	// Max Length: 2000
	// Min Length: 1
	Text string `json:"text,omitempty"`
}

// Validate validates this create unexpected problem request
func (m *CreateUnexpectedProblemRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateUnexpectedProblemRequest) validateText(formats strfmt.Registry) error {
	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if err := validate.MinLength("text", "body", m.Text, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("text", "body", m.Text, 2000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create unexpected problem request based on context it is used
func (m *CreateUnexpectedProblemRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateUnexpectedProblemRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateUnexpectedProblemRequest) UnmarshalBinary(b []byte) error {
	var res CreateUnexpectedProblemRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
