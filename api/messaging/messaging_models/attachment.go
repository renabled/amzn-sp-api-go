// Code generated by go-swagger; DO NOT EDIT.

package messaging_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Attachment Represents a file uploaded to a destination that was created by the createUploadDestination operation of the Uploads API.
//
// swagger:model Attachment
type Attachment struct {

	// The name of the file, including the extension. This is the file name that will appear in the message. This does not need to match the file name of the file that you uploaded.
	// Required: true
	FileName *string `json:"fileName"`

	// The identifier of the upload destination. Get this value by calling the createUploadDestination operation of the Uploads API.
	// Required: true
	UploadDestinationID *string `json:"uploadDestinationId"`
}

// Validate validates this attachment
func (m *Attachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadDestinationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Attachment) validateFileName(formats strfmt.Registry) error {

	if err := validate.Required("fileName", "body", m.FileName); err != nil {
		return err
	}

	return nil
}

func (m *Attachment) validateUploadDestinationID(formats strfmt.Registry) error {

	if err := validate.Required("uploadDestinationId", "body", m.UploadDestinationID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this attachment based on context it is used
func (m *Attachment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Attachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Attachment) UnmarshalBinary(b []byte) error {
	var res Attachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
