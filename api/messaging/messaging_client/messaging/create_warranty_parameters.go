// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/xamandar/amzn-sp-api-go/api/messaging/messaging_models"
)

// NewCreateWarrantyParams creates a new CreateWarrantyParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateWarrantyParams() *CreateWarrantyParams {
	return &CreateWarrantyParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateWarrantyParamsWithTimeout creates a new CreateWarrantyParams object
// with the ability to set a timeout on a request.
func NewCreateWarrantyParamsWithTimeout(timeout time.Duration) *CreateWarrantyParams {
	return &CreateWarrantyParams{
		timeout: timeout,
	}
}

// NewCreateWarrantyParamsWithContext creates a new CreateWarrantyParams object
// with the ability to set a context for a request.
func NewCreateWarrantyParamsWithContext(ctx context.Context) *CreateWarrantyParams {
	return &CreateWarrantyParams{
		Context: ctx,
	}
}

// NewCreateWarrantyParamsWithHTTPClient creates a new CreateWarrantyParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateWarrantyParamsWithHTTPClient(client *http.Client) *CreateWarrantyParams {
	return &CreateWarrantyParams{
		HTTPClient: client,
	}
}

/*
CreateWarrantyParams contains all the parameters to send to the API endpoint

	for the create warranty operation.

	Typically these are written to a http.Request.
*/
type CreateWarrantyParams struct {

	/* AmazonOrderID.

	   An Amazon order identifier. This specifies the order for which a message is sent.
	*/
	AmazonOrderID string

	// Body.
	Body *messaging_models.CreateWarrantyRequest

	/* MarketplaceIds.

	   A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
	*/
	MarketplaceIds []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create warranty params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWarrantyParams) WithDefaults() *CreateWarrantyParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create warranty params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateWarrantyParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create warranty params
func (o *CreateWarrantyParams) WithTimeout(timeout time.Duration) *CreateWarrantyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create warranty params
func (o *CreateWarrantyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create warranty params
func (o *CreateWarrantyParams) WithContext(ctx context.Context) *CreateWarrantyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create warranty params
func (o *CreateWarrantyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create warranty params
func (o *CreateWarrantyParams) WithHTTPClient(client *http.Client) *CreateWarrantyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create warranty params
func (o *CreateWarrantyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAmazonOrderID adds the amazonOrderID to the create warranty params
func (o *CreateWarrantyParams) WithAmazonOrderID(amazonOrderID string) *CreateWarrantyParams {
	o.SetAmazonOrderID(amazonOrderID)
	return o
}

// SetAmazonOrderID adds the amazonOrderId to the create warranty params
func (o *CreateWarrantyParams) SetAmazonOrderID(amazonOrderID string) {
	o.AmazonOrderID = amazonOrderID
}

// WithBody adds the body to the create warranty params
func (o *CreateWarrantyParams) WithBody(body *messaging_models.CreateWarrantyRequest) *CreateWarrantyParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the create warranty params
func (o *CreateWarrantyParams) SetBody(body *messaging_models.CreateWarrantyRequest) {
	o.Body = body
}

// WithMarketplaceIds adds the marketplaceIds to the create warranty params
func (o *CreateWarrantyParams) WithMarketplaceIds(marketplaceIds []string) *CreateWarrantyParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the create warranty params
func (o *CreateWarrantyParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WriteToRequest writes these params to a swagger request
func (o *CreateWarrantyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param amazonOrderId
	if err := r.SetPathParam("amazonOrderId", o.AmazonOrderID); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCreateWarranty binds the parameter marketplaceIds
func (o *CreateWarrantyParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: ""
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "")

	return marketplaceIdsIS
}
