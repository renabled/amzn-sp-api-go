// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/messaging/messaging_models"
)

// GetMessagingActionsForOrderReader is a Reader for the GetMessagingActionsForOrder structure.
type GetMessagingActionsForOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMessagingActionsForOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMessagingActionsForOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMessagingActionsForOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMessagingActionsForOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMessagingActionsForOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetMessagingActionsForOrderRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetMessagingActionsForOrderUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMessagingActionsForOrderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMessagingActionsForOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMessagingActionsForOrderServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMessagingActionsForOrderOK creates a GetMessagingActionsForOrderOK with default headers values
func NewGetMessagingActionsForOrderOK() *GetMessagingActionsForOrderOK {
	return &GetMessagingActionsForOrderOK{}
}

/* GetMessagingActionsForOrderOK describes a response with status code 200, with default header values.

Returns hypermedia links under the _links.actions key that specify which messaging actions are allowed for the order.
*/
type GetMessagingActionsForOrderOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderOK) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderOK  %+v", 200, o.Payload)
}
func (o *GetMessagingActionsForOrderOK) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderBadRequest creates a GetMessagingActionsForOrderBadRequest with default headers values
func NewGetMessagingActionsForOrderBadRequest() *GetMessagingActionsForOrderBadRequest {
	return &GetMessagingActionsForOrderBadRequest{}
}

/* GetMessagingActionsForOrderBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetMessagingActionsForOrderBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderBadRequest) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderBadRequest  %+v", 400, o.Payload)
}
func (o *GetMessagingActionsForOrderBadRequest) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderForbidden creates a GetMessagingActionsForOrderForbidden with default headers values
func NewGetMessagingActionsForOrderForbidden() *GetMessagingActionsForOrderForbidden {
	return &GetMessagingActionsForOrderForbidden{}
}

/* GetMessagingActionsForOrderForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetMessagingActionsForOrderForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderForbidden) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderForbidden  %+v", 403, o.Payload)
}
func (o *GetMessagingActionsForOrderForbidden) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderNotFound creates a GetMessagingActionsForOrderNotFound with default headers values
func NewGetMessagingActionsForOrderNotFound() *GetMessagingActionsForOrderNotFound {
	return &GetMessagingActionsForOrderNotFound{}
}

/* GetMessagingActionsForOrderNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetMessagingActionsForOrderNotFound struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderNotFound) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderNotFound  %+v", 404, o.Payload)
}
func (o *GetMessagingActionsForOrderNotFound) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderRequestEntityTooLarge creates a GetMessagingActionsForOrderRequestEntityTooLarge with default headers values
func NewGetMessagingActionsForOrderRequestEntityTooLarge() *GetMessagingActionsForOrderRequestEntityTooLarge {
	return &GetMessagingActionsForOrderRequestEntityTooLarge{}
}

/* GetMessagingActionsForOrderRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetMessagingActionsForOrderRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetMessagingActionsForOrderRequestEntityTooLarge) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderUnsupportedMediaType creates a GetMessagingActionsForOrderUnsupportedMediaType with default headers values
func NewGetMessagingActionsForOrderUnsupportedMediaType() *GetMessagingActionsForOrderUnsupportedMediaType {
	return &GetMessagingActionsForOrderUnsupportedMediaType{}
}

/* GetMessagingActionsForOrderUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetMessagingActionsForOrderUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetMessagingActionsForOrderUnsupportedMediaType) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderTooManyRequests creates a GetMessagingActionsForOrderTooManyRequests with default headers values
func NewGetMessagingActionsForOrderTooManyRequests() *GetMessagingActionsForOrderTooManyRequests {
	return &GetMessagingActionsForOrderTooManyRequests{}
}

/* GetMessagingActionsForOrderTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetMessagingActionsForOrderTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetMessagingActionsForOrderTooManyRequests) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderInternalServerError creates a GetMessagingActionsForOrderInternalServerError with default headers values
func NewGetMessagingActionsForOrderInternalServerError() *GetMessagingActionsForOrderInternalServerError {
	return &GetMessagingActionsForOrderInternalServerError{}
}

/* GetMessagingActionsForOrderInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetMessagingActionsForOrderInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderInternalServerError  %+v", 500, o.Payload)
}
func (o *GetMessagingActionsForOrderInternalServerError) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMessagingActionsForOrderServiceUnavailable creates a GetMessagingActionsForOrderServiceUnavailable with default headers values
func NewGetMessagingActionsForOrderServiceUnavailable() *GetMessagingActionsForOrderServiceUnavailable {
	return &GetMessagingActionsForOrderServiceUnavailable{}
}

/* GetMessagingActionsForOrderServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetMessagingActionsForOrderServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *messaging_models.GetMessagingActionsForOrderResponse
}

func (o *GetMessagingActionsForOrderServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}][%d] getMessagingActionsForOrderServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetMessagingActionsForOrderServiceUnavailable) GetPayload() *messaging_models.GetMessagingActionsForOrderResponse {
	return o.Payload
}

func (o *GetMessagingActionsForOrderServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(messaging_models.GetMessagingActionsForOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
