// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/messaging/messaging_models"
)

// CreateAmazonMotorsReader is a Reader for the CreateAmazonMotors structure.
type CreateAmazonMotorsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateAmazonMotorsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateAmazonMotorsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateAmazonMotorsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateAmazonMotorsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateAmazonMotorsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateAmazonMotorsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateAmazonMotorsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateAmazonMotorsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateAmazonMotorsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateAmazonMotorsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateAmazonMotorsCreated creates a CreateAmazonMotorsCreated with default headers values
func NewCreateAmazonMotorsCreated() *CreateAmazonMotorsCreated {
	return &CreateAmazonMotorsCreated{}
}

/* CreateAmazonMotorsCreated describes a response with status code 201, with default header values.

The message was created for the order.
*/
type CreateAmazonMotorsCreated struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsCreated) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsCreated  %+v", 201, o.Payload)
}
func (o *CreateAmazonMotorsCreated) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsBadRequest creates a CreateAmazonMotorsBadRequest with default headers values
func NewCreateAmazonMotorsBadRequest() *CreateAmazonMotorsBadRequest {
	return &CreateAmazonMotorsBadRequest{}
}

/* CreateAmazonMotorsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateAmazonMotorsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsBadRequest) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsBadRequest  %+v", 400, o.Payload)
}
func (o *CreateAmazonMotorsBadRequest) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsForbidden creates a CreateAmazonMotorsForbidden with default headers values
func NewCreateAmazonMotorsForbidden() *CreateAmazonMotorsForbidden {
	return &CreateAmazonMotorsForbidden{}
}

/* CreateAmazonMotorsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateAmazonMotorsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsForbidden) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsForbidden  %+v", 403, o.Payload)
}
func (o *CreateAmazonMotorsForbidden) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsNotFound creates a CreateAmazonMotorsNotFound with default headers values
func NewCreateAmazonMotorsNotFound() *CreateAmazonMotorsNotFound {
	return &CreateAmazonMotorsNotFound{}
}

/* CreateAmazonMotorsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateAmazonMotorsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsNotFound) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsNotFound  %+v", 404, o.Payload)
}
func (o *CreateAmazonMotorsNotFound) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsRequestEntityTooLarge creates a CreateAmazonMotorsRequestEntityTooLarge with default headers values
func NewCreateAmazonMotorsRequestEntityTooLarge() *CreateAmazonMotorsRequestEntityTooLarge {
	return &CreateAmazonMotorsRequestEntityTooLarge{}
}

/* CreateAmazonMotorsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateAmazonMotorsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *CreateAmazonMotorsRequestEntityTooLarge) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsUnsupportedMediaType creates a CreateAmazonMotorsUnsupportedMediaType with default headers values
func NewCreateAmazonMotorsUnsupportedMediaType() *CreateAmazonMotorsUnsupportedMediaType {
	return &CreateAmazonMotorsUnsupportedMediaType{}
}

/* CreateAmazonMotorsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateAmazonMotorsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *CreateAmazonMotorsUnsupportedMediaType) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsTooManyRequests creates a CreateAmazonMotorsTooManyRequests with default headers values
func NewCreateAmazonMotorsTooManyRequests() *CreateAmazonMotorsTooManyRequests {
	return &CreateAmazonMotorsTooManyRequests{}
}

/* CreateAmazonMotorsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateAmazonMotorsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsTooManyRequests  %+v", 429, o.Payload)
}
func (o *CreateAmazonMotorsTooManyRequests) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsInternalServerError creates a CreateAmazonMotorsInternalServerError with default headers values
func NewCreateAmazonMotorsInternalServerError() *CreateAmazonMotorsInternalServerError {
	return &CreateAmazonMotorsInternalServerError{}
}

/* CreateAmazonMotorsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateAmazonMotorsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateAmazonMotorsInternalServerError) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateAmazonMotorsServiceUnavailable creates a CreateAmazonMotorsServiceUnavailable with default headers values
func NewCreateAmazonMotorsServiceUnavailable() *CreateAmazonMotorsServiceUnavailable {
	return &CreateAmazonMotorsServiceUnavailable{}
}

/* CreateAmazonMotorsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateAmazonMotorsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateAmazonMotorsResponse
}

func (o *CreateAmazonMotorsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/amazonMotors][%d] createAmazonMotorsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CreateAmazonMotorsServiceUnavailable) GetPayload() *messaging_models.CreateAmazonMotorsResponse {
	return o.Payload
}

func (o *CreateAmazonMotorsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateAmazonMotorsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
