// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/messaging/messaging_models"
)

// GetAttributesReader is a Reader for the GetAttributes structure.
type GetAttributesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAttributesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAttributesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAttributesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAttributesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAttributesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAttributesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAttributesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAttributesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAttributesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAttributesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAttributesOK creates a GetAttributesOK with default headers values
func NewGetAttributesOK() *GetAttributesOK {
	return &GetAttributesOK{}
}

/* GetAttributesOK describes a response with status code 200, with default header values.

Response has successfully been returned.
*/
type GetAttributesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesOK) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesOK  %+v", 200, o.Payload)
}
func (o *GetAttributesOK) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesBadRequest creates a GetAttributesBadRequest with default headers values
func NewGetAttributesBadRequest() *GetAttributesBadRequest {
	return &GetAttributesBadRequest{}
}

/* GetAttributesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAttributesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesBadRequest) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesBadRequest  %+v", 400, o.Payload)
}
func (o *GetAttributesBadRequest) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesForbidden creates a GetAttributesForbidden with default headers values
func NewGetAttributesForbidden() *GetAttributesForbidden {
	return &GetAttributesForbidden{}
}

/* GetAttributesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAttributesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesForbidden) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesForbidden  %+v", 403, o.Payload)
}
func (o *GetAttributesForbidden) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesNotFound creates a GetAttributesNotFound with default headers values
func NewGetAttributesNotFound() *GetAttributesNotFound {
	return &GetAttributesNotFound{}
}

/* GetAttributesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetAttributesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesNotFound) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesNotFound  %+v", 404, o.Payload)
}
func (o *GetAttributesNotFound) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesRequestEntityTooLarge creates a GetAttributesRequestEntityTooLarge with default headers values
func NewGetAttributesRequestEntityTooLarge() *GetAttributesRequestEntityTooLarge {
	return &GetAttributesRequestEntityTooLarge{}
}

/* GetAttributesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetAttributesRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetAttributesRequestEntityTooLarge) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesUnsupportedMediaType creates a GetAttributesUnsupportedMediaType with default headers values
func NewGetAttributesUnsupportedMediaType() *GetAttributesUnsupportedMediaType {
	return &GetAttributesUnsupportedMediaType{}
}

/* GetAttributesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetAttributesUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetAttributesUnsupportedMediaType) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesTooManyRequests creates a GetAttributesTooManyRequests with default headers values
func NewGetAttributesTooManyRequests() *GetAttributesTooManyRequests {
	return &GetAttributesTooManyRequests{}
}

/* GetAttributesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAttributesTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetAttributesTooManyRequests) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesInternalServerError creates a GetAttributesInternalServerError with default headers values
func NewGetAttributesInternalServerError() *GetAttributesInternalServerError {
	return &GetAttributesInternalServerError{}
}

/* GetAttributesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAttributesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesInternalServerError  %+v", 500, o.Payload)
}
func (o *GetAttributesInternalServerError) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAttributesServiceUnavailable creates a GetAttributesServiceUnavailable with default headers values
func NewGetAttributesServiceUnavailable() *GetAttributesServiceUnavailable {
	return &GetAttributesServiceUnavailable{}
}

/* GetAttributesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAttributesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.GetAttributesResponse
}

func (o *GetAttributesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /messaging/v1/orders/{amazonOrderId}/attributes][%d] getAttributesServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetAttributesServiceUnavailable) GetPayload() *messaging_models.GetAttributesResponse {
	return o.Payload
}

func (o *GetAttributesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.GetAttributesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
