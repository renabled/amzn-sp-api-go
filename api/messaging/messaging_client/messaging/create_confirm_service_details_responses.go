// Code generated by go-swagger; DO NOT EDIT.

package messaging

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/messaging/messaging_models"
)

// CreateConfirmServiceDetailsReader is a Reader for the CreateConfirmServiceDetails structure.
type CreateConfirmServiceDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateConfirmServiceDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateConfirmServiceDetailsCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateConfirmServiceDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateConfirmServiceDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateConfirmServiceDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateConfirmServiceDetailsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateConfirmServiceDetailsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateConfirmServiceDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateConfirmServiceDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateConfirmServiceDetailsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateConfirmServiceDetailsCreated creates a CreateConfirmServiceDetailsCreated with default headers values
func NewCreateConfirmServiceDetailsCreated() *CreateConfirmServiceDetailsCreated {
	return &CreateConfirmServiceDetailsCreated{}
}

/*
CreateConfirmServiceDetailsCreated describes a response with status code 201, with default header values.

The message was created for the order.
*/
type CreateConfirmServiceDetailsCreated struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details created response has a 2xx status code
func (o *CreateConfirmServiceDetailsCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create confirm service details created response has a 3xx status code
func (o *CreateConfirmServiceDetailsCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details created response has a 4xx status code
func (o *CreateConfirmServiceDetailsCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create confirm service details created response has a 5xx status code
func (o *CreateConfirmServiceDetailsCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details created response a status code equal to that given
func (o *CreateConfirmServiceDetailsCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateConfirmServiceDetailsCreated) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsCreated  %+v", 201, o.Payload)
}

func (o *CreateConfirmServiceDetailsCreated) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsCreated  %+v", 201, o.Payload)
}

func (o *CreateConfirmServiceDetailsCreated) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsBadRequest creates a CreateConfirmServiceDetailsBadRequest with default headers values
func NewCreateConfirmServiceDetailsBadRequest() *CreateConfirmServiceDetailsBadRequest {
	return &CreateConfirmServiceDetailsBadRequest{}
}

/*
CreateConfirmServiceDetailsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateConfirmServiceDetailsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details bad request response has a 2xx status code
func (o *CreateConfirmServiceDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details bad request response has a 3xx status code
func (o *CreateConfirmServiceDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details bad request response has a 4xx status code
func (o *CreateConfirmServiceDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create confirm service details bad request response has a 5xx status code
func (o *CreateConfirmServiceDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details bad request response a status code equal to that given
func (o *CreateConfirmServiceDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateConfirmServiceDetailsBadRequest) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateConfirmServiceDetailsBadRequest) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateConfirmServiceDetailsBadRequest) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsForbidden creates a CreateConfirmServiceDetailsForbidden with default headers values
func NewCreateConfirmServiceDetailsForbidden() *CreateConfirmServiceDetailsForbidden {
	return &CreateConfirmServiceDetailsForbidden{}
}

/*
CreateConfirmServiceDetailsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateConfirmServiceDetailsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details forbidden response has a 2xx status code
func (o *CreateConfirmServiceDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details forbidden response has a 3xx status code
func (o *CreateConfirmServiceDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details forbidden response has a 4xx status code
func (o *CreateConfirmServiceDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create confirm service details forbidden response has a 5xx status code
func (o *CreateConfirmServiceDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details forbidden response a status code equal to that given
func (o *CreateConfirmServiceDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateConfirmServiceDetailsForbidden) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsForbidden  %+v", 403, o.Payload)
}

func (o *CreateConfirmServiceDetailsForbidden) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsForbidden  %+v", 403, o.Payload)
}

func (o *CreateConfirmServiceDetailsForbidden) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsNotFound creates a CreateConfirmServiceDetailsNotFound with default headers values
func NewCreateConfirmServiceDetailsNotFound() *CreateConfirmServiceDetailsNotFound {
	return &CreateConfirmServiceDetailsNotFound{}
}

/*
CreateConfirmServiceDetailsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateConfirmServiceDetailsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details not found response has a 2xx status code
func (o *CreateConfirmServiceDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details not found response has a 3xx status code
func (o *CreateConfirmServiceDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details not found response has a 4xx status code
func (o *CreateConfirmServiceDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create confirm service details not found response has a 5xx status code
func (o *CreateConfirmServiceDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details not found response a status code equal to that given
func (o *CreateConfirmServiceDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateConfirmServiceDetailsNotFound) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsNotFound  %+v", 404, o.Payload)
}

func (o *CreateConfirmServiceDetailsNotFound) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsNotFound  %+v", 404, o.Payload)
}

func (o *CreateConfirmServiceDetailsNotFound) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsRequestEntityTooLarge creates a CreateConfirmServiceDetailsRequestEntityTooLarge with default headers values
func NewCreateConfirmServiceDetailsRequestEntityTooLarge() *CreateConfirmServiceDetailsRequestEntityTooLarge {
	return &CreateConfirmServiceDetailsRequestEntityTooLarge{}
}

/*
CreateConfirmServiceDetailsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateConfirmServiceDetailsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details request entity too large response has a 2xx status code
func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details request entity too large response has a 3xx status code
func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details request entity too large response has a 4xx status code
func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create confirm service details request entity too large response has a 5xx status code
func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details request entity too large response a status code equal to that given
func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsUnsupportedMediaType creates a CreateConfirmServiceDetailsUnsupportedMediaType with default headers values
func NewCreateConfirmServiceDetailsUnsupportedMediaType() *CreateConfirmServiceDetailsUnsupportedMediaType {
	return &CreateConfirmServiceDetailsUnsupportedMediaType{}
}

/*
CreateConfirmServiceDetailsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateConfirmServiceDetailsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details unsupported media type response has a 2xx status code
func (o *CreateConfirmServiceDetailsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details unsupported media type response has a 3xx status code
func (o *CreateConfirmServiceDetailsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details unsupported media type response has a 4xx status code
func (o *CreateConfirmServiceDetailsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create confirm service details unsupported media type response has a 5xx status code
func (o *CreateConfirmServiceDetailsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details unsupported media type response a status code equal to that given
func (o *CreateConfirmServiceDetailsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateConfirmServiceDetailsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateConfirmServiceDetailsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateConfirmServiceDetailsUnsupportedMediaType) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsTooManyRequests creates a CreateConfirmServiceDetailsTooManyRequests with default headers values
func NewCreateConfirmServiceDetailsTooManyRequests() *CreateConfirmServiceDetailsTooManyRequests {
	return &CreateConfirmServiceDetailsTooManyRequests{}
}

/*
CreateConfirmServiceDetailsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateConfirmServiceDetailsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details too many requests response has a 2xx status code
func (o *CreateConfirmServiceDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details too many requests response has a 3xx status code
func (o *CreateConfirmServiceDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details too many requests response has a 4xx status code
func (o *CreateConfirmServiceDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create confirm service details too many requests response has a 5xx status code
func (o *CreateConfirmServiceDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create confirm service details too many requests response a status code equal to that given
func (o *CreateConfirmServiceDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateConfirmServiceDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateConfirmServiceDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateConfirmServiceDetailsTooManyRequests) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsInternalServerError creates a CreateConfirmServiceDetailsInternalServerError with default headers values
func NewCreateConfirmServiceDetailsInternalServerError() *CreateConfirmServiceDetailsInternalServerError {
	return &CreateConfirmServiceDetailsInternalServerError{}
}

/*
CreateConfirmServiceDetailsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateConfirmServiceDetailsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details internal server error response has a 2xx status code
func (o *CreateConfirmServiceDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details internal server error response has a 3xx status code
func (o *CreateConfirmServiceDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details internal server error response has a 4xx status code
func (o *CreateConfirmServiceDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create confirm service details internal server error response has a 5xx status code
func (o *CreateConfirmServiceDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create confirm service details internal server error response a status code equal to that given
func (o *CreateConfirmServiceDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateConfirmServiceDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateConfirmServiceDetailsInternalServerError) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateConfirmServiceDetailsInternalServerError) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateConfirmServiceDetailsServiceUnavailable creates a CreateConfirmServiceDetailsServiceUnavailable with default headers values
func NewCreateConfirmServiceDetailsServiceUnavailable() *CreateConfirmServiceDetailsServiceUnavailable {
	return &CreateConfirmServiceDetailsServiceUnavailable{}
}

/*
CreateConfirmServiceDetailsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateConfirmServiceDetailsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *messaging_models.CreateConfirmServiceDetailsResponse
}

// IsSuccess returns true when this create confirm service details service unavailable response has a 2xx status code
func (o *CreateConfirmServiceDetailsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create confirm service details service unavailable response has a 3xx status code
func (o *CreateConfirmServiceDetailsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create confirm service details service unavailable response has a 4xx status code
func (o *CreateConfirmServiceDetailsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create confirm service details service unavailable response has a 5xx status code
func (o *CreateConfirmServiceDetailsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create confirm service details service unavailable response a status code equal to that given
func (o *CreateConfirmServiceDetailsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateConfirmServiceDetailsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateConfirmServiceDetailsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails][%d] createConfirmServiceDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateConfirmServiceDetailsServiceUnavailable) GetPayload() *messaging_models.CreateConfirmServiceDetailsResponse {
	return o.Payload
}

func (o *CreateConfirmServiceDetailsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(messaging_models.CreateConfirmServiceDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
