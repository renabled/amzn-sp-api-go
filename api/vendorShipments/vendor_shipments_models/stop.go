// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stop Contractual or operational port or point relevant to the movement of the cargo.
//
// swagger:model Stop
type Stop struct {

	// Date and time of the arrival of the cargo.
	// Format: date-time
	ArrivalTime strfmt.DateTime `json:"arrivalTime,omitempty"`

	// Date and time of the departure of the cargo.
	// Format: date-time
	DepartureTime strfmt.DateTime `json:"departureTime,omitempty"`

	// Provide the function code.
	// Required: true
	// Enum: [PortOfDischarge FreightPayableAt PortOfLoading]
	FunctionCode *string `json:"functionCode"`

	// location identification
	LocationIdentification *Location `json:"locationIdentification,omitempty"`
}

// Validate validates this stop
func (m *Stop) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArrivalTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDepartureTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFunctionCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocationIdentification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stop) validateArrivalTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ArrivalTime) { // not required
		return nil
	}

	if err := validate.FormatOf("arrivalTime", "body", "date-time", m.ArrivalTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Stop) validateDepartureTime(formats strfmt.Registry) error {
	if swag.IsZero(m.DepartureTime) { // not required
		return nil
	}

	if err := validate.FormatOf("departureTime", "body", "date-time", m.DepartureTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var stopTypeFunctionCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PortOfDischarge","FreightPayableAt","PortOfLoading"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stopTypeFunctionCodePropEnum = append(stopTypeFunctionCodePropEnum, v)
	}
}

const (

	// StopFunctionCodePortOfDischarge captures enum value "PortOfDischarge"
	StopFunctionCodePortOfDischarge string = "PortOfDischarge"

	// StopFunctionCodeFreightPayableAt captures enum value "FreightPayableAt"
	StopFunctionCodeFreightPayableAt string = "FreightPayableAt"

	// StopFunctionCodePortOfLoading captures enum value "PortOfLoading"
	StopFunctionCodePortOfLoading string = "PortOfLoading"
)

// prop value enum
func (m *Stop) validateFunctionCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stopTypeFunctionCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stop) validateFunctionCode(formats strfmt.Registry) error {

	if err := validate.Required("functionCode", "body", m.FunctionCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateFunctionCodeEnum("functionCode", "body", *m.FunctionCode); err != nil {
		return err
	}

	return nil
}

func (m *Stop) validateLocationIdentification(formats strfmt.Registry) error {
	if swag.IsZero(m.LocationIdentification) { // not required
		return nil
	}

	if m.LocationIdentification != nil {
		if err := m.LocationIdentification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locationIdentification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locationIdentification")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this stop based on the context it is used
func (m *Stop) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocationIdentification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Stop) contextValidateLocationIdentification(ctx context.Context, formats strfmt.Registry) error {

	if m.LocationIdentification != nil {
		if err := m.LocationIdentification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locationIdentification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locationIdentification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stop) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stop) UnmarshalBinary(b []byte) error {
	var res Stop
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
