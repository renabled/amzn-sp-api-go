// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentConfirmation A list of one or more shipment confirmations.
//
// swagger:model ShipmentConfirmation
type ShipmentConfirmation struct {

	// The Amazon Reference Number is a unique identifier generated by Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for Collect/WePay shipments.
	AmazonReferenceNumber string `json:"amazonReferenceNumber,omitempty"`

	// A list of the cartons in this shipment.
	Cartons []*Carton `json:"cartons"`

	// The date and time on which the shipment is estimated to reach buyer's warehouse. It needs to be an estimate based on the average transit time between ship from location and the destination. The exact appointment time will be provided by the buyer and is potentially not known when creating the shipment confirmation.
	// Format: date-time
	EstimatedDeliveryDate strfmt.DateTime `json:"estimatedDeliveryDate,omitempty"`

	// Provide these fields only if this shipment is a direct import.
	ImportDetails *ImportDetails `json:"importDetails,omitempty"`

	// A list of the pallets in this shipment.
	Pallets []*Pallet `json:"pallets"`

	// Name/Address and tax details of the selling party.
	// Required: true
	SellingParty *PartyIdentification `json:"sellingParty"`

	// Name/Address and tax details of the ship from party.
	// Required: true
	ShipFromParty *PartyIdentification `json:"shipFromParty"`

	// Name/Address of the destination warehouse where the shipment is being shipped to.
	// Required: true
	ShipToParty *PartyIdentification `json:"shipToParty"`

	// Date on which the shipment confirmation was submitted.
	// Required: true
	// Format: date-time
	ShipmentConfirmationDate *strfmt.DateTime `json:"shipmentConfirmationDate"`

	// Indicates if this shipment confirmation is the initial confirmation, or intended to replace an already posted shipment confirmation. If replacing an existing shipment confirmation, be sure to provide the identical shipmentIdentifier and sellingParty information as in the previous confirmation.
	// Required: true
	// Enum: [Original Replace]
	ShipmentConfirmationType *string `json:"shipmentConfirmationType"`

	// Unique shipment ID (not used over the last 365 days).
	// Required: true
	ShipmentIdentifier *string `json:"shipmentIdentifier"`

	// shipment measurements
	ShipmentMeasurements *ShipmentMeasurements `json:"shipmentMeasurements,omitempty"`

	// Shipment hierarchical structure.
	// Enum: [PalletizedAssortmentCase LooseAssortmentCase PalletOfItems PalletizedStandardCase LooseStandardCase MasterPallet MasterCase]
	ShipmentStructure string `json:"shipmentStructure,omitempty"`

	// The type of shipment.
	// Enum: [TruckLoad LessThanTruckLoad SmallParcel]
	ShipmentType string `json:"shipmentType,omitempty"`

	// The date and time of the departure of the shipment from the vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the buyer destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
	// Format: date-time
	ShippedDate strfmt.DateTime `json:"shippedDate,omitempty"`

	// A list of the items in this shipment and their associated details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
	// Required: true
	ShippedItems []*Item `json:"shippedItems"`

	// Transportation details for this shipment.
	TransportationDetails *TransportationDetailsForShipmentConfirmation `json:"transportationDetails,omitempty"`
}

// Validate validates this shipment confirmation
func (m *ShipmentConfirmation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCartons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePallets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentConfirmationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentConfirmationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentMeasurements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStructure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentConfirmation) validateCartons(formats strfmt.Registry) error {
	if swag.IsZero(m.Cartons) { // not required
		return nil
	}

	for i := 0; i < len(m.Cartons); i++ {
		if swag.IsZero(m.Cartons[i]) { // not required
			continue
		}

		if m.Cartons[i] != nil {
			if err := m.Cartons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cartons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cartons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentConfirmation) validateEstimatedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("estimatedDeliveryDate", "body", "date-time", m.EstimatedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentConfirmation) validateImportDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportDetails) { // not required
		return nil
	}

	if m.ImportDetails != nil {
		if err := m.ImportDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("importDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) validatePallets(formats strfmt.Registry) error {
	if swag.IsZero(m.Pallets) { // not required
		return nil
	}

	for i := 0; i < len(m.Pallets); i++ {
		if swag.IsZero(m.Pallets[i]) { // not required
			continue
		}

		if m.Pallets[i] != nil {
			if err := m.Pallets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pallets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pallets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentConfirmation) validateSellingParty(formats strfmt.Registry) error {

	if err := validate.Required("sellingParty", "body", m.SellingParty); err != nil {
		return err
	}

	if m.SellingParty != nil {
		if err := m.SellingParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) validateShipFromParty(formats strfmt.Registry) error {

	if err := validate.Required("shipFromParty", "body", m.ShipFromParty); err != nil {
		return err
	}

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) validateShipToParty(formats strfmt.Registry) error {

	if err := validate.Required("shipToParty", "body", m.ShipToParty); err != nil {
		return err
	}

	if m.ShipToParty != nil {
		if err := m.ShipToParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) validateShipmentConfirmationDate(formats strfmt.Registry) error {

	if err := validate.Required("shipmentConfirmationDate", "body", m.ShipmentConfirmationDate); err != nil {
		return err
	}

	if err := validate.FormatOf("shipmentConfirmationDate", "body", "date-time", m.ShipmentConfirmationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var shipmentConfirmationTypeShipmentConfirmationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Original","Replace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentConfirmationTypeShipmentConfirmationTypePropEnum = append(shipmentConfirmationTypeShipmentConfirmationTypePropEnum, v)
	}
}

const (

	// ShipmentConfirmationShipmentConfirmationTypeOriginal captures enum value "Original"
	ShipmentConfirmationShipmentConfirmationTypeOriginal string = "Original"

	// ShipmentConfirmationShipmentConfirmationTypeReplace captures enum value "Replace"
	ShipmentConfirmationShipmentConfirmationTypeReplace string = "Replace"
)

// prop value enum
func (m *ShipmentConfirmation) validateShipmentConfirmationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentConfirmationTypeShipmentConfirmationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentConfirmation) validateShipmentConfirmationType(formats strfmt.Registry) error {

	if err := validate.Required("shipmentConfirmationType", "body", m.ShipmentConfirmationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateShipmentConfirmationTypeEnum("shipmentConfirmationType", "body", *m.ShipmentConfirmationType); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentConfirmation) validateShipmentIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("shipmentIdentifier", "body", m.ShipmentIdentifier); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentConfirmation) validateShipmentMeasurements(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentMeasurements) { // not required
		return nil
	}

	if m.ShipmentMeasurements != nil {
		if err := m.ShipmentMeasurements.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentMeasurements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentMeasurements")
			}
			return err
		}
	}

	return nil
}

var shipmentConfirmationTypeShipmentStructurePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PalletizedAssortmentCase","LooseAssortmentCase","PalletOfItems","PalletizedStandardCase","LooseStandardCase","MasterPallet","MasterCase"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentConfirmationTypeShipmentStructurePropEnum = append(shipmentConfirmationTypeShipmentStructurePropEnum, v)
	}
}

const (

	// ShipmentConfirmationShipmentStructurePalletizedAssortmentCase captures enum value "PalletizedAssortmentCase"
	ShipmentConfirmationShipmentStructurePalletizedAssortmentCase string = "PalletizedAssortmentCase"

	// ShipmentConfirmationShipmentStructureLooseAssortmentCase captures enum value "LooseAssortmentCase"
	ShipmentConfirmationShipmentStructureLooseAssortmentCase string = "LooseAssortmentCase"

	// ShipmentConfirmationShipmentStructurePalletOfItems captures enum value "PalletOfItems"
	ShipmentConfirmationShipmentStructurePalletOfItems string = "PalletOfItems"

	// ShipmentConfirmationShipmentStructurePalletizedStandardCase captures enum value "PalletizedStandardCase"
	ShipmentConfirmationShipmentStructurePalletizedStandardCase string = "PalletizedStandardCase"

	// ShipmentConfirmationShipmentStructureLooseStandardCase captures enum value "LooseStandardCase"
	ShipmentConfirmationShipmentStructureLooseStandardCase string = "LooseStandardCase"

	// ShipmentConfirmationShipmentStructureMasterPallet captures enum value "MasterPallet"
	ShipmentConfirmationShipmentStructureMasterPallet string = "MasterPallet"

	// ShipmentConfirmationShipmentStructureMasterCase captures enum value "MasterCase"
	ShipmentConfirmationShipmentStructureMasterCase string = "MasterCase"
)

// prop value enum
func (m *ShipmentConfirmation) validateShipmentStructureEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentConfirmationTypeShipmentStructurePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentConfirmation) validateShipmentStructure(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentStructure) { // not required
		return nil
	}

	// value enum
	if err := m.validateShipmentStructureEnum("shipmentStructure", "body", m.ShipmentStructure); err != nil {
		return err
	}

	return nil
}

var shipmentConfirmationTypeShipmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TruckLoad","LessThanTruckLoad","SmallParcel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentConfirmationTypeShipmentTypePropEnum = append(shipmentConfirmationTypeShipmentTypePropEnum, v)
	}
}

const (

	// ShipmentConfirmationShipmentTypeTruckLoad captures enum value "TruckLoad"
	ShipmentConfirmationShipmentTypeTruckLoad string = "TruckLoad"

	// ShipmentConfirmationShipmentTypeLessThanTruckLoad captures enum value "LessThanTruckLoad"
	ShipmentConfirmationShipmentTypeLessThanTruckLoad string = "LessThanTruckLoad"

	// ShipmentConfirmationShipmentTypeSmallParcel captures enum value "SmallParcel"
	ShipmentConfirmationShipmentTypeSmallParcel string = "SmallParcel"
)

// prop value enum
func (m *ShipmentConfirmation) validateShipmentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentConfirmationTypeShipmentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentConfirmation) validateShipmentType(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateShipmentTypeEnum("shipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentConfirmation) validateShippedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("shippedDate", "body", "date-time", m.ShippedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentConfirmation) validateShippedItems(formats strfmt.Registry) error {

	if err := validate.Required("shippedItems", "body", m.ShippedItems); err != nil {
		return err
	}

	for i := 0; i < len(m.ShippedItems); i++ {
		if swag.IsZero(m.ShippedItems[i]) { // not required
			continue
		}

		if m.ShippedItems[i] != nil {
			if err := m.ShippedItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippedItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippedItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentConfirmation) validateTransportationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationDetails) { // not required
		return nil
	}

	if m.TransportationDetails != nil {
		if err := m.TransportationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment confirmation based on the context it is used
func (m *ShipmentConfirmation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCartons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImportDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePallets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipToParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentMeasurements(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippedItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransportationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentConfirmation) contextValidateCartons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Cartons); i++ {

		if m.Cartons[i] != nil {
			if err := m.Cartons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("cartons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("cartons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateImportDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ImportDetails != nil {
		if err := m.ImportDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("importDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("importDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) contextValidatePallets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pallets); i++ {

		if m.Pallets[i] != nil {
			if err := m.Pallets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pallets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pallets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateSellingParty(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingParty != nil {
		if err := m.SellingParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateShipFromParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateShipToParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipToParty != nil {
		if err := m.ShipToParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateShipmentMeasurements(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentMeasurements != nil {
		if err := m.ShipmentMeasurements.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentMeasurements")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentMeasurements")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateShippedItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShippedItems); i++ {

		if m.ShippedItems[i] != nil {
			if err := m.ShippedItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippedItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippedItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentConfirmation) contextValidateTransportationDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TransportationDetails != nil {
		if err := m.TransportationDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentConfirmation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentConfirmation) UnmarshalBinary(b []byte) error {
	var res ShipmentConfirmation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
