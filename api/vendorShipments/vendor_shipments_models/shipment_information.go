// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentInformation Shipment Information details for Label request.
//
// swagger:model ShipmentInformation
type ShipmentInformation struct {

	// Buyer Reference number which is a unique number.
	BuyerReferenceNumber string `json:"buyerReferenceNumber,omitempty"`

	// Unique Id with  which  the shipment can be tracked for Small Parcels.
	MasterTrackingID string `json:"masterTrackingId,omitempty"`

	// Name/Address of the destination warehouse where the shipment is being shipped to.
	ShipFromParty *PartyIdentification `json:"shipFromParty,omitempty"`

	// Type of shipment whether it is Small Parcel
	// Enum: [SmallParcel LTL]
	ShipMode string `json:"shipMode,omitempty"`

	// Name/Address of the destination warehouse where the shipment is being shipped to.
	ShipToParty *PartyIdentification `json:"shipToParty,omitempty"`

	// Number of Labels that are created as part of this shipment.
	TotalLabelCount int64 `json:"totalLabelCount,omitempty"`

	// Vendor Details requesting for Shipment Label
	VendorDetails *VendorDetails `json:"vendorDetails,omitempty"`

	// Vendor Warehouse ID from where the shipment is scheduled to be picked up by buyer / Carrier.
	WarehouseID string `json:"warehouseId,omitempty"`
}

// Validate validates this shipment information
func (m *ShipmentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShipFromParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentInformation) validateShipFromParty(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipFromParty) { // not required
		return nil
	}

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

var shipmentInformationTypeShipModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SmallParcel","LTL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentInformationTypeShipModePropEnum = append(shipmentInformationTypeShipModePropEnum, v)
	}
}

const (

	// ShipmentInformationShipModeSmallParcel captures enum value "SmallParcel"
	ShipmentInformationShipModeSmallParcel string = "SmallParcel"

	// ShipmentInformationShipModeLTL captures enum value "LTL"
	ShipmentInformationShipModeLTL string = "LTL"
)

// prop value enum
func (m *ShipmentInformation) validateShipModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentInformationTypeShipModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentInformation) validateShipMode(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateShipModeEnum("shipMode", "body", m.ShipMode); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentInformation) validateShipToParty(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipToParty) { // not required
		return nil
	}

	if m.ShipToParty != nil {
		if err := m.ShipToParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentInformation) validateVendorDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.VendorDetails) { // not required
		return nil
	}

	if m.VendorDetails != nil {
		if err := m.VendorDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendorDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vendorDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment information based on the context it is used
func (m *ShipmentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShipFromParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipToParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVendorDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentInformation) contextValidateShipFromParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentInformation) contextValidateShipToParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipToParty != nil {
		if err := m.ShipToParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentInformation) contextValidateVendorDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.VendorDetails != nil {
		if err := m.VendorDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vendorDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vendorDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentInformation) UnmarshalBinary(b []byte) error {
	var res ShipmentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
