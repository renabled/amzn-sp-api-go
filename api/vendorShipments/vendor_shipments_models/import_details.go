// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportDetails import details
//
// swagger:model ImportDetails
type ImportDetails struct {

	// Billable weight of the direct imports shipment.
	BillableWeight *Weight `json:"billableWeight,omitempty"`

	// Date on which the shipment is expected to be shipped. This value should not be in the past and not more than 60 days out in the future.
	// Format: date-time
	EstimatedShipByDate strfmt.DateTime `json:"estimatedShipByDate,omitempty"`

	// Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if shipment has multiple containers.
	// Max Length: 64
	ImportContainers string `json:"importContainers,omitempty"`

	// This is used for import purchase orders only. If the recipient requests, this field will contain the shipment method of payment.
	// Enum: [PaidByBuyer CollectOnDelivery DefinedByBuyerAndSeller FOBPortOfCall PrepaidBySeller PaidBySeller]
	MethodOfPayment string `json:"methodOfPayment,omitempty"`

	// The route and stop details for this shipment.
	Route *Route `json:"route,omitempty"`

	// The container's seal number.
	SealNumber string `json:"sealNumber,omitempty"`
}

// Validate validates this import details
func (m *ImportDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillableWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedShipByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethodOfPayment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoute(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportDetails) validateBillableWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.BillableWeight) { // not required
		return nil
	}

	if m.BillableWeight != nil {
		if err := m.BillableWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billableWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billableWeight")
			}
			return err
		}
	}

	return nil
}

func (m *ImportDetails) validateEstimatedShipByDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedShipByDate) { // not required
		return nil
	}

	if err := validate.FormatOf("estimatedShipByDate", "body", "date-time", m.EstimatedShipByDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ImportDetails) validateImportContainers(formats strfmt.Registry) error {
	if swag.IsZero(m.ImportContainers) { // not required
		return nil
	}

	if err := validate.MaxLength("importContainers", "body", m.ImportContainers, 64); err != nil {
		return err
	}

	return nil
}

var importDetailsTypeMethodOfPaymentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PaidByBuyer","CollectOnDelivery","DefinedByBuyerAndSeller","FOBPortOfCall","PrepaidBySeller","PaidBySeller"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importDetailsTypeMethodOfPaymentPropEnum = append(importDetailsTypeMethodOfPaymentPropEnum, v)
	}
}

const (

	// ImportDetailsMethodOfPaymentPaidByBuyer captures enum value "PaidByBuyer"
	ImportDetailsMethodOfPaymentPaidByBuyer string = "PaidByBuyer"

	// ImportDetailsMethodOfPaymentCollectOnDelivery captures enum value "CollectOnDelivery"
	ImportDetailsMethodOfPaymentCollectOnDelivery string = "CollectOnDelivery"

	// ImportDetailsMethodOfPaymentDefinedByBuyerAndSeller captures enum value "DefinedByBuyerAndSeller"
	ImportDetailsMethodOfPaymentDefinedByBuyerAndSeller string = "DefinedByBuyerAndSeller"

	// ImportDetailsMethodOfPaymentFOBPortOfCall captures enum value "FOBPortOfCall"
	ImportDetailsMethodOfPaymentFOBPortOfCall string = "FOBPortOfCall"

	// ImportDetailsMethodOfPaymentPrepaidBySeller captures enum value "PrepaidBySeller"
	ImportDetailsMethodOfPaymentPrepaidBySeller string = "PrepaidBySeller"

	// ImportDetailsMethodOfPaymentPaidBySeller captures enum value "PaidBySeller"
	ImportDetailsMethodOfPaymentPaidBySeller string = "PaidBySeller"
)

// prop value enum
func (m *ImportDetails) validateMethodOfPaymentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importDetailsTypeMethodOfPaymentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportDetails) validateMethodOfPayment(formats strfmt.Registry) error {
	if swag.IsZero(m.MethodOfPayment) { // not required
		return nil
	}

	// value enum
	if err := m.validateMethodOfPaymentEnum("methodOfPayment", "body", m.MethodOfPayment); err != nil {
		return err
	}

	return nil
}

func (m *ImportDetails) validateRoute(formats strfmt.Registry) error {
	if swag.IsZero(m.Route) { // not required
		return nil
	}

	if m.Route != nil {
		if err := m.Route.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this import details based on the context it is used
func (m *ImportDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillableWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRoute(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportDetails) contextValidateBillableWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.BillableWeight != nil {
		if err := m.BillableWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billableWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billableWeight")
			}
			return err
		}
	}

	return nil
}

func (m *ImportDetails) contextValidateRoute(ctx context.Context, formats strfmt.Registry) error {

	if m.Route != nil {
		if err := m.Route.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("route")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("route")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImportDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportDetails) UnmarshalBinary(b []byte) error {
	var res ImportDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
