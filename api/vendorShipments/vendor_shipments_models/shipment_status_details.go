// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentStatusDetails Shipment Status details.
//
// swagger:model ShipmentStatusDetails
type ShipmentStatusDetails struct {

	// Current status of the shipment on whether it is picked up or scheduled.
	// Enum: [Created TransportationRequested CarrierAssigned Shipped]
	ShipmentStatus string `json:"shipmentStatus,omitempty"`

	// Date and time on last status update received for the shipment
	// Format: date-time
	ShipmentStatusDate strfmt.DateTime `json:"shipmentStatusDate,omitempty"`
}

// Validate validates this shipment status details
func (m *ShipmentStatusDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatusDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var shipmentStatusDetailsTypeShipmentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Created","TransportationRequested","CarrierAssigned","Shipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentStatusDetailsTypeShipmentStatusPropEnum = append(shipmentStatusDetailsTypeShipmentStatusPropEnum, v)
	}
}

const (

	// ShipmentStatusDetailsShipmentStatusCreated captures enum value "Created"
	ShipmentStatusDetailsShipmentStatusCreated string = "Created"

	// ShipmentStatusDetailsShipmentStatusTransportationRequested captures enum value "TransportationRequested"
	ShipmentStatusDetailsShipmentStatusTransportationRequested string = "TransportationRequested"

	// ShipmentStatusDetailsShipmentStatusCarrierAssigned captures enum value "CarrierAssigned"
	ShipmentStatusDetailsShipmentStatusCarrierAssigned string = "CarrierAssigned"

	// ShipmentStatusDetailsShipmentStatusShipped captures enum value "Shipped"
	ShipmentStatusDetailsShipmentStatusShipped string = "Shipped"
)

// prop value enum
func (m *ShipmentStatusDetails) validateShipmentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentStatusDetailsTypeShipmentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentStatusDetails) validateShipmentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateShipmentStatusEnum("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentStatusDetails) validateShipmentStatusDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentStatusDate) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentStatusDate", "body", "date-time", m.ShipmentStatusDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shipment status details based on context it is used
func (m *ShipmentStatusDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentStatusDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentStatusDetails) UnmarshalBinary(b []byte) error {
	var res ShipmentStatusDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
