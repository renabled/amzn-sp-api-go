// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PackageItemDetails Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.
//
// swagger:model PackageItemDetails
type PackageItemDetails struct {

	// Either expiryDate or mfgDate and expiryAfterDuration are mandatory for perishable items.
	Expiry *Expiry `json:"expiry,omitempty"`

	// The batch or lot number associates an item with information the manufacturer considers relevant for traceability of the trade item to which the Element String is applied. The data may refer to the trade item itself or to items contained. This field is mandatory for all perishable items.
	LotNumber string `json:"lotNumber,omitempty"`

	// The purchase order number for the shipment being confirmed. If the items in this shipment belong to multiple purchase order numbers that are in particular carton or pallet within the shipment, then provide the purchaseOrderNumber at the appropriate carton or pallet level. Formatting Notes: 8-character alpha-numeric code.
	PurchaseOrderNumber string `json:"purchaseOrderNumber,omitempty"`
}

// Validate validates this package item details
func (m *PackageItemDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageItemDetails) validateExpiry(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiry) { // not required
		return nil
	}

	if m.Expiry != nil {
		if err := m.Expiry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expiry")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this package item details based on the context it is used
func (m *PackageItemDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpiry(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageItemDetails) contextValidateExpiry(ctx context.Context, formats strfmt.Registry) error {

	if m.Expiry != nil {
		if err := m.Expiry.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expiry")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expiry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageItemDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageItemDetails) UnmarshalBinary(b []byte) error {
	var res PackageItemDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
