// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Volume The volume of the shipment.
//
// swagger:model Volume
type Volume struct {

	// The unit of measurement.
	// Required: true
	// Enum: [CuFt CuIn CuM CuY]
	UnitOfMeasure *string `json:"unitOfMeasure"`

	// The measurement value.
	// Required: true
	Value *Decimal `json:"value"`
}

// Validate validates this volume
func (m *Volume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnitOfMeasure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var volumeTypeUnitOfMeasurePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CuFt","CuIn","CuM","CuY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeTypeUnitOfMeasurePropEnum = append(volumeTypeUnitOfMeasurePropEnum, v)
	}
}

const (

	// VolumeUnitOfMeasureCuFt captures enum value "CuFt"
	VolumeUnitOfMeasureCuFt string = "CuFt"

	// VolumeUnitOfMeasureCuIn captures enum value "CuIn"
	VolumeUnitOfMeasureCuIn string = "CuIn"

	// VolumeUnitOfMeasureCuM captures enum value "CuM"
	VolumeUnitOfMeasureCuM string = "CuM"

	// VolumeUnitOfMeasureCuY captures enum value "CuY"
	VolumeUnitOfMeasureCuY string = "CuY"
)

// prop value enum
func (m *Volume) validateUnitOfMeasureEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, volumeTypeUnitOfMeasurePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Volume) validateUnitOfMeasure(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasure", "body", m.UnitOfMeasure); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitOfMeasureEnum("unitOfMeasure", "body", *m.UnitOfMeasure); err != nil {
		return err
	}

	return nil
}

func (m *Volume) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if m.Value != nil {
		if err := m.Value.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this volume based on the context it is used
func (m *Volume) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Volume) contextValidateValue(ctx context.Context, formats strfmt.Registry) error {

	if m.Value != nil {
		if err := m.Value.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("value")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("value")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Volume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Volume) UnmarshalBinary(b []byte) error {
	var res Volume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
