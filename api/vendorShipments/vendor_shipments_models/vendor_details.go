// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VendorDetails Vendor Details as part of Label response.
//
// swagger:model VendorDetails
type VendorDetails struct {

	// Name/Address and tax details of the selling party.
	SellingParty *PartyIdentification `json:"sellingParty,omitempty"`

	// Unique vendor shipment id which is not used in last 365 days
	// Format: date-time
	VendorShipmentID strfmt.DateTime `json:"vendorShipmentId,omitempty"`
}

// Validate validates this vendor details
func (m *VendorDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSellingParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVendorShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VendorDetails) validateSellingParty(formats strfmt.Registry) error {
	if swag.IsZero(m.SellingParty) { // not required
		return nil
	}

	if m.SellingParty != nil {
		if err := m.SellingParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *VendorDetails) validateVendorShipmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.VendorShipmentID) { // not required
		return nil
	}

	if err := validate.FormatOf("vendorShipmentId", "body", "date-time", m.VendorShipmentID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this vendor details based on the context it is used
func (m *VendorDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSellingParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VendorDetails) contextValidateSellingParty(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingParty != nil {
		if err := m.SellingParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VendorDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VendorDetails) UnmarshalBinary(b []byte) error {
	var res VendorDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
