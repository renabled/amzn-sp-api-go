// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerItem Carton/Pallet level details for the item.
//
// swagger:model ContainerItem
type ContainerItem struct {

	// item details
	ItemDetails *ItemDetails `json:"itemDetails,omitempty"`

	// The reference number for the item. Please provide the itemSequenceNumber from the 'items' segment to refer to that item's details here.
	// Required: true
	ItemReference *string `json:"itemReference"`

	// Total item quantity shipped in this carton/pallet.
	// Required: true
	ShippedQuantity *ItemQuantity `json:"shippedQuantity"`
}

// Validate validates this container item
func (m *ContainerItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemReference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerItem) validateItemDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemDetails) { // not required
		return nil
	}

	if m.ItemDetails != nil {
		if err := m.ItemDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerItem) validateItemReference(formats strfmt.Registry) error {

	if err := validate.Required("itemReference", "body", m.ItemReference); err != nil {
		return err
	}

	return nil
}

func (m *ContainerItem) validateShippedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("shippedQuantity", "body", m.ShippedQuantity); err != nil {
		return err
	}

	if m.ShippedQuantity != nil {
		if err := m.ShippedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippedQuantity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this container item based on the context it is used
func (m *ContainerItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerItem) contextValidateItemDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemDetails != nil {
		if err := m.ItemDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerItem) contextValidateShippedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippedQuantity != nil {
		if err := m.ShippedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippedQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerItem) UnmarshalBinary(b []byte) error {
	var res ContainerItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
