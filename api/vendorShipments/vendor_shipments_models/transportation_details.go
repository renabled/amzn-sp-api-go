// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationDetails transportation details
//
// swagger:model TransportationDetails
type TransportationDetails struct {

	// Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.
	BillOfLadingNumber string `json:"billOfLadingNumber,omitempty"`

	// Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations.
	CarrierScac string `json:"carrierScac,omitempty"`

	// The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations.
	CarrierShipmentReferenceNumber string `json:"carrierShipmentReferenceNumber,omitempty"`

	// The mode of transportation for this shipment.
	// Enum: [Road Air Ocean]
	TransportationMode string `json:"transportationMode,omitempty"`
}

// Validate validates this transportation details
func (m *TransportationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransportationMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transportationDetailsTypeTransportationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Road","Air","Ocean"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transportationDetailsTypeTransportationModePropEnum = append(transportationDetailsTypeTransportationModePropEnum, v)
	}
}

const (

	// TransportationDetailsTransportationModeRoad captures enum value "Road"
	TransportationDetailsTransportationModeRoad string = "Road"

	// TransportationDetailsTransportationModeAir captures enum value "Air"
	TransportationDetailsTransportationModeAir string = "Air"

	// TransportationDetailsTransportationModeOcean captures enum value "Ocean"
	TransportationDetailsTransportationModeOcean string = "Ocean"
)

// prop value enum
func (m *TransportationDetails) validateTransportationModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transportationDetailsTypeTransportationModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TransportationDetails) validateTransportationMode(formats strfmt.Registry) error {
	if swag.IsZero(m.TransportationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateTransportationModeEnum("transportationMode", "body", m.TransportationMode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this transportation details based on context it is used
func (m *TransportationDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TransportationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationDetails) UnmarshalBinary(b []byte) error {
	var res TransportationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
