// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LabelData Label details as part of the transport label response
//
// swagger:model LabelData
type LabelData struct {

	// Unique identification for  the carrier like UPS,DHL,USPS..etc
	CarrierCode string `json:"carrierCode,omitempty"`

	// Label created as part of the transportation and it is base64 encoded
	Label string `json:"label,omitempty"`

	// Type of the label format like PDF
	// Enum: [PDF]
	LabelFormat string `json:"labelFormat,omitempty"`

	// Label list sequence number
	LabelSequenceNumber int64 `json:"labelSequenceNumber,omitempty"`

	// Tracking Id for the transportation.
	TrackingID string `json:"trackingId,omitempty"`
}

// Validate validates this label data
func (m *LabelData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelFormat(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var labelDataTypeLabelFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PDF"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelDataTypeLabelFormatPropEnum = append(labelDataTypeLabelFormatPropEnum, v)
	}
}

const (

	// LabelDataLabelFormatPDF captures enum value "PDF"
	LabelDataLabelFormatPDF string = "PDF"
)

// prop value enum
func (m *LabelData) validateLabelFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, labelDataTypeLabelFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LabelData) validateLabelFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelFormat) { // not required
		return nil
	}

	// value enum
	if err := m.validateLabelFormatEnum("labelFormat", "body", m.LabelFormat); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this label data based on context it is used
func (m *LabelData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LabelData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelData) UnmarshalBinary(b []byte) error {
	var res LabelData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
