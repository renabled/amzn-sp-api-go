// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShipmentMeasurements Shipment measurement details.
//
// swagger:model ShipmentMeasurements
type ShipmentMeasurements struct {

	// Number of cartons present in the shipment. Provide the cartonCount only for unpalletized shipments.
	CartonCount int64 `json:"cartonCount,omitempty"`

	// Gross weight of the shipment.
	GrossShipmentWeight *Weight `json:"grossShipmentWeight,omitempty"`

	// Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.
	PalletCount int64 `json:"palletCount,omitempty"`

	// Volume of the shipment.
	ShipmentVolume *Volume `json:"shipmentVolume,omitempty"`
}

// Validate validates this shipment measurements
func (m *ShipmentMeasurements) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGrossShipmentWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentMeasurements) validateGrossShipmentWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.GrossShipmentWeight) { // not required
		return nil
	}

	if m.GrossShipmentWeight != nil {
		if err := m.GrossShipmentWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grossShipmentWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grossShipmentWeight")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentMeasurements) validateShipmentVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentVolume) { // not required
		return nil
	}

	if m.ShipmentVolume != nil {
		if err := m.ShipmentVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentVolume")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment measurements based on the context it is used
func (m *ShipmentMeasurements) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGrossShipmentWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentMeasurements) contextValidateGrossShipmentWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.GrossShipmentWeight != nil {
		if err := m.GrossShipmentWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("grossShipmentWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("grossShipmentWeight")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentMeasurements) contextValidateShipmentVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentVolume != nil {
		if err := m.ShipmentVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentVolume")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentMeasurements) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentMeasurements) UnmarshalBinary(b []byte) error {
	var res ShipmentMeasurements
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
