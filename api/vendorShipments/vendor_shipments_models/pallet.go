// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Pallet Details of the Pallet/Tare being shipped.
//
// swagger:model Pallet
type Pallet struct {

	// Number of cartons per layer on the pallet.
	Block int64 `json:"block,omitempty"`

	// Carton reference details.
	CartonReferenceDetails *CartonReferenceDetails `json:"cartonReferenceDetails,omitempty"`

	// dimensions
	Dimensions *Dimensions `json:"dimensions,omitempty"`

	// A list of container item details.
	Items []*ContainerItem `json:"items"`

	// A list of pallet identifiers.
	// Required: true
	PalletIdentifiers []*ContainerIdentification `json:"palletIdentifiers"`

	// Number of layers per pallet.
	Tier int64 `json:"tier,omitempty"`

	// weight
	Weight *Weight `json:"weight,omitempty"`
}

// Validate validates this pallet
func (m *Pallet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCartonReferenceDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePalletIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pallet) validateCartonReferenceDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.CartonReferenceDetails) { // not required
		return nil
	}

	if m.CartonReferenceDetails != nil {
		if err := m.CartonReferenceDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cartonReferenceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cartonReferenceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Pallet) validateDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.Dimensions) { // not required
		return nil
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Pallet) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pallet) validatePalletIdentifiers(formats strfmt.Registry) error {

	if err := validate.Required("palletIdentifiers", "body", m.PalletIdentifiers); err != nil {
		return err
	}

	for i := 0; i < len(m.PalletIdentifiers); i++ {
		if swag.IsZero(m.PalletIdentifiers[i]) { // not required
			continue
		}

		if m.PalletIdentifiers[i] != nil {
			if err := m.PalletIdentifiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("palletIdentifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("palletIdentifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pallet) validateWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pallet based on the context it is used
func (m *Pallet) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCartonReferenceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePalletIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Pallet) contextValidateCartonReferenceDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.CartonReferenceDetails != nil {
		if err := m.CartonReferenceDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cartonReferenceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cartonReferenceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Pallet) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Dimensions != nil {
		if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Pallet) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pallet) contextValidatePalletIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PalletIdentifiers); i++ {

		if m.PalletIdentifiers[i] != nil {
			if err := m.PalletIdentifiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("palletIdentifiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("palletIdentifiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Pallet) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Pallet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Pallet) UnmarshalBinary(b []byte) error {
	var res Pallet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
