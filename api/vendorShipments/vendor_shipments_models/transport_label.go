// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipments_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransportLabel transport label
//
// swagger:model transportLabel
type TransportLabel struct {

	// Date on which label is created.
	LabelCreateDateTime string `json:"labelCreateDateTime,omitempty"`

	// Indicates the label data,format and type associated .
	LabelData []*LabelData `json:"labelData"`

	// Indicates the shipment Information details like warehouse and business reference details like ARN, Selling Party detail and Vendor Warehouse details
	ShipmentInformation *ShipmentInformation `json:"shipmentInformation,omitempty"`
}

// Validate validates this transport label
func (m *TransportLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportLabel) validateLabelData(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelData) { // not required
		return nil
	}

	for i := 0; i < len(m.LabelData); i++ {
		if swag.IsZero(m.LabelData[i]) { // not required
			continue
		}

		if m.LabelData[i] != nil {
			if err := m.LabelData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransportLabel) validateShipmentInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentInformation) { // not required
		return nil
	}

	if m.ShipmentInformation != nil {
		if err := m.ShipmentInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentInformation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this transport label based on the context it is used
func (m *TransportLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportLabel) contextValidateLabelData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelData); i++ {

		if m.LabelData[i] != nil {
			if err := m.LabelData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *TransportLabel) contextValidateShipmentInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentInformation != nil {
		if err := m.ShipmentInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentInformation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportLabel) UnmarshalBinary(b []byte) error {
	var res TransportLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
