// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/vendorShipments/vendor_shipments_models"
)

// SubmitShipmentsReader is a Reader for the SubmitShipments structure.
type SubmitShipmentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitShipmentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSubmitShipmentsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitShipmentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitShipmentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitShipmentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSubmitShipmentsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSubmitShipmentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSubmitShipmentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitShipmentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSubmitShipmentsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitShipmentsAccepted creates a SubmitShipmentsAccepted with default headers values
func NewSubmitShipmentsAccepted() *SubmitShipmentsAccepted {
	return &SubmitShipmentsAccepted{}
}

/*
SubmitShipmentsAccepted describes a response with status code 202, with default header values.

Success.
*/
type SubmitShipmentsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments accepted response has a 2xx status code
func (o *SubmitShipmentsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this submit shipments accepted response has a 3xx status code
func (o *SubmitShipmentsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments accepted response has a 4xx status code
func (o *SubmitShipmentsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit shipments accepted response has a 5xx status code
func (o *SubmitShipmentsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments accepted response a status code equal to that given
func (o *SubmitShipmentsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *SubmitShipmentsAccepted) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsAccepted  %+v", 202, o.Payload)
}

func (o *SubmitShipmentsAccepted) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsAccepted  %+v", 202, o.Payload)
}

func (o *SubmitShipmentsAccepted) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsBadRequest creates a SubmitShipmentsBadRequest with default headers values
func NewSubmitShipmentsBadRequest() *SubmitShipmentsBadRequest {
	return &SubmitShipmentsBadRequest{}
}

/*
SubmitShipmentsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SubmitShipmentsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments bad request response has a 2xx status code
func (o *SubmitShipmentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments bad request response has a 3xx status code
func (o *SubmitShipmentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments bad request response has a 4xx status code
func (o *SubmitShipmentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit shipments bad request response has a 5xx status code
func (o *SubmitShipmentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments bad request response a status code equal to that given
func (o *SubmitShipmentsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubmitShipmentsBadRequest) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitShipmentsBadRequest) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitShipmentsBadRequest) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsForbidden creates a SubmitShipmentsForbidden with default headers values
func NewSubmitShipmentsForbidden() *SubmitShipmentsForbidden {
	return &SubmitShipmentsForbidden{}
}

/*
SubmitShipmentsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SubmitShipmentsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments forbidden response has a 2xx status code
func (o *SubmitShipmentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments forbidden response has a 3xx status code
func (o *SubmitShipmentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments forbidden response has a 4xx status code
func (o *SubmitShipmentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit shipments forbidden response has a 5xx status code
func (o *SubmitShipmentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments forbidden response a status code equal to that given
func (o *SubmitShipmentsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubmitShipmentsForbidden) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsForbidden  %+v", 403, o.Payload)
}

func (o *SubmitShipmentsForbidden) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsForbidden  %+v", 403, o.Payload)
}

func (o *SubmitShipmentsForbidden) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsNotFound creates a SubmitShipmentsNotFound with default headers values
func NewSubmitShipmentsNotFound() *SubmitShipmentsNotFound {
	return &SubmitShipmentsNotFound{}
}

/*
SubmitShipmentsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SubmitShipmentsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments not found response has a 2xx status code
func (o *SubmitShipmentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments not found response has a 3xx status code
func (o *SubmitShipmentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments not found response has a 4xx status code
func (o *SubmitShipmentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit shipments not found response has a 5xx status code
func (o *SubmitShipmentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments not found response a status code equal to that given
func (o *SubmitShipmentsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubmitShipmentsNotFound) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsNotFound  %+v", 404, o.Payload)
}

func (o *SubmitShipmentsNotFound) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsNotFound  %+v", 404, o.Payload)
}

func (o *SubmitShipmentsNotFound) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsRequestEntityTooLarge creates a SubmitShipmentsRequestEntityTooLarge with default headers values
func NewSubmitShipmentsRequestEntityTooLarge() *SubmitShipmentsRequestEntityTooLarge {
	return &SubmitShipmentsRequestEntityTooLarge{}
}

/*
SubmitShipmentsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SubmitShipmentsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments request entity too large response has a 2xx status code
func (o *SubmitShipmentsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments request entity too large response has a 3xx status code
func (o *SubmitShipmentsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments request entity too large response has a 4xx status code
func (o *SubmitShipmentsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit shipments request entity too large response has a 5xx status code
func (o *SubmitShipmentsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments request entity too large response a status code equal to that given
func (o *SubmitShipmentsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *SubmitShipmentsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SubmitShipmentsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SubmitShipmentsRequestEntityTooLarge) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsUnsupportedMediaType creates a SubmitShipmentsUnsupportedMediaType with default headers values
func NewSubmitShipmentsUnsupportedMediaType() *SubmitShipmentsUnsupportedMediaType {
	return &SubmitShipmentsUnsupportedMediaType{}
}

/*
SubmitShipmentsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SubmitShipmentsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments unsupported media type response has a 2xx status code
func (o *SubmitShipmentsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments unsupported media type response has a 3xx status code
func (o *SubmitShipmentsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments unsupported media type response has a 4xx status code
func (o *SubmitShipmentsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit shipments unsupported media type response has a 5xx status code
func (o *SubmitShipmentsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments unsupported media type response a status code equal to that given
func (o *SubmitShipmentsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *SubmitShipmentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SubmitShipmentsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SubmitShipmentsUnsupportedMediaType) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsTooManyRequests creates a SubmitShipmentsTooManyRequests with default headers values
func NewSubmitShipmentsTooManyRequests() *SubmitShipmentsTooManyRequests {
	return &SubmitShipmentsTooManyRequests{}
}

/*
SubmitShipmentsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SubmitShipmentsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments too many requests response has a 2xx status code
func (o *SubmitShipmentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments too many requests response has a 3xx status code
func (o *SubmitShipmentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments too many requests response has a 4xx status code
func (o *SubmitShipmentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit shipments too many requests response has a 5xx status code
func (o *SubmitShipmentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this submit shipments too many requests response a status code equal to that given
func (o *SubmitShipmentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SubmitShipmentsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitShipmentsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitShipmentsTooManyRequests) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsInternalServerError creates a SubmitShipmentsInternalServerError with default headers values
func NewSubmitShipmentsInternalServerError() *SubmitShipmentsInternalServerError {
	return &SubmitShipmentsInternalServerError{}
}

/*
SubmitShipmentsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SubmitShipmentsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments internal server error response has a 2xx status code
func (o *SubmitShipmentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments internal server error response has a 3xx status code
func (o *SubmitShipmentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments internal server error response has a 4xx status code
func (o *SubmitShipmentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit shipments internal server error response has a 5xx status code
func (o *SubmitShipmentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this submit shipments internal server error response a status code equal to that given
func (o *SubmitShipmentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubmitShipmentsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitShipmentsInternalServerError) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitShipmentsInternalServerError) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentsServiceUnavailable creates a SubmitShipmentsServiceUnavailable with default headers values
func NewSubmitShipmentsServiceUnavailable() *SubmitShipmentsServiceUnavailable {
	return &SubmitShipmentsServiceUnavailable{}
}

/*
SubmitShipmentsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SubmitShipmentsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_shipments_models.SubmitShipmentConfirmationsResponse
}

// IsSuccess returns true when this submit shipments service unavailable response has a 2xx status code
func (o *SubmitShipmentsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit shipments service unavailable response has a 3xx status code
func (o *SubmitShipmentsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit shipments service unavailable response has a 4xx status code
func (o *SubmitShipmentsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit shipments service unavailable response has a 5xx status code
func (o *SubmitShipmentsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this submit shipments service unavailable response a status code equal to that given
func (o *SubmitShipmentsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SubmitShipmentsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitShipmentsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /vendor/shipping/v1/shipments][%d] submitShipmentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitShipmentsServiceUnavailable) GetPayload() *vendor_shipments_models.SubmitShipmentConfirmationsResponse {
	return o.Payload
}

func (o *SubmitShipmentsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_shipments_models.SubmitShipmentConfirmationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
