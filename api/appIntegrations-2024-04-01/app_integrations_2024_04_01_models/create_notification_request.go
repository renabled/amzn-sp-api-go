// Code generated by go-swagger; DO NOT EDIT.

package app_integrations_2024_04_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateNotificationRequest The request for the `createNotification` operation.
// Example: {"marketplaceId":"ATVPDKIKX0DER","notificationParameters":{"priceValue":"200"},"templateId":"PRICE_CHANGE"}
//
// swagger:model CreateNotificationRequest
type CreateNotificationRequest struct {

	// An encrypted marketplace identifier for the posted notification.
	MarketplaceID string `json:"marketplaceId,omitempty"`

	// The parameters specified in the template you used to onboard your application.
	// Required: true
	NotificationParameters NotificationParameters `json:"notificationParameters"`

	// The unique identifier of the notification template you used to onboard your application.
	// Required: true
	TemplateID *string `json:"templateId"`
}

// Validate validates this create notification request
func (m *CreateNotificationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNotificationParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateNotificationRequest) validateNotificationParameters(formats strfmt.Registry) error {

	if m.NotificationParameters == nil {
		return errors.Required("notificationParameters", "body", nil)
	}

	return nil
}

func (m *CreateNotificationRequest) validateTemplateID(formats strfmt.Registry) error {

	if err := validate.Required("templateId", "body", m.TemplateID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create notification request based on context it is used
func (m *CreateNotificationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateNotificationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateNotificationRequest) UnmarshalBinary(b []byte) error {
	var res CreateNotificationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
