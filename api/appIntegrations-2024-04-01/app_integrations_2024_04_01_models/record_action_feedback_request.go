// Code generated by go-swagger; DO NOT EDIT.

package app_integrations_2024_04_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RecordActionFeedbackRequest The request for the `recordActionFeedback` operation.
// Example: {"feedbackActionCode":"SELLER_ACTION_COMPLETED"}
//
// swagger:model RecordActionFeedbackRequest
type RecordActionFeedbackRequest struct {

	// The unique identifier for each notification status.
	// Required: true
	// Enum: [SELLER_ACTION_COMPLETED]
	FeedbackActionCode *string `json:"feedbackActionCode"`
}

// Validate validates this record action feedback request
func (m *RecordActionFeedbackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeedbackActionCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var recordActionFeedbackRequestTypeFeedbackActionCodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SELLER_ACTION_COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordActionFeedbackRequestTypeFeedbackActionCodePropEnum = append(recordActionFeedbackRequestTypeFeedbackActionCodePropEnum, v)
	}
}

const (

	// RecordActionFeedbackRequestFeedbackActionCodeSELLERACTIONCOMPLETED captures enum value "SELLER_ACTION_COMPLETED"
	RecordActionFeedbackRequestFeedbackActionCodeSELLERACTIONCOMPLETED string = "SELLER_ACTION_COMPLETED"
)

// prop value enum
func (m *RecordActionFeedbackRequest) validateFeedbackActionCodeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, recordActionFeedbackRequestTypeFeedbackActionCodePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RecordActionFeedbackRequest) validateFeedbackActionCode(formats strfmt.Registry) error {

	if err := validate.Required("feedbackActionCode", "body", m.FeedbackActionCode); err != nil {
		return err
	}

	// value enum
	if err := m.validateFeedbackActionCodeEnum("feedbackActionCode", "body", *m.FeedbackActionCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this record action feedback request based on context it is used
func (m *RecordActionFeedbackRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RecordActionFeedbackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecordActionFeedbackRequest) UnmarshalBinary(b []byte) error {
	var res RecordActionFeedbackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
