// Code generated by go-swagger; DO NOT EDIT.

package app_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/appIntegrations-2024-04-01/app_integrations_2024_04_01_models"
)

// CreateNotificationReader is a Reader for the CreateNotification structure.
type CreateNotificationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNotificationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateNotificationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateNotificationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateNotificationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateNotificationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateNotificationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateNotificationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateNotificationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateNotificationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateNotificationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateNotificationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateNotificationOK creates a CreateNotificationOK with default headers values
func NewCreateNotificationOK() *CreateNotificationOK {
	return &CreateNotificationOK{}
}

/*
CreateNotificationOK describes a response with status code 200, with default header values.

Successful creation of notification with the identifier captured in response.
*/
type CreateNotificationOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.CreateNotificationResponse
}

// IsSuccess returns true when this create notification o k response has a 2xx status code
func (o *CreateNotificationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create notification o k response has a 3xx status code
func (o *CreateNotificationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification o k response has a 4xx status code
func (o *CreateNotificationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create notification o k response has a 5xx status code
func (o *CreateNotificationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification o k response a status code equal to that given
func (o *CreateNotificationOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateNotificationOK) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationOK  %+v", 200, o.Payload)
}

func (o *CreateNotificationOK) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationOK  %+v", 200, o.Payload)
}

func (o *CreateNotificationOK) GetPayload() *app_integrations_2024_04_01_models.CreateNotificationResponse {
	return o.Payload
}

func (o *CreateNotificationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.CreateNotificationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationBadRequest creates a CreateNotificationBadRequest with default headers values
func NewCreateNotificationBadRequest() *CreateNotificationBadRequest {
	return &CreateNotificationBadRequest{}
}

/*
CreateNotificationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateNotificationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification bad request response has a 2xx status code
func (o *CreateNotificationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification bad request response has a 3xx status code
func (o *CreateNotificationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification bad request response has a 4xx status code
func (o *CreateNotificationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification bad request response has a 5xx status code
func (o *CreateNotificationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification bad request response a status code equal to that given
func (o *CreateNotificationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateNotificationBadRequest) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *CreateNotificationBadRequest) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationBadRequest  %+v", 400, o.Payload)
}

func (o *CreateNotificationBadRequest) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationUnauthorized creates a CreateNotificationUnauthorized with default headers values
func NewCreateNotificationUnauthorized() *CreateNotificationUnauthorized {
	return &CreateNotificationUnauthorized{}
}

/*
CreateNotificationUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateNotificationUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification unauthorized response has a 2xx status code
func (o *CreateNotificationUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification unauthorized response has a 3xx status code
func (o *CreateNotificationUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification unauthorized response has a 4xx status code
func (o *CreateNotificationUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification unauthorized response has a 5xx status code
func (o *CreateNotificationUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification unauthorized response a status code equal to that given
func (o *CreateNotificationUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateNotificationUnauthorized) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateNotificationUnauthorized) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateNotificationUnauthorized) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationForbidden creates a CreateNotificationForbidden with default headers values
func NewCreateNotificationForbidden() *CreateNotificationForbidden {
	return &CreateNotificationForbidden{}
}

/*
CreateNotificationForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateNotificationForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification forbidden response has a 2xx status code
func (o *CreateNotificationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification forbidden response has a 3xx status code
func (o *CreateNotificationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification forbidden response has a 4xx status code
func (o *CreateNotificationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification forbidden response has a 5xx status code
func (o *CreateNotificationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification forbidden response a status code equal to that given
func (o *CreateNotificationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateNotificationForbidden) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationForbidden  %+v", 403, o.Payload)
}

func (o *CreateNotificationForbidden) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationForbidden  %+v", 403, o.Payload)
}

func (o *CreateNotificationForbidden) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationNotFound creates a CreateNotificationNotFound with default headers values
func NewCreateNotificationNotFound() *CreateNotificationNotFound {
	return &CreateNotificationNotFound{}
}

/*
CreateNotificationNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateNotificationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification not found response has a 2xx status code
func (o *CreateNotificationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification not found response has a 3xx status code
func (o *CreateNotificationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification not found response has a 4xx status code
func (o *CreateNotificationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification not found response has a 5xx status code
func (o *CreateNotificationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification not found response a status code equal to that given
func (o *CreateNotificationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateNotificationNotFound) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationNotFound  %+v", 404, o.Payload)
}

func (o *CreateNotificationNotFound) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationNotFound  %+v", 404, o.Payload)
}

func (o *CreateNotificationNotFound) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationRequestEntityTooLarge creates a CreateNotificationRequestEntityTooLarge with default headers values
func NewCreateNotificationRequestEntityTooLarge() *CreateNotificationRequestEntityTooLarge {
	return &CreateNotificationRequestEntityTooLarge{}
}

/*
CreateNotificationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateNotificationRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification request entity too large response has a 2xx status code
func (o *CreateNotificationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification request entity too large response has a 3xx status code
func (o *CreateNotificationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification request entity too large response has a 4xx status code
func (o *CreateNotificationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification request entity too large response has a 5xx status code
func (o *CreateNotificationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification request entity too large response a status code equal to that given
func (o *CreateNotificationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateNotificationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateNotificationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateNotificationRequestEntityTooLarge) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationUnsupportedMediaType creates a CreateNotificationUnsupportedMediaType with default headers values
func NewCreateNotificationUnsupportedMediaType() *CreateNotificationUnsupportedMediaType {
	return &CreateNotificationUnsupportedMediaType{}
}

/*
CreateNotificationUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateNotificationUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification unsupported media type response has a 2xx status code
func (o *CreateNotificationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification unsupported media type response has a 3xx status code
func (o *CreateNotificationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification unsupported media type response has a 4xx status code
func (o *CreateNotificationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification unsupported media type response has a 5xx status code
func (o *CreateNotificationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification unsupported media type response a status code equal to that given
func (o *CreateNotificationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateNotificationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateNotificationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateNotificationUnsupportedMediaType) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationTooManyRequests creates a CreateNotificationTooManyRequests with default headers values
func NewCreateNotificationTooManyRequests() *CreateNotificationTooManyRequests {
	return &CreateNotificationTooManyRequests{}
}

/*
CreateNotificationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateNotificationTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification too many requests response has a 2xx status code
func (o *CreateNotificationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification too many requests response has a 3xx status code
func (o *CreateNotificationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification too many requests response has a 4xx status code
func (o *CreateNotificationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create notification too many requests response has a 5xx status code
func (o *CreateNotificationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create notification too many requests response a status code equal to that given
func (o *CreateNotificationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateNotificationTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateNotificationTooManyRequests) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateNotificationTooManyRequests) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationInternalServerError creates a CreateNotificationInternalServerError with default headers values
func NewCreateNotificationInternalServerError() *CreateNotificationInternalServerError {
	return &CreateNotificationInternalServerError{}
}

/*
CreateNotificationInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateNotificationInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification internal server error response has a 2xx status code
func (o *CreateNotificationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification internal server error response has a 3xx status code
func (o *CreateNotificationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification internal server error response has a 4xx status code
func (o *CreateNotificationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create notification internal server error response has a 5xx status code
func (o *CreateNotificationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create notification internal server error response a status code equal to that given
func (o *CreateNotificationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateNotificationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateNotificationInternalServerError) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateNotificationInternalServerError) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNotificationServiceUnavailable creates a CreateNotificationServiceUnavailable with default headers values
func NewCreateNotificationServiceUnavailable() *CreateNotificationServiceUnavailable {
	return &CreateNotificationServiceUnavailable{}
}

/*
CreateNotificationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateNotificationServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this create notification service unavailable response has a 2xx status code
func (o *CreateNotificationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create notification service unavailable response has a 3xx status code
func (o *CreateNotificationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create notification service unavailable response has a 4xx status code
func (o *CreateNotificationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create notification service unavailable response has a 5xx status code
func (o *CreateNotificationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create notification service unavailable response a status code equal to that given
func (o *CreateNotificationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateNotificationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateNotificationServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications][%d] createNotificationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateNotificationServiceUnavailable) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *CreateNotificationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
