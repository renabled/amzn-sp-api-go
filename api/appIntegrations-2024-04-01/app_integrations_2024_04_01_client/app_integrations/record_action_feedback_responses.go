// Code generated by go-swagger; DO NOT EDIT.

package app_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/appIntegrations-2024-04-01/app_integrations_2024_04_01_models"
)

// RecordActionFeedbackReader is a Reader for the RecordActionFeedback structure.
type RecordActionFeedbackReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RecordActionFeedbackReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRecordActionFeedbackNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRecordActionFeedbackBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRecordActionFeedbackUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRecordActionFeedbackForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRecordActionFeedbackNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewRecordActionFeedbackRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewRecordActionFeedbackUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRecordActionFeedbackTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRecordActionFeedbackInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRecordActionFeedbackServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRecordActionFeedbackNoContent creates a RecordActionFeedbackNoContent with default headers values
func NewRecordActionFeedbackNoContent() *RecordActionFeedbackNoContent {
	return &RecordActionFeedbackNoContent{}
}

/*
RecordActionFeedbackNoContent describes a response with status code 204, with default header values.

Successfully processed the recordActionFeedback request.
*/
type RecordActionFeedbackNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this record action feedback no content response has a 2xx status code
func (o *RecordActionFeedbackNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this record action feedback no content response has a 3xx status code
func (o *RecordActionFeedbackNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback no content response has a 4xx status code
func (o *RecordActionFeedbackNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this record action feedback no content response has a 5xx status code
func (o *RecordActionFeedbackNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback no content response a status code equal to that given
func (o *RecordActionFeedbackNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *RecordActionFeedbackNoContent) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackNoContent ", 204)
}

func (o *RecordActionFeedbackNoContent) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackNoContent ", 204)
}

func (o *RecordActionFeedbackNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewRecordActionFeedbackBadRequest creates a RecordActionFeedbackBadRequest with default headers values
func NewRecordActionFeedbackBadRequest() *RecordActionFeedbackBadRequest {
	return &RecordActionFeedbackBadRequest{}
}

/*
RecordActionFeedbackBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type RecordActionFeedbackBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback bad request response has a 2xx status code
func (o *RecordActionFeedbackBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback bad request response has a 3xx status code
func (o *RecordActionFeedbackBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback bad request response has a 4xx status code
func (o *RecordActionFeedbackBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback bad request response has a 5xx status code
func (o *RecordActionFeedbackBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback bad request response a status code equal to that given
func (o *RecordActionFeedbackBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RecordActionFeedbackBadRequest) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackBadRequest  %+v", 400, o.Payload)
}

func (o *RecordActionFeedbackBadRequest) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackBadRequest  %+v", 400, o.Payload)
}

func (o *RecordActionFeedbackBadRequest) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackUnauthorized creates a RecordActionFeedbackUnauthorized with default headers values
func NewRecordActionFeedbackUnauthorized() *RecordActionFeedbackUnauthorized {
	return &RecordActionFeedbackUnauthorized{}
}

/*
RecordActionFeedbackUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type RecordActionFeedbackUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback unauthorized response has a 2xx status code
func (o *RecordActionFeedbackUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback unauthorized response has a 3xx status code
func (o *RecordActionFeedbackUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback unauthorized response has a 4xx status code
func (o *RecordActionFeedbackUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback unauthorized response has a 5xx status code
func (o *RecordActionFeedbackUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback unauthorized response a status code equal to that given
func (o *RecordActionFeedbackUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RecordActionFeedbackUnauthorized) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackUnauthorized  %+v", 401, o.Payload)
}

func (o *RecordActionFeedbackUnauthorized) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackUnauthorized  %+v", 401, o.Payload)
}

func (o *RecordActionFeedbackUnauthorized) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackForbidden creates a RecordActionFeedbackForbidden with default headers values
func NewRecordActionFeedbackForbidden() *RecordActionFeedbackForbidden {
	return &RecordActionFeedbackForbidden{}
}

/*
RecordActionFeedbackForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type RecordActionFeedbackForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback forbidden response has a 2xx status code
func (o *RecordActionFeedbackForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback forbidden response has a 3xx status code
func (o *RecordActionFeedbackForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback forbidden response has a 4xx status code
func (o *RecordActionFeedbackForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback forbidden response has a 5xx status code
func (o *RecordActionFeedbackForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback forbidden response a status code equal to that given
func (o *RecordActionFeedbackForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RecordActionFeedbackForbidden) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackForbidden  %+v", 403, o.Payload)
}

func (o *RecordActionFeedbackForbidden) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackForbidden  %+v", 403, o.Payload)
}

func (o *RecordActionFeedbackForbidden) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackNotFound creates a RecordActionFeedbackNotFound with default headers values
func NewRecordActionFeedbackNotFound() *RecordActionFeedbackNotFound {
	return &RecordActionFeedbackNotFound{}
}

/*
RecordActionFeedbackNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type RecordActionFeedbackNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback not found response has a 2xx status code
func (o *RecordActionFeedbackNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback not found response has a 3xx status code
func (o *RecordActionFeedbackNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback not found response has a 4xx status code
func (o *RecordActionFeedbackNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback not found response has a 5xx status code
func (o *RecordActionFeedbackNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback not found response a status code equal to that given
func (o *RecordActionFeedbackNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RecordActionFeedbackNotFound) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackNotFound  %+v", 404, o.Payload)
}

func (o *RecordActionFeedbackNotFound) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackNotFound  %+v", 404, o.Payload)
}

func (o *RecordActionFeedbackNotFound) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackRequestEntityTooLarge creates a RecordActionFeedbackRequestEntityTooLarge with default headers values
func NewRecordActionFeedbackRequestEntityTooLarge() *RecordActionFeedbackRequestEntityTooLarge {
	return &RecordActionFeedbackRequestEntityTooLarge{}
}

/*
RecordActionFeedbackRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type RecordActionFeedbackRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback request entity too large response has a 2xx status code
func (o *RecordActionFeedbackRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback request entity too large response has a 3xx status code
func (o *RecordActionFeedbackRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback request entity too large response has a 4xx status code
func (o *RecordActionFeedbackRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback request entity too large response has a 5xx status code
func (o *RecordActionFeedbackRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback request entity too large response a status code equal to that given
func (o *RecordActionFeedbackRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *RecordActionFeedbackRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *RecordActionFeedbackRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *RecordActionFeedbackRequestEntityTooLarge) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackUnsupportedMediaType creates a RecordActionFeedbackUnsupportedMediaType with default headers values
func NewRecordActionFeedbackUnsupportedMediaType() *RecordActionFeedbackUnsupportedMediaType {
	return &RecordActionFeedbackUnsupportedMediaType{}
}

/*
RecordActionFeedbackUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type RecordActionFeedbackUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback unsupported media type response has a 2xx status code
func (o *RecordActionFeedbackUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback unsupported media type response has a 3xx status code
func (o *RecordActionFeedbackUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback unsupported media type response has a 4xx status code
func (o *RecordActionFeedbackUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback unsupported media type response has a 5xx status code
func (o *RecordActionFeedbackUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback unsupported media type response a status code equal to that given
func (o *RecordActionFeedbackUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *RecordActionFeedbackUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *RecordActionFeedbackUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *RecordActionFeedbackUnsupportedMediaType) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackTooManyRequests creates a RecordActionFeedbackTooManyRequests with default headers values
func NewRecordActionFeedbackTooManyRequests() *RecordActionFeedbackTooManyRequests {
	return &RecordActionFeedbackTooManyRequests{}
}

/*
RecordActionFeedbackTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type RecordActionFeedbackTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback too many requests response has a 2xx status code
func (o *RecordActionFeedbackTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback too many requests response has a 3xx status code
func (o *RecordActionFeedbackTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback too many requests response has a 4xx status code
func (o *RecordActionFeedbackTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this record action feedback too many requests response has a 5xx status code
func (o *RecordActionFeedbackTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this record action feedback too many requests response a status code equal to that given
func (o *RecordActionFeedbackTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *RecordActionFeedbackTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackTooManyRequests  %+v", 429, o.Payload)
}

func (o *RecordActionFeedbackTooManyRequests) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackTooManyRequests  %+v", 429, o.Payload)
}

func (o *RecordActionFeedbackTooManyRequests) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackInternalServerError creates a RecordActionFeedbackInternalServerError with default headers values
func NewRecordActionFeedbackInternalServerError() *RecordActionFeedbackInternalServerError {
	return &RecordActionFeedbackInternalServerError{}
}

/*
RecordActionFeedbackInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type RecordActionFeedbackInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback internal server error response has a 2xx status code
func (o *RecordActionFeedbackInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback internal server error response has a 3xx status code
func (o *RecordActionFeedbackInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback internal server error response has a 4xx status code
func (o *RecordActionFeedbackInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this record action feedback internal server error response has a 5xx status code
func (o *RecordActionFeedbackInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this record action feedback internal server error response a status code equal to that given
func (o *RecordActionFeedbackInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RecordActionFeedbackInternalServerError) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackInternalServerError  %+v", 500, o.Payload)
}

func (o *RecordActionFeedbackInternalServerError) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackInternalServerError  %+v", 500, o.Payload)
}

func (o *RecordActionFeedbackInternalServerError) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRecordActionFeedbackServiceUnavailable creates a RecordActionFeedbackServiceUnavailable with default headers values
func NewRecordActionFeedbackServiceUnavailable() *RecordActionFeedbackServiceUnavailable {
	return &RecordActionFeedbackServiceUnavailable{}
}

/*
RecordActionFeedbackServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type RecordActionFeedbackServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this record action feedback service unavailable response has a 2xx status code
func (o *RecordActionFeedbackServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this record action feedback service unavailable response has a 3xx status code
func (o *RecordActionFeedbackServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this record action feedback service unavailable response has a 4xx status code
func (o *RecordActionFeedbackServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this record action feedback service unavailable response has a 5xx status code
func (o *RecordActionFeedbackServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this record action feedback service unavailable response a status code equal to that given
func (o *RecordActionFeedbackServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *RecordActionFeedbackServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RecordActionFeedbackServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/{notificationId}/feedback][%d] recordActionFeedbackServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RecordActionFeedbackServiceUnavailable) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *RecordActionFeedbackServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
