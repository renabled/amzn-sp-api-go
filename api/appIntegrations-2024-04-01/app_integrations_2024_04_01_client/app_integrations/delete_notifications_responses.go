// Code generated by go-swagger; DO NOT EDIT.

package app_integrations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/appIntegrations-2024-04-01/app_integrations_2024_04_01_models"
)

// DeleteNotificationsReader is a Reader for the DeleteNotifications structure.
type DeleteNotificationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteNotificationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteNotificationsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteNotificationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteNotificationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteNotificationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteNotificationsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteNotificationsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteNotificationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteNotificationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteNotificationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteNotificationsNoContent creates a DeleteNotificationsNoContent with default headers values
func NewDeleteNotificationsNoContent() *DeleteNotificationsNoContent {
	return &DeleteNotificationsNoContent{}
}

/*
DeleteNotificationsNoContent describes a response with status code 204, with default header values.

Successfully processed the deleteNotifications request.
*/
type DeleteNotificationsNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this delete notifications no content response has a 2xx status code
func (o *DeleteNotificationsNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete notifications no content response has a 3xx status code
func (o *DeleteNotificationsNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications no content response has a 4xx status code
func (o *DeleteNotificationsNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notifications no content response has a 5xx status code
func (o *DeleteNotificationsNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications no content response a status code equal to that given
func (o *DeleteNotificationsNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *DeleteNotificationsNoContent) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsNoContent ", 204)
}

func (o *DeleteNotificationsNoContent) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsNoContent ", 204)
}

func (o *DeleteNotificationsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewDeleteNotificationsBadRequest creates a DeleteNotificationsBadRequest with default headers values
func NewDeleteNotificationsBadRequest() *DeleteNotificationsBadRequest {
	return &DeleteNotificationsBadRequest{}
}

/*
DeleteNotificationsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type DeleteNotificationsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications bad request response has a 2xx status code
func (o *DeleteNotificationsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications bad request response has a 3xx status code
func (o *DeleteNotificationsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications bad request response has a 4xx status code
func (o *DeleteNotificationsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notifications bad request response has a 5xx status code
func (o *DeleteNotificationsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications bad request response a status code equal to that given
func (o *DeleteNotificationsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteNotificationsBadRequest) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteNotificationsBadRequest) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteNotificationsBadRequest) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsForbidden creates a DeleteNotificationsForbidden with default headers values
func NewDeleteNotificationsForbidden() *DeleteNotificationsForbidden {
	return &DeleteNotificationsForbidden{}
}

/*
DeleteNotificationsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type DeleteNotificationsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications forbidden response has a 2xx status code
func (o *DeleteNotificationsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications forbidden response has a 3xx status code
func (o *DeleteNotificationsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications forbidden response has a 4xx status code
func (o *DeleteNotificationsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notifications forbidden response has a 5xx status code
func (o *DeleteNotificationsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications forbidden response a status code equal to that given
func (o *DeleteNotificationsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteNotificationsForbidden) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteNotificationsForbidden) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsForbidden  %+v", 403, o.Payload)
}

func (o *DeleteNotificationsForbidden) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsNotFound creates a DeleteNotificationsNotFound with default headers values
func NewDeleteNotificationsNotFound() *DeleteNotificationsNotFound {
	return &DeleteNotificationsNotFound{}
}

/*
DeleteNotificationsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type DeleteNotificationsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications not found response has a 2xx status code
func (o *DeleteNotificationsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications not found response has a 3xx status code
func (o *DeleteNotificationsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications not found response has a 4xx status code
func (o *DeleteNotificationsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notifications not found response has a 5xx status code
func (o *DeleteNotificationsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications not found response a status code equal to that given
func (o *DeleteNotificationsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteNotificationsNotFound) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNotificationsNotFound) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsNotFound  %+v", 404, o.Payload)
}

func (o *DeleteNotificationsNotFound) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsRequestEntityTooLarge creates a DeleteNotificationsRequestEntityTooLarge with default headers values
func NewDeleteNotificationsRequestEntityTooLarge() *DeleteNotificationsRequestEntityTooLarge {
	return &DeleteNotificationsRequestEntityTooLarge{}
}

/*
DeleteNotificationsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type DeleteNotificationsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications request entity too large response has a 2xx status code
func (o *DeleteNotificationsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications request entity too large response has a 3xx status code
func (o *DeleteNotificationsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications request entity too large response has a 4xx status code
func (o *DeleteNotificationsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notifications request entity too large response has a 5xx status code
func (o *DeleteNotificationsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications request entity too large response a status code equal to that given
func (o *DeleteNotificationsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteNotificationsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteNotificationsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteNotificationsRequestEntityTooLarge) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsUnsupportedMediaType creates a DeleteNotificationsUnsupportedMediaType with default headers values
func NewDeleteNotificationsUnsupportedMediaType() *DeleteNotificationsUnsupportedMediaType {
	return &DeleteNotificationsUnsupportedMediaType{}
}

/*
DeleteNotificationsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type DeleteNotificationsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications unsupported media type response has a 2xx status code
func (o *DeleteNotificationsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications unsupported media type response has a 3xx status code
func (o *DeleteNotificationsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications unsupported media type response has a 4xx status code
func (o *DeleteNotificationsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notifications unsupported media type response has a 5xx status code
func (o *DeleteNotificationsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications unsupported media type response a status code equal to that given
func (o *DeleteNotificationsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteNotificationsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteNotificationsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteNotificationsUnsupportedMediaType) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsTooManyRequests creates a DeleteNotificationsTooManyRequests with default headers values
func NewDeleteNotificationsTooManyRequests() *DeleteNotificationsTooManyRequests {
	return &DeleteNotificationsTooManyRequests{}
}

/*
DeleteNotificationsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type DeleteNotificationsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications too many requests response has a 2xx status code
func (o *DeleteNotificationsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications too many requests response has a 3xx status code
func (o *DeleteNotificationsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications too many requests response has a 4xx status code
func (o *DeleteNotificationsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete notifications too many requests response has a 5xx status code
func (o *DeleteNotificationsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete notifications too many requests response a status code equal to that given
func (o *DeleteNotificationsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteNotificationsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteNotificationsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteNotificationsTooManyRequests) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsInternalServerError creates a DeleteNotificationsInternalServerError with default headers values
func NewDeleteNotificationsInternalServerError() *DeleteNotificationsInternalServerError {
	return &DeleteNotificationsInternalServerError{}
}

/*
DeleteNotificationsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type DeleteNotificationsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications internal server error response has a 2xx status code
func (o *DeleteNotificationsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications internal server error response has a 3xx status code
func (o *DeleteNotificationsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications internal server error response has a 4xx status code
func (o *DeleteNotificationsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notifications internal server error response has a 5xx status code
func (o *DeleteNotificationsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete notifications internal server error response a status code equal to that given
func (o *DeleteNotificationsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteNotificationsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteNotificationsInternalServerError) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteNotificationsInternalServerError) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteNotificationsServiceUnavailable creates a DeleteNotificationsServiceUnavailable with default headers values
func NewDeleteNotificationsServiceUnavailable() *DeleteNotificationsServiceUnavailable {
	return &DeleteNotificationsServiceUnavailable{}
}

/*
DeleteNotificationsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type DeleteNotificationsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *app_integrations_2024_04_01_models.ErrorList
}

// IsSuccess returns true when this delete notifications service unavailable response has a 2xx status code
func (o *DeleteNotificationsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete notifications service unavailable response has a 3xx status code
func (o *DeleteNotificationsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete notifications service unavailable response has a 4xx status code
func (o *DeleteNotificationsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete notifications service unavailable response has a 5xx status code
func (o *DeleteNotificationsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete notifications service unavailable response a status code equal to that given
func (o *DeleteNotificationsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteNotificationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteNotificationsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /appIntegrations/2024-04-01/notifications/deletion][%d] deleteNotificationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteNotificationsServiceUnavailable) GetPayload() *app_integrations_2024_04_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteNotificationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(app_integrations_2024_04_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
