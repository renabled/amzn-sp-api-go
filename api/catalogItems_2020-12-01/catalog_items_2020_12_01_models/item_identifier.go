// Code generated by go-swagger; DO NOT EDIT.

package catalog_items_2020_12_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemIdentifier Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier.
//
// swagger:model ItemIdentifier
type ItemIdentifier struct {

	// Identifier.
	// Required: true
	Identifier *string `json:"identifier"`

	// Type of identifier, such as UPC, EAN, or ISBN.
	// Required: true
	IdentifierType *string `json:"identifierType"`
}

// Validate validates this item identifier
func (m *ItemIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIdentifierType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemIdentifier) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *ItemIdentifier) validateIdentifierType(formats strfmt.Registry) error {

	if err := validate.Required("identifierType", "body", m.IdentifierType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this item identifier based on context it is used
func (m *ItemIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItemIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemIdentifier) UnmarshalBinary(b []byte) error {
	var res ItemIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
