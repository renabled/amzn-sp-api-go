// Code generated by go-swagger; DO NOT EDIT.

package catalog_items_2020_12_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemImage Image for an item in the Amazon catalog.
//
// swagger:model ItemImage
type ItemImage struct {

	// Height of the image in pixels.
	// Required: true
	Height *int64 `json:"height"`

	// Link, or URL, for the image.
	// Required: true
	Link *string `json:"link"`

	// Variant of the image, such as MAIN or PT01.
	// Example: MAIN
	// Required: true
	// Enum: [MAIN PT01 PT02 PT03 PT04 PT05 PT06 PT07 PT08 SWCH]
	Variant *string `json:"variant"`

	// Width of the image in pixels.
	// Required: true
	Width *int64 `json:"width"`
}

// Validate validates this item image
func (m *ItemImage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVariant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemImage) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *ItemImage) validateLink(formats strfmt.Registry) error {

	if err := validate.Required("link", "body", m.Link); err != nil {
		return err
	}

	return nil
}

var itemImageTypeVariantPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MAIN","PT01","PT02","PT03","PT04","PT05","PT06","PT07","PT08","SWCH"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemImageTypeVariantPropEnum = append(itemImageTypeVariantPropEnum, v)
	}
}

const (

	// ItemImageVariantMAIN captures enum value "MAIN"
	ItemImageVariantMAIN string = "MAIN"

	// ItemImageVariantPT01 captures enum value "PT01"
	ItemImageVariantPT01 string = "PT01"

	// ItemImageVariantPT02 captures enum value "PT02"
	ItemImageVariantPT02 string = "PT02"

	// ItemImageVariantPT03 captures enum value "PT03"
	ItemImageVariantPT03 string = "PT03"

	// ItemImageVariantPT04 captures enum value "PT04"
	ItemImageVariantPT04 string = "PT04"

	// ItemImageVariantPT05 captures enum value "PT05"
	ItemImageVariantPT05 string = "PT05"

	// ItemImageVariantPT06 captures enum value "PT06"
	ItemImageVariantPT06 string = "PT06"

	// ItemImageVariantPT07 captures enum value "PT07"
	ItemImageVariantPT07 string = "PT07"

	// ItemImageVariantPT08 captures enum value "PT08"
	ItemImageVariantPT08 string = "PT08"

	// ItemImageVariantSWCH captures enum value "SWCH"
	ItemImageVariantSWCH string = "SWCH"
)

// prop value enum
func (m *ItemImage) validateVariantEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemImageTypeVariantPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItemImage) validateVariant(formats strfmt.Registry) error {

	if err := validate.Required("variant", "body", m.Variant); err != nil {
		return err
	}

	// value enum
	if err := m.validateVariantEnum("variant", "body", *m.Variant); err != nil {
		return err
	}

	return nil
}

func (m *ItemImage) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this item image based on context it is used
func (m *ItemImage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ItemImage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemImage) UnmarshalBinary(b []byte) error {
	var res ItemImage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
