// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BoxContentsSource Where the seller provided box contents information for a shipment.
//
// swagger:model BoxContentsSource
type BoxContentsSource string

func NewBoxContentsSource(value BoxContentsSource) *BoxContentsSource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BoxContentsSource.
func (m BoxContentsSource) Pointer() *BoxContentsSource {
	return &m
}

const (

	// BoxContentsSourceNONE captures enum value "NONE"
	BoxContentsSourceNONE BoxContentsSource = "NONE"

	// BoxContentsSourceFEED captures enum value "FEED"
	BoxContentsSourceFEED BoxContentsSource = "FEED"

	// BoxContentsSourceNr2DBARCODE captures enum value "2D_BARCODE"
	BoxContentsSourceNr2DBARCODE BoxContentsSource = "2D_BARCODE"

	// BoxContentsSourceINTERACTIVE captures enum value "INTERACTIVE"
	BoxContentsSourceINTERACTIVE BoxContentsSource = "INTERACTIVE"
)

// for schema
var boxContentsSourceEnum []interface{}

func init() {
	var res []BoxContentsSource
	if err := json.Unmarshal([]byte(`["NONE","FEED","2D_BARCODE","INTERACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		boxContentsSourceEnum = append(boxContentsSourceEnum, v)
	}
}

func (m BoxContentsSource) validateBoxContentsSourceEnum(path, location string, value BoxContentsSource) error {
	if err := validate.EnumCase(path, location, value, boxContentsSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this box contents source
func (m BoxContentsSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBoxContentsSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this box contents source based on context it is used
func (m BoxContentsSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
