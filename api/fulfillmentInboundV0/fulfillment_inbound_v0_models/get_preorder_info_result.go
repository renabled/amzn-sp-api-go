// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetPreorderInfoResult get preorder info result
//
// swagger:model GetPreorderInfoResult
type GetPreorderInfoResult struct {

	// Date in YYYY-MM-DD format that determines which pre-order items in the shipment are eligible for pre-order. If this shipment is confirmed for pre-order with a subsequent call to the confirmPreorder operation, the pre-order Buy Box will appear for any pre-order items in the shipment with a release date on or after this date. Call the getShipmentItems operation to get the release dates for the pre-order items in this shipment.
	// Format: date
	ConfirmedFulfillableDate DateStringType `json:"ConfirmedFulfillableDate,omitempty"`

	// Date that the shipment would need to arrive at an Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items if this shipment is later confirmed for pre-order. In YYYY-MM-DD format. See also the confirmPreorder operation.
	// Format: date
	NeedByDate DateStringType `json:"NeedByDate,omitempty"`

	// Indicates whether this shipment has been confirmed for pre-order.
	ShipmentConfirmedForPreorder bool `json:"ShipmentConfirmedForPreorder,omitempty"`

	// Indicates whether the shipment contains items that have been enabled for pre-order. For more information about enabling items for pre-order, see the Seller Central Help.
	ShipmentContainsPreorderableItems bool `json:"ShipmentContainsPreorderableItems,omitempty"`
}

// Validate validates this get preorder info result
func (m *GetPreorderInfoResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmedFulfillableDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNeedByDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPreorderInfoResult) validateConfirmedFulfillableDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmedFulfillableDate) { // not required
		return nil
	}

	if err := m.ConfirmedFulfillableDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ConfirmedFulfillableDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ConfirmedFulfillableDate")
		}
		return err
	}

	return nil
}

func (m *GetPreorderInfoResult) validateNeedByDate(formats strfmt.Registry) error {
	if swag.IsZero(m.NeedByDate) { // not required
		return nil
	}

	if err := m.NeedByDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NeedByDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("NeedByDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get preorder info result based on the context it is used
func (m *GetPreorderInfoResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfirmedFulfillableDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNeedByDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPreorderInfoResult) contextValidateConfirmedFulfillableDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ConfirmedFulfillableDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ConfirmedFulfillableDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ConfirmedFulfillableDate")
		}
		return err
	}

	return nil
}

func (m *GetPreorderInfoResult) contextValidateNeedByDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NeedByDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NeedByDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("NeedByDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPreorderInfoResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPreorderInfoResult) UnmarshalBinary(b []byte) error {
	var res GetPreorderInfoResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
