// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetPrepInstructionsResult get prep instructions result
//
// swagger:model GetPrepInstructionsResult
type GetPrepInstructionsResult struct {

	// a s i n prep instructions list
	ASINPrepInstructionsList ASINPrepInstructionsList `json:"ASINPrepInstructionsList,omitempty"`

	// invalid a s i n list
	InvalidASINList InvalidASINList `json:"InvalidASINList,omitempty"`

	// invalid s k u list
	InvalidSKUList InvalidSKUList `json:"InvalidSKUList,omitempty"`

	// s k u prep instructions list
	SKUPrepInstructionsList SKUPrepInstructionsList `json:"SKUPrepInstructionsList,omitempty"`
}

// Validate validates this get prep instructions result
func (m *GetPrepInstructionsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateASINPrepInstructionsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvalidASINList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvalidSKUList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSKUPrepInstructionsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPrepInstructionsResult) validateASINPrepInstructionsList(formats strfmt.Registry) error {
	if swag.IsZero(m.ASINPrepInstructionsList) { // not required
		return nil
	}

	if err := m.ASINPrepInstructionsList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ASINPrepInstructionsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ASINPrepInstructionsList")
		}
		return err
	}

	return nil
}

func (m *GetPrepInstructionsResult) validateInvalidASINList(formats strfmt.Registry) error {
	if swag.IsZero(m.InvalidASINList) { // not required
		return nil
	}

	if err := m.InvalidASINList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("InvalidASINList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("InvalidASINList")
		}
		return err
	}

	return nil
}

func (m *GetPrepInstructionsResult) validateInvalidSKUList(formats strfmt.Registry) error {
	if swag.IsZero(m.InvalidSKUList) { // not required
		return nil
	}

	if err := m.InvalidSKUList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("InvalidSKUList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("InvalidSKUList")
		}
		return err
	}

	return nil
}

func (m *GetPrepInstructionsResult) validateSKUPrepInstructionsList(formats strfmt.Registry) error {
	if swag.IsZero(m.SKUPrepInstructionsList) { // not required
		return nil
	}

	if err := m.SKUPrepInstructionsList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SKUPrepInstructionsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SKUPrepInstructionsList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get prep instructions result based on the context it is used
func (m *GetPrepInstructionsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateASINPrepInstructionsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvalidASINList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvalidSKUList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSKUPrepInstructionsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetPrepInstructionsResult) contextValidateASINPrepInstructionsList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ASINPrepInstructionsList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ASINPrepInstructionsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ASINPrepInstructionsList")
		}
		return err
	}

	return nil
}

func (m *GetPrepInstructionsResult) contextValidateInvalidASINList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InvalidASINList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("InvalidASINList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("InvalidASINList")
		}
		return err
	}

	return nil
}

func (m *GetPrepInstructionsResult) contextValidateInvalidSKUList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InvalidSKUList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("InvalidSKUList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("InvalidSKUList")
		}
		return err
	}

	return nil
}

func (m *GetPrepInstructionsResult) contextValidateSKUPrepInstructionsList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SKUPrepInstructionsList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SKUPrepInstructionsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SKUPrepInstructionsList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetPrepInstructionsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetPrepInstructionsResult) UnmarshalBinary(b []byte) error {
	var res GetPrepInstructionsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
