// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InvalidASIN invalid a s i n
//
// swagger:model InvalidASIN
type InvalidASIN struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN,omitempty"`

	// The reason that the ASIN is invalid.
	ErrorReason ErrorReason `json:"ErrorReason,omitempty"`
}

// Validate validates this invalid a s i n
func (m *InvalidASIN) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidASIN) validateErrorReason(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorReason) { // not required
		return nil
	}

	if err := m.ErrorReason.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ErrorReason")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ErrorReason")
		}
		return err
	}

	return nil
}

// ContextValidate validate this invalid a s i n based on the context it is used
func (m *InvalidASIN) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrorReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidASIN) contextValidateErrorReason(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ErrorReason.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ErrorReason")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ErrorReason")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvalidASIN) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvalidASIN) UnmarshalBinary(b []byte) error {
	var res InvalidASIN
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
