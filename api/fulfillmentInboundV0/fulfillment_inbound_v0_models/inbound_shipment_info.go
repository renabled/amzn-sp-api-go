// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundShipmentInfo Information about the seller's inbound shipments. Returned by the listInboundShipments operation.
//
// swagger:model InboundShipmentInfo
type InboundShipmentInfo struct {

	// Indicates whether or not an inbound shipment contains case-packed boxes. When AreCasesRequired = true for an inbound shipment, all items in the inbound shipment must be case packed.
	// Required: true
	AreCasesRequired *bool `json:"AreCasesRequired"`

	// box contents source
	BoxContentsSource BoxContentsSource `json:"BoxContentsSource,omitempty"`

	// Date by which the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items.
	// Format: date
	ConfirmedNeedByDate DateStringType `json:"ConfirmedNeedByDate,omitempty"`

	// An Amazon fulfillment center identifier created by Amazon.
	DestinationFulfillmentCenterID string `json:"DestinationFulfillmentCenterId,omitempty"`

	// An estimate of the manual processing fee charged by Amazon for boxes without box content information. This is only returned when BoxContentsSource is NONE.
	EstimatedBoxContentsFee *BoxContentsFeeDetails `json:"EstimatedBoxContentsFee,omitempty"`

	// label prep type
	LabelPrepType LabelPrepType `json:"LabelPrepType,omitempty"`

	// The return address.
	// Required: true
	ShipFromAddress *Address `json:"ShipFromAddress"`

	// The shipment identifier submitted in the request.
	ShipmentID string `json:"ShipmentId,omitempty"`

	// The name for the inbound shipment.
	ShipmentName string `json:"ShipmentName,omitempty"`

	// shipment status
	ShipmentStatus ShipmentStatus `json:"ShipmentStatus,omitempty"`
}

// Validate validates this inbound shipment info
func (m *InboundShipmentInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAreCasesRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoxContentsSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmedNeedByDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedBoxContentsFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelPrepType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentInfo) validateAreCasesRequired(formats strfmt.Registry) error {

	if err := validate.Required("AreCasesRequired", "body", m.AreCasesRequired); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) validateBoxContentsSource(formats strfmt.Registry) error {
	if swag.IsZero(m.BoxContentsSource) { // not required
		return nil
	}

	if err := m.BoxContentsSource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BoxContentsSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BoxContentsSource")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) validateConfirmedNeedByDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmedNeedByDate) { // not required
		return nil
	}

	if err := m.ConfirmedNeedByDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ConfirmedNeedByDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ConfirmedNeedByDate")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) validateEstimatedBoxContentsFee(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedBoxContentsFee) { // not required
		return nil
	}

	if m.EstimatedBoxContentsFee != nil {
		if err := m.EstimatedBoxContentsFee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EstimatedBoxContentsFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EstimatedBoxContentsFee")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentInfo) validateLabelPrepType(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelPrepType) { // not required
		return nil
	}

	if err := m.LabelPrepType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LabelPrepType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LabelPrepType")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) validateShipFromAddress(formats strfmt.Registry) error {

	if err := validate.Required("ShipFromAddress", "body", m.ShipFromAddress); err != nil {
		return err
	}

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentInfo) validateShipmentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentStatus) { // not required
		return nil
	}

	if err := m.ShipmentStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this inbound shipment info based on the context it is used
func (m *InboundShipmentInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoxContentsSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConfirmedNeedByDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEstimatedBoxContentsFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelPrepType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentInfo) contextValidateBoxContentsSource(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BoxContentsSource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BoxContentsSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BoxContentsSource")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) contextValidateConfirmedNeedByDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ConfirmedNeedByDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ConfirmedNeedByDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ConfirmedNeedByDate")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) contextValidateEstimatedBoxContentsFee(ctx context.Context, formats strfmt.Registry) error {

	if m.EstimatedBoxContentsFee != nil {
		if err := m.EstimatedBoxContentsFee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EstimatedBoxContentsFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EstimatedBoxContentsFee")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentInfo) contextValidateLabelPrepType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LabelPrepType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LabelPrepType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LabelPrepType")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentInfo) contextValidateShipFromAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentInfo) contextValidateShipmentStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipmentStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundShipmentInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundShipmentInfo) UnmarshalBinary(b []byte) error {
	var res InboundShipmentInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
