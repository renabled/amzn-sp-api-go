// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetShipmentItemsResult get shipment items result
//
// swagger:model GetShipmentItemsResult
type GetShipmentItemsResult struct {

	// A list of item information for an inbound shipment.
	ItemData InboundShipmentItemList `json:"ItemData,omitempty"`

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken string `json:"NextToken,omitempty"`
}

// Validate validates this get shipment items result
func (m *GetShipmentItemsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetShipmentItemsResult) validateItemData(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemData) { // not required
		return nil
	}

	if err := m.ItemData.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ItemData")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ItemData")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get shipment items result based on the context it is used
func (m *GetShipmentItemsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetShipmentItemsResult) contextValidateItemData(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ItemData.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ItemData")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ItemData")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetShipmentItemsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetShipmentItemsResult) UnmarshalBinary(b []byte) error {
	var res GetShipmentItemsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
