// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SKUPrepInstructions Labeling requirements and item preparation instructions to help you prepare items for shipment to Amazon's fulfillment network.
//
// swagger:model SKUPrepInstructions
type SKUPrepInstructions struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN,omitempty"`

	// amazon prep fees details list
	AmazonPrepFeesDetailsList AmazonPrepFeesDetailsList `json:"AmazonPrepFeesDetailsList,omitempty"`

	// barcode instruction
	BarcodeInstruction BarcodeInstruction `json:"BarcodeInstruction,omitempty"`

	// prep guidance
	PrepGuidance PrepGuidance `json:"PrepGuidance,omitempty"`

	// prep instruction list
	PrepInstructionList PrepInstructionList `json:"PrepInstructionList,omitempty"`

	// The seller SKU of the item.
	SellerSKU string `json:"SellerSKU,omitempty"`
}

// Validate validates this s k u prep instructions
func (m *SKUPrepInstructions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonPrepFeesDetailsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBarcodeInstruction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepGuidance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepInstructionList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SKUPrepInstructions) validateAmazonPrepFeesDetailsList(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonPrepFeesDetailsList) { // not required
		return nil
	}

	if err := m.AmazonPrepFeesDetailsList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AmazonPrepFeesDetailsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AmazonPrepFeesDetailsList")
		}
		return err
	}

	return nil
}

func (m *SKUPrepInstructions) validateBarcodeInstruction(formats strfmt.Registry) error {
	if swag.IsZero(m.BarcodeInstruction) { // not required
		return nil
	}

	if err := m.BarcodeInstruction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BarcodeInstruction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BarcodeInstruction")
		}
		return err
	}

	return nil
}

func (m *SKUPrepInstructions) validatePrepGuidance(formats strfmt.Registry) error {
	if swag.IsZero(m.PrepGuidance) { // not required
		return nil
	}

	if err := m.PrepGuidance.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepGuidance")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepGuidance")
		}
		return err
	}

	return nil
}

func (m *SKUPrepInstructions) validatePrepInstructionList(formats strfmt.Registry) error {
	if swag.IsZero(m.PrepInstructionList) { // not required
		return nil
	}

	if err := m.PrepInstructionList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepInstructionList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepInstructionList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this s k u prep instructions based on the context it is used
func (m *SKUPrepInstructions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonPrepFeesDetailsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBarcodeInstruction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrepGuidance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrepInstructionList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SKUPrepInstructions) contextValidateAmazonPrepFeesDetailsList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AmazonPrepFeesDetailsList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AmazonPrepFeesDetailsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AmazonPrepFeesDetailsList")
		}
		return err
	}

	return nil
}

func (m *SKUPrepInstructions) contextValidateBarcodeInstruction(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BarcodeInstruction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BarcodeInstruction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BarcodeInstruction")
		}
		return err
	}

	return nil
}

func (m *SKUPrepInstructions) contextValidatePrepGuidance(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PrepGuidance.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepGuidance")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepGuidance")
		}
		return err
	}

	return nil
}

func (m *SKUPrepInstructions) contextValidatePrepInstructionList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PrepInstructionList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepInstructionList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepInstructionList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SKUPrepInstructions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SKUPrepInstructions) UnmarshalBinary(b []byte) error {
	var res SKUPrepInstructions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
