// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartneredLtlDataOutput Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
//
// swagger:model PartneredLtlDataOutput
type PartneredLtlDataOutput struct {

	// Estimate by Amazon of the total value of the inventory in the shipment.
	AmazonCalculatedValue *Amount `json:"AmazonCalculatedValue,omitempty"`

	// A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
	// Required: true
	AmazonReferenceID *string `json:"AmazonReferenceId"`

	// The number of boxes in the shipment.
	// Required: true
	BoxCount *UnsignedIntType `json:"BoxCount"`

	// The carrier for the inbound shipment.
	// Required: true
	CarrierName *string `json:"CarrierName"`

	// Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment.
	// Required: true
	Contact *Contact `json:"Contact"`

	// The date that the shipment will be ready to be picked up by the carrier. Must be in YYYY-MM-DD format.
	// Required: true
	// Format: date
	FreightReadyDate *DateStringType `json:"FreightReadyDate"`

	// Indicates whether the bill of lading for the shipment is available.
	// Required: true
	IsBillOfLadingAvailable *bool `json:"IsBillOfLadingAvailable"`

	// pallet list
	// Required: true
	PalletList PalletList `json:"PalletList"`

	// The estimated shipping cost using an Amazon-partnered carrier.
	PartneredEstimate *PartneredEstimate `json:"PartneredEstimate,omitempty"`

	// The estimated date that the shipment will be delivered to an Amazon fulfillment center, in YYYY-MM-DD format.
	// Required: true
	// Format: date
	PreviewDeliveryDate *DateStringType `json:"PreviewDeliveryDate"`

	// The freight class of the shipment as estimated by Amazon if you did not include a freight class when you called the putTransportDetails operation.
	// Required: true
	PreviewFreightClass *SellerFreightClass `json:"PreviewFreightClass"`

	// The estimated date that the shipment will be picked up by the carrier, in YYYY-MM-DD format.
	// Required: true
	// Format: date
	PreviewPickupDate *DateStringType `json:"PreviewPickupDate"`

	// Your declaration of the total value of the inventory in the shipment.
	SellerDeclaredValue *Amount `json:"SellerDeclaredValue,omitempty"`

	// seller freight class
	SellerFreightClass SellerFreightClass `json:"SellerFreightClass,omitempty"`

	// The total weight of the shipment.
	// Required: true
	TotalWeight *Weight `json:"TotalWeight"`
}

// Validate validates this partnered ltl data output
func (m *PartneredLtlDataOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonCalculatedValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmazonReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBoxCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreightReadyDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsBillOfLadingAvailable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePalletList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartneredEstimate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviewDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviewFreightClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreviewPickupDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerDeclaredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFreightClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredLtlDataOutput) validateAmazonCalculatedValue(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonCalculatedValue) { // not required
		return nil
	}

	if m.AmazonCalculatedValue != nil {
		if err := m.AmazonCalculatedValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AmazonCalculatedValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AmazonCalculatedValue")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateAmazonReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("AmazonReferenceId", "body", m.AmazonReferenceID); err != nil {
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateBoxCount(formats strfmt.Registry) error {

	if err := validate.Required("BoxCount", "body", m.BoxCount); err != nil {
		return err
	}

	if err := validate.Required("BoxCount", "body", m.BoxCount); err != nil {
		return err
	}

	if m.BoxCount != nil {
		if err := m.BoxCount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BoxCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BoxCount")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("CarrierName", "body", m.CarrierName); err != nil {
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateContact(formats strfmt.Registry) error {

	if err := validate.Required("Contact", "body", m.Contact); err != nil {
		return err
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Contact")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateFreightReadyDate(formats strfmt.Registry) error {

	if err := validate.Required("FreightReadyDate", "body", m.FreightReadyDate); err != nil {
		return err
	}

	if err := validate.Required("FreightReadyDate", "body", m.FreightReadyDate); err != nil {
		return err
	}

	if m.FreightReadyDate != nil {
		if err := m.FreightReadyDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FreightReadyDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FreightReadyDate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateIsBillOfLadingAvailable(formats strfmt.Registry) error {

	if err := validate.Required("IsBillOfLadingAvailable", "body", m.IsBillOfLadingAvailable); err != nil {
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) validatePalletList(formats strfmt.Registry) error {

	if err := validate.Required("PalletList", "body", m.PalletList); err != nil {
		return err
	}

	if err := m.PalletList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PalletList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PalletList")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) validatePartneredEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.PartneredEstimate) { // not required
		return nil
	}

	if m.PartneredEstimate != nil {
		if err := m.PartneredEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validatePreviewDeliveryDate(formats strfmt.Registry) error {

	if err := validate.Required("PreviewDeliveryDate", "body", m.PreviewDeliveryDate); err != nil {
		return err
	}

	if err := validate.Required("PreviewDeliveryDate", "body", m.PreviewDeliveryDate); err != nil {
		return err
	}

	if m.PreviewDeliveryDate != nil {
		if err := m.PreviewDeliveryDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreviewDeliveryDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreviewDeliveryDate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validatePreviewFreightClass(formats strfmt.Registry) error {

	if err := validate.Required("PreviewFreightClass", "body", m.PreviewFreightClass); err != nil {
		return err
	}

	if err := validate.Required("PreviewFreightClass", "body", m.PreviewFreightClass); err != nil {
		return err
	}

	if m.PreviewFreightClass != nil {
		if err := m.PreviewFreightClass.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreviewFreightClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreviewFreightClass")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validatePreviewPickupDate(formats strfmt.Registry) error {

	if err := validate.Required("PreviewPickupDate", "body", m.PreviewPickupDate); err != nil {
		return err
	}

	if err := validate.Required("PreviewPickupDate", "body", m.PreviewPickupDate); err != nil {
		return err
	}

	if m.PreviewPickupDate != nil {
		if err := m.PreviewPickupDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreviewPickupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreviewPickupDate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateSellerDeclaredValue(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerDeclaredValue) { // not required
		return nil
	}

	if m.SellerDeclaredValue != nil {
		if err := m.SellerDeclaredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SellerDeclaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SellerDeclaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateSellerFreightClass(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerFreightClass) { // not required
		return nil
	}

	if err := m.SellerFreightClass.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerFreightClass")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerFreightClass")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) validateTotalWeight(formats strfmt.Registry) error {

	if err := validate.Required("TotalWeight", "body", m.TotalWeight); err != nil {
		return err
	}

	if m.TotalWeight != nil {
		if err := m.TotalWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalWeight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partnered ltl data output based on the context it is used
func (m *PartneredLtlDataOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonCalculatedValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBoxCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFreightReadyDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePalletList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartneredEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviewDeliveryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviewFreightClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreviewPickupDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerDeclaredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerFreightClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredLtlDataOutput) contextValidateAmazonCalculatedValue(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonCalculatedValue != nil {
		if err := m.AmazonCalculatedValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AmazonCalculatedValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AmazonCalculatedValue")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidateBoxCount(ctx context.Context, formats strfmt.Registry) error {

	if m.BoxCount != nil {
		if err := m.BoxCount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BoxCount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BoxCount")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {
		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Contact")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidateFreightReadyDate(ctx context.Context, formats strfmt.Registry) error {

	if m.FreightReadyDate != nil {
		if err := m.FreightReadyDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FreightReadyDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FreightReadyDate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidatePalletList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PalletList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PalletList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PalletList")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidatePartneredEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.PartneredEstimate != nil {
		if err := m.PartneredEstimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidatePreviewDeliveryDate(ctx context.Context, formats strfmt.Registry) error {

	if m.PreviewDeliveryDate != nil {
		if err := m.PreviewDeliveryDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreviewDeliveryDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreviewDeliveryDate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidatePreviewFreightClass(ctx context.Context, formats strfmt.Registry) error {

	if m.PreviewFreightClass != nil {
		if err := m.PreviewFreightClass.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreviewFreightClass")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreviewFreightClass")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidatePreviewPickupDate(ctx context.Context, formats strfmt.Registry) error {

	if m.PreviewPickupDate != nil {
		if err := m.PreviewPickupDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreviewPickupDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreviewPickupDate")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidateSellerDeclaredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.SellerDeclaredValue != nil {
		if err := m.SellerDeclaredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SellerDeclaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SellerDeclaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidateSellerFreightClass(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SellerFreightClass.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerFreightClass")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerFreightClass")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataOutput) contextValidateTotalWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalWeight != nil {
		if err := m.TotalWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalWeight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartneredLtlDataOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartneredLtlDataOutput) UnmarshalBinary(b []byte) error {
	var res PartneredLtlDataOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
