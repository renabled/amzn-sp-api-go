// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NonPartneredLtlDataOutput Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment shipped by a carrier that has not partnered with Amazon.
//
// swagger:model NonPartneredLtlDataOutput
type NonPartneredLtlDataOutput struct {

	// The carrier that you are using for the inbound shipment.
	// Required: true
	CarrierName *string `json:"CarrierName"`

	// pro number
	// Required: true
	ProNumber *ProNumber `json:"ProNumber"`
}

// Validate validates this non partnered ltl data output
func (m *NonPartneredLtlDataOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NonPartneredLtlDataOutput) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("CarrierName", "body", m.CarrierName); err != nil {
		return err
	}

	return nil
}

func (m *NonPartneredLtlDataOutput) validateProNumber(formats strfmt.Registry) error {

	if err := validate.Required("ProNumber", "body", m.ProNumber); err != nil {
		return err
	}

	if err := validate.Required("ProNumber", "body", m.ProNumber); err != nil {
		return err
	}

	if m.ProNumber != nil {
		if err := m.ProNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProNumber")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this non partnered ltl data output based on the context it is used
func (m *NonPartneredLtlDataOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NonPartneredLtlDataOutput) contextValidateProNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.ProNumber != nil {
		if err := m.ProNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ProNumber")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NonPartneredLtlDataOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NonPartneredLtlDataOutput) UnmarshalBinary(b []byte) error {
	var res NonPartneredLtlDataOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
