// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BarcodeInstruction Labeling requirements for the item. For more information about FBA labeling requirements, see the Seller Central Help for your marketplace.
//
// swagger:model BarcodeInstruction
type BarcodeInstruction string

func NewBarcodeInstruction(value BarcodeInstruction) *BarcodeInstruction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BarcodeInstruction.
func (m BarcodeInstruction) Pointer() *BarcodeInstruction {
	return &m
}

const (

	// BarcodeInstructionRequiresFNSKULabel captures enum value "RequiresFNSKULabel"
	BarcodeInstructionRequiresFNSKULabel BarcodeInstruction = "RequiresFNSKULabel"

	// BarcodeInstructionCanUseOriginalBarcode captures enum value "CanUseOriginalBarcode"
	BarcodeInstructionCanUseOriginalBarcode BarcodeInstruction = "CanUseOriginalBarcode"

	// BarcodeInstructionMustProvideSellerSKU captures enum value "MustProvideSellerSKU"
	BarcodeInstructionMustProvideSellerSKU BarcodeInstruction = "MustProvideSellerSKU"
)

// for schema
var barcodeInstructionEnum []interface{}

func init() {
	var res []BarcodeInstruction
	if err := json.Unmarshal([]byte(`["RequiresFNSKULabel","CanUseOriginalBarcode","MustProvideSellerSKU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		barcodeInstructionEnum = append(barcodeInstructionEnum, v)
	}
}

func (m BarcodeInstruction) validateBarcodeInstructionEnum(path, location string, value BarcodeInstruction) error {
	if err := validate.EnumCase(path, location, value, barcodeInstructionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this barcode instruction
func (m BarcodeInstruction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBarcodeInstructionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this barcode instruction based on context it is used
func (m BarcodeInstruction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
