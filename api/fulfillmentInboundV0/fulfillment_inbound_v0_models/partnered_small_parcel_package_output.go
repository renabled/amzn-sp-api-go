// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartneredSmallParcelPackageOutput Dimension, weight, and shipping information for the package.
//
// swagger:model PartneredSmallParcelPackageOutput
type PartneredSmallParcelPackageOutput struct {

	// The carrier specified with a previous call to putTransportDetails.
	// Required: true
	CarrierName *string `json:"CarrierName"`

	// dimensions
	// Required: true
	Dimensions *Dimensions `json:"Dimensions"`

	// package status
	// Required: true
	PackageStatus *PackageStatus `json:"PackageStatus"`

	// tracking Id
	// Required: true
	TrackingID *TrackingID `json:"TrackingId"`

	// weight
	// Required: true
	Weight *Weight `json:"Weight"`
}

// Validate validates this partnered small parcel package output
func (m *PartneredSmallParcelPackageOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredSmallParcelPackageOutput) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("CarrierName", "body", m.CarrierName); err != nil {
		return err
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) validateDimensions(formats strfmt.Registry) error {

	if err := validate.Required("Dimensions", "body", m.Dimensions); err != nil {
		return err
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) validatePackageStatus(formats strfmt.Registry) error {

	if err := validate.Required("PackageStatus", "body", m.PackageStatus); err != nil {
		return err
	}

	if err := validate.Required("PackageStatus", "body", m.PackageStatus); err != nil {
		return err
	}

	if m.PackageStatus != nil {
		if err := m.PackageStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) validateTrackingID(formats strfmt.Registry) error {

	if err := validate.Required("TrackingId", "body", m.TrackingID); err != nil {
		return err
	}

	if err := validate.Required("TrackingId", "body", m.TrackingID); err != nil {
		return err
	}

	if m.TrackingID != nil {
		if err := m.TrackingID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TrackingId")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("Weight", "body", m.Weight); err != nil {
		return err
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partnered small parcel package output based on the context it is used
func (m *PartneredSmallParcelPackageOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredSmallParcelPackageOutput) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Dimensions != nil {
		if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) contextValidatePackageStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageStatus != nil {
		if err := m.PackageStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageStatus")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) contextValidateTrackingID(ctx context.Context, formats strfmt.Registry) error {

	if m.TrackingID != nil {
		if err := m.TrackingID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TrackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TrackingId")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredSmallParcelPackageOutput) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartneredSmallParcelPackageOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartneredSmallParcelPackageOutput) UnmarshalBinary(b []byte) error {
	var res PartneredSmallParcelPackageOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
