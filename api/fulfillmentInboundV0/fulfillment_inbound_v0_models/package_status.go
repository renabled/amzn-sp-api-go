// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PackageStatus The shipment status of the package.
//
// swagger:model PackageStatus
type PackageStatus string

func NewPackageStatus(value PackageStatus) *PackageStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PackageStatus.
func (m PackageStatus) Pointer() *PackageStatus {
	return &m
}

const (

	// PackageStatusSHIPPED captures enum value "SHIPPED"
	PackageStatusSHIPPED PackageStatus = "SHIPPED"

	// PackageStatusINTRANSIT captures enum value "IN_TRANSIT"
	PackageStatusINTRANSIT PackageStatus = "IN_TRANSIT"

	// PackageStatusDELIVERED captures enum value "DELIVERED"
	PackageStatusDELIVERED PackageStatus = "DELIVERED"

	// PackageStatusCHECKEDIN captures enum value "CHECKED_IN"
	PackageStatusCHECKEDIN PackageStatus = "CHECKED_IN"

	// PackageStatusRECEIVING captures enum value "RECEIVING"
	PackageStatusRECEIVING PackageStatus = "RECEIVING"

	// PackageStatusCLOSED captures enum value "CLOSED"
	PackageStatusCLOSED PackageStatus = "CLOSED"

	// PackageStatusDELETED captures enum value "DELETED"
	PackageStatusDELETED PackageStatus = "DELETED"
)

// for schema
var packageStatusEnum []interface{}

func init() {
	var res []PackageStatus
	if err := json.Unmarshal([]byte(`["SHIPPED","IN_TRANSIT","DELIVERED","CHECKED_IN","RECEIVING","CLOSED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		packageStatusEnum = append(packageStatusEnum, v)
	}
}

func (m PackageStatus) validatePackageStatusEnum(path, location string, value PackageStatus) error {
	if err := validate.EnumCase(path, location, value, packageStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this package status
func (m PackageStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePackageStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this package status based on context it is used
func (m PackageStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
