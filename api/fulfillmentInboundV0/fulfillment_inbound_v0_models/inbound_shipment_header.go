// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundShipmentHeader Inbound shipment information used to create and update inbound shipments.
//
// swagger:model InboundShipmentHeader
type InboundShipmentHeader struct {

	// Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.
	//
	// Possible values:
	//
	// true - All boxes in the shipment must be case packed.
	//
	// false - All boxes in the shipment must be individually packed.
	//
	// Note: If AreCasesRequired = true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.
	AreCasesRequired bool `json:"AreCasesRequired,omitempty"`

	// The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
	// Required: true
	DestinationFulfillmentCenterID *string `json:"DestinationFulfillmentCenterId"`

	// intended box contents source
	IntendedBoxContentsSource IntendedBoxContentsSource `json:"IntendedBoxContentsSource,omitempty"`

	// The preference for label preparation for an inbound shipment.
	// Required: true
	LabelPrepPreference *LabelPrepPreference `json:"LabelPrepPreference"`

	// The return address.
	// Required: true
	ShipFromAddress *Address `json:"ShipFromAddress"`

	// The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created.
	// Required: true
	ShipmentName *string `json:"ShipmentName"`

	// shipment status
	// Required: true
	ShipmentStatus *ShipmentStatus `json:"ShipmentStatus"`
}

// Validate validates this inbound shipment header
func (m *InboundShipmentHeader) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationFulfillmentCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntendedBoxContentsSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelPrepPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentHeader) validateDestinationFulfillmentCenterID(formats strfmt.Registry) error {

	if err := validate.Required("DestinationFulfillmentCenterId", "body", m.DestinationFulfillmentCenterID); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentHeader) validateIntendedBoxContentsSource(formats strfmt.Registry) error {
	if swag.IsZero(m.IntendedBoxContentsSource) { // not required
		return nil
	}

	if err := m.IntendedBoxContentsSource.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IntendedBoxContentsSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("IntendedBoxContentsSource")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentHeader) validateLabelPrepPreference(formats strfmt.Registry) error {

	if err := validate.Required("LabelPrepPreference", "body", m.LabelPrepPreference); err != nil {
		return err
	}

	if err := validate.Required("LabelPrepPreference", "body", m.LabelPrepPreference); err != nil {
		return err
	}

	if m.LabelPrepPreference != nil {
		if err := m.LabelPrepPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LabelPrepPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LabelPrepPreference")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentHeader) validateShipFromAddress(formats strfmt.Registry) error {

	if err := validate.Required("ShipFromAddress", "body", m.ShipFromAddress); err != nil {
		return err
	}

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentHeader) validateShipmentName(formats strfmt.Registry) error {

	if err := validate.Required("ShipmentName", "body", m.ShipmentName); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentHeader) validateShipmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("ShipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if err := validate.Required("ShipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipmentStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inbound shipment header based on the context it is used
func (m *InboundShipmentHeader) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIntendedBoxContentsSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelPrepPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentHeader) contextValidateIntendedBoxContentsSource(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IntendedBoxContentsSource.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IntendedBoxContentsSource")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("IntendedBoxContentsSource")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentHeader) contextValidateLabelPrepPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelPrepPreference != nil {
		if err := m.LabelPrepPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LabelPrepPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LabelPrepPreference")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentHeader) contextValidateShipFromAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentHeader) contextValidateShipmentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipmentStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundShipmentHeader) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundShipmentHeader) UnmarshalBinary(b []byte) error {
	var res InboundShipmentHeader
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
