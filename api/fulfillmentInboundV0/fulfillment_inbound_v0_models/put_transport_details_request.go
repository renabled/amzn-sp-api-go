// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutTransportDetailsRequest The request schema for a putTransportDetails operation.
//
// swagger:model PutTransportDetailsRequest
type PutTransportDetailsRequest struct {

	// Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.
	// Required: true
	IsPartnered *bool `json:"IsPartnered"`

	// shipment type
	// Required: true
	ShipmentType *ShipmentType `json:"ShipmentType"`

	// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
	// Required: true
	TransportDetails *TransportDetailInput `json:"TransportDetails"`
}

// Validate validates this put transport details request
func (m *PutTransportDetailsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsPartnered(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutTransportDetailsRequest) validateIsPartnered(formats strfmt.Registry) error {

	if err := validate.Required("IsPartnered", "body", m.IsPartnered); err != nil {
		return err
	}

	return nil
}

func (m *PutTransportDetailsRequest) validateShipmentType(formats strfmt.Registry) error {

	if err := validate.Required("ShipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	if err := validate.Required("ShipmentType", "body", m.ShipmentType); err != nil {
		return err
	}

	if m.ShipmentType != nil {
		if err := m.ShipmentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipmentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipmentType")
			}
			return err
		}
	}

	return nil
}

func (m *PutTransportDetailsRequest) validateTransportDetails(formats strfmt.Registry) error {

	if err := validate.Required("TransportDetails", "body", m.TransportDetails); err != nil {
		return err
	}

	if m.TransportDetails != nil {
		if err := m.TransportDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransportDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransportDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this put transport details request based on the context it is used
func (m *PutTransportDetailsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShipmentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransportDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PutTransportDetailsRequest) contextValidateShipmentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentType != nil {
		if err := m.ShipmentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipmentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipmentType")
			}
			return err
		}
	}

	return nil
}

func (m *PutTransportDetailsRequest) contextValidateTransportDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TransportDetails != nil {
		if err := m.TransportDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransportDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransportDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PutTransportDetailsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PutTransportDetailsRequest) UnmarshalBinary(b []byte) error {
	var res PutTransportDetailsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
