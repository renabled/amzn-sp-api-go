// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundShipmentPlan Inbound shipment information used to create an inbound shipment. Returned by the createInboundShipmentPlan operation.
//
// swagger:model InboundShipmentPlan
type InboundShipmentPlan struct {

	// An Amazon fulfillment center identifier created by Amazon.
	// Required: true
	DestinationFulfillmentCenterID *string `json:"DestinationFulfillmentCenterId"`

	// estimated box contents fee
	EstimatedBoxContentsFee *BoxContentsFeeDetails `json:"EstimatedBoxContentsFee,omitempty"`

	// SKU and quantity information for the items in the shipment.
	// Required: true
	Items InboundShipmentPlanItemList `json:"Items"`

	// label prep type
	// Required: true
	LabelPrepType *LabelPrepType `json:"LabelPrepType"`

	// The address of the Amazon fulfillment center to which to ship the items.
	// Required: true
	ShipToAddress *Address `json:"ShipToAddress"`

	// A shipment identifier originally returned by the createInboundShipmentPlan operation.
	// Required: true
	ShipmentID *string `json:"ShipmentId"`
}

// Validate validates this inbound shipment plan
func (m *InboundShipmentPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationFulfillmentCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedBoxContentsFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelPrepType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentPlan) validateDestinationFulfillmentCenterID(formats strfmt.Registry) error {

	if err := validate.Required("DestinationFulfillmentCenterId", "body", m.DestinationFulfillmentCenterID); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentPlan) validateEstimatedBoxContentsFee(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedBoxContentsFee) { // not required
		return nil
	}

	if m.EstimatedBoxContentsFee != nil {
		if err := m.EstimatedBoxContentsFee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EstimatedBoxContentsFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EstimatedBoxContentsFee")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlan) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("Items", "body", m.Items); err != nil {
		return err
	}

	if err := m.Items.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Items")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentPlan) validateLabelPrepType(formats strfmt.Registry) error {

	if err := validate.Required("LabelPrepType", "body", m.LabelPrepType); err != nil {
		return err
	}

	if err := validate.Required("LabelPrepType", "body", m.LabelPrepType); err != nil {
		return err
	}

	if m.LabelPrepType != nil {
		if err := m.LabelPrepType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LabelPrepType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LabelPrepType")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlan) validateShipToAddress(formats strfmt.Registry) error {

	if err := validate.Required("ShipToAddress", "body", m.ShipToAddress); err != nil {
		return err
	}

	if m.ShipToAddress != nil {
		if err := m.ShipToAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipToAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlan) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("ShipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inbound shipment plan based on the context it is used
func (m *InboundShipmentPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEstimatedBoxContentsFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelPrepType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipToAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentPlan) contextValidateEstimatedBoxContentsFee(ctx context.Context, formats strfmt.Registry) error {

	if m.EstimatedBoxContentsFee != nil {
		if err := m.EstimatedBoxContentsFee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("EstimatedBoxContentsFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("EstimatedBoxContentsFee")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlan) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Items.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Items")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentPlan) contextValidateLabelPrepType(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelPrepType != nil {
		if err := m.LabelPrepType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LabelPrepType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LabelPrepType")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlan) contextValidateShipToAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipToAddress != nil {
		if err := m.ShipToAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipToAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundShipmentPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundShipmentPlan) UnmarshalBinary(b []byte) error {
	var res InboundShipmentPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
