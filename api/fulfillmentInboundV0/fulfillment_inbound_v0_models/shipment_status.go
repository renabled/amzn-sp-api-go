// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShipmentStatus Indicates the status of the inbound shipment. When used with the createInboundShipment operation, WORKING is the only valid value. When used with the updateInboundShipment operation, possible values are WORKING, SHIPPED or CANCELLED.
//
// swagger:model ShipmentStatus
type ShipmentStatus string

func NewShipmentStatus(value ShipmentStatus) *ShipmentStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ShipmentStatus.
func (m ShipmentStatus) Pointer() *ShipmentStatus {
	return &m
}

const (

	// ShipmentStatusWORKING captures enum value "WORKING"
	ShipmentStatusWORKING ShipmentStatus = "WORKING"

	// ShipmentStatusSHIPPED captures enum value "SHIPPED"
	ShipmentStatusSHIPPED ShipmentStatus = "SHIPPED"

	// ShipmentStatusRECEIVING captures enum value "RECEIVING"
	ShipmentStatusRECEIVING ShipmentStatus = "RECEIVING"

	// ShipmentStatusCANCELLED captures enum value "CANCELLED"
	ShipmentStatusCANCELLED ShipmentStatus = "CANCELLED"

	// ShipmentStatusDELETED captures enum value "DELETED"
	ShipmentStatusDELETED ShipmentStatus = "DELETED"

	// ShipmentStatusCLOSED captures enum value "CLOSED"
	ShipmentStatusCLOSED ShipmentStatus = "CLOSED"

	// ShipmentStatusERROR captures enum value "ERROR"
	ShipmentStatusERROR ShipmentStatus = "ERROR"

	// ShipmentStatusINTRANSIT captures enum value "IN_TRANSIT"
	ShipmentStatusINTRANSIT ShipmentStatus = "IN_TRANSIT"

	// ShipmentStatusDELIVERED captures enum value "DELIVERED"
	ShipmentStatusDELIVERED ShipmentStatus = "DELIVERED"

	// ShipmentStatusCHECKEDIN captures enum value "CHECKED_IN"
	ShipmentStatusCHECKEDIN ShipmentStatus = "CHECKED_IN"
)

// for schema
var shipmentStatusEnum []interface{}

func init() {
	var res []ShipmentStatus
	if err := json.Unmarshal([]byte(`["WORKING","SHIPPED","RECEIVING","CANCELLED","DELETED","CLOSED","ERROR","IN_TRANSIT","DELIVERED","CHECKED_IN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentStatusEnum = append(shipmentStatusEnum, v)
	}
}

func (m ShipmentStatus) validateShipmentStatusEnum(path, location string, value ShipmentStatus) error {
	if err := validate.EnumCase(path, location, value, shipmentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shipment status
func (m ShipmentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShipmentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this shipment status based on context it is used
func (m ShipmentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
