// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransportStatus Indicates the status of the Amazon-partnered carrier shipment.
//
// swagger:model TransportStatus
type TransportStatus string

func NewTransportStatus(value TransportStatus) *TransportStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TransportStatus.
func (m TransportStatus) Pointer() *TransportStatus {
	return &m
}

const (

	// TransportStatusWORKING captures enum value "WORKING"
	TransportStatusWORKING TransportStatus = "WORKING"

	// TransportStatusESTIMATING captures enum value "ESTIMATING"
	TransportStatusESTIMATING TransportStatus = "ESTIMATING"

	// TransportStatusESTIMATED captures enum value "ESTIMATED"
	TransportStatusESTIMATED TransportStatus = "ESTIMATED"

	// TransportStatusERRORONESTIMATING captures enum value "ERROR_ON_ESTIMATING"
	TransportStatusERRORONESTIMATING TransportStatus = "ERROR_ON_ESTIMATING"

	// TransportStatusCONFIRMING captures enum value "CONFIRMING"
	TransportStatusCONFIRMING TransportStatus = "CONFIRMING"

	// TransportStatusCONFIRMED captures enum value "CONFIRMED"
	TransportStatusCONFIRMED TransportStatus = "CONFIRMED"

	// TransportStatusERRORONCONFIRMING captures enum value "ERROR_ON_CONFIRMING"
	TransportStatusERRORONCONFIRMING TransportStatus = "ERROR_ON_CONFIRMING"

	// TransportStatusVOIDING captures enum value "VOIDING"
	TransportStatusVOIDING TransportStatus = "VOIDING"

	// TransportStatusVOIDED captures enum value "VOIDED"
	TransportStatusVOIDED TransportStatus = "VOIDED"

	// TransportStatusERRORINVOIDING captures enum value "ERROR_IN_VOIDING"
	TransportStatusERRORINVOIDING TransportStatus = "ERROR_IN_VOIDING"

	// TransportStatusERROR captures enum value "ERROR"
	TransportStatusERROR TransportStatus = "ERROR"
)

// for schema
var transportStatusEnum []interface{}

func init() {
	var res []TransportStatus
	if err := json.Unmarshal([]byte(`["WORKING","ESTIMATING","ESTIMATED","ERROR_ON_ESTIMATING","CONFIRMING","CONFIRMED","ERROR_ON_CONFIRMING","VOIDING","VOIDED","ERROR_IN_VOIDING","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transportStatusEnum = append(transportStatusEnum, v)
	}
}

func (m TransportStatus) validateTransportStatusEnum(path, location string, value TransportStatus) error {
	if err := validate.EnumCase(path, location, value, transportStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transport status
func (m TransportStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransportStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transport status based on context it is used
func (m TransportStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
