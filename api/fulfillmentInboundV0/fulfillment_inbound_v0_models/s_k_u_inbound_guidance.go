// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SKUInboundGuidance Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network.
//
// swagger:model SKUInboundGuidance
type SKUInboundGuidance struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	// Required: true
	ASIN *string `json:"ASIN"`

	// A list of reasons for the current inbound guidance for this item.
	GuidanceReasonList GuidanceReasonList `json:"GuidanceReasonList,omitempty"`

	// Specific inbound guidance for an item.
	// Required: true
	InboundGuidance *InboundGuidance `json:"InboundGuidance"`

	// The seller SKU of the item.
	// Required: true
	SellerSKU *string `json:"SellerSKU"`
}

// Validate validates this s k u inbound guidance
func (m *SKUInboundGuidance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateASIN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuidanceReasonList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInboundGuidance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerSKU(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SKUInboundGuidance) validateASIN(formats strfmt.Registry) error {

	if err := validate.Required("ASIN", "body", m.ASIN); err != nil {
		return err
	}

	return nil
}

func (m *SKUInboundGuidance) validateGuidanceReasonList(formats strfmt.Registry) error {
	if swag.IsZero(m.GuidanceReasonList) { // not required
		return nil
	}

	if err := m.GuidanceReasonList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GuidanceReasonList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GuidanceReasonList")
		}
		return err
	}

	return nil
}

func (m *SKUInboundGuidance) validateInboundGuidance(formats strfmt.Registry) error {

	if err := validate.Required("InboundGuidance", "body", m.InboundGuidance); err != nil {
		return err
	}

	if err := validate.Required("InboundGuidance", "body", m.InboundGuidance); err != nil {
		return err
	}

	if m.InboundGuidance != nil {
		if err := m.InboundGuidance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InboundGuidance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("InboundGuidance")
			}
			return err
		}
	}

	return nil
}

func (m *SKUInboundGuidance) validateSellerSKU(formats strfmt.Registry) error {

	if err := validate.Required("SellerSKU", "body", m.SellerSKU); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this s k u inbound guidance based on the context it is used
func (m *SKUInboundGuidance) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGuidanceReasonList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInboundGuidance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SKUInboundGuidance) contextValidateGuidanceReasonList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GuidanceReasonList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GuidanceReasonList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GuidanceReasonList")
		}
		return err
	}

	return nil
}

func (m *SKUInboundGuidance) contextValidateInboundGuidance(ctx context.Context, formats strfmt.Registry) error {

	if m.InboundGuidance != nil {
		if err := m.InboundGuidance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InboundGuidance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("InboundGuidance")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SKUInboundGuidance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SKUInboundGuidance) UnmarshalBinary(b []byte) error {
	var res SKUInboundGuidance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
