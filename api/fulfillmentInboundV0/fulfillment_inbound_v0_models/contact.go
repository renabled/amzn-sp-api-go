// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Contact Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.
//
// swagger:model Contact
type Contact struct {

	// The email address of the contact person.
	// Required: true
	// Max Length: 50
	Email *string `json:"Email"`

	// The fax number of the contact person.
	// Max Length: 20
	Fax string `json:"Fax,omitempty"`

	// The name of the contact person.
	// Required: true
	// Max Length: 50
	Name *string `json:"Name"`

	// The phone number of the contact person.
	// Required: true
	// Max Length: 20
	Phone *string `json:"Phone"`
}

// Validate validates this contact
func (m *Contact) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Contact) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("Email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.MaxLength("Email", "body", *m.Email, 50); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateFax(formats strfmt.Registry) error {
	if swag.IsZero(m.Fax) { // not required
		return nil
	}

	if err := validate.MaxLength("Fax", "body", m.Fax, 20); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

func (m *Contact) validatePhone(formats strfmt.Registry) error {

	if err := validate.Required("Phone", "body", m.Phone); err != nil {
		return err
	}

	if err := validate.MaxLength("Phone", "body", *m.Phone, 20); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this contact based on context it is used
func (m *Contact) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Contact) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Contact) UnmarshalBinary(b []byte) error {
	var res Contact
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
