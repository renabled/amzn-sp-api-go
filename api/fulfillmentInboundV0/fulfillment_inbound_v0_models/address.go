// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address address
//
// swagger:model Address
type Address struct {

	// The street address information.
	// Required: true
	// Max Length: 180
	AddressLine1 *string `json:"AddressLine1"`

	// Additional street address information, if required.
	// Max Length: 60
	AddressLine2 string `json:"AddressLine2,omitempty"`

	// The city.
	// Required: true
	// Max Length: 30
	City *string `json:"City"`

	// The country code in two-character ISO 3166-1 alpha-2 format.
	// Required: true
	CountryCode *string `json:"CountryCode"`

	// The district or county.
	// Max Length: 25
	DistrictOrCounty string `json:"DistrictOrCounty,omitempty"`

	// Name of the individual or business.
	// Required: true
	// Max Length: 50
	Name *string `json:"Name"`

	// The postal code.
	//
	// If postal codes are used in your marketplace, we recommended that you include one with your request. This helps Amazon select the most appropriate Amazon fulfillment center for the inbound shipment plan.
	// Required: true
	// Max Length: 30
	PostalCode *string `json:"PostalCode"`

	// The state or province code.
	//
	// If state or province codes are used in your marketplace, it is recommended that you include one with your request. This helps Amazon to select the most appropriate Amazon fulfillment center for your inbound shipment plan.
	// Required: true
	StateOrProvinceCode *string `json:"StateOrProvinceCode"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistrictOrCounty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrProvinceCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("AddressLine1", "body", m.AddressLine1); err != nil {
		return err
	}

	if err := validate.MaxLength("AddressLine1", "body", *m.AddressLine1, 180); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateAddressLine2(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine2) { // not required
		return nil
	}

	if err := validate.MaxLength("AddressLine2", "body", m.AddressLine2, 60); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("City", "body", m.City); err != nil {
		return err
	}

	if err := validate.MaxLength("City", "body", *m.City, 30); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("CountryCode", "body", m.CountryCode); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateDistrictOrCounty(formats strfmt.Registry) error {
	if swag.IsZero(m.DistrictOrCounty) { // not required
		return nil
	}

	if err := validate.MaxLength("DistrictOrCounty", "body", m.DistrictOrCounty, 25); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("Name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

func (m *Address) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("PostalCode", "body", m.PostalCode); err != nil {
		return err
	}

	if err := validate.MaxLength("PostalCode", "body", *m.PostalCode, 30); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateStateOrProvinceCode(formats strfmt.Registry) error {

	if err := validate.Required("StateOrProvinceCode", "body", m.StateOrProvinceCode); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
