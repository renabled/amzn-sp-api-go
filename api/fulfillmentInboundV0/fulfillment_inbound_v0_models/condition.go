// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Condition The condition of the item.
//
// swagger:model Condition
type Condition string

func NewCondition(value Condition) *Condition {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Condition.
func (m Condition) Pointer() *Condition {
	return &m
}

const (

	// ConditionNewItem captures enum value "NewItem"
	ConditionNewItem Condition = "NewItem"

	// ConditionNewWithWarranty captures enum value "NewWithWarranty"
	ConditionNewWithWarranty Condition = "NewWithWarranty"

	// ConditionNewOEM captures enum value "NewOEM"
	ConditionNewOEM Condition = "NewOEM"

	// ConditionNewOpenBox captures enum value "NewOpenBox"
	ConditionNewOpenBox Condition = "NewOpenBox"

	// ConditionUsedLikeNew captures enum value "UsedLikeNew"
	ConditionUsedLikeNew Condition = "UsedLikeNew"

	// ConditionUsedVeryGood captures enum value "UsedVeryGood"
	ConditionUsedVeryGood Condition = "UsedVeryGood"

	// ConditionUsedGood captures enum value "UsedGood"
	ConditionUsedGood Condition = "UsedGood"

	// ConditionUsedAcceptable captures enum value "UsedAcceptable"
	ConditionUsedAcceptable Condition = "UsedAcceptable"

	// ConditionUsedPoor captures enum value "UsedPoor"
	ConditionUsedPoor Condition = "UsedPoor"

	// ConditionUsedRefurbished captures enum value "UsedRefurbished"
	ConditionUsedRefurbished Condition = "UsedRefurbished"

	// ConditionCollectibleLikeNew captures enum value "CollectibleLikeNew"
	ConditionCollectibleLikeNew Condition = "CollectibleLikeNew"

	// ConditionCollectibleVeryGood captures enum value "CollectibleVeryGood"
	ConditionCollectibleVeryGood Condition = "CollectibleVeryGood"

	// ConditionCollectibleGood captures enum value "CollectibleGood"
	ConditionCollectibleGood Condition = "CollectibleGood"

	// ConditionCollectibleAcceptable captures enum value "CollectibleAcceptable"
	ConditionCollectibleAcceptable Condition = "CollectibleAcceptable"

	// ConditionCollectiblePoor captures enum value "CollectiblePoor"
	ConditionCollectiblePoor Condition = "CollectiblePoor"

	// ConditionRefurbishedWithWarranty captures enum value "RefurbishedWithWarranty"
	ConditionRefurbishedWithWarranty Condition = "RefurbishedWithWarranty"

	// ConditionRefurbished captures enum value "Refurbished"
	ConditionRefurbished Condition = "Refurbished"

	// ConditionClub captures enum value "Club"
	ConditionClub Condition = "Club"
)

// for schema
var conditionEnum []interface{}

func init() {
	var res []Condition
	if err := json.Unmarshal([]byte(`["NewItem","NewWithWarranty","NewOEM","NewOpenBox","UsedLikeNew","UsedVeryGood","UsedGood","UsedAcceptable","UsedPoor","UsedRefurbished","CollectibleLikeNew","CollectibleVeryGood","CollectibleGood","CollectibleAcceptable","CollectiblePoor","RefurbishedWithWarranty","Refurbished","Club"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conditionEnum = append(conditionEnum, v)
	}
}

func (m Condition) validateConditionEnum(path, location string, value Condition) error {
	if err := validate.EnumCase(path, location, value, conditionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this condition
func (m Condition) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConditionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this condition based on context it is used
func (m Condition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
