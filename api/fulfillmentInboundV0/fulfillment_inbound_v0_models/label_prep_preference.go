// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LabelPrepPreference The preference for label preparation for an inbound shipment.
//
// swagger:model LabelPrepPreference
type LabelPrepPreference string

func NewLabelPrepPreference(value LabelPrepPreference) *LabelPrepPreference {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LabelPrepPreference.
func (m LabelPrepPreference) Pointer() *LabelPrepPreference {
	return &m
}

const (

	// LabelPrepPreferenceSELLERLABEL captures enum value "SELLER_LABEL"
	LabelPrepPreferenceSELLERLABEL LabelPrepPreference = "SELLER_LABEL"

	// LabelPrepPreferenceAMAZONLABELONLY captures enum value "AMAZON_LABEL_ONLY"
	LabelPrepPreferenceAMAZONLABELONLY LabelPrepPreference = "AMAZON_LABEL_ONLY"

	// LabelPrepPreferenceAMAZONLABELPREFERRED captures enum value "AMAZON_LABEL_PREFERRED"
	LabelPrepPreferenceAMAZONLABELPREFERRED LabelPrepPreference = "AMAZON_LABEL_PREFERRED"
)

// for schema
var labelPrepPreferenceEnum []interface{}

func init() {
	var res []LabelPrepPreference
	if err := json.Unmarshal([]byte(`["SELLER_LABEL","AMAZON_LABEL_ONLY","AMAZON_LABEL_PREFERRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelPrepPreferenceEnum = append(labelPrepPreferenceEnum, v)
	}
}

func (m LabelPrepPreference) validateLabelPrepPreferenceEnum(path, location string, value LabelPrepPreference) error {
	if err := validate.EnumCase(path, location, value, labelPrepPreferenceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this label prep preference
func (m LabelPrepPreference) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLabelPrepPreferenceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this label prep preference based on context it is used
func (m LabelPrepPreference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
