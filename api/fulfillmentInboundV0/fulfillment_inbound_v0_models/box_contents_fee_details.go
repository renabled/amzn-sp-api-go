// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BoxContentsFeeDetails The manual processing fee per unit and total fee for a shipment.
//
// swagger:model BoxContentsFeeDetails
type BoxContentsFeeDetails struct {

	// The manual processing fee per unit.
	FeePerUnit *Amount `json:"FeePerUnit,omitempty"`

	// The total manual processing fee for the shipment.
	TotalFee *Amount `json:"TotalFee,omitempty"`

	// The number of units to ship.
	TotalUnits Quantity `json:"TotalUnits,omitempty"`
}

// Validate validates this box contents fee details
func (m *BoxContentsFeeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeePerUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoxContentsFeeDetails) validateFeePerUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.FeePerUnit) { // not required
		return nil
	}

	if m.FeePerUnit != nil {
		if err := m.FeePerUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeePerUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeePerUnit")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContentsFeeDetails) validateTotalFee(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalFee) { // not required
		return nil
	}

	if m.TotalFee != nil {
		if err := m.TotalFee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalFee")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContentsFeeDetails) validateTotalUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalUnits) { // not required
		return nil
	}

	if err := m.TotalUnits.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TotalUnits")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TotalUnits")
		}
		return err
	}

	return nil
}

// ContextValidate validate this box contents fee details based on the context it is used
func (m *BoxContentsFeeDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeePerUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalUnits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BoxContentsFeeDetails) contextValidateFeePerUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.FeePerUnit != nil {
		if err := m.FeePerUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeePerUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeePerUnit")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContentsFeeDetails) contextValidateTotalFee(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalFee != nil {
		if err := m.TotalFee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalFee")
			}
			return err
		}
	}

	return nil
}

func (m *BoxContentsFeeDetails) contextValidateTotalUnits(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TotalUnits.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TotalUnits")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TotalUnits")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BoxContentsFeeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BoxContentsFeeDetails) UnmarshalBinary(b []byte) error {
	var res BoxContentsFeeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
