// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SellerFreightClass The freight class of the shipment. For information about determining the freight class, contact the carrier.
//
// swagger:model SellerFreightClass
type SellerFreightClass string

func NewSellerFreightClass(value SellerFreightClass) *SellerFreightClass {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SellerFreightClass.
func (m SellerFreightClass) Pointer() *SellerFreightClass {
	return &m
}

const (

	// SellerFreightClassNr50 captures enum value "50"
	SellerFreightClassNr50 SellerFreightClass = "50"

	// SellerFreightClassNr55 captures enum value "55"
	SellerFreightClassNr55 SellerFreightClass = "55"

	// SellerFreightClassNr60 captures enum value "60"
	SellerFreightClassNr60 SellerFreightClass = "60"

	// SellerFreightClassNr65 captures enum value "65"
	SellerFreightClassNr65 SellerFreightClass = "65"

	// SellerFreightClassNr70 captures enum value "70"
	SellerFreightClassNr70 SellerFreightClass = "70"

	// SellerFreightClassNr77Dot5 captures enum value "77.5"
	SellerFreightClassNr77Dot5 SellerFreightClass = "77.5"

	// SellerFreightClassNr85 captures enum value "85"
	SellerFreightClassNr85 SellerFreightClass = "85"

	// SellerFreightClassNr92Dot5 captures enum value "92.5"
	SellerFreightClassNr92Dot5 SellerFreightClass = "92.5"

	// SellerFreightClassNr100 captures enum value "100"
	SellerFreightClassNr100 SellerFreightClass = "100"

	// SellerFreightClassNr110 captures enum value "110"
	SellerFreightClassNr110 SellerFreightClass = "110"

	// SellerFreightClassNr125 captures enum value "125"
	SellerFreightClassNr125 SellerFreightClass = "125"

	// SellerFreightClassNr150 captures enum value "150"
	SellerFreightClassNr150 SellerFreightClass = "150"

	// SellerFreightClassNr175 captures enum value "175"
	SellerFreightClassNr175 SellerFreightClass = "175"

	// SellerFreightClassNr200 captures enum value "200"
	SellerFreightClassNr200 SellerFreightClass = "200"

	// SellerFreightClassNr250 captures enum value "250"
	SellerFreightClassNr250 SellerFreightClass = "250"

	// SellerFreightClassNr300 captures enum value "300"
	SellerFreightClassNr300 SellerFreightClass = "300"

	// SellerFreightClassNr400 captures enum value "400"
	SellerFreightClassNr400 SellerFreightClass = "400"

	// SellerFreightClassNr500 captures enum value "500"
	SellerFreightClassNr500 SellerFreightClass = "500"
)

// for schema
var sellerFreightClassEnum []interface{}

func init() {
	var res []SellerFreightClass
	if err := json.Unmarshal([]byte(`["50","55","60","65","70","77.5","85","92.5","100","110","125","150","175","200","250","300","400","500"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sellerFreightClassEnum = append(sellerFreightClassEnum, v)
	}
}

func (m SellerFreightClass) validateSellerFreightClassEnum(path, location string, value SellerFreightClass) error {
	if err := validate.EnumCase(path, location, value, sellerFreightClassEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this seller freight class
func (m SellerFreightClass) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSellerFreightClassEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this seller freight class based on context it is used
func (m SellerFreightClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
