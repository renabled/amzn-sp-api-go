// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ErrorReason The reason that the ASIN is invalid.
//
// swagger:model ErrorReason
type ErrorReason string

func NewErrorReason(value ErrorReason) *ErrorReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ErrorReason.
func (m ErrorReason) Pointer() *ErrorReason {
	return &m
}

const (

	// ErrorReasonDoesNotExist captures enum value "DoesNotExist"
	ErrorReasonDoesNotExist ErrorReason = "DoesNotExist"

	// ErrorReasonInvalidASIN captures enum value "InvalidASIN"
	ErrorReasonInvalidASIN ErrorReason = "InvalidASIN"
)

// for schema
var errorReasonEnum []interface{}

func init() {
	var res []ErrorReason
	if err := json.Unmarshal([]byte(`["DoesNotExist","InvalidASIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorReasonEnum = append(errorReasonEnum, v)
	}
}

func (m ErrorReason) validateErrorReasonEnum(path, location string, value ErrorReason) error {
	if err := validate.EnumCase(path, location, value, errorReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this error reason
func (m ErrorReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateErrorReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this error reason based on context it is used
func (m ErrorReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
