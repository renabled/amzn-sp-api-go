// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PartneredLtlDataInput Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
//
// swagger:model PartneredLtlDataInput
type PartneredLtlDataInput struct {

	// The number of boxes in the shipment.
	BoxCount UnsignedIntType `json:"BoxCount,omitempty"`

	// Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment.
	Contact *Contact `json:"Contact,omitempty"`

	// The date on which the shipment is ready for carrier pickup. Must be in YYYY-MM-DD format.
	// Format: date
	FreightReadyDate DateStringType `json:"FreightReadyDate,omitempty"`

	// pallet list
	PalletList PalletList `json:"PalletList,omitempty"`

	// The declaration of the total value of the inventory in the shipment.
	SellerDeclaredValue *Amount `json:"SellerDeclaredValue,omitempty"`

	// seller freight class
	SellerFreightClass SellerFreightClass `json:"SellerFreightClass,omitempty"`

	// The total weight of the shipment.
	TotalWeight *Weight `json:"TotalWeight,omitempty"`
}

// Validate validates this partnered ltl data input
func (m *PartneredLtlDataInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoxCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreightReadyDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePalletList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerDeclaredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFreightClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredLtlDataInput) validateBoxCount(formats strfmt.Registry) error {
	if swag.IsZero(m.BoxCount) { // not required
		return nil
	}

	if err := m.BoxCount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BoxCount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BoxCount")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) validateContact(formats strfmt.Registry) error {
	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Contact")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataInput) validateFreightReadyDate(formats strfmt.Registry) error {
	if swag.IsZero(m.FreightReadyDate) { // not required
		return nil
	}

	if err := m.FreightReadyDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FreightReadyDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FreightReadyDate")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) validatePalletList(formats strfmt.Registry) error {
	if swag.IsZero(m.PalletList) { // not required
		return nil
	}

	if err := m.PalletList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PalletList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PalletList")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) validateSellerDeclaredValue(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerDeclaredValue) { // not required
		return nil
	}

	if m.SellerDeclaredValue != nil {
		if err := m.SellerDeclaredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SellerDeclaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SellerDeclaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataInput) validateSellerFreightClass(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerFreightClass) { // not required
		return nil
	}

	if err := m.SellerFreightClass.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerFreightClass")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerFreightClass")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) validateTotalWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalWeight) { // not required
		return nil
	}

	if m.TotalWeight != nil {
		if err := m.TotalWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalWeight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partnered ltl data input based on the context it is used
func (m *PartneredLtlDataInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoxCount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContact(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFreightReadyDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePalletList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerDeclaredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerFreightClass(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredLtlDataInput) contextValidateBoxCount(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BoxCount.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BoxCount")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BoxCount")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) contextValidateContact(ctx context.Context, formats strfmt.Registry) error {

	if m.Contact != nil {
		if err := m.Contact.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contact")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Contact")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataInput) contextValidateFreightReadyDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FreightReadyDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FreightReadyDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FreightReadyDate")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) contextValidatePalletList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PalletList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PalletList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PalletList")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) contextValidateSellerDeclaredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.SellerDeclaredValue != nil {
		if err := m.SellerDeclaredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SellerDeclaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SellerDeclaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *PartneredLtlDataInput) contextValidateSellerFreightClass(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SellerFreightClass.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerFreightClass")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerFreightClass")
		}
		return err
	}

	return nil
}

func (m *PartneredLtlDataInput) contextValidateTotalWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalWeight != nil {
		if err := m.TotalWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalWeight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartneredLtlDataInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartneredLtlDataInput) UnmarshalBinary(b []byte) error {
	var res PartneredLtlDataInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
