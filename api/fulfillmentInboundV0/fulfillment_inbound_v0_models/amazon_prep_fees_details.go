// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AmazonPrepFeesDetails The fees for Amazon to prep goods for shipment.
//
// swagger:model AmazonPrepFeesDetails
type AmazonPrepFeesDetails struct {

	// The fee for Amazon to prepare 1 unit.
	FeePerUnit *Amount `json:"FeePerUnit,omitempty"`

	// prep instruction
	PrepInstruction PrepInstruction `json:"PrepInstruction,omitempty"`
}

// Validate validates this amazon prep fees details
func (m *AmazonPrepFeesDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeePerUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepInstruction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmazonPrepFeesDetails) validateFeePerUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.FeePerUnit) { // not required
		return nil
	}

	if m.FeePerUnit != nil {
		if err := m.FeePerUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeePerUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeePerUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AmazonPrepFeesDetails) validatePrepInstruction(formats strfmt.Registry) error {
	if swag.IsZero(m.PrepInstruction) { // not required
		return nil
	}

	if err := m.PrepInstruction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepInstruction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepInstruction")
		}
		return err
	}

	return nil
}

// ContextValidate validate this amazon prep fees details based on the context it is used
func (m *AmazonPrepFeesDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeePerUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrepInstruction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmazonPrepFeesDetails) contextValidateFeePerUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.FeePerUnit != nil {
		if err := m.FeePerUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeePerUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeePerUnit")
			}
			return err
		}
	}

	return nil
}

func (m *AmazonPrepFeesDetails) contextValidatePrepInstruction(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PrepInstruction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepInstruction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepInstruction")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AmazonPrepFeesDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AmazonPrepFeesDetails) UnmarshalBinary(b []byte) error {
	var res AmazonPrepFeesDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
