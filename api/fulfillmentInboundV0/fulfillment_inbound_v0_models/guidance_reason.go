// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// GuidanceReason A reason for the current inbound guidance for an item.
//
// swagger:model GuidanceReason
type GuidanceReason string

func NewGuidanceReason(value GuidanceReason) *GuidanceReason {
	return &value
}

// Pointer returns a pointer to a freshly-allocated GuidanceReason.
func (m GuidanceReason) Pointer() *GuidanceReason {
	return &m
}

const (

	// GuidanceReasonSlowMovingASIN captures enum value "SlowMovingASIN"
	GuidanceReasonSlowMovingASIN GuidanceReason = "SlowMovingASIN"

	// GuidanceReasonNoApplicableGuidance captures enum value "NoApplicableGuidance"
	GuidanceReasonNoApplicableGuidance GuidanceReason = "NoApplicableGuidance"
)

// for schema
var guidanceReasonEnum []interface{}

func init() {
	var res []GuidanceReason
	if err := json.Unmarshal([]byte(`["SlowMovingASIN","NoApplicableGuidance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		guidanceReasonEnum = append(guidanceReasonEnum, v)
	}
}

func (m GuidanceReason) validateGuidanceReasonEnum(path, location string, value GuidanceReason) error {
	if err := validate.EnumCase(path, location, value, guidanceReasonEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this guidance reason
func (m GuidanceReason) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGuidanceReasonEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this guidance reason based on context it is used
func (m GuidanceReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
