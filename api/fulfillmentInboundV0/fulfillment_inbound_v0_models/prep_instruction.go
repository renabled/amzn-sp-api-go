// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PrepInstruction Preparation instructions for shipping an item to Amazon's fulfillment network. For more information about preparing items for shipment to Amazon's fulfillment network, see the Seller Central Help for your marketplace.
//
// swagger:model PrepInstruction
type PrepInstruction string

func NewPrepInstruction(value PrepInstruction) *PrepInstruction {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PrepInstruction.
func (m PrepInstruction) Pointer() *PrepInstruction {
	return &m
}

const (

	// PrepInstructionPolybagging captures enum value "Polybagging"
	PrepInstructionPolybagging PrepInstruction = "Polybagging"

	// PrepInstructionBubbleWrapping captures enum value "BubbleWrapping"
	PrepInstructionBubbleWrapping PrepInstruction = "BubbleWrapping"

	// PrepInstructionTaping captures enum value "Taping"
	PrepInstructionTaping PrepInstruction = "Taping"

	// PrepInstructionBlackShrinkWrapping captures enum value "BlackShrinkWrapping"
	PrepInstructionBlackShrinkWrapping PrepInstruction = "BlackShrinkWrapping"

	// PrepInstructionLabeling captures enum value "Labeling"
	PrepInstructionLabeling PrepInstruction = "Labeling"

	// PrepInstructionHangGarment captures enum value "HangGarment"
	PrepInstructionHangGarment PrepInstruction = "HangGarment"

	// PrepInstructionSetCreation captures enum value "SetCreation"
	PrepInstructionSetCreation PrepInstruction = "SetCreation"

	// PrepInstructionBoxing captures enum value "Boxing"
	PrepInstructionBoxing PrepInstruction = "Boxing"

	// PrepInstructionRemoveFromHanger captures enum value "RemoveFromHanger"
	PrepInstructionRemoveFromHanger PrepInstruction = "RemoveFromHanger"

	// PrepInstructionDebundle captures enum value "Debundle"
	PrepInstructionDebundle PrepInstruction = "Debundle"

	// PrepInstructionSuffocationStickering captures enum value "SuffocationStickering"
	PrepInstructionSuffocationStickering PrepInstruction = "SuffocationStickering"

	// PrepInstructionCapSealing captures enum value "CapSealing"
	PrepInstructionCapSealing PrepInstruction = "CapSealing"

	// PrepInstructionSetStickering captures enum value "SetStickering"
	PrepInstructionSetStickering PrepInstruction = "SetStickering"

	// PrepInstructionBlankStickering captures enum value "BlankStickering"
	PrepInstructionBlankStickering PrepInstruction = "BlankStickering"

	// PrepInstructionShipsInProductPackaging captures enum value "ShipsInProductPackaging"
	PrepInstructionShipsInProductPackaging PrepInstruction = "ShipsInProductPackaging"

	// PrepInstructionNoPrep captures enum value "NoPrep"
	PrepInstructionNoPrep PrepInstruction = "NoPrep"
)

// for schema
var prepInstructionEnum []interface{}

func init() {
	var res []PrepInstruction
	if err := json.Unmarshal([]byte(`["Polybagging","BubbleWrapping","Taping","BlackShrinkWrapping","Labeling","HangGarment","SetCreation","Boxing","RemoveFromHanger","Debundle","SuffocationStickering","CapSealing","SetStickering","BlankStickering","ShipsInProductPackaging","NoPrep"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		prepInstructionEnum = append(prepInstructionEnum, v)
	}
}

func (m PrepInstruction) validatePrepInstructionEnum(path, location string, value PrepInstruction) error {
	if err := validate.EnumCase(path, location, value, prepInstructionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this prep instruction
func (m PrepInstruction) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePrepInstructionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this prep instruction based on context it is used
func (m PrepInstruction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
