// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundShipmentPlanRequestItem Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation.
//
// swagger:model InboundShipmentPlanRequestItem
type InboundShipmentPlanRequestItem struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	// Required: true
	ASIN *string `json:"ASIN"`

	// condition
	// Required: true
	Condition *Condition `json:"Condition"`

	// prep details list
	PrepDetailsList PrepDetailsList `json:"PrepDetailsList,omitempty"`

	// quantity
	// Required: true
	Quantity *Quantity `json:"Quantity"`

	// The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
	QuantityInCase Quantity `json:"QuantityInCase,omitempty"`

	// The seller SKU of the item.
	// Required: true
	SellerSKU *string `json:"SellerSKU"`
}

// Validate validates this inbound shipment plan request item
func (m *InboundShipmentPlanRequestItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateASIN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepDetailsList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityInCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerSKU(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentPlanRequestItem) validateASIN(formats strfmt.Registry) error {

	if err := validate.Required("ASIN", "body", m.ASIN); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("Condition", "body", m.Condition); err != nil {
		return err
	}

	if err := validate.Required("Condition", "body", m.Condition); err != nil {
		return err
	}

	if m.Condition != nil {
		if err := m.Condition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Condition")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) validatePrepDetailsList(formats strfmt.Registry) error {
	if swag.IsZero(m.PrepDetailsList) { // not required
		return nil
	}

	if err := m.PrepDetailsList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepDetailsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepDetailsList")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("Quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.Required("Quantity", "body", m.Quantity); err != nil {
		return err
	}

	if m.Quantity != nil {
		if err := m.Quantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Quantity")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) validateQuantityInCase(formats strfmt.Registry) error {
	if swag.IsZero(m.QuantityInCase) { // not required
		return nil
	}

	if err := m.QuantityInCase.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("QuantityInCase")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("QuantityInCase")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) validateSellerSKU(formats strfmt.Registry) error {

	if err := validate.Required("SellerSKU", "body", m.SellerSKU); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inbound shipment plan request item based on the context it is used
func (m *InboundShipmentPlanRequestItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrepDetailsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantityInCase(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentPlanRequestItem) contextValidateCondition(ctx context.Context, formats strfmt.Registry) error {

	if m.Condition != nil {
		if err := m.Condition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Condition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Condition")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) contextValidatePrepDetailsList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PrepDetailsList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PrepDetailsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PrepDetailsList")
		}
		return err
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) contextValidateQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.Quantity != nil {
		if err := m.Quantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Quantity")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentPlanRequestItem) contextValidateQuantityInCase(ctx context.Context, formats strfmt.Registry) error {

	if err := m.QuantityInCase.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("QuantityInCase")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("QuantityInCase")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundShipmentPlanRequestItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundShipmentPlanRequestItem) UnmarshalBinary(b []byte) error {
	var res InboundShipmentPlanRequestItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
