// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NonPartneredSmallParcelDataOutput Information returned by Amazon about a Small Parcel shipment by a carrier that has not partnered with Amazon.
//
// swagger:model NonPartneredSmallParcelDataOutput
type NonPartneredSmallParcelDataOutput struct {

	// package list
	// Required: true
	PackageList NonPartneredSmallParcelPackageOutputList `json:"PackageList"`
}

// Validate validates this non partnered small parcel data output
func (m *NonPartneredSmallParcelDataOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NonPartneredSmallParcelDataOutput) validatePackageList(formats strfmt.Registry) error {

	if err := validate.Required("PackageList", "body", m.PackageList); err != nil {
		return err
	}

	if err := m.PackageList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PackageList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PackageList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this non partnered small parcel data output based on the context it is used
func (m *NonPartneredSmallParcelDataOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NonPartneredSmallParcelDataOutput) contextValidatePackageList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PackageList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PackageList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NonPartneredSmallParcelDataOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NonPartneredSmallParcelDataOutput) UnmarshalBinary(b []byte) error {
	var res NonPartneredSmallParcelDataOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
