// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PartneredSmallParcelDataOutput Information returned by Amazon about a Small Parcel shipment by an Amazon-partnered carrier.
//
// swagger:model PartneredSmallParcelDataOutput
type PartneredSmallParcelDataOutput struct {

	// package list
	// Required: true
	PackageList PartneredSmallParcelPackageOutputList `json:"PackageList"`

	// partnered estimate
	PartneredEstimate *PartneredEstimate `json:"PartneredEstimate,omitempty"`
}

// Validate validates this partnered small parcel data output
func (m *PartneredSmallParcelDataOutput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartneredEstimate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredSmallParcelDataOutput) validatePackageList(formats strfmt.Registry) error {

	if err := validate.Required("PackageList", "body", m.PackageList); err != nil {
		return err
	}

	if err := m.PackageList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PackageList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PackageList")
		}
		return err
	}

	return nil
}

func (m *PartneredSmallParcelDataOutput) validatePartneredEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.PartneredEstimate) { // not required
		return nil
	}

	if m.PartneredEstimate != nil {
		if err := m.PartneredEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredEstimate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this partnered small parcel data output based on the context it is used
func (m *PartneredSmallParcelDataOutput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartneredEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PartneredSmallParcelDataOutput) contextValidatePackageList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PackageList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PackageList")
		}
		return err
	}

	return nil
}

func (m *PartneredSmallParcelDataOutput) contextValidatePartneredEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.PartneredEstimate != nil {
		if err := m.PartneredEstimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredEstimate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PartneredSmallParcelDataOutput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PartneredSmallParcelDataOutput) UnmarshalBinary(b []byte) error {
	var res PartneredSmallParcelDataOutput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
