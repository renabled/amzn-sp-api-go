// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransportDetailInput Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
//
// swagger:model TransportDetailInput
type TransportDetailInput struct {

	// non partnered ltl data
	NonPartneredLtlData *NonPartneredLtlDataInput `json:"NonPartneredLtlData,omitempty"`

	// non partnered small parcel data
	NonPartneredSmallParcelData *NonPartneredSmallParcelDataInput `json:"NonPartneredSmallParcelData,omitempty"`

	// partnered ltl data
	PartneredLtlData *PartneredLtlDataInput `json:"PartneredLtlData,omitempty"`

	// partnered small parcel data
	PartneredSmallParcelData *PartneredSmallParcelDataInput `json:"PartneredSmallParcelData,omitempty"`
}

// Validate validates this transport detail input
func (m *TransportDetailInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNonPartneredLtlData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonPartneredSmallParcelData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartneredLtlData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePartneredSmallParcelData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportDetailInput) validateNonPartneredLtlData(formats strfmt.Registry) error {
	if swag.IsZero(m.NonPartneredLtlData) { // not required
		return nil
	}

	if m.NonPartneredLtlData != nil {
		if err := m.NonPartneredLtlData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NonPartneredLtlData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NonPartneredLtlData")
			}
			return err
		}
	}

	return nil
}

func (m *TransportDetailInput) validateNonPartneredSmallParcelData(formats strfmt.Registry) error {
	if swag.IsZero(m.NonPartneredSmallParcelData) { // not required
		return nil
	}

	if m.NonPartneredSmallParcelData != nil {
		if err := m.NonPartneredSmallParcelData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NonPartneredSmallParcelData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NonPartneredSmallParcelData")
			}
			return err
		}
	}

	return nil
}

func (m *TransportDetailInput) validatePartneredLtlData(formats strfmt.Registry) error {
	if swag.IsZero(m.PartneredLtlData) { // not required
		return nil
	}

	if m.PartneredLtlData != nil {
		if err := m.PartneredLtlData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredLtlData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredLtlData")
			}
			return err
		}
	}

	return nil
}

func (m *TransportDetailInput) validatePartneredSmallParcelData(formats strfmt.Registry) error {
	if swag.IsZero(m.PartneredSmallParcelData) { // not required
		return nil
	}

	if m.PartneredSmallParcelData != nil {
		if err := m.PartneredSmallParcelData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredSmallParcelData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredSmallParcelData")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this transport detail input based on the context it is used
func (m *TransportDetailInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNonPartneredLtlData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNonPartneredSmallParcelData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartneredLtlData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePartneredSmallParcelData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportDetailInput) contextValidateNonPartneredLtlData(ctx context.Context, formats strfmt.Registry) error {

	if m.NonPartneredLtlData != nil {
		if err := m.NonPartneredLtlData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NonPartneredLtlData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NonPartneredLtlData")
			}
			return err
		}
	}

	return nil
}

func (m *TransportDetailInput) contextValidateNonPartneredSmallParcelData(ctx context.Context, formats strfmt.Registry) error {

	if m.NonPartneredSmallParcelData != nil {
		if err := m.NonPartneredSmallParcelData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("NonPartneredSmallParcelData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("NonPartneredSmallParcelData")
			}
			return err
		}
	}

	return nil
}

func (m *TransportDetailInput) contextValidatePartneredLtlData(ctx context.Context, formats strfmt.Registry) error {

	if m.PartneredLtlData != nil {
		if err := m.PartneredLtlData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredLtlData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredLtlData")
			}
			return err
		}
	}

	return nil
}

func (m *TransportDetailInput) contextValidatePartneredSmallParcelData(ctx context.Context, formats strfmt.Registry) error {

	if m.PartneredSmallParcelData != nil {
		if err := m.PartneredSmallParcelData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PartneredSmallParcelData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PartneredSmallParcelData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportDetailInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportDetailInput) UnmarshalBinary(b []byte) error {
	var res TransportDetailInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
