// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// GetInboundGuidanceReader is a Reader for the GetInboundGuidance structure.
type GetInboundGuidanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInboundGuidanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInboundGuidanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInboundGuidanceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInboundGuidanceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInboundGuidanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInboundGuidanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInboundGuidanceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInboundGuidanceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInboundGuidanceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInboundGuidanceOK creates a GetInboundGuidanceOK with default headers values
func NewGetInboundGuidanceOK() *GetInboundGuidanceOK {
	return &GetInboundGuidanceOK{}
}

/* GetInboundGuidanceOK describes a response with status code 200, with default header values.

Success.
*/
type GetInboundGuidanceOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceOK) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceOK  %+v", 200, o.Payload)
}
func (o *GetInboundGuidanceOK) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceBadRequest creates a GetInboundGuidanceBadRequest with default headers values
func NewGetInboundGuidanceBadRequest() *GetInboundGuidanceBadRequest {
	return &GetInboundGuidanceBadRequest{}
}

/* GetInboundGuidanceBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInboundGuidanceBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceBadRequest  %+v", 400, o.Payload)
}
func (o *GetInboundGuidanceBadRequest) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceUnauthorized creates a GetInboundGuidanceUnauthorized with default headers values
func NewGetInboundGuidanceUnauthorized() *GetInboundGuidanceUnauthorized {
	return &GetInboundGuidanceUnauthorized{}
}

/* GetInboundGuidanceUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetInboundGuidanceUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceUnauthorized  %+v", 401, o.Payload)
}
func (o *GetInboundGuidanceUnauthorized) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceForbidden creates a GetInboundGuidanceForbidden with default headers values
func NewGetInboundGuidanceForbidden() *GetInboundGuidanceForbidden {
	return &GetInboundGuidanceForbidden{}
}

/* GetInboundGuidanceForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInboundGuidanceForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceForbidden  %+v", 403, o.Payload)
}
func (o *GetInboundGuidanceForbidden) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceNotFound creates a GetInboundGuidanceNotFound with default headers values
func NewGetInboundGuidanceNotFound() *GetInboundGuidanceNotFound {
	return &GetInboundGuidanceNotFound{}
}

/* GetInboundGuidanceNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetInboundGuidanceNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceNotFound  %+v", 404, o.Payload)
}
func (o *GetInboundGuidanceNotFound) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceTooManyRequests creates a GetInboundGuidanceTooManyRequests with default headers values
func NewGetInboundGuidanceTooManyRequests() *GetInboundGuidanceTooManyRequests {
	return &GetInboundGuidanceTooManyRequests{}
}

/* GetInboundGuidanceTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInboundGuidanceTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetInboundGuidanceTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceInternalServerError creates a GetInboundGuidanceInternalServerError with default headers values
func NewGetInboundGuidanceInternalServerError() *GetInboundGuidanceInternalServerError {
	return &GetInboundGuidanceInternalServerError{}
}

/* GetInboundGuidanceInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInboundGuidanceInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceInternalServerError  %+v", 500, o.Payload)
}
func (o *GetInboundGuidanceInternalServerError) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundGuidanceServiceUnavailable creates a GetInboundGuidanceServiceUnavailable with default headers values
func NewGetInboundGuidanceServiceUnavailable() *GetInboundGuidanceServiceUnavailable {
	return &GetInboundGuidanceServiceUnavailable{}
}

/* GetInboundGuidanceServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInboundGuidanceServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetInboundGuidanceResponse
}

func (o *GetInboundGuidanceServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/itemsGuidance][%d] getInboundGuidanceServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetInboundGuidanceServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.GetInboundGuidanceResponse {
	return o.Payload
}

func (o *GetInboundGuidanceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetInboundGuidanceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
