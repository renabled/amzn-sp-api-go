// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// GetShipmentItemsReader is a Reader for the GetShipmentItems structure.
type GetShipmentItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShipmentItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShipmentItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShipmentItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetShipmentItemsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShipmentItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShipmentItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShipmentItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShipmentItemsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShipmentItemsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShipmentItemsOK creates a GetShipmentItemsOK with default headers values
func NewGetShipmentItemsOK() *GetShipmentItemsOK {
	return &GetShipmentItemsOK{}
}

/* GetShipmentItemsOK describes a response with status code 200, with default header values.

Success.
*/
type GetShipmentItemsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsOK) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsOK  %+v", 200, o.Payload)
}
func (o *GetShipmentItemsOK) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsBadRequest creates a GetShipmentItemsBadRequest with default headers values
func NewGetShipmentItemsBadRequest() *GetShipmentItemsBadRequest {
	return &GetShipmentItemsBadRequest{}
}

/* GetShipmentItemsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShipmentItemsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsBadRequest  %+v", 400, o.Payload)
}
func (o *GetShipmentItemsBadRequest) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsUnauthorized creates a GetShipmentItemsUnauthorized with default headers values
func NewGetShipmentItemsUnauthorized() *GetShipmentItemsUnauthorized {
	return &GetShipmentItemsUnauthorized{}
}

/* GetShipmentItemsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetShipmentItemsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsUnauthorized  %+v", 401, o.Payload)
}
func (o *GetShipmentItemsUnauthorized) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsForbidden creates a GetShipmentItemsForbidden with default headers values
func NewGetShipmentItemsForbidden() *GetShipmentItemsForbidden {
	return &GetShipmentItemsForbidden{}
}

/* GetShipmentItemsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetShipmentItemsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsForbidden  %+v", 403, o.Payload)
}
func (o *GetShipmentItemsForbidden) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsNotFound creates a GetShipmentItemsNotFound with default headers values
func NewGetShipmentItemsNotFound() *GetShipmentItemsNotFound {
	return &GetShipmentItemsNotFound{}
}

/* GetShipmentItemsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetShipmentItemsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsNotFound  %+v", 404, o.Payload)
}
func (o *GetShipmentItemsNotFound) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsTooManyRequests creates a GetShipmentItemsTooManyRequests with default headers values
func NewGetShipmentItemsTooManyRequests() *GetShipmentItemsTooManyRequests {
	return &GetShipmentItemsTooManyRequests{}
}

/* GetShipmentItemsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShipmentItemsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetShipmentItemsTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsInternalServerError creates a GetShipmentItemsInternalServerError with default headers values
func NewGetShipmentItemsInternalServerError() *GetShipmentItemsInternalServerError {
	return &GetShipmentItemsInternalServerError{}
}

/* GetShipmentItemsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetShipmentItemsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetShipmentItemsInternalServerError) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsServiceUnavailable creates a GetShipmentItemsServiceUnavailable with default headers values
func NewGetShipmentItemsServiceUnavailable() *GetShipmentItemsServiceUnavailable {
	return &GetShipmentItemsServiceUnavailable{}
}

/* GetShipmentItemsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShipmentItemsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipmentItems][%d] getShipmentItemsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetShipmentItemsServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
