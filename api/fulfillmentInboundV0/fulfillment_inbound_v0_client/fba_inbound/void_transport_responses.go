// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// VoidTransportReader is a Reader for the VoidTransport structure.
type VoidTransportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *VoidTransportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewVoidTransportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewVoidTransportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewVoidTransportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewVoidTransportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewVoidTransportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewVoidTransportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewVoidTransportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewVoidTransportServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewVoidTransportOK creates a VoidTransportOK with default headers values
func NewVoidTransportOK() *VoidTransportOK {
	return &VoidTransportOK{}
}

/*
VoidTransportOK describes a response with status code 200, with default header values.

Success.
*/
type VoidTransportOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport o k response has a 2xx status code
func (o *VoidTransportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this void transport o k response has a 3xx status code
func (o *VoidTransportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport o k response has a 4xx status code
func (o *VoidTransportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this void transport o k response has a 5xx status code
func (o *VoidTransportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this void transport o k response a status code equal to that given
func (o *VoidTransportOK) IsCode(code int) bool {
	return code == 200
}

func (o *VoidTransportOK) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportOK  %+v", 200, o.Payload)
}

func (o *VoidTransportOK) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportOK  %+v", 200, o.Payload)
}

func (o *VoidTransportOK) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportBadRequest creates a VoidTransportBadRequest with default headers values
func NewVoidTransportBadRequest() *VoidTransportBadRequest {
	return &VoidTransportBadRequest{}
}

/*
VoidTransportBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type VoidTransportBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport bad request response has a 2xx status code
func (o *VoidTransportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport bad request response has a 3xx status code
func (o *VoidTransportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport bad request response has a 4xx status code
func (o *VoidTransportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this void transport bad request response has a 5xx status code
func (o *VoidTransportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this void transport bad request response a status code equal to that given
func (o *VoidTransportBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *VoidTransportBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportBadRequest  %+v", 400, o.Payload)
}

func (o *VoidTransportBadRequest) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportBadRequest  %+v", 400, o.Payload)
}

func (o *VoidTransportBadRequest) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportUnauthorized creates a VoidTransportUnauthorized with default headers values
func NewVoidTransportUnauthorized() *VoidTransportUnauthorized {
	return &VoidTransportUnauthorized{}
}

/*
VoidTransportUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type VoidTransportUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport unauthorized response has a 2xx status code
func (o *VoidTransportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport unauthorized response has a 3xx status code
func (o *VoidTransportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport unauthorized response has a 4xx status code
func (o *VoidTransportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this void transport unauthorized response has a 5xx status code
func (o *VoidTransportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this void transport unauthorized response a status code equal to that given
func (o *VoidTransportUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *VoidTransportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportUnauthorized  %+v", 401, o.Payload)
}

func (o *VoidTransportUnauthorized) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportUnauthorized  %+v", 401, o.Payload)
}

func (o *VoidTransportUnauthorized) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportForbidden creates a VoidTransportForbidden with default headers values
func NewVoidTransportForbidden() *VoidTransportForbidden {
	return &VoidTransportForbidden{}
}

/*
VoidTransportForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type VoidTransportForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport forbidden response has a 2xx status code
func (o *VoidTransportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport forbidden response has a 3xx status code
func (o *VoidTransportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport forbidden response has a 4xx status code
func (o *VoidTransportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this void transport forbidden response has a 5xx status code
func (o *VoidTransportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this void transport forbidden response a status code equal to that given
func (o *VoidTransportForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *VoidTransportForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportForbidden  %+v", 403, o.Payload)
}

func (o *VoidTransportForbidden) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportForbidden  %+v", 403, o.Payload)
}

func (o *VoidTransportForbidden) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportNotFound creates a VoidTransportNotFound with default headers values
func NewVoidTransportNotFound() *VoidTransportNotFound {
	return &VoidTransportNotFound{}
}

/*
VoidTransportNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type VoidTransportNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport not found response has a 2xx status code
func (o *VoidTransportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport not found response has a 3xx status code
func (o *VoidTransportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport not found response has a 4xx status code
func (o *VoidTransportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this void transport not found response has a 5xx status code
func (o *VoidTransportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this void transport not found response a status code equal to that given
func (o *VoidTransportNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *VoidTransportNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportNotFound  %+v", 404, o.Payload)
}

func (o *VoidTransportNotFound) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportNotFound  %+v", 404, o.Payload)
}

func (o *VoidTransportNotFound) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportTooManyRequests creates a VoidTransportTooManyRequests with default headers values
func NewVoidTransportTooManyRequests() *VoidTransportTooManyRequests {
	return &VoidTransportTooManyRequests{}
}

/*
VoidTransportTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type VoidTransportTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport too many requests response has a 2xx status code
func (o *VoidTransportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport too many requests response has a 3xx status code
func (o *VoidTransportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport too many requests response has a 4xx status code
func (o *VoidTransportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this void transport too many requests response has a 5xx status code
func (o *VoidTransportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this void transport too many requests response a status code equal to that given
func (o *VoidTransportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *VoidTransportTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportTooManyRequests  %+v", 429, o.Payload)
}

func (o *VoidTransportTooManyRequests) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportTooManyRequests  %+v", 429, o.Payload)
}

func (o *VoidTransportTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportInternalServerError creates a VoidTransportInternalServerError with default headers values
func NewVoidTransportInternalServerError() *VoidTransportInternalServerError {
	return &VoidTransportInternalServerError{}
}

/*
VoidTransportInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type VoidTransportInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport internal server error response has a 2xx status code
func (o *VoidTransportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport internal server error response has a 3xx status code
func (o *VoidTransportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport internal server error response has a 4xx status code
func (o *VoidTransportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this void transport internal server error response has a 5xx status code
func (o *VoidTransportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this void transport internal server error response a status code equal to that given
func (o *VoidTransportInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *VoidTransportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportInternalServerError  %+v", 500, o.Payload)
}

func (o *VoidTransportInternalServerError) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportInternalServerError  %+v", 500, o.Payload)
}

func (o *VoidTransportInternalServerError) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewVoidTransportServiceUnavailable creates a VoidTransportServiceUnavailable with default headers values
func NewVoidTransportServiceUnavailable() *VoidTransportServiceUnavailable {
	return &VoidTransportServiceUnavailable{}
}

/*
VoidTransportServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type VoidTransportServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.VoidTransportResponse
}

// IsSuccess returns true when this void transport service unavailable response has a 2xx status code
func (o *VoidTransportServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this void transport service unavailable response has a 3xx status code
func (o *VoidTransportServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this void transport service unavailable response has a 4xx status code
func (o *VoidTransportServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this void transport service unavailable response has a 5xx status code
func (o *VoidTransportServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this void transport service unavailable response a status code equal to that given
func (o *VoidTransportServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *VoidTransportServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *VoidTransportServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/void][%d] voidTransportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *VoidTransportServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.VoidTransportResponse {
	return o.Payload
}

func (o *VoidTransportServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.VoidTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
