// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// GetPreorderInfoReader is a Reader for the GetPreorderInfo structure.
type GetPreorderInfoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPreorderInfoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetPreorderInfoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetPreorderInfoBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetPreorderInfoUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetPreorderInfoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetPreorderInfoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetPreorderInfoTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetPreorderInfoInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetPreorderInfoServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetPreorderInfoOK creates a GetPreorderInfoOK with default headers values
func NewGetPreorderInfoOK() *GetPreorderInfoOK {
	return &GetPreorderInfoOK{}
}

/*
GetPreorderInfoOK describes a response with status code 200, with default header values.

Success.
*/
type GetPreorderInfoOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info o k response has a 2xx status code
func (o *GetPreorderInfoOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get preorder info o k response has a 3xx status code
func (o *GetPreorderInfoOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info o k response has a 4xx status code
func (o *GetPreorderInfoOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preorder info o k response has a 5xx status code
func (o *GetPreorderInfoOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get preorder info o k response a status code equal to that given
func (o *GetPreorderInfoOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetPreorderInfoOK) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoOK  %+v", 200, o.Payload)
}

func (o *GetPreorderInfoOK) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoOK  %+v", 200, o.Payload)
}

func (o *GetPreorderInfoOK) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoBadRequest creates a GetPreorderInfoBadRequest with default headers values
func NewGetPreorderInfoBadRequest() *GetPreorderInfoBadRequest {
	return &GetPreorderInfoBadRequest{}
}

/*
GetPreorderInfoBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetPreorderInfoBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info bad request response has a 2xx status code
func (o *GetPreorderInfoBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info bad request response has a 3xx status code
func (o *GetPreorderInfoBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info bad request response has a 4xx status code
func (o *GetPreorderInfoBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preorder info bad request response has a 5xx status code
func (o *GetPreorderInfoBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get preorder info bad request response a status code equal to that given
func (o *GetPreorderInfoBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetPreorderInfoBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoBadRequest  %+v", 400, o.Payload)
}

func (o *GetPreorderInfoBadRequest) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoBadRequest  %+v", 400, o.Payload)
}

func (o *GetPreorderInfoBadRequest) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoUnauthorized creates a GetPreorderInfoUnauthorized with default headers values
func NewGetPreorderInfoUnauthorized() *GetPreorderInfoUnauthorized {
	return &GetPreorderInfoUnauthorized{}
}

/*
GetPreorderInfoUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetPreorderInfoUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info unauthorized response has a 2xx status code
func (o *GetPreorderInfoUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info unauthorized response has a 3xx status code
func (o *GetPreorderInfoUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info unauthorized response has a 4xx status code
func (o *GetPreorderInfoUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preorder info unauthorized response has a 5xx status code
func (o *GetPreorderInfoUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get preorder info unauthorized response a status code equal to that given
func (o *GetPreorderInfoUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetPreorderInfoUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPreorderInfoUnauthorized) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPreorderInfoUnauthorized) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoForbidden creates a GetPreorderInfoForbidden with default headers values
func NewGetPreorderInfoForbidden() *GetPreorderInfoForbidden {
	return &GetPreorderInfoForbidden{}
}

/*
GetPreorderInfoForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetPreorderInfoForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info forbidden response has a 2xx status code
func (o *GetPreorderInfoForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info forbidden response has a 3xx status code
func (o *GetPreorderInfoForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info forbidden response has a 4xx status code
func (o *GetPreorderInfoForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preorder info forbidden response has a 5xx status code
func (o *GetPreorderInfoForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get preorder info forbidden response a status code equal to that given
func (o *GetPreorderInfoForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetPreorderInfoForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoForbidden  %+v", 403, o.Payload)
}

func (o *GetPreorderInfoForbidden) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoForbidden  %+v", 403, o.Payload)
}

func (o *GetPreorderInfoForbidden) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoNotFound creates a GetPreorderInfoNotFound with default headers values
func NewGetPreorderInfoNotFound() *GetPreorderInfoNotFound {
	return &GetPreorderInfoNotFound{}
}

/*
GetPreorderInfoNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetPreorderInfoNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info not found response has a 2xx status code
func (o *GetPreorderInfoNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info not found response has a 3xx status code
func (o *GetPreorderInfoNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info not found response has a 4xx status code
func (o *GetPreorderInfoNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preorder info not found response has a 5xx status code
func (o *GetPreorderInfoNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get preorder info not found response a status code equal to that given
func (o *GetPreorderInfoNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetPreorderInfoNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoNotFound  %+v", 404, o.Payload)
}

func (o *GetPreorderInfoNotFound) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoNotFound  %+v", 404, o.Payload)
}

func (o *GetPreorderInfoNotFound) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoTooManyRequests creates a GetPreorderInfoTooManyRequests with default headers values
func NewGetPreorderInfoTooManyRequests() *GetPreorderInfoTooManyRequests {
	return &GetPreorderInfoTooManyRequests{}
}

/*
GetPreorderInfoTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetPreorderInfoTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info too many requests response has a 2xx status code
func (o *GetPreorderInfoTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info too many requests response has a 3xx status code
func (o *GetPreorderInfoTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info too many requests response has a 4xx status code
func (o *GetPreorderInfoTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get preorder info too many requests response has a 5xx status code
func (o *GetPreorderInfoTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get preorder info too many requests response a status code equal to that given
func (o *GetPreorderInfoTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetPreorderInfoTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPreorderInfoTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetPreorderInfoTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoInternalServerError creates a GetPreorderInfoInternalServerError with default headers values
func NewGetPreorderInfoInternalServerError() *GetPreorderInfoInternalServerError {
	return &GetPreorderInfoInternalServerError{}
}

/*
GetPreorderInfoInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetPreorderInfoInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info internal server error response has a 2xx status code
func (o *GetPreorderInfoInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info internal server error response has a 3xx status code
func (o *GetPreorderInfoInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info internal server error response has a 4xx status code
func (o *GetPreorderInfoInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preorder info internal server error response has a 5xx status code
func (o *GetPreorderInfoInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get preorder info internal server error response a status code equal to that given
func (o *GetPreorderInfoInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetPreorderInfoInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPreorderInfoInternalServerError) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPreorderInfoInternalServerError) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPreorderInfoServiceUnavailable creates a GetPreorderInfoServiceUnavailable with default headers values
func NewGetPreorderInfoServiceUnavailable() *GetPreorderInfoServiceUnavailable {
	return &GetPreorderInfoServiceUnavailable{}
}

/*
GetPreorderInfoServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetPreorderInfoServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetPreorderInfoResponse
}

// IsSuccess returns true when this get preorder info service unavailable response has a 2xx status code
func (o *GetPreorderInfoServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get preorder info service unavailable response has a 3xx status code
func (o *GetPreorderInfoServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get preorder info service unavailable response has a 4xx status code
func (o *GetPreorderInfoServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get preorder info service unavailable response has a 5xx status code
func (o *GetPreorderInfoServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get preorder info service unavailable response a status code equal to that given
func (o *GetPreorderInfoServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetPreorderInfoServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetPreorderInfoServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/preorder][%d] getPreorderInfoServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetPreorderInfoServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.GetPreorderInfoResponse {
	return o.Payload
}

func (o *GetPreorderInfoServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetPreorderInfoResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
