// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new fba inbound API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fba inbound API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ConfirmPreorder(params *ConfirmPreorderParams, opts ...ClientOption) (*ConfirmPreorderOK, error)

	ConfirmTransport(params *ConfirmTransportParams, opts ...ClientOption) (*ConfirmTransportOK, error)

	CreateInboundShipment(params *CreateInboundShipmentParams, opts ...ClientOption) (*CreateInboundShipmentOK, error)

	CreateInboundShipmentPlan(params *CreateInboundShipmentPlanParams, opts ...ClientOption) (*CreateInboundShipmentPlanOK, error)

	EstimateTransport(params *EstimateTransportParams, opts ...ClientOption) (*EstimateTransportOK, error)

	GetBillOfLading(params *GetBillOfLadingParams, opts ...ClientOption) (*GetBillOfLadingOK, error)

	GetInboundGuidance(params *GetInboundGuidanceParams, opts ...ClientOption) (*GetInboundGuidanceOK, error)

	GetLabels(params *GetLabelsParams, opts ...ClientOption) (*GetLabelsOK, error)

	GetPreorderInfo(params *GetPreorderInfoParams, opts ...ClientOption) (*GetPreorderInfoOK, error)

	GetPrepInstructions(params *GetPrepInstructionsParams, opts ...ClientOption) (*GetPrepInstructionsOK, error)

	GetShipmentItems(params *GetShipmentItemsParams, opts ...ClientOption) (*GetShipmentItemsOK, error)

	GetShipmentItemsByShipmentID(params *GetShipmentItemsByShipmentIDParams, opts ...ClientOption) (*GetShipmentItemsByShipmentIDOK, error)

	GetShipments(params *GetShipmentsParams, opts ...ClientOption) (*GetShipmentsOK, error)

	GetTransportDetails(params *GetTransportDetailsParams, opts ...ClientOption) (*GetTransportDetailsOK, error)

	PutTransportDetails(params *PutTransportDetailsParams, opts ...ClientOption) (*PutTransportDetailsOK, error)

	UpdateInboundShipment(params *UpdateInboundShipmentParams, opts ...ClientOption) (*UpdateInboundShipmentOK, error)

	VoidTransport(params *VoidTransportParams, opts ...ClientOption) (*VoidTransportOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	ConfirmPreorder Returns information needed to confirm a shipment for pre-order. Call this operation after calling the getPreorderInfo operation to get the NeedByDate value and other pre-order information about the shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) ConfirmPreorder(params *ConfirmPreorderParams, opts ...ClientOption) (*ConfirmPreorderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmPreorderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "confirmPreorder",
		Method:             "PUT",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmPreorderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmPreorderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmPreorder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	ConfirmTransport Confirms that the seller accepts the Amazon-partnered shipping estimate, agrees to allow Amazon to charge their account for the shipping cost, and requests that the Amazon-partnered carrier ship the inbound shipment.

Prior to calling the confirmTransport operation, you should call the getTransportDetails operation to get the Amazon-partnered shipping estimate.

Important: After confirming the transportation request, if the seller decides that they do not want the Amazon-partnered carrier to ship the inbound shipment, you can call the voidTransport operation to cancel the transportation request. Note that for a Small Parcel shipment, the seller has 24 hours after confirming a transportation request to void the transportation request. For a Less Than Truckload/Full Truckload (LTL/FTL) shipment, the seller has one hour after confirming a transportation request to void it. After the grace period has expired the seller's account will be charged for the shipping cost.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) ConfirmTransport(params *ConfirmTransportParams, opts ...ClientOption) (*ConfirmTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewConfirmTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "confirmTransport",
		Method:             "POST",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/transport/confirm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ConfirmTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ConfirmTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for confirmTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateInboundShipment Returns a new inbound shipment based on the specified shipmentId that was returned by the createInboundShipmentPlan operation.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) CreateInboundShipment(params *CreateInboundShipmentParams, opts ...ClientOption) (*CreateInboundShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInboundShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInboundShipment",
		Method:             "POST",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInboundShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInboundShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInboundShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	CreateInboundShipmentPlan Returns one or more inbound shipment plans, which provide the information you need to create one or more inbound shipments for a set of items that you specify. Multiple inbound shipment plans might be required so that items can be optimally placed in Amazon's fulfillment network—for example, positioning inventory closer to the customer. Alternatively, two inbound shipment plans might be created with the same Amazon fulfillment center destination if the two shipment plans require different processing—for example, items that require labels must be shipped separately from stickerless, commingled inventory.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) CreateInboundShipmentPlan(params *CreateInboundShipmentPlanParams, opts ...ClientOption) (*CreateInboundShipmentPlanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInboundShipmentPlanParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInboundShipmentPlan",
		Method:             "POST",
		PathPattern:        "/fba/inbound/v0/plans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInboundShipmentPlanReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInboundShipmentPlanOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createInboundShipmentPlan: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	EstimateTransport Initiates the process of estimating the shipping cost for an inbound shipment by an Amazon-partnered carrier.

Prior to calling the estimateTransport operation, you must call the putTransportDetails operation to provide Amazon with the transportation information for the inbound shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) EstimateTransport(params *EstimateTransportParams, opts ...ClientOption) (*EstimateTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEstimateTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "estimateTransport",
		Method:             "POST",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/transport/estimate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EstimateTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EstimateTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for estimateTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetBillOfLading Returns a bill of lading for a Less Than Truckload/Full Truckload (LTL/FTL) shipment. The getBillOfLading operation returns PDF document data for printing a bill of lading for an Amazon-partnered Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetBillOfLading(params *GetBillOfLadingParams, opts ...ClientOption) (*GetBillOfLadingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBillOfLadingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getBillOfLading",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/billOfLading",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetBillOfLadingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBillOfLadingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getBillOfLading: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetInboundGuidance Returns information that lets a seller know if Amazon recommends sending an item to a given marketplace. In some cases, Amazon provides guidance for why a given SellerSKU or ASIN is not recommended for shipment to Amazon's fulfillment network. Sellers may still ship items that are not recommended, at their discretion.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetInboundGuidance(params *GetInboundGuidanceParams, opts ...ClientOption) (*GetInboundGuidanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInboundGuidanceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInboundGuidance",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/itemsGuidance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInboundGuidanceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInboundGuidanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInboundGuidance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetLabels Returns package/pallet labels for faster and more accurate shipment processing at the Amazon fulfillment center.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetLabels(params *GetLabelsParams, opts ...ClientOption) (*GetLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getLabels",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetLabelsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getLabels: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPreorderInfo Returns pre-order information, including dates, that a seller needs before confirming a shipment for pre-order.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetPreorderInfo(params *GetPreorderInfoParams, opts ...ClientOption) (*GetPreorderInfoOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPreorderInfoParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPreorderInfo",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/preorder",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPreorderInfoReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPreorderInfoOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPreorderInfo: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetPrepInstructions Returns labeling requirements and item preparation instructions to help prepare items for shipment to Amazon's fulfillment network.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetPrepInstructions(params *GetPrepInstructionsParams, opts ...ClientOption) (*GetPrepInstructionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrepInstructionsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getPrepInstructions",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/prepInstructions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPrepInstructionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrepInstructionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getPrepInstructions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetShipmentItems Returns a list of items in a specified inbound shipment, or a list of items that were updated within a specified time frame.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetShipmentItems(params *GetShipmentItemsParams, opts ...ClientOption) (*GetShipmentItemsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentItemsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShipmentItems",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipmentItems",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShipmentItemsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentItemsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShipmentItems: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetShipmentItemsByShipmentID Returns a list of items in a specified inbound shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetShipmentItemsByShipmentID(params *GetShipmentItemsByShipmentIDParams, opts ...ClientOption) (*GetShipmentItemsByShipmentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentItemsByShipmentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShipmentItemsByShipmentId",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/items",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShipmentItemsByShipmentIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentItemsByShipmentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShipmentItemsByShipmentId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetShipments Returns a list of inbound shipments based on criteria that you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetShipments(params *GetShipmentsParams, opts ...ClientOption) (*GetShipmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShipments",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShipmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShipments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetTransportDetails Returns current transportation information about an inbound shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetTransportDetails(params *GetTransportDetailsParams, opts ...ClientOption) (*GetTransportDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTransportDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTransportDetails",
		Method:             "GET",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTransportDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTransportDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTransportDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PutTransportDetails Sends transportation information to Amazon about an inbound shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) PutTransportDetails(params *PutTransportDetailsParams, opts ...ClientOption) (*PutTransportDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutTransportDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "putTransportDetails",
		Method:             "PUT",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/transport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutTransportDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutTransportDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for putTransportDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UpdateInboundShipment Updates or removes items from the inbound shipment identified by the specified shipment identifier. Adding new items is not supported.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) UpdateInboundShipment(params *UpdateInboundShipmentParams, opts ...ClientOption) (*UpdateInboundShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInboundShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateInboundShipment",
		Method:             "PUT",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInboundShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInboundShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateInboundShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	VoidTransport Cancels a previously-confirmed request to ship an inbound shipment using an Amazon-partnered carrier.

To be successful, you must call this operation before the VoidDeadline date that is returned by the getTransportDetails operation.

Important: The VoidDeadline date is 24 hours after you confirm a Small Parcel shipment transportation request or one hour after you confirm a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request. After the void deadline passes, your account will be charged for the shipping cost.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 2 | 30 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) VoidTransport(params *VoidTransportParams, opts ...ClientOption) (*VoidTransportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVoidTransportParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "voidTransport",
		Method:             "POST",
		PathPattern:        "/fba/inbound/v0/shipments/{shipmentId}/transport/void",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &VoidTransportReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VoidTransportOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for voidTransport: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
