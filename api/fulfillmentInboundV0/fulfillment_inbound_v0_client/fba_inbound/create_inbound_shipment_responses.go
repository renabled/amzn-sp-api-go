// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// CreateInboundShipmentReader is a Reader for the CreateInboundShipment structure.
type CreateInboundShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInboundShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateInboundShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInboundShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateInboundShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInboundShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInboundShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateInboundShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInboundShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateInboundShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateInboundShipmentOK creates a CreateInboundShipmentOK with default headers values
func NewCreateInboundShipmentOK() *CreateInboundShipmentOK {
	return &CreateInboundShipmentOK{}
}

/* CreateInboundShipmentOK describes a response with status code 200, with default header values.

Success.
*/
type CreateInboundShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentOK) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentOK  %+v", 200, o.Payload)
}
func (o *CreateInboundShipmentOK) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentBadRequest creates a CreateInboundShipmentBadRequest with default headers values
func NewCreateInboundShipmentBadRequest() *CreateInboundShipmentBadRequest {
	return &CreateInboundShipmentBadRequest{}
}

/* CreateInboundShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateInboundShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentBadRequest  %+v", 400, o.Payload)
}
func (o *CreateInboundShipmentBadRequest) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentUnauthorized creates a CreateInboundShipmentUnauthorized with default headers values
func NewCreateInboundShipmentUnauthorized() *CreateInboundShipmentUnauthorized {
	return &CreateInboundShipmentUnauthorized{}
}

/* CreateInboundShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateInboundShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentUnauthorized  %+v", 401, o.Payload)
}
func (o *CreateInboundShipmentUnauthorized) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentForbidden creates a CreateInboundShipmentForbidden with default headers values
func NewCreateInboundShipmentForbidden() *CreateInboundShipmentForbidden {
	return &CreateInboundShipmentForbidden{}
}

/* CreateInboundShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateInboundShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentForbidden  %+v", 403, o.Payload)
}
func (o *CreateInboundShipmentForbidden) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentNotFound creates a CreateInboundShipmentNotFound with default headers values
func NewCreateInboundShipmentNotFound() *CreateInboundShipmentNotFound {
	return &CreateInboundShipmentNotFound{}
}

/* CreateInboundShipmentNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateInboundShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentNotFound  %+v", 404, o.Payload)
}
func (o *CreateInboundShipmentNotFound) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentTooManyRequests creates a CreateInboundShipmentTooManyRequests with default headers values
func NewCreateInboundShipmentTooManyRequests() *CreateInboundShipmentTooManyRequests {
	return &CreateInboundShipmentTooManyRequests{}
}

/* CreateInboundShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateInboundShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentTooManyRequests  %+v", 429, o.Payload)
}
func (o *CreateInboundShipmentTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentInternalServerError creates a CreateInboundShipmentInternalServerError with default headers values
func NewCreateInboundShipmentInternalServerError() *CreateInboundShipmentInternalServerError {
	return &CreateInboundShipmentInternalServerError{}
}

/* CreateInboundShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateInboundShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateInboundShipmentInternalServerError) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundShipmentServiceUnavailable creates a CreateInboundShipmentServiceUnavailable with default headers values
func NewCreateInboundShipmentServiceUnavailable() *CreateInboundShipmentServiceUnavailable {
	return &CreateInboundShipmentServiceUnavailable{}
}

/* CreateInboundShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateInboundShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.InboundShipmentResponse
}

func (o *CreateInboundShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}][%d] createInboundShipmentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CreateInboundShipmentServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.InboundShipmentResponse {
	return o.Payload
}

func (o *CreateInboundShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.InboundShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
