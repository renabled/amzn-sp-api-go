// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPrepInstructionsParams creates a new GetPrepInstructionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPrepInstructionsParams() *GetPrepInstructionsParams {
	return &GetPrepInstructionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrepInstructionsParamsWithTimeout creates a new GetPrepInstructionsParams object
// with the ability to set a timeout on a request.
func NewGetPrepInstructionsParamsWithTimeout(timeout time.Duration) *GetPrepInstructionsParams {
	return &GetPrepInstructionsParams{
		timeout: timeout,
	}
}

// NewGetPrepInstructionsParamsWithContext creates a new GetPrepInstructionsParams object
// with the ability to set a context for a request.
func NewGetPrepInstructionsParamsWithContext(ctx context.Context) *GetPrepInstructionsParams {
	return &GetPrepInstructionsParams{
		Context: ctx,
	}
}

// NewGetPrepInstructionsParamsWithHTTPClient creates a new GetPrepInstructionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPrepInstructionsParamsWithHTTPClient(client *http.Client) *GetPrepInstructionsParams {
	return &GetPrepInstructionsParams{
		HTTPClient: client,
	}
}

/*
GetPrepInstructionsParams contains all the parameters to send to the API endpoint

	for the get prep instructions operation.

	Typically these are written to a http.Request.
*/
type GetPrepInstructionsParams struct {

	/* ASINList.

	     A list of ASIN values. Used to identify items for which you want item preparation instructions to help with item sourcing decisions.

	Note: ASINs must be included in the product catalog for at least one of the marketplaces that the seller  participates in. Any ASIN that is not included in the product catalog for at least one of the marketplaces that the seller participates in is returned in the InvalidASINList property in the response. You can find out which marketplaces a seller participates in by calling the getMarketplaceParticipations operation in the Selling Partner API for Sellers.
	*/
	ASINList []string

	/* SellerSKUList.

	     A list of SellerSKU values. Used to identify items for which you want labeling requirements and item preparation instructions for shipment to Amazon's fulfillment network. The SellerSKU is qualified by the Seller ID, which is included with every call to the Seller Partner API.

	Note: Include seller SKUs that you have used to list items on Amazon's retail website. If you include a seller SKU that you have never used to list an item on Amazon's retail website, the seller SKU is returned in the InvalidSKUList property in the response.
	*/
	SellerSKUList []string

	/* ShipToCountryCode.

	   The country code of the country to which the items will be shipped. Note that labeling requirements and item preparation instructions can vary by country.

	   Format: [A-Z]{2}
	*/
	ShipToCountryCode string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get prep instructions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPrepInstructionsParams) WithDefaults() *GetPrepInstructionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get prep instructions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPrepInstructionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get prep instructions params
func (o *GetPrepInstructionsParams) WithTimeout(timeout time.Duration) *GetPrepInstructionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get prep instructions params
func (o *GetPrepInstructionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get prep instructions params
func (o *GetPrepInstructionsParams) WithContext(ctx context.Context) *GetPrepInstructionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get prep instructions params
func (o *GetPrepInstructionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get prep instructions params
func (o *GetPrepInstructionsParams) WithHTTPClient(client *http.Client) *GetPrepInstructionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get prep instructions params
func (o *GetPrepInstructionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithASINList adds the aSINList to the get prep instructions params
func (o *GetPrepInstructionsParams) WithASINList(aSINList []string) *GetPrepInstructionsParams {
	o.SetASINList(aSINList)
	return o
}

// SetASINList adds the aSINList to the get prep instructions params
func (o *GetPrepInstructionsParams) SetASINList(aSINList []string) {
	o.ASINList = aSINList
}

// WithSellerSKUList adds the sellerSKUList to the get prep instructions params
func (o *GetPrepInstructionsParams) WithSellerSKUList(sellerSKUList []string) *GetPrepInstructionsParams {
	o.SetSellerSKUList(sellerSKUList)
	return o
}

// SetSellerSKUList adds the sellerSKUList to the get prep instructions params
func (o *GetPrepInstructionsParams) SetSellerSKUList(sellerSKUList []string) {
	o.SellerSKUList = sellerSKUList
}

// WithShipToCountryCode adds the shipToCountryCode to the get prep instructions params
func (o *GetPrepInstructionsParams) WithShipToCountryCode(shipToCountryCode string) *GetPrepInstructionsParams {
	o.SetShipToCountryCode(shipToCountryCode)
	return o
}

// SetShipToCountryCode adds the shipToCountryCode to the get prep instructions params
func (o *GetPrepInstructionsParams) SetShipToCountryCode(shipToCountryCode string) {
	o.ShipToCountryCode = shipToCountryCode
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrepInstructionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ASINList != nil {

		// binding items for ASINList
		joinedASINList := o.bindParamASINList(reg)

		// query array param ASINList
		if err := r.SetQueryParam("ASINList", joinedASINList...); err != nil {
			return err
		}
	}

	if o.SellerSKUList != nil {

		// binding items for SellerSKUList
		joinedSellerSKUList := o.bindParamSellerSKUList(reg)

		// query array param SellerSKUList
		if err := r.SetQueryParam("SellerSKUList", joinedSellerSKUList...); err != nil {
			return err
		}
	}

	// query param ShipToCountryCode
	qrShipToCountryCode := o.ShipToCountryCode
	qShipToCountryCode := qrShipToCountryCode
	if qShipToCountryCode != "" {

		if err := r.SetQueryParam("ShipToCountryCode", qShipToCountryCode); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetPrepInstructions binds the parameter ASINList
func (o *GetPrepInstructionsParams) bindParamASINList(formats strfmt.Registry) []string {
	aSINListIR := o.ASINList

	var aSINListIC []string
	for _, aSINListIIR := range aSINListIR { // explode []string

		aSINListIIV := aSINListIIR // string as string
		aSINListIC = append(aSINListIC, aSINListIIV)
	}

	// items.CollectionFormat: ""
	aSINListIS := swag.JoinByFormat(aSINListIC, "")

	return aSINListIS
}

// bindParamGetPrepInstructions binds the parameter SellerSKUList
func (o *GetPrepInstructionsParams) bindParamSellerSKUList(formats strfmt.Registry) []string {
	sellerSKUListIR := o.SellerSKUList

	var sellerSKUListIC []string
	for _, sellerSKUListIIR := range sellerSKUListIR { // explode []string

		sellerSKUListIIV := sellerSKUListIIR // string as string
		sellerSKUListIC = append(sellerSKUListIC, sellerSKUListIIV)
	}

	// items.CollectionFormat: ""
	sellerSKUListIS := swag.JoinByFormat(sellerSKUListIC, "")

	return sellerSKUListIS
}
