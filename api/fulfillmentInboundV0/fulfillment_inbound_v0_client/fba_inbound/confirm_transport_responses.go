// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// ConfirmTransportReader is a Reader for the ConfirmTransport structure.
type ConfirmTransportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmTransportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewConfirmTransportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmTransportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConfirmTransportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmTransportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmTransportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmTransportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmTransportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmTransportServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmTransportOK creates a ConfirmTransportOK with default headers values
func NewConfirmTransportOK() *ConfirmTransportOK {
	return &ConfirmTransportOK{}
}

/*
ConfirmTransportOK describes a response with status code 200, with default header values.

Success.
*/
type ConfirmTransportOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport o k response has a 2xx status code
func (o *ConfirmTransportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm transport o k response has a 3xx status code
func (o *ConfirmTransportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport o k response has a 4xx status code
func (o *ConfirmTransportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm transport o k response has a 5xx status code
func (o *ConfirmTransportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transport o k response a status code equal to that given
func (o *ConfirmTransportOK) IsCode(code int) bool {
	return code == 200
}

func (o *ConfirmTransportOK) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportOK  %+v", 200, o.Payload)
}

func (o *ConfirmTransportOK) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportOK  %+v", 200, o.Payload)
}

func (o *ConfirmTransportOK) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportBadRequest creates a ConfirmTransportBadRequest with default headers values
func NewConfirmTransportBadRequest() *ConfirmTransportBadRequest {
	return &ConfirmTransportBadRequest{}
}

/*
ConfirmTransportBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmTransportBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport bad request response has a 2xx status code
func (o *ConfirmTransportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport bad request response has a 3xx status code
func (o *ConfirmTransportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport bad request response has a 4xx status code
func (o *ConfirmTransportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transport bad request response has a 5xx status code
func (o *ConfirmTransportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transport bad request response a status code equal to that given
func (o *ConfirmTransportBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmTransportBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmTransportBadRequest) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmTransportBadRequest) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportUnauthorized creates a ConfirmTransportUnauthorized with default headers values
func NewConfirmTransportUnauthorized() *ConfirmTransportUnauthorized {
	return &ConfirmTransportUnauthorized{}
}

/*
ConfirmTransportUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type ConfirmTransportUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport unauthorized response has a 2xx status code
func (o *ConfirmTransportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport unauthorized response has a 3xx status code
func (o *ConfirmTransportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport unauthorized response has a 4xx status code
func (o *ConfirmTransportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transport unauthorized response has a 5xx status code
func (o *ConfirmTransportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transport unauthorized response a status code equal to that given
func (o *ConfirmTransportUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ConfirmTransportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfirmTransportUnauthorized) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfirmTransportUnauthorized) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportForbidden creates a ConfirmTransportForbidden with default headers values
func NewConfirmTransportForbidden() *ConfirmTransportForbidden {
	return &ConfirmTransportForbidden{}
}

/*
ConfirmTransportForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmTransportForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport forbidden response has a 2xx status code
func (o *ConfirmTransportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport forbidden response has a 3xx status code
func (o *ConfirmTransportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport forbidden response has a 4xx status code
func (o *ConfirmTransportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transport forbidden response has a 5xx status code
func (o *ConfirmTransportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transport forbidden response a status code equal to that given
func (o *ConfirmTransportForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmTransportForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmTransportForbidden) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmTransportForbidden) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportNotFound creates a ConfirmTransportNotFound with default headers values
func NewConfirmTransportNotFound() *ConfirmTransportNotFound {
	return &ConfirmTransportNotFound{}
}

/*
ConfirmTransportNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type ConfirmTransportNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport not found response has a 2xx status code
func (o *ConfirmTransportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport not found response has a 3xx status code
func (o *ConfirmTransportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport not found response has a 4xx status code
func (o *ConfirmTransportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transport not found response has a 5xx status code
func (o *ConfirmTransportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transport not found response a status code equal to that given
func (o *ConfirmTransportNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmTransportNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmTransportNotFound) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmTransportNotFound) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportTooManyRequests creates a ConfirmTransportTooManyRequests with default headers values
func NewConfirmTransportTooManyRequests() *ConfirmTransportTooManyRequests {
	return &ConfirmTransportTooManyRequests{}
}

/*
ConfirmTransportTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmTransportTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport too many requests response has a 2xx status code
func (o *ConfirmTransportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport too many requests response has a 3xx status code
func (o *ConfirmTransportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport too many requests response has a 4xx status code
func (o *ConfirmTransportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm transport too many requests response has a 5xx status code
func (o *ConfirmTransportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm transport too many requests response a status code equal to that given
func (o *ConfirmTransportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmTransportTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmTransportTooManyRequests) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmTransportTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportInternalServerError creates a ConfirmTransportInternalServerError with default headers values
func NewConfirmTransportInternalServerError() *ConfirmTransportInternalServerError {
	return &ConfirmTransportInternalServerError{}
}

/*
ConfirmTransportInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmTransportInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport internal server error response has a 2xx status code
func (o *ConfirmTransportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport internal server error response has a 3xx status code
func (o *ConfirmTransportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport internal server error response has a 4xx status code
func (o *ConfirmTransportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm transport internal server error response has a 5xx status code
func (o *ConfirmTransportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm transport internal server error response a status code equal to that given
func (o *ConfirmTransportInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmTransportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmTransportInternalServerError) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmTransportInternalServerError) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmTransportServiceUnavailable creates a ConfirmTransportServiceUnavailable with default headers values
func NewConfirmTransportServiceUnavailable() *ConfirmTransportServiceUnavailable {
	return &ConfirmTransportServiceUnavailable{}
}

/*
ConfirmTransportServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmTransportServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.ConfirmTransportResponse
}

// IsSuccess returns true when this confirm transport service unavailable response has a 2xx status code
func (o *ConfirmTransportServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm transport service unavailable response has a 3xx status code
func (o *ConfirmTransportServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm transport service unavailable response has a 4xx status code
func (o *ConfirmTransportServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm transport service unavailable response has a 5xx status code
func (o *ConfirmTransportServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm transport service unavailable response a status code equal to that given
func (o *ConfirmTransportServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmTransportServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmTransportServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/confirm][%d] confirmTransportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmTransportServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.ConfirmTransportResponse {
	return o.Payload
}

func (o *ConfirmTransportServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.ConfirmTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
