// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// GetShipmentItemsByShipmentIDReader is a Reader for the GetShipmentItemsByShipmentID structure.
type GetShipmentItemsByShipmentIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShipmentItemsByShipmentIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShipmentItemsByShipmentIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShipmentItemsByShipmentIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetShipmentItemsByShipmentIDUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShipmentItemsByShipmentIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShipmentItemsByShipmentIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShipmentItemsByShipmentIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShipmentItemsByShipmentIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShipmentItemsByShipmentIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShipmentItemsByShipmentIDOK creates a GetShipmentItemsByShipmentIDOK with default headers values
func NewGetShipmentItemsByShipmentIDOK() *GetShipmentItemsByShipmentIDOK {
	return &GetShipmentItemsByShipmentIDOK{}
}

/* GetShipmentItemsByShipmentIDOK describes a response with status code 200, with default header values.

Success.
*/
type GetShipmentItemsByShipmentIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDOK) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdOK  %+v", 200, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDOK) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDBadRequest creates a GetShipmentItemsByShipmentIDBadRequest with default headers values
func NewGetShipmentItemsByShipmentIDBadRequest() *GetShipmentItemsByShipmentIDBadRequest {
	return &GetShipmentItemsByShipmentIDBadRequest{}
}

/* GetShipmentItemsByShipmentIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShipmentItemsByShipmentIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDBadRequest) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDUnauthorized creates a GetShipmentItemsByShipmentIDUnauthorized with default headers values
func NewGetShipmentItemsByShipmentIDUnauthorized() *GetShipmentItemsByShipmentIDUnauthorized {
	return &GetShipmentItemsByShipmentIDUnauthorized{}
}

/* GetShipmentItemsByShipmentIDUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetShipmentItemsByShipmentIDUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdUnauthorized  %+v", 401, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDUnauthorized) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDForbidden creates a GetShipmentItemsByShipmentIDForbidden with default headers values
func NewGetShipmentItemsByShipmentIDForbidden() *GetShipmentItemsByShipmentIDForbidden {
	return &GetShipmentItemsByShipmentIDForbidden{}
}

/* GetShipmentItemsByShipmentIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetShipmentItemsByShipmentIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdForbidden  %+v", 403, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDForbidden) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDNotFound creates a GetShipmentItemsByShipmentIDNotFound with default headers values
func NewGetShipmentItemsByShipmentIDNotFound() *GetShipmentItemsByShipmentIDNotFound {
	return &GetShipmentItemsByShipmentIDNotFound{}
}

/* GetShipmentItemsByShipmentIDNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetShipmentItemsByShipmentIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdNotFound  %+v", 404, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDNotFound) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDTooManyRequests creates a GetShipmentItemsByShipmentIDTooManyRequests with default headers values
func NewGetShipmentItemsByShipmentIDTooManyRequests() *GetShipmentItemsByShipmentIDTooManyRequests {
	return &GetShipmentItemsByShipmentIDTooManyRequests{}
}

/* GetShipmentItemsByShipmentIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShipmentItemsByShipmentIDTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDInternalServerError creates a GetShipmentItemsByShipmentIDInternalServerError with default headers values
func NewGetShipmentItemsByShipmentIDInternalServerError() *GetShipmentItemsByShipmentIDInternalServerError {
	return &GetShipmentItemsByShipmentIDInternalServerError{}
}

/* GetShipmentItemsByShipmentIDInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetShipmentItemsByShipmentIDInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDInternalServerError) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentItemsByShipmentIDServiceUnavailable creates a GetShipmentItemsByShipmentIDServiceUnavailable with default headers values
func NewGetShipmentItemsByShipmentIDServiceUnavailable() *GetShipmentItemsByShipmentIDServiceUnavailable {
	return &GetShipmentItemsByShipmentIDServiceUnavailable{}
}

/* GetShipmentItemsByShipmentIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShipmentItemsByShipmentIDServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.GetShipmentItemsResponse
}

func (o *GetShipmentItemsByShipmentIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v0/shipments/{shipmentId}/items][%d] getShipmentItemsByShipmentIdServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetShipmentItemsByShipmentIDServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.GetShipmentItemsResponse {
	return o.Payload
}

func (o *GetShipmentItemsByShipmentIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.GetShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
