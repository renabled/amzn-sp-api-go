// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewConfirmPreorderParams creates a new ConfirmPreorderParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewConfirmPreorderParams() *ConfirmPreorderParams {
	return &ConfirmPreorderParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewConfirmPreorderParamsWithTimeout creates a new ConfirmPreorderParams object
// with the ability to set a timeout on a request.
func NewConfirmPreorderParamsWithTimeout(timeout time.Duration) *ConfirmPreorderParams {
	return &ConfirmPreorderParams{
		timeout: timeout,
	}
}

// NewConfirmPreorderParamsWithContext creates a new ConfirmPreorderParams object
// with the ability to set a context for a request.
func NewConfirmPreorderParamsWithContext(ctx context.Context) *ConfirmPreorderParams {
	return &ConfirmPreorderParams{
		Context: ctx,
	}
}

// NewConfirmPreorderParamsWithHTTPClient creates a new ConfirmPreorderParams object
// with the ability to set a custom HTTPClient for a request.
func NewConfirmPreorderParamsWithHTTPClient(client *http.Client) *ConfirmPreorderParams {
	return &ConfirmPreorderParams{
		HTTPClient: client,
	}
}

/* ConfirmPreorderParams contains all the parameters to send to the API endpoint
   for the confirm preorder operation.

   Typically these are written to a http.Request.
*/
type ConfirmPreorderParams struct {

	/* MarketplaceID.

	   A marketplace identifier. Specifies the marketplace the shipment is tied to.
	*/
	MarketplaceID string

	/* NeedByDate.

	   Date that the shipment must arrive at the Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items. Must be in YYYY-MM-DD format. The response to the getPreorderInfo operation returns this value.

	   Format: date
	*/
	NeedByDate strfmt.Date

	/* ShipmentID.

	   A shipment identifier originally returned by the createInboundShipmentPlan operation.
	*/
	ShipmentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the confirm preorder params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConfirmPreorderParams) WithDefaults() *ConfirmPreorderParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the confirm preorder params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ConfirmPreorderParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the confirm preorder params
func (o *ConfirmPreorderParams) WithTimeout(timeout time.Duration) *ConfirmPreorderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the confirm preorder params
func (o *ConfirmPreorderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the confirm preorder params
func (o *ConfirmPreorderParams) WithContext(ctx context.Context) *ConfirmPreorderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the confirm preorder params
func (o *ConfirmPreorderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the confirm preorder params
func (o *ConfirmPreorderParams) WithHTTPClient(client *http.Client) *ConfirmPreorderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the confirm preorder params
func (o *ConfirmPreorderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMarketplaceID adds the marketplaceID to the confirm preorder params
func (o *ConfirmPreorderParams) WithMarketplaceID(marketplaceID string) *ConfirmPreorderParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the confirm preorder params
func (o *ConfirmPreorderParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithNeedByDate adds the needByDate to the confirm preorder params
func (o *ConfirmPreorderParams) WithNeedByDate(needByDate strfmt.Date) *ConfirmPreorderParams {
	o.SetNeedByDate(needByDate)
	return o
}

// SetNeedByDate adds the needByDate to the confirm preorder params
func (o *ConfirmPreorderParams) SetNeedByDate(needByDate strfmt.Date) {
	o.NeedByDate = needByDate
}

// WithShipmentID adds the shipmentID to the confirm preorder params
func (o *ConfirmPreorderParams) WithShipmentID(shipmentID string) *ConfirmPreorderParams {
	o.SetShipmentID(shipmentID)
	return o
}

// SetShipmentID adds the shipmentId to the confirm preorder params
func (o *ConfirmPreorderParams) SetShipmentID(shipmentID string) {
	o.ShipmentID = shipmentID
}

// WriteToRequest writes these params to a swagger request
func (o *ConfirmPreorderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param MarketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("MarketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	// query param NeedByDate
	qrNeedByDate := o.NeedByDate
	qNeedByDate := qrNeedByDate.String()
	if qNeedByDate != "" {

		if err := r.SetQueryParam("NeedByDate", qNeedByDate); err != nil {
			return err
		}
	}

	// path param shipmentId
	if err := r.SetPathParam("shipmentId", o.ShipmentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
