// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentInboundV0/fulfillment_inbound_v0_models"
)

// EstimateTransportReader is a Reader for the EstimateTransport structure.
type EstimateTransportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *EstimateTransportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewEstimateTransportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewEstimateTransportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewEstimateTransportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewEstimateTransportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewEstimateTransportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewEstimateTransportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewEstimateTransportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewEstimateTransportServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewEstimateTransportOK creates a EstimateTransportOK with default headers values
func NewEstimateTransportOK() *EstimateTransportOK {
	return &EstimateTransportOK{}
}

/* EstimateTransportOK describes a response with status code 200, with default header values.

Success.
*/
type EstimateTransportOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportOK) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportOK  %+v", 200, o.Payload)
}
func (o *EstimateTransportOK) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportBadRequest creates a EstimateTransportBadRequest with default headers values
func NewEstimateTransportBadRequest() *EstimateTransportBadRequest {
	return &EstimateTransportBadRequest{}
}

/* EstimateTransportBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type EstimateTransportBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportBadRequest  %+v", 400, o.Payload)
}
func (o *EstimateTransportBadRequest) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportUnauthorized creates a EstimateTransportUnauthorized with default headers values
func NewEstimateTransportUnauthorized() *EstimateTransportUnauthorized {
	return &EstimateTransportUnauthorized{}
}

/* EstimateTransportUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type EstimateTransportUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportUnauthorized  %+v", 401, o.Payload)
}
func (o *EstimateTransportUnauthorized) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportForbidden creates a EstimateTransportForbidden with default headers values
func NewEstimateTransportForbidden() *EstimateTransportForbidden {
	return &EstimateTransportForbidden{}
}

/* EstimateTransportForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type EstimateTransportForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportForbidden  %+v", 403, o.Payload)
}
func (o *EstimateTransportForbidden) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportNotFound creates a EstimateTransportNotFound with default headers values
func NewEstimateTransportNotFound() *EstimateTransportNotFound {
	return &EstimateTransportNotFound{}
}

/* EstimateTransportNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type EstimateTransportNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportNotFound  %+v", 404, o.Payload)
}
func (o *EstimateTransportNotFound) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportTooManyRequests creates a EstimateTransportTooManyRequests with default headers values
func NewEstimateTransportTooManyRequests() *EstimateTransportTooManyRequests {
	return &EstimateTransportTooManyRequests{}
}

/* EstimateTransportTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type EstimateTransportTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportTooManyRequests  %+v", 429, o.Payload)
}
func (o *EstimateTransportTooManyRequests) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportInternalServerError creates a EstimateTransportInternalServerError with default headers values
func NewEstimateTransportInternalServerError() *EstimateTransportInternalServerError {
	return &EstimateTransportInternalServerError{}
}

/* EstimateTransportInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type EstimateTransportInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportInternalServerError  %+v", 500, o.Payload)
}
func (o *EstimateTransportInternalServerError) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewEstimateTransportServiceUnavailable creates a EstimateTransportServiceUnavailable with default headers values
func NewEstimateTransportServiceUnavailable() *EstimateTransportServiceUnavailable {
	return &EstimateTransportServiceUnavailable{}
}

/* EstimateTransportServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type EstimateTransportServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_v0_models.EstimateTransportResponse
}

func (o *EstimateTransportServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/inbound/v0/shipments/{shipmentId}/transport/estimate][%d] estimateTransportServiceUnavailable  %+v", 503, o.Payload)
}
func (o *EstimateTransportServiceUnavailable) GetPayload() *fulfillment_inbound_v0_models.EstimateTransportResponse {
	return o.Payload
}

func (o *EstimateTransportServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_v0_models.EstimateTransportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
