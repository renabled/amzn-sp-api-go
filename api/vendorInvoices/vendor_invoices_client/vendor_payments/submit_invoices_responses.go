// Code generated by go-swagger; DO NOT EDIT.

package vendor_payments

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/vendorInvoices/vendor_invoices_models"
)

// SubmitInvoicesReader is a Reader for the SubmitInvoices structure.
type SubmitInvoicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitInvoicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSubmitInvoicesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitInvoicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitInvoicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitInvoicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSubmitInvoicesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSubmitInvoicesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSubmitInvoicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitInvoicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSubmitInvoicesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitInvoicesAccepted creates a SubmitInvoicesAccepted with default headers values
func NewSubmitInvoicesAccepted() *SubmitInvoicesAccepted {
	return &SubmitInvoicesAccepted{}
}

/*
SubmitInvoicesAccepted describes a response with status code 202, with default header values.

Success.
*/
type SubmitInvoicesAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices accepted response has a 2xx status code
func (o *SubmitInvoicesAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this submit invoices accepted response has a 3xx status code
func (o *SubmitInvoicesAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices accepted response has a 4xx status code
func (o *SubmitInvoicesAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit invoices accepted response has a 5xx status code
func (o *SubmitInvoicesAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices accepted response a status code equal to that given
func (o *SubmitInvoicesAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *SubmitInvoicesAccepted) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesAccepted  %+v", 202, o.Payload)
}

func (o *SubmitInvoicesAccepted) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesAccepted  %+v", 202, o.Payload)
}

func (o *SubmitInvoicesAccepted) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesBadRequest creates a SubmitInvoicesBadRequest with default headers values
func NewSubmitInvoicesBadRequest() *SubmitInvoicesBadRequest {
	return &SubmitInvoicesBadRequest{}
}

/*
SubmitInvoicesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SubmitInvoicesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices bad request response has a 2xx status code
func (o *SubmitInvoicesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices bad request response has a 3xx status code
func (o *SubmitInvoicesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices bad request response has a 4xx status code
func (o *SubmitInvoicesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit invoices bad request response has a 5xx status code
func (o *SubmitInvoicesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices bad request response a status code equal to that given
func (o *SubmitInvoicesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubmitInvoicesBadRequest) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitInvoicesBadRequest) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitInvoicesBadRequest) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesForbidden creates a SubmitInvoicesForbidden with default headers values
func NewSubmitInvoicesForbidden() *SubmitInvoicesForbidden {
	return &SubmitInvoicesForbidden{}
}

/*
SubmitInvoicesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SubmitInvoicesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices forbidden response has a 2xx status code
func (o *SubmitInvoicesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices forbidden response has a 3xx status code
func (o *SubmitInvoicesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices forbidden response has a 4xx status code
func (o *SubmitInvoicesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit invoices forbidden response has a 5xx status code
func (o *SubmitInvoicesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices forbidden response a status code equal to that given
func (o *SubmitInvoicesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubmitInvoicesForbidden) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesForbidden  %+v", 403, o.Payload)
}

func (o *SubmitInvoicesForbidden) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesForbidden  %+v", 403, o.Payload)
}

func (o *SubmitInvoicesForbidden) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesNotFound creates a SubmitInvoicesNotFound with default headers values
func NewSubmitInvoicesNotFound() *SubmitInvoicesNotFound {
	return &SubmitInvoicesNotFound{}
}

/*
SubmitInvoicesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SubmitInvoicesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices not found response has a 2xx status code
func (o *SubmitInvoicesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices not found response has a 3xx status code
func (o *SubmitInvoicesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices not found response has a 4xx status code
func (o *SubmitInvoicesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit invoices not found response has a 5xx status code
func (o *SubmitInvoicesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices not found response a status code equal to that given
func (o *SubmitInvoicesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubmitInvoicesNotFound) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesNotFound  %+v", 404, o.Payload)
}

func (o *SubmitInvoicesNotFound) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesNotFound  %+v", 404, o.Payload)
}

func (o *SubmitInvoicesNotFound) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesRequestEntityTooLarge creates a SubmitInvoicesRequestEntityTooLarge with default headers values
func NewSubmitInvoicesRequestEntityTooLarge() *SubmitInvoicesRequestEntityTooLarge {
	return &SubmitInvoicesRequestEntityTooLarge{}
}

/*
SubmitInvoicesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SubmitInvoicesRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices request entity too large response has a 2xx status code
func (o *SubmitInvoicesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices request entity too large response has a 3xx status code
func (o *SubmitInvoicesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices request entity too large response has a 4xx status code
func (o *SubmitInvoicesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit invoices request entity too large response has a 5xx status code
func (o *SubmitInvoicesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices request entity too large response a status code equal to that given
func (o *SubmitInvoicesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *SubmitInvoicesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SubmitInvoicesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SubmitInvoicesRequestEntityTooLarge) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesUnsupportedMediaType creates a SubmitInvoicesUnsupportedMediaType with default headers values
func NewSubmitInvoicesUnsupportedMediaType() *SubmitInvoicesUnsupportedMediaType {
	return &SubmitInvoicesUnsupportedMediaType{}
}

/*
SubmitInvoicesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SubmitInvoicesUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices unsupported media type response has a 2xx status code
func (o *SubmitInvoicesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices unsupported media type response has a 3xx status code
func (o *SubmitInvoicesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices unsupported media type response has a 4xx status code
func (o *SubmitInvoicesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit invoices unsupported media type response has a 5xx status code
func (o *SubmitInvoicesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices unsupported media type response a status code equal to that given
func (o *SubmitInvoicesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *SubmitInvoicesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SubmitInvoicesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SubmitInvoicesUnsupportedMediaType) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesTooManyRequests creates a SubmitInvoicesTooManyRequests with default headers values
func NewSubmitInvoicesTooManyRequests() *SubmitInvoicesTooManyRequests {
	return &SubmitInvoicesTooManyRequests{}
}

/*
SubmitInvoicesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SubmitInvoicesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices too many requests response has a 2xx status code
func (o *SubmitInvoicesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices too many requests response has a 3xx status code
func (o *SubmitInvoicesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices too many requests response has a 4xx status code
func (o *SubmitInvoicesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit invoices too many requests response has a 5xx status code
func (o *SubmitInvoicesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this submit invoices too many requests response a status code equal to that given
func (o *SubmitInvoicesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SubmitInvoicesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitInvoicesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitInvoicesTooManyRequests) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesInternalServerError creates a SubmitInvoicesInternalServerError with default headers values
func NewSubmitInvoicesInternalServerError() *SubmitInvoicesInternalServerError {
	return &SubmitInvoicesInternalServerError{}
}

/*
SubmitInvoicesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SubmitInvoicesInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices internal server error response has a 2xx status code
func (o *SubmitInvoicesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices internal server error response has a 3xx status code
func (o *SubmitInvoicesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices internal server error response has a 4xx status code
func (o *SubmitInvoicesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit invoices internal server error response has a 5xx status code
func (o *SubmitInvoicesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this submit invoices internal server error response a status code equal to that given
func (o *SubmitInvoicesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubmitInvoicesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitInvoicesInternalServerError) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitInvoicesInternalServerError) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitInvoicesServiceUnavailable creates a SubmitInvoicesServiceUnavailable with default headers values
func NewSubmitInvoicesServiceUnavailable() *SubmitInvoicesServiceUnavailable {
	return &SubmitInvoicesServiceUnavailable{}
}

/*
SubmitInvoicesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SubmitInvoicesServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_invoices_models.SubmitInvoicesResponse
}

// IsSuccess returns true when this submit invoices service unavailable response has a 2xx status code
func (o *SubmitInvoicesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit invoices service unavailable response has a 3xx status code
func (o *SubmitInvoicesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit invoices service unavailable response has a 4xx status code
func (o *SubmitInvoicesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit invoices service unavailable response has a 5xx status code
func (o *SubmitInvoicesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this submit invoices service unavailable response a status code equal to that given
func (o *SubmitInvoicesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SubmitInvoicesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitInvoicesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /vendor/payments/v1/invoices][%d] submitInvoicesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitInvoicesServiceUnavailable) GetPayload() *vendor_invoices_models.SubmitInvoicesResponse {
	return o.Payload
}

func (o *SubmitInvoicesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_invoices_models.SubmitInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
