// Code generated by go-swagger; DO NOT EDIT.

package vendor_invoices_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChargeDetails Monetary and tax details of the charge.
//
// swagger:model ChargeDetails
type ChargeDetails struct {

	// Total monetary amount related to this charge.
	// Required: true
	ChargeAmount *Money `json:"chargeAmount"`

	// Description of the charge.
	Description string `json:"description,omitempty"`

	// Tax amount details applied on this charge.
	TaxDetails []*TaxDetails `json:"taxDetails"`

	// Type of the charge applied.
	// Required: true
	// Enum: [Freight Packing Duty Service SmallOrder InsurancePlacementCost InsuranceFee SpecialHandlingService CollectionAndRecyclingService EnvironmentalProtectionService TaxCollectedAtSource]
	Type *string `json:"type"`
}

// Validate validates this charge details
func (m *ChargeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeDetails) validateChargeAmount(formats strfmt.Registry) error {

	if err := validate.Required("chargeAmount", "body", m.ChargeAmount); err != nil {
		return err
	}

	if m.ChargeAmount != nil {
		if err := m.ChargeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chargeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chargeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *ChargeDetails) validateTaxDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.TaxDetails); i++ {
		if swag.IsZero(m.TaxDetails[i]) { // not required
			continue
		}

		if m.TaxDetails[i] != nil {
			if err := m.TaxDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var chargeDetailsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Freight","Packing","Duty","Service","SmallOrder","InsurancePlacementCost","InsuranceFee","SpecialHandlingService","CollectionAndRecyclingService","EnvironmentalProtectionService","TaxCollectedAtSource"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chargeDetailsTypeTypePropEnum = append(chargeDetailsTypeTypePropEnum, v)
	}
}

const (

	// ChargeDetailsTypeFreight captures enum value "Freight"
	ChargeDetailsTypeFreight string = "Freight"

	// ChargeDetailsTypePacking captures enum value "Packing"
	ChargeDetailsTypePacking string = "Packing"

	// ChargeDetailsTypeDuty captures enum value "Duty"
	ChargeDetailsTypeDuty string = "Duty"

	// ChargeDetailsTypeService captures enum value "Service"
	ChargeDetailsTypeService string = "Service"

	// ChargeDetailsTypeSmallOrder captures enum value "SmallOrder"
	ChargeDetailsTypeSmallOrder string = "SmallOrder"

	// ChargeDetailsTypeInsurancePlacementCost captures enum value "InsurancePlacementCost"
	ChargeDetailsTypeInsurancePlacementCost string = "InsurancePlacementCost"

	// ChargeDetailsTypeInsuranceFee captures enum value "InsuranceFee"
	ChargeDetailsTypeInsuranceFee string = "InsuranceFee"

	// ChargeDetailsTypeSpecialHandlingService captures enum value "SpecialHandlingService"
	ChargeDetailsTypeSpecialHandlingService string = "SpecialHandlingService"

	// ChargeDetailsTypeCollectionAndRecyclingService captures enum value "CollectionAndRecyclingService"
	ChargeDetailsTypeCollectionAndRecyclingService string = "CollectionAndRecyclingService"

	// ChargeDetailsTypeEnvironmentalProtectionService captures enum value "EnvironmentalProtectionService"
	ChargeDetailsTypeEnvironmentalProtectionService string = "EnvironmentalProtectionService"

	// ChargeDetailsTypeTaxCollectedAtSource captures enum value "TaxCollectedAtSource"
	ChargeDetailsTypeTaxCollectedAtSource string = "TaxCollectedAtSource"
)

// prop value enum
func (m *ChargeDetails) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chargeDetailsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChargeDetails) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this charge details based on the context it is used
func (m *ChargeDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChargeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeDetails) contextValidateChargeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.ChargeAmount != nil {
		if err := m.ChargeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("chargeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("chargeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *ChargeDetails) contextValidateTaxDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxDetails); i++ {

		if m.TaxDetails[i] != nil {
			if err := m.TaxDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargeDetails) UnmarshalBinary(b []byte) error {
	var res ChargeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
