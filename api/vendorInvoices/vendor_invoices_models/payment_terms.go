// Code generated by go-swagger; DO NOT EDIT.

package vendor_invoices_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentTerms Terms of the payment for the invoice. The basis of the payment terms is the invoice date.
//
// swagger:model PaymentTerms
type PaymentTerms struct {

	// The number of calendar days from the base date (Invoice date) until the discount is no longer valid.
	DiscountDueDays float64 `json:"discountDueDays,omitempty"`

	// The discount percent value, which is good until the discount due date.
	DiscountPercent Decimal `json:"discountPercent,omitempty"`

	// The number of calendar days from the base date (invoice date) until the total amount on the invoice is due.
	NetDueDays float64 `json:"netDueDays,omitempty"`

	// The payment term type for the invoice.
	// Enum: [Basic EndOfMonth FixedDate Proximo PaymentDueUponReceiptOfInvoice LetterofCredit]
	Type string `json:"type,omitempty"`
}

// Validate validates this payment terms
func (m *PaymentTerms) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscountPercent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentTerms) validateDiscountPercent(formats strfmt.Registry) error {
	if swag.IsZero(m.DiscountPercent) { // not required
		return nil
	}

	if err := m.DiscountPercent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discountPercent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("discountPercent")
		}
		return err
	}

	return nil
}

var paymentTermsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Basic","EndOfMonth","FixedDate","Proximo","PaymentDueUponReceiptOfInvoice","LetterofCredit"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		paymentTermsTypeTypePropEnum = append(paymentTermsTypeTypePropEnum, v)
	}
}

const (

	// PaymentTermsTypeBasic captures enum value "Basic"
	PaymentTermsTypeBasic string = "Basic"

	// PaymentTermsTypeEndOfMonth captures enum value "EndOfMonth"
	PaymentTermsTypeEndOfMonth string = "EndOfMonth"

	// PaymentTermsTypeFixedDate captures enum value "FixedDate"
	PaymentTermsTypeFixedDate string = "FixedDate"

	// PaymentTermsTypeProximo captures enum value "Proximo"
	PaymentTermsTypeProximo string = "Proximo"

	// PaymentTermsTypePaymentDueUponReceiptOfInvoice captures enum value "PaymentDueUponReceiptOfInvoice"
	PaymentTermsTypePaymentDueUponReceiptOfInvoice string = "PaymentDueUponReceiptOfInvoice"

	// PaymentTermsTypeLetterofCredit captures enum value "LetterofCredit"
	PaymentTermsTypeLetterofCredit string = "LetterofCredit"
)

// prop value enum
func (m *PaymentTerms) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, paymentTermsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PaymentTerms) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment terms based on the context it is used
func (m *PaymentTerms) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscountPercent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentTerms) contextValidateDiscountPercent(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DiscountPercent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("discountPercent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("discountPercent")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentTerms) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentTerms) UnmarshalBinary(b []byte) error {
	var res PaymentTerms
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
