// Code generated by go-swagger; DO NOT EDIT.

package vendor_invoices_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreditNoteDetails References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
//
// swagger:model CreditNoteDetails
type CreditNoteDetails struct {

	// Identifies the consignor reference number (VRET number), if generated by Amazon.
	ConsignorsReferenceNumber string `json:"consignorsReferenceNumber,omitempty"`

	// Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.
	CoopReferenceNumber string `json:"coopReferenceNumber,omitempty"`

	// Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.
	DebitNoteNumber string `json:"debitNoteNumber,omitempty"`

	// Date that a return is received by the vendor. It is mandatory for Returns Credit Note.
	// Format: date-time
	GoodsReturnDate DateTime `json:"goodsReturnDate,omitempty"`

	// Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.
	ReferenceInvoiceNumber string `json:"referenceInvoiceNumber,omitempty"`

	// Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.
	ReturnsReferenceNumber string `json:"returnsReferenceNumber,omitempty"`

	// Identifies the Returned Merchandise Authorization ID, if generated.
	RmaID string `json:"rmaId,omitempty"`
}

// Validate validates this credit note details
func (m *CreditNoteDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGoodsReturnDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditNoteDetails) validateGoodsReturnDate(formats strfmt.Registry) error {
	if swag.IsZero(m.GoodsReturnDate) { // not required
		return nil
	}

	if err := m.GoodsReturnDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("goodsReturnDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("goodsReturnDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this credit note details based on the context it is used
func (m *CreditNoteDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGoodsReturnDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreditNoteDetails) contextValidateGoodsReturnDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GoodsReturnDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("goodsReturnDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("goodsReturnDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreditNoteDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreditNoteDetails) UnmarshalBinary(b []byte) error {
	var res CreditNoteDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
