// Code generated by go-swagger; DO NOT EDIT.

package vendor_invoices_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxDetails Details of tax amount applied.
//
// swagger:model TaxDetails
type TaxDetails struct {

	// Total tax amount applied on invoice total or an item total.
	// Required: true
	TaxAmount *Money `json:"taxAmount"`

	// Tax percentage applied. Percentage must be expressed in decimal.
	TaxRate Decimal `json:"taxRate,omitempty"`

	// Type of the tax applied.
	// Required: true
	// Enum: [CGST SGST CESS UTGST IGST MwSt. PST TVA VAT GST ST Consumption MutuallyDefined DomesticVAT]
	TaxType *string `json:"taxType"`

	// The invoice amount that is taxable at the rate specified in the tax rate field.
	TaxableAmount *Money `json:"taxableAmount,omitempty"`
}

// Validate validates this tax details
func (m *TaxDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxableAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDetails) validateTaxAmount(formats strfmt.Registry) error {

	if err := validate.Required("taxAmount", "body", m.TaxAmount); err != nil {
		return err
	}

	if m.TaxAmount != nil {
		if err := m.TaxAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *TaxDetails) validateTaxRate(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxRate) { // not required
		return nil
	}

	if err := m.TaxRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxRate")
		}
		return err
	}

	return nil
}

var taxDetailsTypeTaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CGST","SGST","CESS","UTGST","IGST","MwSt.","PST","TVA","VAT","GST","ST","Consumption","MutuallyDefined","DomesticVAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taxDetailsTypeTaxTypePropEnum = append(taxDetailsTypeTaxTypePropEnum, v)
	}
}

const (

	// TaxDetailsTaxTypeCGST captures enum value "CGST"
	TaxDetailsTaxTypeCGST string = "CGST"

	// TaxDetailsTaxTypeSGST captures enum value "SGST"
	TaxDetailsTaxTypeSGST string = "SGST"

	// TaxDetailsTaxTypeCESS captures enum value "CESS"
	TaxDetailsTaxTypeCESS string = "CESS"

	// TaxDetailsTaxTypeUTGST captures enum value "UTGST"
	TaxDetailsTaxTypeUTGST string = "UTGST"

	// TaxDetailsTaxTypeIGST captures enum value "IGST"
	TaxDetailsTaxTypeIGST string = "IGST"

	// TaxDetailsTaxTypeMwStDot captures enum value "MwSt."
	TaxDetailsTaxTypeMwStDot string = "MwSt."

	// TaxDetailsTaxTypePST captures enum value "PST"
	TaxDetailsTaxTypePST string = "PST"

	// TaxDetailsTaxTypeTVA captures enum value "TVA"
	TaxDetailsTaxTypeTVA string = "TVA"

	// TaxDetailsTaxTypeVAT captures enum value "VAT"
	TaxDetailsTaxTypeVAT string = "VAT"

	// TaxDetailsTaxTypeGST captures enum value "GST"
	TaxDetailsTaxTypeGST string = "GST"

	// TaxDetailsTaxTypeST captures enum value "ST"
	TaxDetailsTaxTypeST string = "ST"

	// TaxDetailsTaxTypeConsumption captures enum value "Consumption"
	TaxDetailsTaxTypeConsumption string = "Consumption"

	// TaxDetailsTaxTypeMutuallyDefined captures enum value "MutuallyDefined"
	TaxDetailsTaxTypeMutuallyDefined string = "MutuallyDefined"

	// TaxDetailsTaxTypeDomesticVAT captures enum value "DomesticVAT"
	TaxDetailsTaxTypeDomesticVAT string = "DomesticVAT"
)

// prop value enum
func (m *TaxDetails) validateTaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taxDetailsTypeTaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaxDetails) validateTaxType(formats strfmt.Registry) error {

	if err := validate.Required("taxType", "body", m.TaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaxTypeEnum("taxType", "body", *m.TaxType); err != nil {
		return err
	}

	return nil
}

func (m *TaxDetails) validateTaxableAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxableAmount) { // not required
		return nil
	}

	if m.TaxableAmount != nil {
		if err := m.TaxableAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxableAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxableAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tax details based on the context it is used
func (m *TaxDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaxAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxableAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDetails) contextValidateTaxAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxAmount != nil {
		if err := m.TaxAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *TaxDetails) contextValidateTaxRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TaxRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxRate")
		}
		return err
	}

	return nil
}

func (m *TaxDetails) contextValidateTaxableAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxableAmount != nil {
		if err := m.TaxableAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxableAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxableAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxDetails) UnmarshalBinary(b []byte) error {
	var res TaxDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
