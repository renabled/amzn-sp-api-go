// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/feeds_2020-09-04/feeds_2020_09_04_models"
)

// GetFeedReader is a Reader for the GetFeed structure.
type GetFeedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFeedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFeedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetFeedUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFeedTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFeedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFeedServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFeedOK creates a GetFeedOK with default headers values
func NewGetFeedOK() *GetFeedOK {
	return &GetFeedOK{}
}

/* GetFeedOK describes a response with status code 200, with default header values.

Success.
*/
type GetFeedOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedOK) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedOK  %+v", 200, o.Payload)
}
func (o *GetFeedOK) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedBadRequest creates a GetFeedBadRequest with default headers values
func NewGetFeedBadRequest() *GetFeedBadRequest {
	return &GetFeedBadRequest{}
}

/* GetFeedBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetFeedBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedBadRequest) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedBadRequest  %+v", 400, o.Payload)
}
func (o *GetFeedBadRequest) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedUnauthorized creates a GetFeedUnauthorized with default headers values
func NewGetFeedUnauthorized() *GetFeedUnauthorized {
	return &GetFeedUnauthorized{}
}

/* GetFeedUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetFeedUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedUnauthorized) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedUnauthorized  %+v", 401, o.Payload)
}
func (o *GetFeedUnauthorized) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedForbidden creates a GetFeedForbidden with default headers values
func NewGetFeedForbidden() *GetFeedForbidden {
	return &GetFeedForbidden{}
}

/* GetFeedForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetFeedForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedForbidden) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedForbidden  %+v", 403, o.Payload)
}
func (o *GetFeedForbidden) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedNotFound creates a GetFeedNotFound with default headers values
func NewGetFeedNotFound() *GetFeedNotFound {
	return &GetFeedNotFound{}
}

/* GetFeedNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetFeedNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedNotFound) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedNotFound  %+v", 404, o.Payload)
}
func (o *GetFeedNotFound) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedUnsupportedMediaType creates a GetFeedUnsupportedMediaType with default headers values
func NewGetFeedUnsupportedMediaType() *GetFeedUnsupportedMediaType {
	return &GetFeedUnsupportedMediaType{}
}

/* GetFeedUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type GetFeedUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetFeedUnsupportedMediaType) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedTooManyRequests creates a GetFeedTooManyRequests with default headers values
func NewGetFeedTooManyRequests() *GetFeedTooManyRequests {
	return &GetFeedTooManyRequests{}
}

/* GetFeedTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetFeedTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetFeedTooManyRequests) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedInternalServerError creates a GetFeedInternalServerError with default headers values
func NewGetFeedInternalServerError() *GetFeedInternalServerError {
	return &GetFeedInternalServerError{}
}

/* GetFeedInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetFeedInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedInternalServerError) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedInternalServerError  %+v", 500, o.Payload)
}
func (o *GetFeedInternalServerError) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedServiceUnavailable creates a GetFeedServiceUnavailable with default headers values
func NewGetFeedServiceUnavailable() *GetFeedServiceUnavailable {
	return &GetFeedServiceUnavailable{}
}

/* GetFeedServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetFeedServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.GetFeedResponse
}

func (o *GetFeedServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /feeds/2020-09-04/feeds/{feedId}][%d] getFeedServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetFeedServiceUnavailable) GetPayload() *feeds_2020_09_04_models.GetFeedResponse {
	return o.Payload
}

func (o *GetFeedServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.GetFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
