// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/feeds_2020-09-04/feeds_2020_09_04_models"
)

// CreateFeedDocumentReader is a Reader for the CreateFeedDocument structure.
type CreateFeedDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateFeedDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateFeedDocumentCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateFeedDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateFeedDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateFeedDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateFeedDocumentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateFeedDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateFeedDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateFeedDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateFeedDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateFeedDocumentCreated creates a CreateFeedDocumentCreated with default headers values
func NewCreateFeedDocumentCreated() *CreateFeedDocumentCreated {
	return &CreateFeedDocumentCreated{}
}

/*
CreateFeedDocumentCreated describes a response with status code 201, with default header values.

Successfully created a feed document that is ready to receive contents.
*/
type CreateFeedDocumentCreated struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document created response has a 2xx status code
func (o *CreateFeedDocumentCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create feed document created response has a 3xx status code
func (o *CreateFeedDocumentCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document created response has a 4xx status code
func (o *CreateFeedDocumentCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create feed document created response has a 5xx status code
func (o *CreateFeedDocumentCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document created response a status code equal to that given
func (o *CreateFeedDocumentCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateFeedDocumentCreated) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentCreated  %+v", 201, o.Payload)
}

func (o *CreateFeedDocumentCreated) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentCreated  %+v", 201, o.Payload)
}

func (o *CreateFeedDocumentCreated) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentBadRequest creates a CreateFeedDocumentBadRequest with default headers values
func NewCreateFeedDocumentBadRequest() *CreateFeedDocumentBadRequest {
	return &CreateFeedDocumentBadRequest{}
}

/*
CreateFeedDocumentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateFeedDocumentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document bad request response has a 2xx status code
func (o *CreateFeedDocumentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document bad request response has a 3xx status code
func (o *CreateFeedDocumentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document bad request response has a 4xx status code
func (o *CreateFeedDocumentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed document bad request response has a 5xx status code
func (o *CreateFeedDocumentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document bad request response a status code equal to that given
func (o *CreateFeedDocumentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateFeedDocumentBadRequest) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateFeedDocumentBadRequest) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateFeedDocumentBadRequest) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentForbidden creates a CreateFeedDocumentForbidden with default headers values
func NewCreateFeedDocumentForbidden() *CreateFeedDocumentForbidden {
	return &CreateFeedDocumentForbidden{}
}

/*
CreateFeedDocumentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateFeedDocumentForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document forbidden response has a 2xx status code
func (o *CreateFeedDocumentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document forbidden response has a 3xx status code
func (o *CreateFeedDocumentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document forbidden response has a 4xx status code
func (o *CreateFeedDocumentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed document forbidden response has a 5xx status code
func (o *CreateFeedDocumentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document forbidden response a status code equal to that given
func (o *CreateFeedDocumentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateFeedDocumentForbidden) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentForbidden  %+v", 403, o.Payload)
}

func (o *CreateFeedDocumentForbidden) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentForbidden  %+v", 403, o.Payload)
}

func (o *CreateFeedDocumentForbidden) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentNotFound creates a CreateFeedDocumentNotFound with default headers values
func NewCreateFeedDocumentNotFound() *CreateFeedDocumentNotFound {
	return &CreateFeedDocumentNotFound{}
}

/*
CreateFeedDocumentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateFeedDocumentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document not found response has a 2xx status code
func (o *CreateFeedDocumentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document not found response has a 3xx status code
func (o *CreateFeedDocumentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document not found response has a 4xx status code
func (o *CreateFeedDocumentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed document not found response has a 5xx status code
func (o *CreateFeedDocumentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document not found response a status code equal to that given
func (o *CreateFeedDocumentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateFeedDocumentNotFound) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentNotFound  %+v", 404, o.Payload)
}

func (o *CreateFeedDocumentNotFound) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentNotFound  %+v", 404, o.Payload)
}

func (o *CreateFeedDocumentNotFound) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentRequestEntityTooLarge creates a CreateFeedDocumentRequestEntityTooLarge with default headers values
func NewCreateFeedDocumentRequestEntityTooLarge() *CreateFeedDocumentRequestEntityTooLarge {
	return &CreateFeedDocumentRequestEntityTooLarge{}
}

/*
CreateFeedDocumentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateFeedDocumentRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document request entity too large response has a 2xx status code
func (o *CreateFeedDocumentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document request entity too large response has a 3xx status code
func (o *CreateFeedDocumentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document request entity too large response has a 4xx status code
func (o *CreateFeedDocumentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed document request entity too large response has a 5xx status code
func (o *CreateFeedDocumentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document request entity too large response a status code equal to that given
func (o *CreateFeedDocumentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateFeedDocumentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateFeedDocumentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateFeedDocumentRequestEntityTooLarge) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentUnsupportedMediaType creates a CreateFeedDocumentUnsupportedMediaType with default headers values
func NewCreateFeedDocumentUnsupportedMediaType() *CreateFeedDocumentUnsupportedMediaType {
	return &CreateFeedDocumentUnsupportedMediaType{}
}

/*
CreateFeedDocumentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateFeedDocumentUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document unsupported media type response has a 2xx status code
func (o *CreateFeedDocumentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document unsupported media type response has a 3xx status code
func (o *CreateFeedDocumentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document unsupported media type response has a 4xx status code
func (o *CreateFeedDocumentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed document unsupported media type response has a 5xx status code
func (o *CreateFeedDocumentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document unsupported media type response a status code equal to that given
func (o *CreateFeedDocumentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateFeedDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateFeedDocumentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateFeedDocumentUnsupportedMediaType) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentTooManyRequests creates a CreateFeedDocumentTooManyRequests with default headers values
func NewCreateFeedDocumentTooManyRequests() *CreateFeedDocumentTooManyRequests {
	return &CreateFeedDocumentTooManyRequests{}
}

/*
CreateFeedDocumentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateFeedDocumentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document too many requests response has a 2xx status code
func (o *CreateFeedDocumentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document too many requests response has a 3xx status code
func (o *CreateFeedDocumentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document too many requests response has a 4xx status code
func (o *CreateFeedDocumentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed document too many requests response has a 5xx status code
func (o *CreateFeedDocumentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed document too many requests response a status code equal to that given
func (o *CreateFeedDocumentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateFeedDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateFeedDocumentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateFeedDocumentTooManyRequests) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentInternalServerError creates a CreateFeedDocumentInternalServerError with default headers values
func NewCreateFeedDocumentInternalServerError() *CreateFeedDocumentInternalServerError {
	return &CreateFeedDocumentInternalServerError{}
}

/*
CreateFeedDocumentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateFeedDocumentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document internal server error response has a 2xx status code
func (o *CreateFeedDocumentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document internal server error response has a 3xx status code
func (o *CreateFeedDocumentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document internal server error response has a 4xx status code
func (o *CreateFeedDocumentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create feed document internal server error response has a 5xx status code
func (o *CreateFeedDocumentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create feed document internal server error response a status code equal to that given
func (o *CreateFeedDocumentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateFeedDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateFeedDocumentInternalServerError) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateFeedDocumentInternalServerError) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedDocumentServiceUnavailable creates a CreateFeedDocumentServiceUnavailable with default headers values
func NewCreateFeedDocumentServiceUnavailable() *CreateFeedDocumentServiceUnavailable {
	return &CreateFeedDocumentServiceUnavailable{}
}

/*
CreateFeedDocumentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateFeedDocumentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *feeds_2020_09_04_models.CreateFeedDocumentResponse
}

// IsSuccess returns true when this create feed document service unavailable response has a 2xx status code
func (o *CreateFeedDocumentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed document service unavailable response has a 3xx status code
func (o *CreateFeedDocumentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed document service unavailable response has a 4xx status code
func (o *CreateFeedDocumentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create feed document service unavailable response has a 5xx status code
func (o *CreateFeedDocumentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create feed document service unavailable response a status code equal to that given
func (o *CreateFeedDocumentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateFeedDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateFeedDocumentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /feeds/2020-09-04/documents][%d] createFeedDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateFeedDocumentServiceUnavailable) GetPayload() *feeds_2020_09_04_models.CreateFeedDocumentResponse {
	return o.Payload
}

func (o *CreateFeedDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2020_09_04_models.CreateFeedDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
