// Code generated by go-swagger; DO NOT EDIT.

package feeds_2020_09_04_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateFeedDocumentResult Information required to encrypt and upload a feed document's contents.
//
// swagger:model CreateFeedDocumentResult
type CreateFeedDocumentResult struct {

	// encryption details
	// Required: true
	EncryptionDetails *FeedDocumentEncryptionDetails `json:"encryptionDetails"`

	// The identifier of the feed document.
	// Required: true
	FeedDocumentID *string `json:"feedDocumentId"`

	// The presigned URL for uploading the feed contents. This URL expires after 5 minutes.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this create feed document result
func (m *CreateFeedDocumentResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEncryptionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFeedDocumentResult) validateEncryptionDetails(formats strfmt.Registry) error {

	if err := validate.Required("encryptionDetails", "body", m.EncryptionDetails); err != nil {
		return err
	}

	if m.EncryptionDetails != nil {
		if err := m.EncryptionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionDetails")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFeedDocumentResult) validateFeedDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("feedDocumentId", "body", m.FeedDocumentID); err != nil {
		return err
	}

	return nil
}

func (m *CreateFeedDocumentResult) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create feed document result based on the context it is used
func (m *CreateFeedDocumentResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEncryptionDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFeedDocumentResult) contextValidateEncryptionDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.EncryptionDetails != nil {
		if err := m.EncryptionDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("encryptionDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("encryptionDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateFeedDocumentResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateFeedDocumentResult) UnmarshalBinary(b []byte) error {
	var res CreateFeedDocumentResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
