// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/InvoicesApiModel_2024-06-19/invoices_api_model_2024_06_19_models"
)

// GetInvoiceReader is a Reader for the GetInvoice structure.
type GetInvoiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInvoiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInvoiceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInvoiceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInvoiceUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInvoiceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInvoiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInvoiceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInvoiceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInvoiceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInvoiceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInvoiceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInvoiceOK creates a GetInvoiceOK with default headers values
func NewGetInvoiceOK() *GetInvoiceOK {
	return &GetInvoiceOK{}
}

/*
GetInvoiceOK describes a response with status code 200, with default header values.

Success.
*/
type GetInvoiceOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.GetInvoiceResponse
}

// IsSuccess returns true when this get invoice o k response has a 2xx status code
func (o *GetInvoiceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get invoice o k response has a 3xx status code
func (o *GetInvoiceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice o k response has a 4xx status code
func (o *GetInvoiceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoice o k response has a 5xx status code
func (o *GetInvoiceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice o k response a status code equal to that given
func (o *GetInvoiceOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInvoiceOK) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceOK  %+v", 200, o.Payload)
}

func (o *GetInvoiceOK) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceOK  %+v", 200, o.Payload)
}

func (o *GetInvoiceOK) GetPayload() *invoices_api_model_2024_06_19_models.GetInvoiceResponse {
	return o.Payload
}

func (o *GetInvoiceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.GetInvoiceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceBadRequest creates a GetInvoiceBadRequest with default headers values
func NewGetInvoiceBadRequest() *GetInvoiceBadRequest {
	return &GetInvoiceBadRequest{}
}

/*
GetInvoiceBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInvoiceBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice bad request response has a 2xx status code
func (o *GetInvoiceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice bad request response has a 3xx status code
func (o *GetInvoiceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice bad request response has a 4xx status code
func (o *GetInvoiceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice bad request response has a 5xx status code
func (o *GetInvoiceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice bad request response a status code equal to that given
func (o *GetInvoiceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInvoiceBadRequest) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoiceBadRequest) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoiceBadRequest) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceUnauthorized creates a GetInvoiceUnauthorized with default headers values
func NewGetInvoiceUnauthorized() *GetInvoiceUnauthorized {
	return &GetInvoiceUnauthorized{}
}

/*
GetInvoiceUnauthorized describes a response with status code 401, with default header values.

A list of error responses returned when a request is unsuccessful.
*/
type GetInvoiceUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice unauthorized response has a 2xx status code
func (o *GetInvoiceUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice unauthorized response has a 3xx status code
func (o *GetInvoiceUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice unauthorized response has a 4xx status code
func (o *GetInvoiceUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice unauthorized response has a 5xx status code
func (o *GetInvoiceUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice unauthorized response a status code equal to that given
func (o *GetInvoiceUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetInvoiceUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoiceUnauthorized) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoiceUnauthorized) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceForbidden creates a GetInvoiceForbidden with default headers values
func NewGetInvoiceForbidden() *GetInvoiceForbidden {
	return &GetInvoiceForbidden{}
}

/*
GetInvoiceForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInvoiceForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice forbidden response has a 2xx status code
func (o *GetInvoiceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice forbidden response has a 3xx status code
func (o *GetInvoiceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice forbidden response has a 4xx status code
func (o *GetInvoiceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice forbidden response has a 5xx status code
func (o *GetInvoiceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice forbidden response a status code equal to that given
func (o *GetInvoiceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInvoiceForbidden) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoiceForbidden) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoiceForbidden) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceNotFound creates a GetInvoiceNotFound with default headers values
func NewGetInvoiceNotFound() *GetInvoiceNotFound {
	return &GetInvoiceNotFound{}
}

/*
GetInvoiceNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInvoiceNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice not found response has a 2xx status code
func (o *GetInvoiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice not found response has a 3xx status code
func (o *GetInvoiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice not found response has a 4xx status code
func (o *GetInvoiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice not found response has a 5xx status code
func (o *GetInvoiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice not found response a status code equal to that given
func (o *GetInvoiceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInvoiceNotFound) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoiceNotFound) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoiceNotFound) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceRequestEntityTooLarge creates a GetInvoiceRequestEntityTooLarge with default headers values
func NewGetInvoiceRequestEntityTooLarge() *GetInvoiceRequestEntityTooLarge {
	return &GetInvoiceRequestEntityTooLarge{}
}

/*
GetInvoiceRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInvoiceRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice request entity too large response has a 2xx status code
func (o *GetInvoiceRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice request entity too large response has a 3xx status code
func (o *GetInvoiceRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice request entity too large response has a 4xx status code
func (o *GetInvoiceRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice request entity too large response has a 5xx status code
func (o *GetInvoiceRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice request entity too large response a status code equal to that given
func (o *GetInvoiceRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInvoiceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoiceRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoiceRequestEntityTooLarge) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceUnsupportedMediaType creates a GetInvoiceUnsupportedMediaType with default headers values
func NewGetInvoiceUnsupportedMediaType() *GetInvoiceUnsupportedMediaType {
	return &GetInvoiceUnsupportedMediaType{}
}

/*
GetInvoiceUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInvoiceUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice unsupported media type response has a 2xx status code
func (o *GetInvoiceUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice unsupported media type response has a 3xx status code
func (o *GetInvoiceUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice unsupported media type response has a 4xx status code
func (o *GetInvoiceUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice unsupported media type response has a 5xx status code
func (o *GetInvoiceUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice unsupported media type response a status code equal to that given
func (o *GetInvoiceUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInvoiceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoiceUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoiceUnsupportedMediaType) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceTooManyRequests creates a GetInvoiceTooManyRequests with default headers values
func NewGetInvoiceTooManyRequests() *GetInvoiceTooManyRequests {
	return &GetInvoiceTooManyRequests{}
}

/*
GetInvoiceTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInvoiceTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice too many requests response has a 2xx status code
func (o *GetInvoiceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice too many requests response has a 3xx status code
func (o *GetInvoiceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice too many requests response has a 4xx status code
func (o *GetInvoiceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoice too many requests response has a 5xx status code
func (o *GetInvoiceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoice too many requests response a status code equal to that given
func (o *GetInvoiceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInvoiceTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoiceTooManyRequests) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoiceTooManyRequests) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceInternalServerError creates a GetInvoiceInternalServerError with default headers values
func NewGetInvoiceInternalServerError() *GetInvoiceInternalServerError {
	return &GetInvoiceInternalServerError{}
}

/*
GetInvoiceInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInvoiceInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice internal server error response has a 2xx status code
func (o *GetInvoiceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice internal server error response has a 3xx status code
func (o *GetInvoiceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice internal server error response has a 4xx status code
func (o *GetInvoiceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoice internal server error response has a 5xx status code
func (o *GetInvoiceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoice internal server error response a status code equal to that given
func (o *GetInvoiceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInvoiceInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoiceInternalServerError) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoiceInternalServerError) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoiceServiceUnavailable creates a GetInvoiceServiceUnavailable with default headers values
func NewGetInvoiceServiceUnavailable() *GetInvoiceServiceUnavailable {
	return &GetInvoiceServiceUnavailable{}
}

/*
GetInvoiceServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInvoiceServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoice service unavailable response has a 2xx status code
func (o *GetInvoiceServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoice service unavailable response has a 3xx status code
func (o *GetInvoiceServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoice service unavailable response has a 4xx status code
func (o *GetInvoiceServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoice service unavailable response has a 5xx status code
func (o *GetInvoiceServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoice service unavailable response a status code equal to that given
func (o *GetInvoiceServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInvoiceServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoiceServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices/{invoiceId}][%d] getInvoiceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoiceServiceUnavailable) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoiceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
