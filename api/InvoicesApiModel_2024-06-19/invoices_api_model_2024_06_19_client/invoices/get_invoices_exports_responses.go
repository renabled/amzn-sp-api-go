// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/InvoicesApiModel_2024-06-19/invoices_api_model_2024_06_19_models"
)

// GetInvoicesExportsReader is a Reader for the GetInvoicesExports structure.
type GetInvoicesExportsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInvoicesExportsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInvoicesExportsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInvoicesExportsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInvoicesExportsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInvoicesExportsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInvoicesExportsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInvoicesExportsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInvoicesExportsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInvoicesExportsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInvoicesExportsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInvoicesExportsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInvoicesExportsOK creates a GetInvoicesExportsOK with default headers values
func NewGetInvoicesExportsOK() *GetInvoicesExportsOK {
	return &GetInvoicesExportsOK{}
}

/*
GetInvoicesExportsOK describes a response with status code 200, with default header values.

Success.
*/
type GetInvoicesExportsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.GetInvoicesExportsResponse
}

// IsSuccess returns true when this get invoices exports o k response has a 2xx status code
func (o *GetInvoicesExportsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get invoices exports o k response has a 3xx status code
func (o *GetInvoicesExportsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports o k response has a 4xx status code
func (o *GetInvoicesExportsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices exports o k response has a 5xx status code
func (o *GetInvoicesExportsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports o k response a status code equal to that given
func (o *GetInvoicesExportsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInvoicesExportsOK) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsOK  %+v", 200, o.Payload)
}

func (o *GetInvoicesExportsOK) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsOK  %+v", 200, o.Payload)
}

func (o *GetInvoicesExportsOK) GetPayload() *invoices_api_model_2024_06_19_models.GetInvoicesExportsResponse {
	return o.Payload
}

func (o *GetInvoicesExportsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.GetInvoicesExportsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsBadRequest creates a GetInvoicesExportsBadRequest with default headers values
func NewGetInvoicesExportsBadRequest() *GetInvoicesExportsBadRequest {
	return &GetInvoicesExportsBadRequest{}
}

/*
GetInvoicesExportsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInvoicesExportsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports bad request response has a 2xx status code
func (o *GetInvoicesExportsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports bad request response has a 3xx status code
func (o *GetInvoicesExportsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports bad request response has a 4xx status code
func (o *GetInvoicesExportsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports bad request response has a 5xx status code
func (o *GetInvoicesExportsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports bad request response a status code equal to that given
func (o *GetInvoicesExportsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInvoicesExportsBadRequest) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoicesExportsBadRequest) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoicesExportsBadRequest) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsUnauthorized creates a GetInvoicesExportsUnauthorized with default headers values
func NewGetInvoicesExportsUnauthorized() *GetInvoicesExportsUnauthorized {
	return &GetInvoicesExportsUnauthorized{}
}

/*
GetInvoicesExportsUnauthorized describes a response with status code 401, with default header values.

A list of error responses returned when a request is unsuccessful.
*/
type GetInvoicesExportsUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports unauthorized response has a 2xx status code
func (o *GetInvoicesExportsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports unauthorized response has a 3xx status code
func (o *GetInvoicesExportsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports unauthorized response has a 4xx status code
func (o *GetInvoicesExportsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports unauthorized response has a 5xx status code
func (o *GetInvoicesExportsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports unauthorized response a status code equal to that given
func (o *GetInvoicesExportsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetInvoicesExportsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoicesExportsUnauthorized) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoicesExportsUnauthorized) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsForbidden creates a GetInvoicesExportsForbidden with default headers values
func NewGetInvoicesExportsForbidden() *GetInvoicesExportsForbidden {
	return &GetInvoicesExportsForbidden{}
}

/*
GetInvoicesExportsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInvoicesExportsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports forbidden response has a 2xx status code
func (o *GetInvoicesExportsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports forbidden response has a 3xx status code
func (o *GetInvoicesExportsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports forbidden response has a 4xx status code
func (o *GetInvoicesExportsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports forbidden response has a 5xx status code
func (o *GetInvoicesExportsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports forbidden response a status code equal to that given
func (o *GetInvoicesExportsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInvoicesExportsForbidden) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoicesExportsForbidden) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoicesExportsForbidden) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsNotFound creates a GetInvoicesExportsNotFound with default headers values
func NewGetInvoicesExportsNotFound() *GetInvoicesExportsNotFound {
	return &GetInvoicesExportsNotFound{}
}

/*
GetInvoicesExportsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInvoicesExportsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports not found response has a 2xx status code
func (o *GetInvoicesExportsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports not found response has a 3xx status code
func (o *GetInvoicesExportsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports not found response has a 4xx status code
func (o *GetInvoicesExportsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports not found response has a 5xx status code
func (o *GetInvoicesExportsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports not found response a status code equal to that given
func (o *GetInvoicesExportsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInvoicesExportsNotFound) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoicesExportsNotFound) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoicesExportsNotFound) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsRequestEntityTooLarge creates a GetInvoicesExportsRequestEntityTooLarge with default headers values
func NewGetInvoicesExportsRequestEntityTooLarge() *GetInvoicesExportsRequestEntityTooLarge {
	return &GetInvoicesExportsRequestEntityTooLarge{}
}

/*
GetInvoicesExportsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInvoicesExportsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports request entity too large response has a 2xx status code
func (o *GetInvoicesExportsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports request entity too large response has a 3xx status code
func (o *GetInvoicesExportsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports request entity too large response has a 4xx status code
func (o *GetInvoicesExportsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports request entity too large response has a 5xx status code
func (o *GetInvoicesExportsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports request entity too large response a status code equal to that given
func (o *GetInvoicesExportsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInvoicesExportsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoicesExportsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoicesExportsRequestEntityTooLarge) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsUnsupportedMediaType creates a GetInvoicesExportsUnsupportedMediaType with default headers values
func NewGetInvoicesExportsUnsupportedMediaType() *GetInvoicesExportsUnsupportedMediaType {
	return &GetInvoicesExportsUnsupportedMediaType{}
}

/*
GetInvoicesExportsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInvoicesExportsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports unsupported media type response has a 2xx status code
func (o *GetInvoicesExportsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports unsupported media type response has a 3xx status code
func (o *GetInvoicesExportsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports unsupported media type response has a 4xx status code
func (o *GetInvoicesExportsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports unsupported media type response has a 5xx status code
func (o *GetInvoicesExportsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports unsupported media type response a status code equal to that given
func (o *GetInvoicesExportsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInvoicesExportsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoicesExportsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoicesExportsUnsupportedMediaType) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsTooManyRequests creates a GetInvoicesExportsTooManyRequests with default headers values
func NewGetInvoicesExportsTooManyRequests() *GetInvoicesExportsTooManyRequests {
	return &GetInvoicesExportsTooManyRequests{}
}

/*
GetInvoicesExportsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInvoicesExportsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports too many requests response has a 2xx status code
func (o *GetInvoicesExportsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports too many requests response has a 3xx status code
func (o *GetInvoicesExportsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports too many requests response has a 4xx status code
func (o *GetInvoicesExportsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices exports too many requests response has a 5xx status code
func (o *GetInvoicesExportsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices exports too many requests response a status code equal to that given
func (o *GetInvoicesExportsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInvoicesExportsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoicesExportsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoicesExportsTooManyRequests) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsInternalServerError creates a GetInvoicesExportsInternalServerError with default headers values
func NewGetInvoicesExportsInternalServerError() *GetInvoicesExportsInternalServerError {
	return &GetInvoicesExportsInternalServerError{}
}

/*
GetInvoicesExportsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInvoicesExportsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports internal server error response has a 2xx status code
func (o *GetInvoicesExportsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports internal server error response has a 3xx status code
func (o *GetInvoicesExportsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports internal server error response has a 4xx status code
func (o *GetInvoicesExportsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices exports internal server error response has a 5xx status code
func (o *GetInvoicesExportsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoices exports internal server error response a status code equal to that given
func (o *GetInvoicesExportsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInvoicesExportsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoicesExportsInternalServerError) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoicesExportsInternalServerError) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesExportsServiceUnavailable creates a GetInvoicesExportsServiceUnavailable with default headers values
func NewGetInvoicesExportsServiceUnavailable() *GetInvoicesExportsServiceUnavailable {
	return &GetInvoicesExportsServiceUnavailable{}
}

/*
GetInvoicesExportsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInvoicesExportsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices exports service unavailable response has a 2xx status code
func (o *GetInvoicesExportsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices exports service unavailable response has a 3xx status code
func (o *GetInvoicesExportsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices exports service unavailable response has a 4xx status code
func (o *GetInvoicesExportsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices exports service unavailable response has a 5xx status code
func (o *GetInvoicesExportsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoices exports service unavailable response a status code equal to that given
func (o *GetInvoicesExportsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInvoicesExportsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoicesExportsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/exports][%d] getInvoicesExportsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoicesExportsServiceUnavailable) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesExportsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
