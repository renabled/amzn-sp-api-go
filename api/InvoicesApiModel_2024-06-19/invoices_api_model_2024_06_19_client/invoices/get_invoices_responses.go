// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/InvoicesApiModel_2024-06-19/invoices_api_model_2024_06_19_models"
)

// GetInvoicesReader is a Reader for the GetInvoices structure.
type GetInvoicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInvoicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInvoicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInvoicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInvoicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInvoicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInvoicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInvoicesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInvoicesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInvoicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInvoicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInvoicesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInvoicesOK creates a GetInvoicesOK with default headers values
func NewGetInvoicesOK() *GetInvoicesOK {
	return &GetInvoicesOK{}
}

/*
GetInvoicesOK describes a response with status code 200, with default header values.

Success.
*/
type GetInvoicesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.GetInvoicesResponse
}

// IsSuccess returns true when this get invoices o k response has a 2xx status code
func (o *GetInvoicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get invoices o k response has a 3xx status code
func (o *GetInvoicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices o k response has a 4xx status code
func (o *GetInvoicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices o k response has a 5xx status code
func (o *GetInvoicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices o k response a status code equal to that given
func (o *GetInvoicesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInvoicesOK) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesOK  %+v", 200, o.Payload)
}

func (o *GetInvoicesOK) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesOK  %+v", 200, o.Payload)
}

func (o *GetInvoicesOK) GetPayload() *invoices_api_model_2024_06_19_models.GetInvoicesResponse {
	return o.Payload
}

func (o *GetInvoicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.GetInvoicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesBadRequest creates a GetInvoicesBadRequest with default headers values
func NewGetInvoicesBadRequest() *GetInvoicesBadRequest {
	return &GetInvoicesBadRequest{}
}

/*
GetInvoicesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInvoicesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices bad request response has a 2xx status code
func (o *GetInvoicesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices bad request response has a 3xx status code
func (o *GetInvoicesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices bad request response has a 4xx status code
func (o *GetInvoicesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices bad request response has a 5xx status code
func (o *GetInvoicesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices bad request response a status code equal to that given
func (o *GetInvoicesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInvoicesBadRequest) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoicesBadRequest) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoicesBadRequest) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesUnauthorized creates a GetInvoicesUnauthorized with default headers values
func NewGetInvoicesUnauthorized() *GetInvoicesUnauthorized {
	return &GetInvoicesUnauthorized{}
}

/*
GetInvoicesUnauthorized describes a response with status code 401, with default header values.

A list of error responses returned when a request is unsuccessful.
*/
type GetInvoicesUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices unauthorized response has a 2xx status code
func (o *GetInvoicesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices unauthorized response has a 3xx status code
func (o *GetInvoicesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices unauthorized response has a 4xx status code
func (o *GetInvoicesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices unauthorized response has a 5xx status code
func (o *GetInvoicesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices unauthorized response a status code equal to that given
func (o *GetInvoicesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetInvoicesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoicesUnauthorized) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoicesUnauthorized) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesForbidden creates a GetInvoicesForbidden with default headers values
func NewGetInvoicesForbidden() *GetInvoicesForbidden {
	return &GetInvoicesForbidden{}
}

/*
GetInvoicesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInvoicesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices forbidden response has a 2xx status code
func (o *GetInvoicesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices forbidden response has a 3xx status code
func (o *GetInvoicesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices forbidden response has a 4xx status code
func (o *GetInvoicesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices forbidden response has a 5xx status code
func (o *GetInvoicesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices forbidden response a status code equal to that given
func (o *GetInvoicesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInvoicesForbidden) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoicesForbidden) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoicesForbidden) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesNotFound creates a GetInvoicesNotFound with default headers values
func NewGetInvoicesNotFound() *GetInvoicesNotFound {
	return &GetInvoicesNotFound{}
}

/*
GetInvoicesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInvoicesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices not found response has a 2xx status code
func (o *GetInvoicesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices not found response has a 3xx status code
func (o *GetInvoicesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices not found response has a 4xx status code
func (o *GetInvoicesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices not found response has a 5xx status code
func (o *GetInvoicesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices not found response a status code equal to that given
func (o *GetInvoicesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInvoicesNotFound) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoicesNotFound) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoicesNotFound) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesRequestEntityTooLarge creates a GetInvoicesRequestEntityTooLarge with default headers values
func NewGetInvoicesRequestEntityTooLarge() *GetInvoicesRequestEntityTooLarge {
	return &GetInvoicesRequestEntityTooLarge{}
}

/*
GetInvoicesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInvoicesRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices request entity too large response has a 2xx status code
func (o *GetInvoicesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices request entity too large response has a 3xx status code
func (o *GetInvoicesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices request entity too large response has a 4xx status code
func (o *GetInvoicesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices request entity too large response has a 5xx status code
func (o *GetInvoicesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices request entity too large response a status code equal to that given
func (o *GetInvoicesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInvoicesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoicesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoicesRequestEntityTooLarge) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesUnsupportedMediaType creates a GetInvoicesUnsupportedMediaType with default headers values
func NewGetInvoicesUnsupportedMediaType() *GetInvoicesUnsupportedMediaType {
	return &GetInvoicesUnsupportedMediaType{}
}

/*
GetInvoicesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInvoicesUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices unsupported media type response has a 2xx status code
func (o *GetInvoicesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices unsupported media type response has a 3xx status code
func (o *GetInvoicesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices unsupported media type response has a 4xx status code
func (o *GetInvoicesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices unsupported media type response has a 5xx status code
func (o *GetInvoicesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices unsupported media type response a status code equal to that given
func (o *GetInvoicesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInvoicesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoicesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoicesUnsupportedMediaType) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesTooManyRequests creates a GetInvoicesTooManyRequests with default headers values
func NewGetInvoicesTooManyRequests() *GetInvoicesTooManyRequests {
	return &GetInvoicesTooManyRequests{}
}

/*
GetInvoicesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInvoicesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices too many requests response has a 2xx status code
func (o *GetInvoicesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices too many requests response has a 3xx status code
func (o *GetInvoicesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices too many requests response has a 4xx status code
func (o *GetInvoicesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices too many requests response has a 5xx status code
func (o *GetInvoicesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices too many requests response a status code equal to that given
func (o *GetInvoicesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInvoicesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoicesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoicesTooManyRequests) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesInternalServerError creates a GetInvoicesInternalServerError with default headers values
func NewGetInvoicesInternalServerError() *GetInvoicesInternalServerError {
	return &GetInvoicesInternalServerError{}
}

/*
GetInvoicesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInvoicesInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices internal server error response has a 2xx status code
func (o *GetInvoicesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices internal server error response has a 3xx status code
func (o *GetInvoicesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices internal server error response has a 4xx status code
func (o *GetInvoicesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices internal server error response has a 5xx status code
func (o *GetInvoicesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoices internal server error response a status code equal to that given
func (o *GetInvoicesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInvoicesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoicesInternalServerError) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoicesInternalServerError) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesServiceUnavailable creates a GetInvoicesServiceUnavailable with default headers values
func NewGetInvoicesServiceUnavailable() *GetInvoicesServiceUnavailable {
	return &GetInvoicesServiceUnavailable{}
}

/*
GetInvoicesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInvoicesServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices service unavailable response has a 2xx status code
func (o *GetInvoicesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices service unavailable response has a 3xx status code
func (o *GetInvoicesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices service unavailable response has a 4xx status code
func (o *GetInvoicesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices service unavailable response has a 5xx status code
func (o *GetInvoicesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoices service unavailable response a status code equal to that given
func (o *GetInvoicesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInvoicesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoicesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/invoices][%d] getInvoicesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoicesServiceUnavailable) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
