// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/InvoicesApiModel_2024-06-19/invoices_api_model_2024_06_19_models"
)

// GetInvoicesDocumentReader is a Reader for the GetInvoicesDocument structure.
type GetInvoicesDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInvoicesDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInvoicesDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInvoicesDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetInvoicesDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInvoicesDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInvoicesDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInvoicesDocumentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInvoicesDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInvoicesDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInvoicesDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInvoicesDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInvoicesDocumentOK creates a GetInvoicesDocumentOK with default headers values
func NewGetInvoicesDocumentOK() *GetInvoicesDocumentOK {
	return &GetInvoicesDocumentOK{}
}

/*
GetInvoicesDocumentOK describes a response with status code 200, with default header values.

Success.
*/
type GetInvoicesDocumentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.GetInvoicesDocumentResponse
}

// IsSuccess returns true when this get invoices document o k response has a 2xx status code
func (o *GetInvoicesDocumentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get invoices document o k response has a 3xx status code
func (o *GetInvoicesDocumentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document o k response has a 4xx status code
func (o *GetInvoicesDocumentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices document o k response has a 5xx status code
func (o *GetInvoicesDocumentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document o k response a status code equal to that given
func (o *GetInvoicesDocumentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInvoicesDocumentOK) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentOK  %+v", 200, o.Payload)
}

func (o *GetInvoicesDocumentOK) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentOK  %+v", 200, o.Payload)
}

func (o *GetInvoicesDocumentOK) GetPayload() *invoices_api_model_2024_06_19_models.GetInvoicesDocumentResponse {
	return o.Payload
}

func (o *GetInvoicesDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.GetInvoicesDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentBadRequest creates a GetInvoicesDocumentBadRequest with default headers values
func NewGetInvoicesDocumentBadRequest() *GetInvoicesDocumentBadRequest {
	return &GetInvoicesDocumentBadRequest{}
}

/*
GetInvoicesDocumentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInvoicesDocumentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document bad request response has a 2xx status code
func (o *GetInvoicesDocumentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document bad request response has a 3xx status code
func (o *GetInvoicesDocumentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document bad request response has a 4xx status code
func (o *GetInvoicesDocumentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document bad request response has a 5xx status code
func (o *GetInvoicesDocumentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document bad request response a status code equal to that given
func (o *GetInvoicesDocumentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInvoicesDocumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoicesDocumentBadRequest) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetInvoicesDocumentBadRequest) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentUnauthorized creates a GetInvoicesDocumentUnauthorized with default headers values
func NewGetInvoicesDocumentUnauthorized() *GetInvoicesDocumentUnauthorized {
	return &GetInvoicesDocumentUnauthorized{}
}

/*
GetInvoicesDocumentUnauthorized describes a response with status code 401, with default header values.

A list of error responses returned when a request is unsuccessful.
*/
type GetInvoicesDocumentUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document unauthorized response has a 2xx status code
func (o *GetInvoicesDocumentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document unauthorized response has a 3xx status code
func (o *GetInvoicesDocumentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document unauthorized response has a 4xx status code
func (o *GetInvoicesDocumentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document unauthorized response has a 5xx status code
func (o *GetInvoicesDocumentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document unauthorized response a status code equal to that given
func (o *GetInvoicesDocumentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetInvoicesDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoicesDocumentUnauthorized) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetInvoicesDocumentUnauthorized) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentForbidden creates a GetInvoicesDocumentForbidden with default headers values
func NewGetInvoicesDocumentForbidden() *GetInvoicesDocumentForbidden {
	return &GetInvoicesDocumentForbidden{}
}

/*
GetInvoicesDocumentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInvoicesDocumentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document forbidden response has a 2xx status code
func (o *GetInvoicesDocumentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document forbidden response has a 3xx status code
func (o *GetInvoicesDocumentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document forbidden response has a 4xx status code
func (o *GetInvoicesDocumentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document forbidden response has a 5xx status code
func (o *GetInvoicesDocumentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document forbidden response a status code equal to that given
func (o *GetInvoicesDocumentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInvoicesDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoicesDocumentForbidden) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GetInvoicesDocumentForbidden) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentNotFound creates a GetInvoicesDocumentNotFound with default headers values
func NewGetInvoicesDocumentNotFound() *GetInvoicesDocumentNotFound {
	return &GetInvoicesDocumentNotFound{}
}

/*
GetInvoicesDocumentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInvoicesDocumentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document not found response has a 2xx status code
func (o *GetInvoicesDocumentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document not found response has a 3xx status code
func (o *GetInvoicesDocumentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document not found response has a 4xx status code
func (o *GetInvoicesDocumentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document not found response has a 5xx status code
func (o *GetInvoicesDocumentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document not found response a status code equal to that given
func (o *GetInvoicesDocumentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInvoicesDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoicesDocumentNotFound) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GetInvoicesDocumentNotFound) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentRequestEntityTooLarge creates a GetInvoicesDocumentRequestEntityTooLarge with default headers values
func NewGetInvoicesDocumentRequestEntityTooLarge() *GetInvoicesDocumentRequestEntityTooLarge {
	return &GetInvoicesDocumentRequestEntityTooLarge{}
}

/*
GetInvoicesDocumentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInvoicesDocumentRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document request entity too large response has a 2xx status code
func (o *GetInvoicesDocumentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document request entity too large response has a 3xx status code
func (o *GetInvoicesDocumentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document request entity too large response has a 4xx status code
func (o *GetInvoicesDocumentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document request entity too large response has a 5xx status code
func (o *GetInvoicesDocumentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document request entity too large response a status code equal to that given
func (o *GetInvoicesDocumentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInvoicesDocumentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoicesDocumentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInvoicesDocumentRequestEntityTooLarge) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentUnsupportedMediaType creates a GetInvoicesDocumentUnsupportedMediaType with default headers values
func NewGetInvoicesDocumentUnsupportedMediaType() *GetInvoicesDocumentUnsupportedMediaType {
	return &GetInvoicesDocumentUnsupportedMediaType{}
}

/*
GetInvoicesDocumentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInvoicesDocumentUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document unsupported media type response has a 2xx status code
func (o *GetInvoicesDocumentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document unsupported media type response has a 3xx status code
func (o *GetInvoicesDocumentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document unsupported media type response has a 4xx status code
func (o *GetInvoicesDocumentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document unsupported media type response has a 5xx status code
func (o *GetInvoicesDocumentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document unsupported media type response a status code equal to that given
func (o *GetInvoicesDocumentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInvoicesDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoicesDocumentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInvoicesDocumentUnsupportedMediaType) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentTooManyRequests creates a GetInvoicesDocumentTooManyRequests with default headers values
func NewGetInvoicesDocumentTooManyRequests() *GetInvoicesDocumentTooManyRequests {
	return &GetInvoicesDocumentTooManyRequests{}
}

/*
GetInvoicesDocumentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInvoicesDocumentTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document too many requests response has a 2xx status code
func (o *GetInvoicesDocumentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document too many requests response has a 3xx status code
func (o *GetInvoicesDocumentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document too many requests response has a 4xx status code
func (o *GetInvoicesDocumentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get invoices document too many requests response has a 5xx status code
func (o *GetInvoicesDocumentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get invoices document too many requests response a status code equal to that given
func (o *GetInvoicesDocumentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInvoicesDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoicesDocumentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInvoicesDocumentTooManyRequests) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentInternalServerError creates a GetInvoicesDocumentInternalServerError with default headers values
func NewGetInvoicesDocumentInternalServerError() *GetInvoicesDocumentInternalServerError {
	return &GetInvoicesDocumentInternalServerError{}
}

/*
GetInvoicesDocumentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInvoicesDocumentInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document internal server error response has a 2xx status code
func (o *GetInvoicesDocumentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document internal server error response has a 3xx status code
func (o *GetInvoicesDocumentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document internal server error response has a 4xx status code
func (o *GetInvoicesDocumentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices document internal server error response has a 5xx status code
func (o *GetInvoicesDocumentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoices document internal server error response a status code equal to that given
func (o *GetInvoicesDocumentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInvoicesDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoicesDocumentInternalServerError) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInvoicesDocumentInternalServerError) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInvoicesDocumentServiceUnavailable creates a GetInvoicesDocumentServiceUnavailable with default headers values
func NewGetInvoicesDocumentServiceUnavailable() *GetInvoicesDocumentServiceUnavailable {
	return &GetInvoicesDocumentServiceUnavailable{}
}

/*
GetInvoicesDocumentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInvoicesDocumentServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *invoices_api_model_2024_06_19_models.ErrorList
}

// IsSuccess returns true when this get invoices document service unavailable response has a 2xx status code
func (o *GetInvoicesDocumentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get invoices document service unavailable response has a 3xx status code
func (o *GetInvoicesDocumentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get invoices document service unavailable response has a 4xx status code
func (o *GetInvoicesDocumentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get invoices document service unavailable response has a 5xx status code
func (o *GetInvoicesDocumentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get invoices document service unavailable response a status code equal to that given
func (o *GetInvoicesDocumentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInvoicesDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoicesDocumentServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /tax/invoices/2024-06-19/documents/{invoicesDocumentId}][%d] getInvoicesDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInvoicesDocumentServiceUnavailable) GetPayload() *invoices_api_model_2024_06_19_models.ErrorList {
	return o.Payload
}

func (o *GetInvoicesDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(invoices_api_model_2024_06_19_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
