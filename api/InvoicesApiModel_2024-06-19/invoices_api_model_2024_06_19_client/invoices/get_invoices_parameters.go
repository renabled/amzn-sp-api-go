// Code generated by go-swagger; DO NOT EDIT.

package invoices

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetInvoicesParams creates a new GetInvoicesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInvoicesParams() *GetInvoicesParams {
	return &GetInvoicesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInvoicesParamsWithTimeout creates a new GetInvoicesParams object
// with the ability to set a timeout on a request.
func NewGetInvoicesParamsWithTimeout(timeout time.Duration) *GetInvoicesParams {
	return &GetInvoicesParams{
		timeout: timeout,
	}
}

// NewGetInvoicesParamsWithContext creates a new GetInvoicesParams object
// with the ability to set a context for a request.
func NewGetInvoicesParamsWithContext(ctx context.Context) *GetInvoicesParams {
	return &GetInvoicesParams{
		Context: ctx,
	}
}

// NewGetInvoicesParamsWithHTTPClient creates a new GetInvoicesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInvoicesParamsWithHTTPClient(client *http.Client) *GetInvoicesParams {
	return &GetInvoicesParams{
		HTTPClient: client,
	}
}

/*
GetInvoicesParams contains all the parameters to send to the API endpoint

	for the get invoices operation.

	Typically these are written to a http.Request.
*/
type GetInvoicesParams struct {

	/* DateEnd.

	   The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the current date-time.

	   Format: date-time
	*/
	DateEnd *strfmt.DateTime

	/* DateStart.

	   The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.

	   Format: date-time
	*/
	DateStart *strfmt.DateTime

	/* ExternalInvoiceID.

	   Return invoices that match this external ID. This is typically the Government Invoice ID.
	*/
	ExternalInvoiceID *string

	/* InvoiceType.

	   The marketplace-specific classification of the invoice type. Use the `getInvoicesAttributes` operation to check `invoiceType` options.
	*/
	InvoiceType *string

	/* MarketplaceID.

	   The response includes only the invoices that match the specified marketplace.
	*/
	MarketplaceID string

	/* NextToken.

	   The response includes `nextToken` when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.
	*/
	NextToken *string

	/* PageSize.

	     The maximum number of invoices you want to return in a single call.

	Minimum: 1

	Maximum: 200
	*/
	PageSize *int64

	/* Series.

	   Return invoices with the specified series number.
	*/
	Series *string

	/* SortBy.

	   The attribute by which you want to sort the invoices in the response.
	*/
	SortBy *string

	/* SortOrder.

	   Sort the invoices in the response in ascending or descending order.
	*/
	SortOrder *string

	/* Statuses.

	     A list of statuses that you can use to filter invoices. Use the `getInvoicesAttributes` operation to check invoice status options.

	Min count: 1
	*/
	Statuses []string

	/* TransactionIdentifierID.

	   The ID of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the `transactionIdentifierName` field.
	*/
	TransactionIdentifierID *string

	/* TransactionIdentifierName.

	   The name of the transaction identifier filter. If you provide a value for this field, you must also provide a value for the `transactionIdentifierId` field.Use the `getInvoicesAttributes` operation to check `transactionIdentifierName` options.
	*/
	TransactionIdentifierName *string

	/* TransactionType.

	   The marketplace-specific classification of the transaction type for which the invoice was created. Use the `getInvoicesAttributes` operation to check `transactionType` options.
	*/
	TransactionType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get invoices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInvoicesParams) WithDefaults() *GetInvoicesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get invoices params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInvoicesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get invoices params
func (o *GetInvoicesParams) WithTimeout(timeout time.Duration) *GetInvoicesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get invoices params
func (o *GetInvoicesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get invoices params
func (o *GetInvoicesParams) WithContext(ctx context.Context) *GetInvoicesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get invoices params
func (o *GetInvoicesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get invoices params
func (o *GetInvoicesParams) WithHTTPClient(client *http.Client) *GetInvoicesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get invoices params
func (o *GetInvoicesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDateEnd adds the dateEnd to the get invoices params
func (o *GetInvoicesParams) WithDateEnd(dateEnd *strfmt.DateTime) *GetInvoicesParams {
	o.SetDateEnd(dateEnd)
	return o
}

// SetDateEnd adds the dateEnd to the get invoices params
func (o *GetInvoicesParams) SetDateEnd(dateEnd *strfmt.DateTime) {
	o.DateEnd = dateEnd
}

// WithDateStart adds the dateStart to the get invoices params
func (o *GetInvoicesParams) WithDateStart(dateStart *strfmt.DateTime) *GetInvoicesParams {
	o.SetDateStart(dateStart)
	return o
}

// SetDateStart adds the dateStart to the get invoices params
func (o *GetInvoicesParams) SetDateStart(dateStart *strfmt.DateTime) {
	o.DateStart = dateStart
}

// WithExternalInvoiceID adds the externalInvoiceID to the get invoices params
func (o *GetInvoicesParams) WithExternalInvoiceID(externalInvoiceID *string) *GetInvoicesParams {
	o.SetExternalInvoiceID(externalInvoiceID)
	return o
}

// SetExternalInvoiceID adds the externalInvoiceId to the get invoices params
func (o *GetInvoicesParams) SetExternalInvoiceID(externalInvoiceID *string) {
	o.ExternalInvoiceID = externalInvoiceID
}

// WithInvoiceType adds the invoiceType to the get invoices params
func (o *GetInvoicesParams) WithInvoiceType(invoiceType *string) *GetInvoicesParams {
	o.SetInvoiceType(invoiceType)
	return o
}

// SetInvoiceType adds the invoiceType to the get invoices params
func (o *GetInvoicesParams) SetInvoiceType(invoiceType *string) {
	o.InvoiceType = invoiceType
}

// WithMarketplaceID adds the marketplaceID to the get invoices params
func (o *GetInvoicesParams) WithMarketplaceID(marketplaceID string) *GetInvoicesParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the get invoices params
func (o *GetInvoicesParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithNextToken adds the nextToken to the get invoices params
func (o *GetInvoicesParams) WithNextToken(nextToken *string) *GetInvoicesParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the get invoices params
func (o *GetInvoicesParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithPageSize adds the pageSize to the get invoices params
func (o *GetInvoicesParams) WithPageSize(pageSize *int64) *GetInvoicesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get invoices params
func (o *GetInvoicesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithSeries adds the series to the get invoices params
func (o *GetInvoicesParams) WithSeries(series *string) *GetInvoicesParams {
	o.SetSeries(series)
	return o
}

// SetSeries adds the series to the get invoices params
func (o *GetInvoicesParams) SetSeries(series *string) {
	o.Series = series
}

// WithSortBy adds the sortBy to the get invoices params
func (o *GetInvoicesParams) WithSortBy(sortBy *string) *GetInvoicesParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the get invoices params
func (o *GetInvoicesParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the get invoices params
func (o *GetInvoicesParams) WithSortOrder(sortOrder *string) *GetInvoicesParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the get invoices params
func (o *GetInvoicesParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStatuses adds the statuses to the get invoices params
func (o *GetInvoicesParams) WithStatuses(statuses []string) *GetInvoicesParams {
	o.SetStatuses(statuses)
	return o
}

// SetStatuses adds the statuses to the get invoices params
func (o *GetInvoicesParams) SetStatuses(statuses []string) {
	o.Statuses = statuses
}

// WithTransactionIdentifierID adds the transactionIdentifierID to the get invoices params
func (o *GetInvoicesParams) WithTransactionIdentifierID(transactionIdentifierID *string) *GetInvoicesParams {
	o.SetTransactionIdentifierID(transactionIdentifierID)
	return o
}

// SetTransactionIdentifierID adds the transactionIdentifierId to the get invoices params
func (o *GetInvoicesParams) SetTransactionIdentifierID(transactionIdentifierID *string) {
	o.TransactionIdentifierID = transactionIdentifierID
}

// WithTransactionIdentifierName adds the transactionIdentifierName to the get invoices params
func (o *GetInvoicesParams) WithTransactionIdentifierName(transactionIdentifierName *string) *GetInvoicesParams {
	o.SetTransactionIdentifierName(transactionIdentifierName)
	return o
}

// SetTransactionIdentifierName adds the transactionIdentifierName to the get invoices params
func (o *GetInvoicesParams) SetTransactionIdentifierName(transactionIdentifierName *string) {
	o.TransactionIdentifierName = transactionIdentifierName
}

// WithTransactionType adds the transactionType to the get invoices params
func (o *GetInvoicesParams) WithTransactionType(transactionType *string) *GetInvoicesParams {
	o.SetTransactionType(transactionType)
	return o
}

// SetTransactionType adds the transactionType to the get invoices params
func (o *GetInvoicesParams) SetTransactionType(transactionType *string) {
	o.TransactionType = transactionType
}

// WriteToRequest writes these params to a swagger request
func (o *GetInvoicesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DateEnd != nil {

		// query param dateEnd
		var qrDateEnd strfmt.DateTime

		if o.DateEnd != nil {
			qrDateEnd = *o.DateEnd
		}
		qDateEnd := qrDateEnd.String()
		if qDateEnd != "" {

			if err := r.SetQueryParam("dateEnd", qDateEnd); err != nil {
				return err
			}
		}
	}

	if o.DateStart != nil {

		// query param dateStart
		var qrDateStart strfmt.DateTime

		if o.DateStart != nil {
			qrDateStart = *o.DateStart
		}
		qDateStart := qrDateStart.String()
		if qDateStart != "" {

			if err := r.SetQueryParam("dateStart", qDateStart); err != nil {
				return err
			}
		}
	}

	if o.ExternalInvoiceID != nil {

		// query param externalInvoiceId
		var qrExternalInvoiceID string

		if o.ExternalInvoiceID != nil {
			qrExternalInvoiceID = *o.ExternalInvoiceID
		}
		qExternalInvoiceID := qrExternalInvoiceID
		if qExternalInvoiceID != "" {

			if err := r.SetQueryParam("externalInvoiceId", qExternalInvoiceID); err != nil {
				return err
			}
		}
	}

	if o.InvoiceType != nil {

		// query param invoiceType
		var qrInvoiceType string

		if o.InvoiceType != nil {
			qrInvoiceType = *o.InvoiceType
		}
		qInvoiceType := qrInvoiceType
		if qInvoiceType != "" {

			if err := r.SetQueryParam("invoiceType", qInvoiceType); err != nil {
				return err
			}
		}
	}

	// query param marketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("marketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	if o.NextToken != nil {

		// query param nextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("nextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.Series != nil {

		// query param series
		var qrSeries string

		if o.Series != nil {
			qrSeries = *o.Series
		}
		qSeries := qrSeries
		if qSeries != "" {

			if err := r.SetQueryParam("series", qSeries); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.Statuses != nil {

		// binding items for statuses
		joinedStatuses := o.bindParamStatuses(reg)

		// query array param statuses
		if err := r.SetQueryParam("statuses", joinedStatuses...); err != nil {
			return err
		}
	}

	if o.TransactionIdentifierID != nil {

		// query param transactionIdentifierId
		var qrTransactionIdentifierID string

		if o.TransactionIdentifierID != nil {
			qrTransactionIdentifierID = *o.TransactionIdentifierID
		}
		qTransactionIdentifierID := qrTransactionIdentifierID
		if qTransactionIdentifierID != "" {

			if err := r.SetQueryParam("transactionIdentifierId", qTransactionIdentifierID); err != nil {
				return err
			}
		}
	}

	if o.TransactionIdentifierName != nil {

		// query param transactionIdentifierName
		var qrTransactionIdentifierName string

		if o.TransactionIdentifierName != nil {
			qrTransactionIdentifierName = *o.TransactionIdentifierName
		}
		qTransactionIdentifierName := qrTransactionIdentifierName
		if qTransactionIdentifierName != "" {

			if err := r.SetQueryParam("transactionIdentifierName", qTransactionIdentifierName); err != nil {
				return err
			}
		}
	}

	if o.TransactionType != nil {

		// query param transactionType
		var qrTransactionType string

		if o.TransactionType != nil {
			qrTransactionType = *o.TransactionType
		}
		qTransactionType := qrTransactionType
		if qTransactionType != "" {

			if err := r.SetQueryParam("transactionType", qTransactionType); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetInvoices binds the parameter statuses
func (o *GetInvoicesParams) bindParamStatuses(formats strfmt.Registry) []string {
	statusesIR := o.Statuses

	var statusesIC []string
	for _, statusesIIR := range statusesIR { // explode []string

		statusesIIV := statusesIIR // string as string
		statusesIC = append(statusesIC, statusesIIV)
	}

	// items.CollectionFormat: "csv"
	statusesIS := swag.JoinByFormat(statusesIC, "csv")

	return statusesIS
}
