// Code generated by go-swagger; DO NOT EDIT.

package invoices_api_model_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Export Detailed information about the export.
//
// swagger:model Export
type Export struct {

	// When the export generation fails, this attribute contains a description of the error.
	ErrorMessage string `json:"errorMessage,omitempty"`

	// The export identifier.
	ExportID string `json:"exportId,omitempty"`

	// The date and time when the export generation finished. Vales are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
	// Format: date-time
	GenerateExportFinishedAt strfmt.DateTime `json:"generateExportFinishedAt,omitempty"`

	// The date and time when the export generation started. Values are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
	// Format: date-time
	GenerateExportStartedAt strfmt.DateTime `json:"generateExportStartedAt,omitempty"`

	// The identifier for the export documents. To get the information required to retrieve the export document's contents, pass each ID in the `getInvoicesDocument` operation.
	//
	// This list is empty until the status is `DONE`.
	InvoicesDocumentIds []string `json:"invoicesDocumentIds"`

	// status
	Status ExportStatus `json:"status,omitempty"`
}

// Validate validates this export
func (m *Export) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenerateExportFinishedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerateExportStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Export) validateGenerateExportFinishedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerateExportFinishedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("generateExportFinishedAt", "body", "date-time", m.GenerateExportFinishedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Export) validateGenerateExportStartedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerateExportStartedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("generateExportStartedAt", "body", "date-time", m.GenerateExportStartedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Export) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// ContextValidate validate this export based on the context it is used
func (m *Export) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Export) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Export) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Export) UnmarshalBinary(b []byte) error {
	var res Export
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
