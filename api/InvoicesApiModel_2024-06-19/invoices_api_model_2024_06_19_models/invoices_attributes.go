// Code generated by go-swagger; DO NOT EDIT.

package invoices_api_model_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InvoicesAttributes An object that contains the invoice attributes definition.
//
// swagger:model InvoicesAttributes
type InvoicesAttributes struct {

	// A list of all the options that are available for the invoice status attribute.
	InvoiceStatusOptions []*AttributeOption `json:"invoiceStatusOptions"`

	// A list of all the options that are available for the invoice type attribute.
	InvoiceTypeOptions []*AttributeOption `json:"invoiceTypeOptions"`

	// A list of all the options that are available for the transaction identifier name attribute.
	TransactionIdentifierNameOptions []*AttributeOption `json:"transactionIdentifierNameOptions"`

	// A list of all the options that are available for the transaction type attribute.
	TransactionTypeOptions []*AttributeOption `json:"transactionTypeOptions"`
}

// Validate validates this invoices attributes
func (m *InvoicesAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvoiceStatusOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceTypeOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionIdentifierNameOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionTypeOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicesAttributes) validateInvoiceStatusOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.InvoiceStatusOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.InvoiceStatusOptions); i++ {
		if swag.IsZero(m.InvoiceStatusOptions[i]) { // not required
			continue
		}

		if m.InvoiceStatusOptions[i] != nil {
			if err := m.InvoiceStatusOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invoiceStatusOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invoiceStatusOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicesAttributes) validateInvoiceTypeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.InvoiceTypeOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.InvoiceTypeOptions); i++ {
		if swag.IsZero(m.InvoiceTypeOptions[i]) { // not required
			continue
		}

		if m.InvoiceTypeOptions[i] != nil {
			if err := m.InvoiceTypeOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invoiceTypeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invoiceTypeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicesAttributes) validateTransactionIdentifierNameOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionIdentifierNameOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.TransactionIdentifierNameOptions); i++ {
		if swag.IsZero(m.TransactionIdentifierNameOptions[i]) { // not required
			continue
		}

		if m.TransactionIdentifierNameOptions[i] != nil {
			if err := m.TransactionIdentifierNameOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactionIdentifierNameOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactionIdentifierNameOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicesAttributes) validateTransactionTypeOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionTypeOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.TransactionTypeOptions); i++ {
		if swag.IsZero(m.TransactionTypeOptions[i]) { // not required
			continue
		}

		if m.TransactionTypeOptions[i] != nil {
			if err := m.TransactionTypeOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactionTypeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactionTypeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this invoices attributes based on the context it is used
func (m *InvoicesAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvoiceStatusOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvoiceTypeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionIdentifierNameOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionTypeOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoicesAttributes) contextValidateInvoiceStatusOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InvoiceStatusOptions); i++ {

		if m.InvoiceStatusOptions[i] != nil {
			if err := m.InvoiceStatusOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invoiceStatusOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invoiceStatusOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicesAttributes) contextValidateInvoiceTypeOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.InvoiceTypeOptions); i++ {

		if m.InvoiceTypeOptions[i] != nil {
			if err := m.InvoiceTypeOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("invoiceTypeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("invoiceTypeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicesAttributes) contextValidateTransactionIdentifierNameOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransactionIdentifierNameOptions); i++ {

		if m.TransactionIdentifierNameOptions[i] != nil {
			if err := m.TransactionIdentifierNameOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactionIdentifierNameOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactionIdentifierNameOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoicesAttributes) contextValidateTransactionTypeOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TransactionTypeOptions); i++ {

		if m.TransactionTypeOptions[i] != nil {
			if err := m.TransactionTypeOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("transactionTypeOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("transactionTypeOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoicesAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoicesAttributes) UnmarshalBinary(b []byte) error {
	var res InvoicesAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
