// Code generated by go-swagger; DO NOT EDIT.

package invoices_api_model_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExportInvoicesRequest The information required to create the export request.
// Example: {"dateEnd":"2024-07-30T23:59:59","dateStart":"2024-07-01T00:00:00","externalInvoiceId":"1283743","fileFormat":"XML","invoiceType":"SYMBOLIC_RETURN","marketplaceId":"A2Q3Y263D00KWC","series":"32","statuses":["AUTHORIZED"],"transactionIdentifier":{"id":"94cd4e1a-5cc5-486d-b592-045a95a168e1","name":"BUSINESS_TRANSACTION_ID"},"transactionType":"CUSTOMER_SALES"}
//
// swagger:model ExportInvoicesRequest
type ExportInvoicesRequest struct {

	// The latest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is the time of the request.
	// Format: date
	DateEnd strfmt.Date `json:"dateEnd,omitempty"`

	// The earliest invoice creation date for invoices that you want to include in the response. Dates are in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The default is 24 hours prior to the time of the request.
	// Format: date
	DateStart strfmt.Date `json:"dateStart,omitempty"`

	// The external ID of the invoices you want included in the response.
	ExternalInvoiceID string `json:"externalInvoiceId,omitempty"`

	// file format
	FileFormat FileFormat `json:"fileFormat,omitempty"`

	// The marketplace-specific classification of the invoice type. Use the `getInvoicesAttributes` operation to check `invoiceType` options.
	InvoiceType string `json:"invoiceType,omitempty"`

	// The ID of the marketplace from which you want the invoices.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// The series number of the invoices you want included in the response.
	Series string `json:"series,omitempty"`

	// A list of statuses that you can use to filter invoices. Use the `getInvoicesAttributes` operation to check invoice status options.
	//
	// Min count: 1
	// Min Items: 1
	Statuses []string `json:"statuses"`

	// transaction identifier
	TransactionIdentifier *TransactionIdentifier `json:"transactionIdentifier,omitempty"`

	// The marketplace-specific classification of the transaction type for which the invoice was created. Use the `getInvoicesAttributes` operation to check `transactionType` options
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this export invoices request
func (m *ExportInvoicesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDateStart(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatuses(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExportInvoicesRequest) validateDateEnd(formats strfmt.Registry) error {
	if swag.IsZero(m.DateEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("dateEnd", "body", "date", m.DateEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExportInvoicesRequest) validateDateStart(formats strfmt.Registry) error {
	if swag.IsZero(m.DateStart) { // not required
		return nil
	}

	if err := validate.FormatOf("dateStart", "body", "date", m.DateStart.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ExportInvoicesRequest) validateFileFormat(formats strfmt.Registry) error {
	if swag.IsZero(m.FileFormat) { // not required
		return nil
	}

	if err := m.FileFormat.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fileFormat")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fileFormat")
		}
		return err
	}

	return nil
}

func (m *ExportInvoicesRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *ExportInvoicesRequest) validateStatuses(formats strfmt.Registry) error {
	if swag.IsZero(m.Statuses) { // not required
		return nil
	}

	iStatusesSize := int64(len(m.Statuses))

	if err := validate.MinItems("statuses", "body", iStatusesSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *ExportInvoicesRequest) validateTransactionIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionIdentifier) { // not required
		return nil
	}

	if m.TransactionIdentifier != nil {
		if err := m.TransactionIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transactionIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transactionIdentifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this export invoices request based on the context it is used
func (m *ExportInvoicesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFileFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExportInvoicesRequest) contextValidateFileFormat(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FileFormat.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fileFormat")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fileFormat")
		}
		return err
	}

	return nil
}

func (m *ExportInvoicesRequest) contextValidateTransactionIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.TransactionIdentifier != nil {
		if err := m.TransactionIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transactionIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transactionIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExportInvoicesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExportInvoicesRequest) UnmarshalBinary(b []byte) error {
	var res ExportInvoicesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
