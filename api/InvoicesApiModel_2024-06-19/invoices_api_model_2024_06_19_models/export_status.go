// Code generated by go-swagger; DO NOT EDIT.

package invoices_api_model_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ExportStatus The current status of the request.
//
// swagger:model ExportStatus
type ExportStatus string

func NewExportStatus(value ExportStatus) *ExportStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ExportStatus.
func (m ExportStatus) Pointer() *ExportStatus {
	return &m
}

const (

	// ExportStatusREQUESTED captures enum value "REQUESTED"
	ExportStatusREQUESTED ExportStatus = "REQUESTED"

	// ExportStatusPROCESSING captures enum value "PROCESSING"
	ExportStatusPROCESSING ExportStatus = "PROCESSING"

	// ExportStatusDONE captures enum value "DONE"
	ExportStatusDONE ExportStatus = "DONE"

	// ExportStatusERROR captures enum value "ERROR"
	ExportStatusERROR ExportStatus = "ERROR"
)

// for schema
var exportStatusEnum []interface{}

func init() {
	var res []ExportStatus
	if err := json.Unmarshal([]byte(`["REQUESTED","PROCESSING","DONE","ERROR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		exportStatusEnum = append(exportStatusEnum, v)
	}
}

func (m ExportStatus) validateExportStatusEnum(path, location string, value ExportStatus) error {
	if err := validate.EnumCase(path, location, value, exportStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this export status
func (m ExportStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateExportStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this export status based on context it is used
func (m ExportStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
