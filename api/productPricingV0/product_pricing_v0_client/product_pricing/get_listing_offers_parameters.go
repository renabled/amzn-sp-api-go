// Code generated by go-swagger; DO NOT EDIT.

package product_pricing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetListingOffersParams creates a new GetListingOffersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetListingOffersParams() *GetListingOffersParams {
	return &GetListingOffersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetListingOffersParamsWithTimeout creates a new GetListingOffersParams object
// with the ability to set a timeout on a request.
func NewGetListingOffersParamsWithTimeout(timeout time.Duration) *GetListingOffersParams {
	return &GetListingOffersParams{
		timeout: timeout,
	}
}

// NewGetListingOffersParamsWithContext creates a new GetListingOffersParams object
// with the ability to set a context for a request.
func NewGetListingOffersParamsWithContext(ctx context.Context) *GetListingOffersParams {
	return &GetListingOffersParams{
		Context: ctx,
	}
}

// NewGetListingOffersParamsWithHTTPClient creates a new GetListingOffersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetListingOffersParamsWithHTTPClient(client *http.Client) *GetListingOffersParams {
	return &GetListingOffersParams{
		HTTPClient: client,
	}
}

/* GetListingOffersParams contains all the parameters to send to the API endpoint
   for the get listing offers operation.

   Typically these are written to a http.Request.
*/
type GetListingOffersParams struct {

	/* CustomerType.

	   Indicates whether to request Consumer or Business offers. Default is Consumer.
	*/
	CustomerType *string

	/* ItemCondition.

	   Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
	*/
	ItemCondition string

	/* MarketplaceID.

	   A marketplace identifier. Specifies the marketplace for which prices are returned.
	*/
	MarketplaceID string

	/* SellerSKU.

	   Identifies an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit.
	*/
	SellerSKU string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get listing offers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListingOffersParams) WithDefaults() *GetListingOffersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get listing offers params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListingOffersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get listing offers params
func (o *GetListingOffersParams) WithTimeout(timeout time.Duration) *GetListingOffersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get listing offers params
func (o *GetListingOffersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get listing offers params
func (o *GetListingOffersParams) WithContext(ctx context.Context) *GetListingOffersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get listing offers params
func (o *GetListingOffersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get listing offers params
func (o *GetListingOffersParams) WithHTTPClient(client *http.Client) *GetListingOffersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get listing offers params
func (o *GetListingOffersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerType adds the customerType to the get listing offers params
func (o *GetListingOffersParams) WithCustomerType(customerType *string) *GetListingOffersParams {
	o.SetCustomerType(customerType)
	return o
}

// SetCustomerType adds the customerType to the get listing offers params
func (o *GetListingOffersParams) SetCustomerType(customerType *string) {
	o.CustomerType = customerType
}

// WithItemCondition adds the itemCondition to the get listing offers params
func (o *GetListingOffersParams) WithItemCondition(itemCondition string) *GetListingOffersParams {
	o.SetItemCondition(itemCondition)
	return o
}

// SetItemCondition adds the itemCondition to the get listing offers params
func (o *GetListingOffersParams) SetItemCondition(itemCondition string) {
	o.ItemCondition = itemCondition
}

// WithMarketplaceID adds the marketplaceID to the get listing offers params
func (o *GetListingOffersParams) WithMarketplaceID(marketplaceID string) *GetListingOffersParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the get listing offers params
func (o *GetListingOffersParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithSellerSKU adds the sellerSKU to the get listing offers params
func (o *GetListingOffersParams) WithSellerSKU(sellerSKU string) *GetListingOffersParams {
	o.SetSellerSKU(sellerSKU)
	return o
}

// SetSellerSKU adds the sellerSKU to the get listing offers params
func (o *GetListingOffersParams) SetSellerSKU(sellerSKU string) {
	o.SellerSKU = sellerSKU
}

// WriteToRequest writes these params to a swagger request
func (o *GetListingOffersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CustomerType != nil {

		// query param CustomerType
		var qrCustomerType string

		if o.CustomerType != nil {
			qrCustomerType = *o.CustomerType
		}
		qCustomerType := qrCustomerType
		if qCustomerType != "" {

			if err := r.SetQueryParam("CustomerType", qCustomerType); err != nil {
				return err
			}
		}
	}

	// query param ItemCondition
	qrItemCondition := o.ItemCondition
	qItemCondition := qrItemCondition
	if qItemCondition != "" {

		if err := r.SetQueryParam("ItemCondition", qItemCondition); err != nil {
			return err
		}
	}

	// query param MarketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("MarketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	// path param SellerSKU
	if err := r.SetPathParam("SellerSKU", o.SellerSKU); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
