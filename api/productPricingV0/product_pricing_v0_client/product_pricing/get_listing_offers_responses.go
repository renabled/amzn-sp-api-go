// Code generated by go-swagger; DO NOT EDIT.

package product_pricing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/productPricingV0/product_pricing_v0_models"
)

// GetListingOffersReader is a Reader for the GetListingOffers structure.
type GetListingOffersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetListingOffersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetListingOffersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetListingOffersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetListingOffersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetListingOffersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetListingOffersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetListingOffersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetListingOffersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetListingOffersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetListingOffersOK creates a GetListingOffersOK with default headers values
func NewGetListingOffersOK() *GetListingOffersOK {
	return &GetListingOffersOK{}
}

/*
GetListingOffersOK describes a response with status code 200, with default header values.

Success.
*/
type GetListingOffersOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers o k response has a 2xx status code
func (o *GetListingOffersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get listing offers o k response has a 3xx status code
func (o *GetListingOffersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers o k response has a 4xx status code
func (o *GetListingOffersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get listing offers o k response has a 5xx status code
func (o *GetListingOffersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get listing offers o k response a status code equal to that given
func (o *GetListingOffersOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetListingOffersOK) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersOK  %+v", 200, o.Payload)
}

func (o *GetListingOffersOK) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersOK  %+v", 200, o.Payload)
}

func (o *GetListingOffersOK) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersBadRequest creates a GetListingOffersBadRequest with default headers values
func NewGetListingOffersBadRequest() *GetListingOffersBadRequest {
	return &GetListingOffersBadRequest{}
}

/*
GetListingOffersBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetListingOffersBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers bad request response has a 2xx status code
func (o *GetListingOffersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers bad request response has a 3xx status code
func (o *GetListingOffersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers bad request response has a 4xx status code
func (o *GetListingOffersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get listing offers bad request response has a 5xx status code
func (o *GetListingOffersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get listing offers bad request response a status code equal to that given
func (o *GetListingOffersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetListingOffersBadRequest) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersBadRequest  %+v", 400, o.Payload)
}

func (o *GetListingOffersBadRequest) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersBadRequest  %+v", 400, o.Payload)
}

func (o *GetListingOffersBadRequest) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersUnauthorized creates a GetListingOffersUnauthorized with default headers values
func NewGetListingOffersUnauthorized() *GetListingOffersUnauthorized {
	return &GetListingOffersUnauthorized{}
}

/*
GetListingOffersUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetListingOffersUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers unauthorized response has a 2xx status code
func (o *GetListingOffersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers unauthorized response has a 3xx status code
func (o *GetListingOffersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers unauthorized response has a 4xx status code
func (o *GetListingOffersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get listing offers unauthorized response has a 5xx status code
func (o *GetListingOffersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get listing offers unauthorized response a status code equal to that given
func (o *GetListingOffersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetListingOffersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetListingOffersUnauthorized) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersUnauthorized  %+v", 401, o.Payload)
}

func (o *GetListingOffersUnauthorized) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersForbidden creates a GetListingOffersForbidden with default headers values
func NewGetListingOffersForbidden() *GetListingOffersForbidden {
	return &GetListingOffersForbidden{}
}

/*
GetListingOffersForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetListingOffersForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers forbidden response has a 2xx status code
func (o *GetListingOffersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers forbidden response has a 3xx status code
func (o *GetListingOffersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers forbidden response has a 4xx status code
func (o *GetListingOffersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get listing offers forbidden response has a 5xx status code
func (o *GetListingOffersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get listing offers forbidden response a status code equal to that given
func (o *GetListingOffersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetListingOffersForbidden) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersForbidden  %+v", 403, o.Payload)
}

func (o *GetListingOffersForbidden) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersForbidden  %+v", 403, o.Payload)
}

func (o *GetListingOffersForbidden) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersNotFound creates a GetListingOffersNotFound with default headers values
func NewGetListingOffersNotFound() *GetListingOffersNotFound {
	return &GetListingOffersNotFound{}
}

/*
GetListingOffersNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetListingOffersNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers not found response has a 2xx status code
func (o *GetListingOffersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers not found response has a 3xx status code
func (o *GetListingOffersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers not found response has a 4xx status code
func (o *GetListingOffersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get listing offers not found response has a 5xx status code
func (o *GetListingOffersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get listing offers not found response a status code equal to that given
func (o *GetListingOffersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetListingOffersNotFound) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersNotFound  %+v", 404, o.Payload)
}

func (o *GetListingOffersNotFound) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersNotFound  %+v", 404, o.Payload)
}

func (o *GetListingOffersNotFound) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersTooManyRequests creates a GetListingOffersTooManyRequests with default headers values
func NewGetListingOffersTooManyRequests() *GetListingOffersTooManyRequests {
	return &GetListingOffersTooManyRequests{}
}

/*
GetListingOffersTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetListingOffersTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers too many requests response has a 2xx status code
func (o *GetListingOffersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers too many requests response has a 3xx status code
func (o *GetListingOffersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers too many requests response has a 4xx status code
func (o *GetListingOffersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get listing offers too many requests response has a 5xx status code
func (o *GetListingOffersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get listing offers too many requests response a status code equal to that given
func (o *GetListingOffersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetListingOffersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetListingOffersTooManyRequests) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetListingOffersTooManyRequests) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersInternalServerError creates a GetListingOffersInternalServerError with default headers values
func NewGetListingOffersInternalServerError() *GetListingOffersInternalServerError {
	return &GetListingOffersInternalServerError{}
}

/*
GetListingOffersInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetListingOffersInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers internal server error response has a 2xx status code
func (o *GetListingOffersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers internal server error response has a 3xx status code
func (o *GetListingOffersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers internal server error response has a 4xx status code
func (o *GetListingOffersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get listing offers internal server error response has a 5xx status code
func (o *GetListingOffersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get listing offers internal server error response a status code equal to that given
func (o *GetListingOffersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetListingOffersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetListingOffersInternalServerError) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersInternalServerError  %+v", 500, o.Payload)
}

func (o *GetListingOffersInternalServerError) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetListingOffersServiceUnavailable creates a GetListingOffersServiceUnavailable with default headers values
func NewGetListingOffersServiceUnavailable() *GetListingOffersServiceUnavailable {
	return &GetListingOffersServiceUnavailable{}
}

/*
GetListingOffersServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetListingOffersServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetOffersResponse
}

// IsSuccess returns true when this get listing offers service unavailable response has a 2xx status code
func (o *GetListingOffersServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get listing offers service unavailable response has a 3xx status code
func (o *GetListingOffersServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get listing offers service unavailable response has a 4xx status code
func (o *GetListingOffersServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get listing offers service unavailable response has a 5xx status code
func (o *GetListingOffersServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get listing offers service unavailable response a status code equal to that given
func (o *GetListingOffersServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetListingOffersServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetListingOffersServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/listings/{SellerSKU}/offers][%d] getListingOffersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetListingOffersServiceUnavailable) GetPayload() *product_pricing_v0_models.GetOffersResponse {
	return o.Payload
}

func (o *GetListingOffersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
