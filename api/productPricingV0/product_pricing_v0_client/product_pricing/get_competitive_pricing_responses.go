// Code generated by go-swagger; DO NOT EDIT.

package product_pricing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/productPricingV0/product_pricing_v0_models"
)

// GetCompetitivePricingReader is a Reader for the GetCompetitivePricing structure.
type GetCompetitivePricingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCompetitivePricingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCompetitivePricingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCompetitivePricingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCompetitivePricingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCompetitivePricingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCompetitivePricingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCompetitivePricingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCompetitivePricingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCompetitivePricingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCompetitivePricingOK creates a GetCompetitivePricingOK with default headers values
func NewGetCompetitivePricingOK() *GetCompetitivePricingOK {
	return &GetCompetitivePricingOK{}
}

/*
GetCompetitivePricingOK describes a response with status code 200, with default header values.

Success.
*/
type GetCompetitivePricingOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing o k response has a 2xx status code
func (o *GetCompetitivePricingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get competitive pricing o k response has a 3xx status code
func (o *GetCompetitivePricingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing o k response has a 4xx status code
func (o *GetCompetitivePricingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get competitive pricing o k response has a 5xx status code
func (o *GetCompetitivePricingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive pricing o k response a status code equal to that given
func (o *GetCompetitivePricingOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetCompetitivePricingOK) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingOK  %+v", 200, o.Payload)
}

func (o *GetCompetitivePricingOK) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingOK  %+v", 200, o.Payload)
}

func (o *GetCompetitivePricingOK) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingBadRequest creates a GetCompetitivePricingBadRequest with default headers values
func NewGetCompetitivePricingBadRequest() *GetCompetitivePricingBadRequest {
	return &GetCompetitivePricingBadRequest{}
}

/*
GetCompetitivePricingBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetCompetitivePricingBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing bad request response has a 2xx status code
func (o *GetCompetitivePricingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing bad request response has a 3xx status code
func (o *GetCompetitivePricingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing bad request response has a 4xx status code
func (o *GetCompetitivePricingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive pricing bad request response has a 5xx status code
func (o *GetCompetitivePricingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive pricing bad request response a status code equal to that given
func (o *GetCompetitivePricingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetCompetitivePricingBadRequest) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingBadRequest  %+v", 400, o.Payload)
}

func (o *GetCompetitivePricingBadRequest) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingBadRequest  %+v", 400, o.Payload)
}

func (o *GetCompetitivePricingBadRequest) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingUnauthorized creates a GetCompetitivePricingUnauthorized with default headers values
func NewGetCompetitivePricingUnauthorized() *GetCompetitivePricingUnauthorized {
	return &GetCompetitivePricingUnauthorized{}
}

/*
GetCompetitivePricingUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetCompetitivePricingUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing unauthorized response has a 2xx status code
func (o *GetCompetitivePricingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing unauthorized response has a 3xx status code
func (o *GetCompetitivePricingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing unauthorized response has a 4xx status code
func (o *GetCompetitivePricingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive pricing unauthorized response has a 5xx status code
func (o *GetCompetitivePricingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive pricing unauthorized response a status code equal to that given
func (o *GetCompetitivePricingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetCompetitivePricingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCompetitivePricingUnauthorized) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCompetitivePricingUnauthorized) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingForbidden creates a GetCompetitivePricingForbidden with default headers values
func NewGetCompetitivePricingForbidden() *GetCompetitivePricingForbidden {
	return &GetCompetitivePricingForbidden{}
}

/*
GetCompetitivePricingForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetCompetitivePricingForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing forbidden response has a 2xx status code
func (o *GetCompetitivePricingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing forbidden response has a 3xx status code
func (o *GetCompetitivePricingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing forbidden response has a 4xx status code
func (o *GetCompetitivePricingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive pricing forbidden response has a 5xx status code
func (o *GetCompetitivePricingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive pricing forbidden response a status code equal to that given
func (o *GetCompetitivePricingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetCompetitivePricingForbidden) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingForbidden  %+v", 403, o.Payload)
}

func (o *GetCompetitivePricingForbidden) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingForbidden  %+v", 403, o.Payload)
}

func (o *GetCompetitivePricingForbidden) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingNotFound creates a GetCompetitivePricingNotFound with default headers values
func NewGetCompetitivePricingNotFound() *GetCompetitivePricingNotFound {
	return &GetCompetitivePricingNotFound{}
}

/*
GetCompetitivePricingNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetCompetitivePricingNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing not found response has a 2xx status code
func (o *GetCompetitivePricingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing not found response has a 3xx status code
func (o *GetCompetitivePricingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing not found response has a 4xx status code
func (o *GetCompetitivePricingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive pricing not found response has a 5xx status code
func (o *GetCompetitivePricingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive pricing not found response a status code equal to that given
func (o *GetCompetitivePricingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetCompetitivePricingNotFound) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingNotFound  %+v", 404, o.Payload)
}

func (o *GetCompetitivePricingNotFound) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingNotFound  %+v", 404, o.Payload)
}

func (o *GetCompetitivePricingNotFound) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingTooManyRequests creates a GetCompetitivePricingTooManyRequests with default headers values
func NewGetCompetitivePricingTooManyRequests() *GetCompetitivePricingTooManyRequests {
	return &GetCompetitivePricingTooManyRequests{}
}

/*
GetCompetitivePricingTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetCompetitivePricingTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing too many requests response has a 2xx status code
func (o *GetCompetitivePricingTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing too many requests response has a 3xx status code
func (o *GetCompetitivePricingTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing too many requests response has a 4xx status code
func (o *GetCompetitivePricingTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive pricing too many requests response has a 5xx status code
func (o *GetCompetitivePricingTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive pricing too many requests response a status code equal to that given
func (o *GetCompetitivePricingTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetCompetitivePricingTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCompetitivePricingTooManyRequests) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCompetitivePricingTooManyRequests) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingInternalServerError creates a GetCompetitivePricingInternalServerError with default headers values
func NewGetCompetitivePricingInternalServerError() *GetCompetitivePricingInternalServerError {
	return &GetCompetitivePricingInternalServerError{}
}

/*
GetCompetitivePricingInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetCompetitivePricingInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing internal server error response has a 2xx status code
func (o *GetCompetitivePricingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing internal server error response has a 3xx status code
func (o *GetCompetitivePricingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing internal server error response has a 4xx status code
func (o *GetCompetitivePricingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get competitive pricing internal server error response has a 5xx status code
func (o *GetCompetitivePricingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get competitive pricing internal server error response a status code equal to that given
func (o *GetCompetitivePricingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetCompetitivePricingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCompetitivePricingInternalServerError) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCompetitivePricingInternalServerError) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitivePricingServiceUnavailable creates a GetCompetitivePricingServiceUnavailable with default headers values
func NewGetCompetitivePricingServiceUnavailable() *GetCompetitivePricingServiceUnavailable {
	return &GetCompetitivePricingServiceUnavailable{}
}

/*
GetCompetitivePricingServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetCompetitivePricingServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *product_pricing_v0_models.GetPricingResponse
}

// IsSuccess returns true when this get competitive pricing service unavailable response has a 2xx status code
func (o *GetCompetitivePricingServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive pricing service unavailable response has a 3xx status code
func (o *GetCompetitivePricingServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive pricing service unavailable response has a 4xx status code
func (o *GetCompetitivePricingServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get competitive pricing service unavailable response has a 5xx status code
func (o *GetCompetitivePricingServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get competitive pricing service unavailable response a status code equal to that given
func (o *GetCompetitivePricingServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetCompetitivePricingServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCompetitivePricingServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /products/pricing/v0/competitivePrice][%d] getCompetitivePricingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCompetitivePricingServiceUnavailable) GetPayload() *product_pricing_v0_models.GetPricingResponse {
	return o.Payload
}

func (o *GetCompetitivePricingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_v0_models.GetPricingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
