// Code generated by go-swagger; DO NOT EDIT.

package product_pricing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPricingParams creates a new GetPricingParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPricingParams() *GetPricingParams {
	return &GetPricingParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPricingParamsWithTimeout creates a new GetPricingParams object
// with the ability to set a timeout on a request.
func NewGetPricingParamsWithTimeout(timeout time.Duration) *GetPricingParams {
	return &GetPricingParams{
		timeout: timeout,
	}
}

// NewGetPricingParamsWithContext creates a new GetPricingParams object
// with the ability to set a context for a request.
func NewGetPricingParamsWithContext(ctx context.Context) *GetPricingParams {
	return &GetPricingParams{
		Context: ctx,
	}
}

// NewGetPricingParamsWithHTTPClient creates a new GetPricingParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPricingParamsWithHTTPClient(client *http.Client) *GetPricingParams {
	return &GetPricingParams{
		HTTPClient: client,
	}
}

/*
GetPricingParams contains all the parameters to send to the API endpoint

	for the get pricing operation.

	Typically these are written to a http.Request.
*/
type GetPricingParams struct {

	/* Asins.

	   A list of up to twenty Amazon Standard Identification Number (ASIN) values used to identify items in the given marketplace.
	*/
	Asins []string

	/* ItemCondition.

	   Filters the offer listings based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
	*/
	ItemCondition *string

	/* ItemType.

	   Indicates whether ASIN values or seller SKU values are used to identify items. If you specify Asin, the information in the response will be dependent on the list of Asins you provide in the Asins parameter. If you specify Sku, the information in the response will be dependent on the list of Skus you provide in the Skus parameter.
	*/
	ItemType string

	/* MarketplaceID.

	   A marketplace identifier. Specifies the marketplace for which prices are returned.
	*/
	MarketplaceID string

	/* OfferType.

	   Indicates whether to request pricing information for the seller's B2C or B2B offers. Default is B2C.
	*/
	OfferType *string

	/* Skus.

	   A list of up to twenty seller SKU values used to identify items in the given marketplace.
	*/
	Skus []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get pricing params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPricingParams) WithDefaults() *GetPricingParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get pricing params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPricingParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get pricing params
func (o *GetPricingParams) WithTimeout(timeout time.Duration) *GetPricingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pricing params
func (o *GetPricingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pricing params
func (o *GetPricingParams) WithContext(ctx context.Context) *GetPricingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pricing params
func (o *GetPricingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pricing params
func (o *GetPricingParams) WithHTTPClient(client *http.Client) *GetPricingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pricing params
func (o *GetPricingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsins adds the asins to the get pricing params
func (o *GetPricingParams) WithAsins(asins []string) *GetPricingParams {
	o.SetAsins(asins)
	return o
}

// SetAsins adds the asins to the get pricing params
func (o *GetPricingParams) SetAsins(asins []string) {
	o.Asins = asins
}

// WithItemCondition adds the itemCondition to the get pricing params
func (o *GetPricingParams) WithItemCondition(itemCondition *string) *GetPricingParams {
	o.SetItemCondition(itemCondition)
	return o
}

// SetItemCondition adds the itemCondition to the get pricing params
func (o *GetPricingParams) SetItemCondition(itemCondition *string) {
	o.ItemCondition = itemCondition
}

// WithItemType adds the itemType to the get pricing params
func (o *GetPricingParams) WithItemType(itemType string) *GetPricingParams {
	o.SetItemType(itemType)
	return o
}

// SetItemType adds the itemType to the get pricing params
func (o *GetPricingParams) SetItemType(itemType string) {
	o.ItemType = itemType
}

// WithMarketplaceID adds the marketplaceID to the get pricing params
func (o *GetPricingParams) WithMarketplaceID(marketplaceID string) *GetPricingParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the get pricing params
func (o *GetPricingParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithOfferType adds the offerType to the get pricing params
func (o *GetPricingParams) WithOfferType(offerType *string) *GetPricingParams {
	o.SetOfferType(offerType)
	return o
}

// SetOfferType adds the offerType to the get pricing params
func (o *GetPricingParams) SetOfferType(offerType *string) {
	o.OfferType = offerType
}

// WithSkus adds the skus to the get pricing params
func (o *GetPricingParams) WithSkus(skus []string) *GetPricingParams {
	o.SetSkus(skus)
	return o
}

// SetSkus adds the skus to the get pricing params
func (o *GetPricingParams) SetSkus(skus []string) {
	o.Skus = skus
}

// WriteToRequest writes these params to a swagger request
func (o *GetPricingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Asins != nil {

		// binding items for Asins
		joinedAsins := o.bindParamAsins(reg)

		// query array param Asins
		if err := r.SetQueryParam("Asins", joinedAsins...); err != nil {
			return err
		}
	}

	if o.ItemCondition != nil {

		// query param ItemCondition
		var qrItemCondition string

		if o.ItemCondition != nil {
			qrItemCondition = *o.ItemCondition
		}
		qItemCondition := qrItemCondition
		if qItemCondition != "" {

			if err := r.SetQueryParam("ItemCondition", qItemCondition); err != nil {
				return err
			}
		}
	}

	// query param ItemType
	qrItemType := o.ItemType
	qItemType := qrItemType
	if qItemType != "" {

		if err := r.SetQueryParam("ItemType", qItemType); err != nil {
			return err
		}
	}

	// query param MarketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("MarketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	if o.OfferType != nil {

		// query param OfferType
		var qrOfferType string

		if o.OfferType != nil {
			qrOfferType = *o.OfferType
		}
		qOfferType := qrOfferType
		if qOfferType != "" {

			if err := r.SetQueryParam("OfferType", qOfferType); err != nil {
				return err
			}
		}
	}

	if o.Skus != nil {

		// binding items for Skus
		joinedSkus := o.bindParamSkus(reg)

		// query array param Skus
		if err := r.SetQueryParam("Skus", joinedSkus...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetPricing binds the parameter Asins
func (o *GetPricingParams) bindParamAsins(formats strfmt.Registry) []string {
	asinsIR := o.Asins

	var asinsIC []string
	for _, asinsIIR := range asinsIR { // explode []string

		asinsIIV := asinsIIR // string as string
		asinsIC = append(asinsIC, asinsIIV)
	}

	// items.CollectionFormat: ""
	asinsIS := swag.JoinByFormat(asinsIC, "")

	return asinsIS
}

// bindParamGetPricing binds the parameter Skus
func (o *GetPricingParams) bindParamSkus(formats strfmt.Registry) []string {
	skusIR := o.Skus

	var skusIC []string
	for _, skusIIR := range skusIR { // explode []string

		skusIIV := skusIIR // string as string
		skusIC = append(skusIC, skusIIV)
	}

	// items.CollectionFormat: ""
	skusIS := swag.JoinByFormat(skusIC, "")

	return skusIS
}
