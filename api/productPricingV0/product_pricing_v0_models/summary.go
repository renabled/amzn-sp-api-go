// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Summary Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
//
// swagger:model Summary
type Summary struct {

	// A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels.
	BuyBoxEligibleOffers BuyBoxEligibleOffers `json:"BuyBoxEligibleOffers,omitempty"`

	// A list of item prices.
	BuyBoxPrices BuyBoxPrices `json:"BuyBoxPrices,omitempty"`

	// This price is based on competitive prices from other retailers (excluding other Amazon sellers). The offer may be ineligible for the Buy Box if the seller's price + shipping (minus Amazon Points) is greater than this competitive price.
	CompetitivePriceThreshold *MoneyType `json:"CompetitivePriceThreshold,omitempty"`

	// The list price of the item as suggested by the manufacturer.
	ListPrice *MoneyType `json:"ListPrice,omitempty"`

	// A list of the lowest prices for the item.
	LowestPrices LowestPrices `json:"LowestPrices,omitempty"`

	// A list that contains the total number of offers for the item for the given conditions and fulfillment channels.
	NumberOfOffers NumberOfOffers `json:"NumberOfOffers,omitempty"`

	// When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
	// Format: date-time
	OffersAvailableTime strfmt.DateTime `json:"OffersAvailableTime,omitempty"`

	// A list that contains the sales rank of the item in the given product categories.
	SalesRankings SalesRankList `json:"SalesRankings,omitempty"`

	// The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based on a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from customers for your products.
	SuggestedLowerPricePlusShipping *MoneyType `json:"SuggestedLowerPricePlusShipping,omitempty"`

	// The number of unique offers contained in NumberOfOffers.
	// Required: true
	TotalOfferCount *int32 `json:"TotalOfferCount"`
}

// Validate validates this summary
func (m *Summary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyBoxEligibleOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyBoxPrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompetitivePriceThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowestPrices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberOfOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffersAvailableTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesRankings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuggestedLowerPricePlusShipping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalOfferCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Summary) validateBuyBoxEligibleOffers(formats strfmt.Registry) error {
	if swag.IsZero(m.BuyBoxEligibleOffers) { // not required
		return nil
	}

	if err := m.BuyBoxEligibleOffers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BuyBoxEligibleOffers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BuyBoxEligibleOffers")
		}
		return err
	}

	return nil
}

func (m *Summary) validateBuyBoxPrices(formats strfmt.Registry) error {
	if swag.IsZero(m.BuyBoxPrices) { // not required
		return nil
	}

	if err := m.BuyBoxPrices.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BuyBoxPrices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BuyBoxPrices")
		}
		return err
	}

	return nil
}

func (m *Summary) validateCompetitivePriceThreshold(formats strfmt.Registry) error {
	if swag.IsZero(m.CompetitivePriceThreshold) { // not required
		return nil
	}

	if m.CompetitivePriceThreshold != nil {
		if err := m.CompetitivePriceThreshold.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CompetitivePriceThreshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CompetitivePriceThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Summary) validateListPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ListPrice) { // not required
		return nil
	}

	if m.ListPrice != nil {
		if err := m.ListPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListPrice")
			}
			return err
		}
	}

	return nil
}

func (m *Summary) validateLowestPrices(formats strfmt.Registry) error {
	if swag.IsZero(m.LowestPrices) { // not required
		return nil
	}

	if err := m.LowestPrices.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LowestPrices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LowestPrices")
		}
		return err
	}

	return nil
}

func (m *Summary) validateNumberOfOffers(formats strfmt.Registry) error {
	if swag.IsZero(m.NumberOfOffers) { // not required
		return nil
	}

	if err := m.NumberOfOffers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NumberOfOffers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("NumberOfOffers")
		}
		return err
	}

	return nil
}

func (m *Summary) validateOffersAvailableTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OffersAvailableTime) { // not required
		return nil
	}

	if err := validate.FormatOf("OffersAvailableTime", "body", "date-time", m.OffersAvailableTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Summary) validateSalesRankings(formats strfmt.Registry) error {
	if swag.IsZero(m.SalesRankings) { // not required
		return nil
	}

	if err := m.SalesRankings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SalesRankings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SalesRankings")
		}
		return err
	}

	return nil
}

func (m *Summary) validateSuggestedLowerPricePlusShipping(formats strfmt.Registry) error {
	if swag.IsZero(m.SuggestedLowerPricePlusShipping) { // not required
		return nil
	}

	if m.SuggestedLowerPricePlusShipping != nil {
		if err := m.SuggestedLowerPricePlusShipping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SuggestedLowerPricePlusShipping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SuggestedLowerPricePlusShipping")
			}
			return err
		}
	}

	return nil
}

func (m *Summary) validateTotalOfferCount(formats strfmt.Registry) error {

	if err := validate.Required("TotalOfferCount", "body", m.TotalOfferCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this summary based on the context it is used
func (m *Summary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuyBoxEligibleOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuyBoxPrices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCompetitivePriceThreshold(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLowestPrices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumberOfOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSalesRankings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSuggestedLowerPricePlusShipping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Summary) contextValidateBuyBoxEligibleOffers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BuyBoxEligibleOffers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BuyBoxEligibleOffers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BuyBoxEligibleOffers")
		}
		return err
	}

	return nil
}

func (m *Summary) contextValidateBuyBoxPrices(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BuyBoxPrices.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("BuyBoxPrices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("BuyBoxPrices")
		}
		return err
	}

	return nil
}

func (m *Summary) contextValidateCompetitivePriceThreshold(ctx context.Context, formats strfmt.Registry) error {

	if m.CompetitivePriceThreshold != nil {
		if err := m.CompetitivePriceThreshold.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CompetitivePriceThreshold")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CompetitivePriceThreshold")
			}
			return err
		}
	}

	return nil
}

func (m *Summary) contextValidateListPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListPrice != nil {
		if err := m.ListPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListPrice")
			}
			return err
		}
	}

	return nil
}

func (m *Summary) contextValidateLowestPrices(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LowestPrices.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LowestPrices")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LowestPrices")
		}
		return err
	}

	return nil
}

func (m *Summary) contextValidateNumberOfOffers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NumberOfOffers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NumberOfOffers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("NumberOfOffers")
		}
		return err
	}

	return nil
}

func (m *Summary) contextValidateSalesRankings(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SalesRankings.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SalesRankings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SalesRankings")
		}
		return err
	}

	return nil
}

func (m *Summary) contextValidateSuggestedLowerPricePlusShipping(ctx context.Context, formats strfmt.Registry) error {

	if m.SuggestedLowerPricePlusShipping != nil {
		if err := m.SuggestedLowerPricePlusShipping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SuggestedLowerPricePlusShipping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SuggestedLowerPricePlusShipping")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Summary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Summary) UnmarshalBinary(b []byte) error {
	var res Summary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
