// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BuyBoxPriceType buy box price type
//
// swagger:model BuyBoxPriceType
type BuyBoxPriceType struct {

	// The value calculated by adding ListingPrice + Shipping - Points.
	// Required: true
	LandedPrice *MoneyType `json:"LandedPrice"`

	// The price of the item.
	// Required: true
	ListingPrice *MoneyType `json:"ListingPrice"`

	// The number of Amazon Points offered with the purchase of an item.
	Points *Points `json:"Points,omitempty"`

	// The shipping cost.
	// Required: true
	Shipping *MoneyType `json:"Shipping"`

	// Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
	// Required: true
	Condition *string `json:"condition"`

	// Indicates the type of customer that the offer is valid for.<br><br>When the offer type is B2C in a quantity discount, the seller is winning the Buy Box because others do not have inventory at that quantity, not because they have a quantity discount on the ASIN.
	OfferType OfferCustomerType `json:"offerType,omitempty"`

	// Indicates the type of quantity discount this price applies to.
	QuantityDiscountType QuantityDiscountType `json:"quantityDiscountType,omitempty"`

	// Indicates at what quantity this price becomes active.
	QuantityTier int32 `json:"quantityTier,omitempty"`

	// The seller identifier for the offer.
	SellerID string `json:"sellerId,omitempty"`
}

// Validate validates this buy box price type
func (m *BuyBoxPriceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLandedPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateListingPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuyBoxPriceType) validateLandedPrice(formats strfmt.Registry) error {

	if err := validate.Required("LandedPrice", "body", m.LandedPrice); err != nil {
		return err
	}

	if m.LandedPrice != nil {
		if err := m.LandedPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LandedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LandedPrice")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) validateListingPrice(formats strfmt.Registry) error {

	if err := validate.Required("ListingPrice", "body", m.ListingPrice); err != nil {
		return err
	}

	if m.ListingPrice != nil {
		if err := m.ListingPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListingPrice")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) validatePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Points) { // not required
		return nil
	}

	if m.Points != nil {
		if err := m.Points.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Points")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) validateShipping(formats strfmt.Registry) error {

	if err := validate.Required("Shipping", "body", m.Shipping); err != nil {
		return err
	}

	if m.Shipping != nil {
		if err := m.Shipping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Shipping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Shipping")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *BuyBoxPriceType) validateOfferType(formats strfmt.Registry) error {
	if swag.IsZero(m.OfferType) { // not required
		return nil
	}

	if err := m.OfferType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("offerType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("offerType")
		}
		return err
	}

	return nil
}

func (m *BuyBoxPriceType) validateQuantityDiscountType(formats strfmt.Registry) error {
	if swag.IsZero(m.QuantityDiscountType) { // not required
		return nil
	}

	if err := m.QuantityDiscountType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("quantityDiscountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("quantityDiscountType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this buy box price type based on the context it is used
func (m *BuyBoxPriceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLandedPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateListingPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipping(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfferType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantityDiscountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuyBoxPriceType) contextValidateLandedPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.LandedPrice != nil {
		if err := m.LandedPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LandedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LandedPrice")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) contextValidateListingPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListingPrice != nil {
		if err := m.ListingPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ListingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ListingPrice")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if m.Points != nil {
		if err := m.Points.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Points")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) contextValidateShipping(ctx context.Context, formats strfmt.Registry) error {

	if m.Shipping != nil {
		if err := m.Shipping.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Shipping")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Shipping")
			}
			return err
		}
	}

	return nil
}

func (m *BuyBoxPriceType) contextValidateOfferType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OfferType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("offerType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("offerType")
		}
		return err
	}

	return nil
}

func (m *BuyBoxPriceType) contextValidateQuantityDiscountType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.QuantityDiscountType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("quantityDiscountType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("quantityDiscountType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuyBoxPriceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuyBoxPriceType) UnmarshalBinary(b []byte) error {
	var res BuyBoxPriceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
