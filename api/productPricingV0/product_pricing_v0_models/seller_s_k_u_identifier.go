// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SellerSKUIdentifier seller s k u identifier
//
// swagger:model SellerSKUIdentifier
type SellerSKUIdentifier struct {

	// A marketplace identifier.
	// Required: true
	MarketplaceID *string `json:"MarketplaceId"`

	// The seller identifier submitted for the operation.
	// Required: true
	SellerID *string `json:"SellerId"`

	// The seller stock keeping unit (SKU) of the item.
	// Required: true
	SellerSKU *string `json:"SellerSKU"`
}

// Validate validates this seller s k u identifier
func (m *SellerSKUIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerSKU(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SellerSKUIdentifier) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("MarketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *SellerSKUIdentifier) validateSellerID(formats strfmt.Registry) error {

	if err := validate.Required("SellerId", "body", m.SellerID); err != nil {
		return err
	}

	return nil
}

func (m *SellerSKUIdentifier) validateSellerSKU(formats strfmt.Registry) error {

	if err := validate.Required("SellerSKU", "body", m.SellerSKU); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this seller s k u identifier based on context it is used
func (m *SellerSKUIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SellerSKUIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SellerSKUIdentifier) UnmarshalBinary(b []byte) error {
	var res SellerSKUIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
