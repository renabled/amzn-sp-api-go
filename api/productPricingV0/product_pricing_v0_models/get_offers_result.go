// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetOffersResult get offers result
//
// swagger:model GetOffersResult
type GetOffersResult struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN,omitempty"`

	// Metadata that identifies the item.
	// Required: true
	Identifier *ItemIdentifier `json:"Identifier"`

	// The condition of the item.
	// Required: true
	ItemCondition *ConditionType `json:"ItemCondition"`

	// A marketplace identifier.
	// Required: true
	MarketplaceID *string `json:"MarketplaceID"`

	// A list of offer details. The list is the same length as the TotalOfferCount in the Summary or 20, whichever is less.
	// Required: true
	Offers OfferDetailList `json:"Offers"`

	// The stock keeping unit (SKU) of the item.
	SKU string `json:"SKU,omitempty"`

	// Pricing information about the item.
	// Required: true
	Summary *Summary `json:"Summary"`

	// The status of the operation.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this get offers result
func (m *GetOffersResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetOffersResult) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("Identifier", "body", m.Identifier); err != nil {
		return err
	}

	if m.Identifier != nil {
		if err := m.Identifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Identifier")
			}
			return err
		}
	}

	return nil
}

func (m *GetOffersResult) validateItemCondition(formats strfmt.Registry) error {

	if err := validate.Required("ItemCondition", "body", m.ItemCondition); err != nil {
		return err
	}

	if err := validate.Required("ItemCondition", "body", m.ItemCondition); err != nil {
		return err
	}

	if m.ItemCondition != nil {
		if err := m.ItemCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemCondition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemCondition")
			}
			return err
		}
	}

	return nil
}

func (m *GetOffersResult) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("MarketplaceID", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *GetOffersResult) validateOffers(formats strfmt.Registry) error {

	if err := validate.Required("Offers", "body", m.Offers); err != nil {
		return err
	}

	if err := m.Offers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Offers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Offers")
		}
		return err
	}

	return nil
}

func (m *GetOffersResult) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("Summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Summary")
			}
			return err
		}
	}

	return nil
}

func (m *GetOffersResult) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get offers result based on the context it is used
func (m *GetOffersResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetOffersResult) contextValidateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.Identifier != nil {
		if err := m.Identifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Identifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Identifier")
			}
			return err
		}
	}

	return nil
}

func (m *GetOffersResult) contextValidateItemCondition(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemCondition != nil {
		if err := m.ItemCondition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemCondition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemCondition")
			}
			return err
		}
	}

	return nil
}

func (m *GetOffersResult) contextValidateOffers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Offers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Offers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Offers")
		}
		return err
	}

	return nil
}

func (m *GetOffersResult) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Summary")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetOffersResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetOffersResult) UnmarshalBinary(b []byte) error {
	var res GetOffersResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
