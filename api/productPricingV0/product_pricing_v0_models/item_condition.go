// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ItemCondition Filters the offer listings to be considered based on item condition. Possible values: New, Used, Collectible, Refurbished, Club.
//
// swagger:model ItemCondition
type ItemCondition string

func NewItemCondition(value ItemCondition) *ItemCondition {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ItemCondition.
func (m ItemCondition) Pointer() *ItemCondition {
	return &m
}

const (

	// ItemConditionNew captures enum value "New"
	ItemConditionNew ItemCondition = "New"

	// ItemConditionUsed captures enum value "Used"
	ItemConditionUsed ItemCondition = "Used"

	// ItemConditionCollectible captures enum value "Collectible"
	ItemConditionCollectible ItemCondition = "Collectible"

	// ItemConditionRefurbished captures enum value "Refurbished"
	ItemConditionRefurbished ItemCondition = "Refurbished"

	// ItemConditionClub captures enum value "Club"
	ItemConditionClub ItemCondition = "Club"
)

// for schema
var itemConditionEnum []interface{}

func init() {
	var res []ItemCondition
	if err := json.Unmarshal([]byte(`["New","Used","Collectible","Refurbished","Club"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemConditionEnum = append(itemConditionEnum, v)
	}
}

func (m ItemCondition) validateItemConditionEnum(path, location string, value ItemCondition) error {
	if err := validate.EnumCase(path, location, value, itemConditionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this item condition
func (m ItemCondition) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateItemConditionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this item condition based on context it is used
func (m ItemCondition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
