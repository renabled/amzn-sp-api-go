// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CustomerType Indicates whether to request Consumer or Business offers. Default is Consumer.
//
// swagger:model CustomerType
type CustomerType string

func NewCustomerType(value CustomerType) *CustomerType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CustomerType.
func (m CustomerType) Pointer() *CustomerType {
	return &m
}

const (

	// CustomerTypeConsumer captures enum value "Consumer"
	CustomerTypeConsumer CustomerType = "Consumer"

	// CustomerTypeBusiness captures enum value "Business"
	CustomerTypeBusiness CustomerType = "Business"
)

// for schema
var customerTypeEnum []interface{}

func init() {
	var res []CustomerType
	if err := json.Unmarshal([]byte(`["Consumer","Business"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		customerTypeEnum = append(customerTypeEnum, v)
	}
}

func (m CustomerType) validateCustomerTypeEnum(path, location string, value CustomerType) error {
	if err := validate.EnumCase(path, location, value, customerTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this customer type
func (m CustomerType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCustomerTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this customer type based on context it is used
func (m CustomerType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
