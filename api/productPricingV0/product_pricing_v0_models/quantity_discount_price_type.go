// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuantityDiscountPriceType Contains pricing information that includes special pricing when buying in bulk.
//
// swagger:model QuantityDiscountPriceType
type QuantityDiscountPriceType struct {

	// The price at this quantity tier.
	// Required: true
	ListingPrice *MoneyType `json:"listingPrice"`

	// Indicates the type of quantity discount this price applies to.
	// Required: true
	QuantityDiscountType *QuantityDiscountType `json:"quantityDiscountType"`

	// Indicates at what quantity this price becomes active.
	// Required: true
	QuantityTier *int32 `json:"quantityTier"`
}

// Validate validates this quantity discount price type
func (m *QuantityDiscountPriceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListingPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityDiscountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantityTier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuantityDiscountPriceType) validateListingPrice(formats strfmt.Registry) error {

	if err := validate.Required("listingPrice", "body", m.ListingPrice); err != nil {
		return err
	}

	if m.ListingPrice != nil {
		if err := m.ListingPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listingPrice")
			}
			return err
		}
	}

	return nil
}

func (m *QuantityDiscountPriceType) validateQuantityDiscountType(formats strfmt.Registry) error {

	if err := validate.Required("quantityDiscountType", "body", m.QuantityDiscountType); err != nil {
		return err
	}

	if err := validate.Required("quantityDiscountType", "body", m.QuantityDiscountType); err != nil {
		return err
	}

	if m.QuantityDiscountType != nil {
		if err := m.QuantityDiscountType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantityDiscountType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantityDiscountType")
			}
			return err
		}
	}

	return nil
}

func (m *QuantityDiscountPriceType) validateQuantityTier(formats strfmt.Registry) error {

	if err := validate.Required("quantityTier", "body", m.QuantityTier); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this quantity discount price type based on the context it is used
func (m *QuantityDiscountPriceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListingPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantityDiscountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuantityDiscountPriceType) contextValidateListingPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListingPrice != nil {
		if err := m.ListingPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listingPrice")
			}
			return err
		}
	}

	return nil
}

func (m *QuantityDiscountPriceType) contextValidateQuantityDiscountType(ctx context.Context, formats strfmt.Registry) error {

	if m.QuantityDiscountType != nil {
		if err := m.QuantityDiscountType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantityDiscountType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantityDiscountType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuantityDiscountPriceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuantityDiscountPriceType) UnmarshalBinary(b []byte) error {
	var res QuantityDiscountPriceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
