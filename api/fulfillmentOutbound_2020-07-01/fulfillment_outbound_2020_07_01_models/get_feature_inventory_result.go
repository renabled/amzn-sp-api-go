// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFeatureInventoryResult The payload for the `getEligibileInventory` operation.
//
// swagger:model GetFeatureInventoryResult
type GetFeatureInventoryResult struct {

	// The name of the feature.
	// Required: true
	FeatureName *string `json:"featureName"`

	// An array of SKUs eligible for this feature and the quantity available.
	FeatureSkus []*FeatureSku `json:"featureSkus"`

	// The requested marketplace.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken string `json:"nextToken,omitempty"`
}

// Validate validates this get feature inventory result
func (m *GetFeatureInventoryResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureSkus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFeatureInventoryResult) validateFeatureName(formats strfmt.Registry) error {

	if err := validate.Required("featureName", "body", m.FeatureName); err != nil {
		return err
	}

	return nil
}

func (m *GetFeatureInventoryResult) validateFeatureSkus(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureSkus) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureSkus); i++ {
		if swag.IsZero(m.FeatureSkus[i]) { // not required
			continue
		}

		if m.FeatureSkus[i] != nil {
			if err := m.FeatureSkus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureSkus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureSkus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetFeatureInventoryResult) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get feature inventory result based on the context it is used
func (m *GetFeatureInventoryResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeatureSkus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFeatureInventoryResult) contextValidateFeatureSkus(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeatureSkus); i++ {

		if m.FeatureSkus[i] != nil {
			if err := m.FeatureSkus[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureSkus" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureSkus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFeatureInventoryResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFeatureInventoryResult) UnmarshalBinary(b []byte) error {
	var res GetFeatureInventoryResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
