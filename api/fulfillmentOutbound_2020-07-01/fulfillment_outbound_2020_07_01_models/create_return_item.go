// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateReturnItem An item that Amazon accepted for return.
//
// swagger:model CreateReturnItem
type CreateReturnItem struct {

	// The identifier for the shipment that is associated with the return item.
	// Required: true
	AmazonShipmentID *string `json:"amazonShipmentId"`

	// An optional comment about the return item.
	// Max Length: 1000
	ReturnComment string `json:"returnComment,omitempty"`

	// The return reason code assigned to the return item by the seller.
	// Required: true
	ReturnReasonCode *string `json:"returnReasonCode"`

	// The identifier assigned to the item by the seller when the fulfillment order was created.
	// Required: true
	SellerFulfillmentOrderItemID *string `json:"sellerFulfillmentOrderItemId"`

	// An identifier assigned by the seller to the return item.
	// Required: true
	// Max Length: 80
	SellerReturnItemID *string `json:"sellerReturnItemId"`
}

// Validate validates this create return item
func (m *CreateReturnItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFulfillmentOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerReturnItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReturnItem) validateAmazonShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("amazonShipmentId", "body", m.AmazonShipmentID); err != nil {
		return err
	}

	return nil
}

func (m *CreateReturnItem) validateReturnComment(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnComment) { // not required
		return nil
	}

	if err := validate.MaxLength("returnComment", "body", m.ReturnComment, 1000); err != nil {
		return err
	}

	return nil
}

func (m *CreateReturnItem) validateReturnReasonCode(formats strfmt.Registry) error {

	if err := validate.Required("returnReasonCode", "body", m.ReturnReasonCode); err != nil {
		return err
	}

	return nil
}

func (m *CreateReturnItem) validateSellerFulfillmentOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerFulfillmentOrderItemId", "body", m.SellerFulfillmentOrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *CreateReturnItem) validateSellerReturnItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerReturnItemId", "body", m.SellerReturnItemID); err != nil {
		return err
	}

	if err := validate.MaxLength("sellerReturnItemId", "body", *m.SellerReturnItemID, 80); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create return item based on context it is used
func (m *CreateReturnItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateReturnItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateReturnItem) UnmarshalBinary(b []byte) error {
	var res CreateReturnItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
