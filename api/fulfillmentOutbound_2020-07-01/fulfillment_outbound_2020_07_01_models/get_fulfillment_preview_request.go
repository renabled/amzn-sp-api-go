// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFulfillmentPreviewRequest The request body schema for the getFulfillmentPreview operation.
//
// swagger:model GetFulfillmentPreviewRequest
type GetFulfillmentPreviewRequest struct {

	// The destination address for the fulfillment order preview.
	// Required: true
	Address *Address `json:"address"`

	// A list of features and their fulfillment policies to apply to the order.
	FeatureConstraints []*FeatureSettings `json:"featureConstraints"`

	// When true, returns all fulfillment order previews both for COD and not for COD. Otherwise, returns only fulfillment order previews that are not for COD.
	IncludeCODFulfillmentPreview bool `json:"includeCODFulfillmentPreview,omitempty"`

	// When true, returns the ScheduledDeliveryInfo response object, which contains the available delivery windows for a Scheduled Delivery. The ScheduledDeliveryInfo response object can only be returned for fulfillment order previews with ShippingSpeedCategories = ScheduledDelivery.
	IncludeDeliveryWindows bool `json:"includeDeliveryWindows,omitempty"`

	// Identifying information and quantity information for the items in the fulfillment order preview.
	// Required: true
	Items GetFulfillmentPreviewItemList `json:"items"`

	// The marketplace the fulfillment order is placed against.
	MarketplaceID string `json:"marketplaceId,omitempty"`

	// A list of shipping methods used for creating fulfillment order previews.
	//
	// Possible values:
	//
	// * Standard - Standard shipping method.
	// * Expedited - Expedited shipping method.
	// * Priority - Priority shipping method.
	// * ScheduledDelivery - Scheduled Delivery shipping method.
	// Note: Shipping method service level agreements vary by marketplace. Sellers should see the Seller Central website in their marketplace for shipping method service level agreements and fulfillment fees.
	ShippingSpeedCategories ShippingSpeedCategoryList `json:"shippingSpeedCategories,omitempty"`
}

// Validate validates this get fulfillment preview request
func (m *GetFulfillmentPreviewRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingSpeedCategories(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFulfillmentPreviewRequest) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentPreviewRequest) validateFeatureConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureConstraints) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureConstraints); i++ {
		if swag.IsZero(m.FeatureConstraints[i]) { // not required
			continue
		}

		if m.FeatureConstraints[i] != nil {
			if err := m.FeatureConstraints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetFulfillmentPreviewRequest) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	if err := m.Items.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentPreviewRequest) validateShippingSpeedCategories(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingSpeedCategories) { // not required
		return nil
	}

	if err := m.ShippingSpeedCategories.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shippingSpeedCategories")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shippingSpeedCategories")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get fulfillment preview request based on the context it is used
func (m *GetFulfillmentPreviewRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingSpeedCategories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFulfillmentPreviewRequest) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentPreviewRequest) contextValidateFeatureConstraints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeatureConstraints); i++ {

		if m.FeatureConstraints[i] != nil {
			if err := m.FeatureConstraints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetFulfillmentPreviewRequest) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Items.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentPreviewRequest) contextValidateShippingSpeedCategories(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShippingSpeedCategories.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shippingSpeedCategories")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shippingSpeedCategories")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFulfillmentPreviewRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFulfillmentPreviewRequest) UnmarshalBinary(b []byte) error {
	var res GetFulfillmentPreviewRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
