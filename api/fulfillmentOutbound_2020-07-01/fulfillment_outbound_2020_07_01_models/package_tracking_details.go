// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageTrackingDetails package tracking details
//
// swagger:model PackageTrackingDetails
type PackageTrackingDetails struct {

	// additional location info
	AdditionalLocationInfo AdditionalLocationInfo `json:"additionalLocationInfo,omitempty"`

	// The name of the carrier.
	CarrierCode string `json:"carrierCode,omitempty"`

	// The phone number of the carrier.
	CarrierPhoneNumber string `json:"carrierPhoneNumber,omitempty"`

	// The URL of the carrier's website.
	CarrierURL string `json:"carrierURL,omitempty"`

	// current status
	CurrentStatus CurrentStatus `json:"currentStatus,omitempty"`

	// Description corresponding to the CurrentStatus value.
	CurrentStatusDescription string `json:"currentStatusDescription,omitempty"`

	// Link on swiship.com that allows customers to track the package.
	CustomerTrackingLink string `json:"customerTrackingLink,omitempty"`

	// The estimated arrival date.
	// Format: date-time
	EstimatedArrivalDate Timestamp `json:"estimatedArrivalDate,omitempty"`

	// The package identifier.
	// Required: true
	PackageNumber *int32 `json:"packageNumber"`

	// The shipping date for the package.
	// Format: date-time
	ShipDate Timestamp `json:"shipDate,omitempty"`

	// The destination city for the package.
	ShipToAddress *TrackingAddress `json:"shipToAddress,omitempty"`

	// The name of the person who signed for the package.
	SignedForBy string `json:"signedForBy,omitempty"`

	// tracking events
	TrackingEvents TrackingEventList `json:"trackingEvents,omitempty"`

	// The tracking number for the package.
	TrackingNumber string `json:"trackingNumber,omitempty"`
}

// Validate validates this package tracking details
func (m *PackageTrackingDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalLocationInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedArrivalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingEvents(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageTrackingDetails) validateAdditionalLocationInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.AdditionalLocationInfo) { // not required
		return nil
	}

	if err := m.AdditionalLocationInfo.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("additionalLocationInfo")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("additionalLocationInfo")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) validateCurrentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentStatus) { // not required
		return nil
	}

	if err := m.CurrentStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currentStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("currentStatus")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) validateEstimatedArrivalDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedArrivalDate) { // not required
		return nil
	}

	if err := m.EstimatedArrivalDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("estimatedArrivalDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("estimatedArrivalDate")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) validatePackageNumber(formats strfmt.Registry) error {

	if err := validate.Required("packageNumber", "body", m.PackageNumber); err != nil {
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) validateShipDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipDate) { // not required
		return nil
	}

	if err := m.ShipDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipDate")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) validateShipToAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipToAddress) { // not required
		return nil
	}

	if m.ShipToAddress != nil {
		if err := m.ShipToAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PackageTrackingDetails) validateTrackingEvents(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingEvents) { // not required
		return nil
	}

	if err := m.TrackingEvents.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trackingEvents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trackingEvents")
		}
		return err
	}

	return nil
}

// ContextValidate validate this package tracking details based on the context it is used
func (m *PackageTrackingDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalLocationInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEstimatedArrivalDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipToAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingEvents(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageTrackingDetails) contextValidateAdditionalLocationInfo(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AdditionalLocationInfo.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("additionalLocationInfo")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("additionalLocationInfo")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) contextValidateCurrentStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CurrentStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currentStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("currentStatus")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) contextValidateEstimatedArrivalDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EstimatedArrivalDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("estimatedArrivalDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("estimatedArrivalDate")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) contextValidateShipDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shipDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shipDate")
		}
		return err
	}

	return nil
}

func (m *PackageTrackingDetails) contextValidateShipToAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipToAddress != nil {
		if err := m.ShipToAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToAddress")
			}
			return err
		}
	}

	return nil
}

func (m *PackageTrackingDetails) contextValidateTrackingEvents(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TrackingEvents.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trackingEvents")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trackingEvents")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageTrackingDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageTrackingDetails) UnmarshalBinary(b []byte) error {
	var res PackageTrackingDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
