// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DateRange The time range within which something (for example, a delivery) will occur.
//
// swagger:model DateRange
type DateRange struct {

	// The earliest point in a date range.
	// Required: true
	// Format: date-time
	Earliest *Timestamp `json:"earliest"`

	// The latest point in a date range.
	// Required: true
	// Format: date-time
	Latest *Timestamp `json:"latest"`
}

// Validate validates this date range
func (m *DateRange) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEarliest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DateRange) validateEarliest(formats strfmt.Registry) error {

	if err := validate.Required("earliest", "body", m.Earliest); err != nil {
		return err
	}

	if err := validate.Required("earliest", "body", m.Earliest); err != nil {
		return err
	}

	if m.Earliest != nil {
		if err := m.Earliest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("earliest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("earliest")
			}
			return err
		}
	}

	return nil
}

func (m *DateRange) validateLatest(formats strfmt.Registry) error {

	if err := validate.Required("latest", "body", m.Latest); err != nil {
		return err
	}

	if err := validate.Required("latest", "body", m.Latest); err != nil {
		return err
	}

	if m.Latest != nil {
		if err := m.Latest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this date range based on the context it is used
func (m *DateRange) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEarliest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DateRange) contextValidateEarliest(ctx context.Context, formats strfmt.Registry) error {

	if m.Earliest != nil {
		if err := m.Earliest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("earliest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("earliest")
			}
			return err
		}
	}

	return nil
}

func (m *DateRange) contextValidateLatest(ctx context.Context, formats strfmt.Registry) error {

	if m.Latest != nil {
		if err := m.Latest.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("latest")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("latest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DateRange) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DateRange) UnmarshalBinary(b []byte) error {
	var res DateRange
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
