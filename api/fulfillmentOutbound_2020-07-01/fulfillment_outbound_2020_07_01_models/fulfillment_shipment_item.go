// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentShipmentItem Item information for a shipment in a fulfillment order.
//
// swagger:model FulfillmentShipmentItem
type FulfillmentShipmentItem struct {

	// The manufacturer lot codes of the shipped items.
	ManufacturerLotCodes StringList `json:"manufacturerLotCodes,omitempty"`

	// An identifier for the package that contains the item quantity.
	PackageNumber int32 `json:"packageNumber,omitempty"`

	// quantity
	// Required: true
	Quantity *Quantity `json:"quantity"`

	// The fulfillment order item identifier that the seller created and submitted with a call to the `createFulfillmentOrder` operation.
	// Required: true
	SellerFulfillmentOrderItemID *string `json:"sellerFulfillmentOrderItemId"`

	// The seller SKU of the item.
	// Required: true
	SellerSku *string `json:"sellerSku"`

	// The serial number of the shipped item.
	SerialNumber string `json:"serialNumber,omitempty"`
}

// Validate validates this fulfillment shipment item
func (m *FulfillmentShipmentItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateManufacturerLotCodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFulfillmentOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentShipmentItem) validateManufacturerLotCodes(formats strfmt.Registry) error {
	if swag.IsZero(m.ManufacturerLotCodes) { // not required
		return nil
	}

	if err := m.ManufacturerLotCodes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("manufacturerLotCodes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("manufacturerLotCodes")
		}
		return err
	}

	return nil
}

func (m *FulfillmentShipmentItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if m.Quantity != nil {
		if err := m.Quantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantity")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentShipmentItem) validateSellerFulfillmentOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerFulfillmentOrderItemId", "body", m.SellerFulfillmentOrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentShipmentItem) validateSellerSku(formats strfmt.Registry) error {

	if err := validate.Required("sellerSku", "body", m.SellerSku); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fulfillment shipment item based on the context it is used
func (m *FulfillmentShipmentItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateManufacturerLotCodes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentShipmentItem) contextValidateManufacturerLotCodes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ManufacturerLotCodes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("manufacturerLotCodes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("manufacturerLotCodes")
		}
		return err
	}

	return nil
}

func (m *FulfillmentShipmentItem) contextValidateQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.Quantity != nil {
		if err := m.Quantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentShipmentItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentShipmentItem) UnmarshalBinary(b []byte) error {
	var res FulfillmentShipmentItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
