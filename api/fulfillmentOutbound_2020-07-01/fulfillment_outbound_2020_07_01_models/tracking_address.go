// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackingAddress Address information for tracking the package.
//
// swagger:model TrackingAddress
type TrackingAddress struct {

	// The city.
	// Required: true
	// Max Length: 150
	City *string `json:"city"`

	// The country.
	// Required: true
	// Max Length: 6
	Country *string `json:"country"`

	// The state.
	// Required: true
	// Max Length: 150
	State *string `json:"state"`
}

// Validate validates this tracking address
func (m *TrackingAddress) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackingAddress) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", *m.City, 150); err != nil {
		return err
	}

	return nil
}

func (m *TrackingAddress) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	if err := validate.MaxLength("country", "body", *m.Country, 6); err != nil {
		return err
	}

	return nil
}

func (m *TrackingAddress) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	if err := validate.MaxLength("state", "body", *m.State, 150); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tracking address based on context it is used
func (m *TrackingAddress) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TrackingAddress) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackingAddress) UnmarshalBinary(b []byte) error {
	var res TrackingAddress
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
