// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feature A Multi-Channel Fulfillment feature.
//
// swagger:model Feature
type Feature struct {

	// The feature description.
	// Required: true
	FeatureDescription *string `json:"featureDescription"`

	// The feature name.
	// Required: true
	FeatureName *string `json:"featureName"`

	// When true, indicates that the seller is eligible to use the feature.
	SellerEligible bool `json:"sellerEligible,omitempty"`
}

// Validate validates this feature
func (m *Feature) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feature) validateFeatureDescription(formats strfmt.Registry) error {

	if err := validate.Required("featureDescription", "body", m.FeatureDescription); err != nil {
		return err
	}

	return nil
}

func (m *Feature) validateFeatureName(formats strfmt.Registry) error {

	if err := validate.Required("featureName", "body", m.FeatureName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this feature based on context it is used
func (m *Feature) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Feature) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feature) UnmarshalBinary(b []byte) error {
	var res Feature
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
