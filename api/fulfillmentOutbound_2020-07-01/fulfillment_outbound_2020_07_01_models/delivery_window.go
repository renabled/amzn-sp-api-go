// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeliveryWindow The time range within which a Scheduled Delivery fulfillment order should be delivered.
//
// swagger:model DeliveryWindow
type DeliveryWindow struct {

	// The date and time of the end of the Scheduled Delivery window, in ISO 8601 date time format.
	// Required: true
	// Format: date-time
	EndDate *Timestamp `json:"endDate"`

	// The date and time of the start of the Scheduled Delivery window, in ISO 8601 date time format.
	// Required: true
	// Format: date-time
	StartDate *Timestamp `json:"startDate"`
}

// Validate validates this delivery window
func (m *DeliveryWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryWindow) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if m.EndDate != nil {
		if err := m.EndDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endDate")
			}
			return err
		}
	}

	return nil
}

func (m *DeliveryWindow) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if m.StartDate != nil {
		if err := m.StartDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delivery window based on the context it is used
func (m *DeliveryWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryWindow) contextValidateEndDate(ctx context.Context, formats strfmt.Registry) error {

	if m.EndDate != nil {
		if err := m.EndDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endDate")
			}
			return err
		}
	}

	return nil
}

func (m *DeliveryWindow) contextValidateStartDate(ctx context.Context, formats strfmt.Registry) error {

	if m.StartDate != nil {
		if err := m.StartDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeliveryWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeliveryWindow) UnmarshalBinary(b []byte) error {
	var res DeliveryWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
