// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateFulfillmentOrderRequest The request body schema for the `updateFulfillmentOrder` operation.
//
// swagger:model UpdateFulfillmentOrderRequest
type UpdateFulfillmentOrderRequest struct {

	// The destination address for the fulfillment order.
	DestinationAddress *Address `json:"destinationAddress,omitempty"`

	// Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
	// Max Length: 750
	DisplayableOrderComment string `json:"displayableOrderComment,omitempty"`

	// The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip.
	// Format: date-time
	DisplayableOrderDate Timestamp `json:"displayableOrderDate,omitempty"`

	// A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of `DisplayableOrderId` should match the order identifier that the seller provides to the recipient. The seller can use the `SellerFulfillmentOrderId` for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.
	// Max Length: 40
	DisplayableOrderID string `json:"displayableOrderId,omitempty"`

	// A list of features and their fulfillment policies to apply to the order.
	FeatureConstraints []*FeatureSettings `json:"featureConstraints"`

	// fulfillment action
	FulfillmentAction FulfillmentAction `json:"fulfillmentAction,omitempty"`

	// fulfillment policy
	FulfillmentPolicy FulfillmentPolicy `json:"fulfillmentPolicy,omitempty"`

	// A list of items to include in the fulfillment order preview, including quantity.
	Items UpdateFulfillmentOrderItemList `json:"items,omitempty"`

	// The marketplace the fulfillment order is placed against.
	MarketplaceID string `json:"marketplaceId,omitempty"`

	// notification emails
	NotificationEmails NotificationEmailList `json:"notificationEmails,omitempty"`

	// The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
	ShipFromCountryCode string `json:"shipFromCountryCode,omitempty"`

	// shipping speed category
	ShippingSpeedCategory ShippingSpeedCategory `json:"shippingSpeedCategory,omitempty"`
}

// Validate validates this update fulfillment order request
func (m *UpdateFulfillmentOrderRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayableOrderComment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayableOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayableOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotificationEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingSpeedCategory(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateDestinationAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAddress) { // not required
		return nil
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateDisplayableOrderComment(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayableOrderComment) { // not required
		return nil
	}

	if err := validate.MaxLength("displayableOrderComment", "body", m.DisplayableOrderComment, 750); err != nil {
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateDisplayableOrderDate(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayableOrderDate) { // not required
		return nil
	}

	if err := m.DisplayableOrderDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("displayableOrderDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("displayableOrderDate")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateDisplayableOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayableOrderID) { // not required
		return nil
	}

	if err := validate.MaxLength("displayableOrderId", "body", m.DisplayableOrderID, 40); err != nil {
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateFeatureConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureConstraints) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureConstraints); i++ {
		if swag.IsZero(m.FeatureConstraints[i]) { // not required
			continue
		}

		if m.FeatureConstraints[i] != nil {
			if err := m.FeatureConstraints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateFulfillmentAction(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentAction) { // not required
		return nil
	}

	if err := m.FulfillmentAction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentAction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentAction")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateFulfillmentPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentPolicy) { // not required
		return nil
	}

	if err := m.FulfillmentPolicy.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentPolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentPolicy")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	if err := m.Items.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateNotificationEmails(formats strfmt.Registry) error {
	if swag.IsZero(m.NotificationEmails) { // not required
		return nil
	}

	if err := m.NotificationEmails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notificationEmails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("notificationEmails")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) validateShippingSpeedCategory(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingSpeedCategory) { // not required
		return nil
	}

	if err := m.ShippingSpeedCategory.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shippingSpeedCategory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shippingSpeedCategory")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update fulfillment order request based on the context it is used
func (m *UpdateFulfillmentOrderRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayableOrderDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentAction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentPolicy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNotificationEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingSpeedCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateDisplayableOrderDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DisplayableOrderDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("displayableOrderDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("displayableOrderDate")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateFeatureConstraints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeatureConstraints); i++ {

		if m.FeatureConstraints[i] != nil {
			if err := m.FeatureConstraints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateFulfillmentAction(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FulfillmentAction.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentAction")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentAction")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateFulfillmentPolicy(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FulfillmentPolicy.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentPolicy")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentPolicy")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Items.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateNotificationEmails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NotificationEmails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("notificationEmails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("notificationEmails")
		}
		return err
	}

	return nil
}

func (m *UpdateFulfillmentOrderRequest) contextValidateShippingSpeedCategory(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShippingSpeedCategory.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("shippingSpeedCategory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("shippingSpeedCategory")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateFulfillmentOrderRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateFulfillmentOrderRequest) UnmarshalBinary(b []byte) error {
	var res UpdateFulfillmentOrderRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
