// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PaymentInformation The attributes related to the payment made from customer to seller for this order.
//
// swagger:model PaymentInformation
type PaymentInformation struct {

	// The transaction date of this payment.
	// Required: true
	// Format: date-time
	PaymentDate *Timestamp `json:"paymentDate"`

	// The transaction mode of this payment.
	// Required: true
	PaymentMode *string `json:"paymentMode"`

	// The transaction identifier of this payment.
	// Required: true
	PaymentTransactionID *string `json:"paymentTransactionId"`
}

// Validate validates this payment information
func (m *PaymentInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInformation) validatePaymentDate(formats strfmt.Registry) error {

	if err := validate.Required("paymentDate", "body", m.PaymentDate); err != nil {
		return err
	}

	if err := validate.Required("paymentDate", "body", m.PaymentDate); err != nil {
		return err
	}

	if m.PaymentDate != nil {
		if err := m.PaymentDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentDate")
			}
			return err
		}
	}

	return nil
}

func (m *PaymentInformation) validatePaymentMode(formats strfmt.Registry) error {

	if err := validate.Required("paymentMode", "body", m.PaymentMode); err != nil {
		return err
	}

	return nil
}

func (m *PaymentInformation) validatePaymentTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("paymentTransactionId", "body", m.PaymentTransactionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this payment information based on the context it is used
func (m *PaymentInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaymentDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentInformation) contextValidatePaymentDate(ctx context.Context, formats strfmt.Registry) error {

	if m.PaymentDate != nil {
		if err := m.PaymentDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("paymentDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("paymentDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentInformation) UnmarshalBinary(b []byte) error {
	var res PaymentInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
