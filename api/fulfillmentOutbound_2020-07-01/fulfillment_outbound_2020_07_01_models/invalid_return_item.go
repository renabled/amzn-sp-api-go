// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvalidReturnItem An item that is invalid for return.
//
// swagger:model InvalidReturnItem
type InvalidReturnItem struct {

	// invalid item reason
	// Required: true
	InvalidItemReason *InvalidItemReason `json:"invalidItemReason"`

	// The identifier assigned to the item by the seller when the fulfillment order was created.
	// Required: true
	SellerFulfillmentOrderItemID *string `json:"sellerFulfillmentOrderItemId"`

	// An identifier assigned by the seller to the return item.
	// Required: true
	SellerReturnItemID *string `json:"sellerReturnItemId"`
}

// Validate validates this invalid return item
func (m *InvalidReturnItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvalidItemReason(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFulfillmentOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerReturnItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidReturnItem) validateInvalidItemReason(formats strfmt.Registry) error {

	if err := validate.Required("invalidItemReason", "body", m.InvalidItemReason); err != nil {
		return err
	}

	if m.InvalidItemReason != nil {
		if err := m.InvalidItemReason.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invalidItemReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invalidItemReason")
			}
			return err
		}
	}

	return nil
}

func (m *InvalidReturnItem) validateSellerFulfillmentOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerFulfillmentOrderItemId", "body", m.SellerFulfillmentOrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *InvalidReturnItem) validateSellerReturnItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerReturnItemId", "body", m.SellerReturnItemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this invalid return item based on the context it is used
func (m *InvalidReturnItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvalidItemReason(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidReturnItem) contextValidateInvalidItemReason(ctx context.Context, formats strfmt.Registry) error {

	if m.InvalidItemReason != nil {
		if err := m.InvalidItemReason.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invalidItemReason")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invalidItemReason")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvalidReturnItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvalidReturnItem) UnmarshalBinary(b []byte) error {
	var res InvalidReturnItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
