// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvalidItemReason The reason that the item is invalid for return.
//
// swagger:model InvalidItemReason
type InvalidItemReason struct {

	// A human readable description of the invalid item reason code.
	// Required: true
	Description *string `json:"description"`

	// invalid item reason code
	// Required: true
	InvalidItemReasonCode *InvalidItemReasonCode `json:"invalidItemReasonCode"`
}

// Validate validates this invalid item reason
func (m *InvalidItemReason) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvalidItemReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidItemReason) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *InvalidItemReason) validateInvalidItemReasonCode(formats strfmt.Registry) error {

	if err := validate.Required("invalidItemReasonCode", "body", m.InvalidItemReasonCode); err != nil {
		return err
	}

	if err := validate.Required("invalidItemReasonCode", "body", m.InvalidItemReasonCode); err != nil {
		return err
	}

	if m.InvalidItemReasonCode != nil {
		if err := m.InvalidItemReasonCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invalidItemReasonCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invalidItemReasonCode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this invalid item reason based on the context it is used
func (m *InvalidItemReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvalidItemReasonCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvalidItemReason) contextValidateInvalidItemReasonCode(ctx context.Context, formats strfmt.Registry) error {

	if m.InvalidItemReasonCode != nil {
		if err := m.InvalidItemReasonCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invalidItemReasonCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invalidItemReasonCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvalidItemReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvalidItemReason) UnmarshalBinary(b []byte) error {
	var res InvalidItemReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
