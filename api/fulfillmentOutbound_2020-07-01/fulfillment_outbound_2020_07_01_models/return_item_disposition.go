// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ReturnItemDisposition The condition of the return item when received by an Amazon fulfillment center.
//
// swagger:model ReturnItemDisposition
type ReturnItemDisposition string

func NewReturnItemDisposition(value ReturnItemDisposition) *ReturnItemDisposition {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ReturnItemDisposition.
func (m ReturnItemDisposition) Pointer() *ReturnItemDisposition {
	return &m
}

const (

	// ReturnItemDispositionSellable captures enum value "Sellable"
	ReturnItemDispositionSellable ReturnItemDisposition = "Sellable"

	// ReturnItemDispositionDefective captures enum value "Defective"
	ReturnItemDispositionDefective ReturnItemDisposition = "Defective"

	// ReturnItemDispositionCustomerDamaged captures enum value "CustomerDamaged"
	ReturnItemDispositionCustomerDamaged ReturnItemDisposition = "CustomerDamaged"

	// ReturnItemDispositionCarrierDamaged captures enum value "CarrierDamaged"
	ReturnItemDispositionCarrierDamaged ReturnItemDisposition = "CarrierDamaged"

	// ReturnItemDispositionFulfillerDamaged captures enum value "FulfillerDamaged"
	ReturnItemDispositionFulfillerDamaged ReturnItemDisposition = "FulfillerDamaged"
)

// for schema
var returnItemDispositionEnum []interface{}

func init() {
	var res []ReturnItemDisposition
	if err := json.Unmarshal([]byte(`["Sellable","Defective","CustomerDamaged","CarrierDamaged","FulfillerDamaged"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		returnItemDispositionEnum = append(returnItemDispositionEnum, v)
	}
}

func (m ReturnItemDisposition) validateReturnItemDispositionEnum(path, location string, value ReturnItemDisposition) error {
	if err := validate.EnumCase(path, location, value, returnItemDispositionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this return item disposition
func (m ReturnItemDisposition) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateReturnItemDispositionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this return item disposition based on context it is used
func (m ReturnItemDisposition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
