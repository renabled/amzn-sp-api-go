// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnAuthorization Return authorization information for items accepted for return.
//
// swagger:model ReturnAuthorization
type ReturnAuthorization struct {

	// The return merchandise authorization (RMA) that Amazon needs to process the return.
	// Required: true
	AmazonRmaID *string `json:"amazonRmaId"`

	// An identifier for the Amazon fulfillment center that the return items should be sent to.
	// Required: true
	FulfillmentCenterID *string `json:"fulfillmentCenterId"`

	// An identifier for the return authorization. This identifier associates return items with the return authorization used to return them.
	// Required: true
	ReturnAuthorizationID *string `json:"returnAuthorizationId"`

	// The address of the Amazon fulfillment center that the return items should be sent to.
	// Required: true
	ReturnToAddress *Address `json:"returnToAddress"`

	// A URL for a web page that contains the return authorization barcode and the mailing label. This does not include pre-paid shipping.
	// Required: true
	RmaPageURL *string `json:"rmaPageURL"`
}

// Validate validates this return authorization
func (m *ReturnAuthorization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonRmaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentCenterID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnAuthorizationID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnToAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRmaPageURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnAuthorization) validateAmazonRmaID(formats strfmt.Registry) error {

	if err := validate.Required("amazonRmaId", "body", m.AmazonRmaID); err != nil {
		return err
	}

	return nil
}

func (m *ReturnAuthorization) validateFulfillmentCenterID(formats strfmt.Registry) error {

	if err := validate.Required("fulfillmentCenterId", "body", m.FulfillmentCenterID); err != nil {
		return err
	}

	return nil
}

func (m *ReturnAuthorization) validateReturnAuthorizationID(formats strfmt.Registry) error {

	if err := validate.Required("returnAuthorizationId", "body", m.ReturnAuthorizationID); err != nil {
		return err
	}

	return nil
}

func (m *ReturnAuthorization) validateReturnToAddress(formats strfmt.Registry) error {

	if err := validate.Required("returnToAddress", "body", m.ReturnToAddress); err != nil {
		return err
	}

	if m.ReturnToAddress != nil {
		if err := m.ReturnToAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnToAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnAuthorization) validateRmaPageURL(formats strfmt.Registry) error {

	if err := validate.Required("rmaPageURL", "body", m.RmaPageURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this return authorization based on the context it is used
func (m *ReturnAuthorization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReturnToAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnAuthorization) contextValidateReturnToAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnToAddress != nil {
		if err := m.ReturnToAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnToAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnAuthorization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnAuthorization) UnmarshalBinary(b []byte) error {
	var res ReturnAuthorization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
