// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventCode The event code for the delivery event.
//
// swagger:model EventCode
type EventCode string

func NewEventCode(value EventCode) *EventCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EventCode.
func (m EventCode) Pointer() *EventCode {
	return &m
}

const (

	// EventCodeEVENT101 captures enum value "EVENT_101"
	EventCodeEVENT101 EventCode = "EVENT_101"

	// EventCodeEVENT102 captures enum value "EVENT_102"
	EventCodeEVENT102 EventCode = "EVENT_102"

	// EventCodeEVENT201 captures enum value "EVENT_201"
	EventCodeEVENT201 EventCode = "EVENT_201"

	// EventCodeEVENT202 captures enum value "EVENT_202"
	EventCodeEVENT202 EventCode = "EVENT_202"

	// EventCodeEVENT203 captures enum value "EVENT_203"
	EventCodeEVENT203 EventCode = "EVENT_203"

	// EventCodeEVENT204 captures enum value "EVENT_204"
	EventCodeEVENT204 EventCode = "EVENT_204"

	// EventCodeEVENT205 captures enum value "EVENT_205"
	EventCodeEVENT205 EventCode = "EVENT_205"

	// EventCodeEVENT206 captures enum value "EVENT_206"
	EventCodeEVENT206 EventCode = "EVENT_206"

	// EventCodeEVENT301 captures enum value "EVENT_301"
	EventCodeEVENT301 EventCode = "EVENT_301"

	// EventCodeEVENT302 captures enum value "EVENT_302"
	EventCodeEVENT302 EventCode = "EVENT_302"

	// EventCodeEVENT304 captures enum value "EVENT_304"
	EventCodeEVENT304 EventCode = "EVENT_304"

	// EventCodeEVENT306 captures enum value "EVENT_306"
	EventCodeEVENT306 EventCode = "EVENT_306"

	// EventCodeEVENT307 captures enum value "EVENT_307"
	EventCodeEVENT307 EventCode = "EVENT_307"

	// EventCodeEVENT308 captures enum value "EVENT_308"
	EventCodeEVENT308 EventCode = "EVENT_308"

	// EventCodeEVENT309 captures enum value "EVENT_309"
	EventCodeEVENT309 EventCode = "EVENT_309"

	// EventCodeEVENT401 captures enum value "EVENT_401"
	EventCodeEVENT401 EventCode = "EVENT_401"

	// EventCodeEVENT402 captures enum value "EVENT_402"
	EventCodeEVENT402 EventCode = "EVENT_402"

	// EventCodeEVENT403 captures enum value "EVENT_403"
	EventCodeEVENT403 EventCode = "EVENT_403"

	// EventCodeEVENT404 captures enum value "EVENT_404"
	EventCodeEVENT404 EventCode = "EVENT_404"

	// EventCodeEVENT405 captures enum value "EVENT_405"
	EventCodeEVENT405 EventCode = "EVENT_405"

	// EventCodeEVENT406 captures enum value "EVENT_406"
	EventCodeEVENT406 EventCode = "EVENT_406"

	// EventCodeEVENT407 captures enum value "EVENT_407"
	EventCodeEVENT407 EventCode = "EVENT_407"

	// EventCodeEVENT408 captures enum value "EVENT_408"
	EventCodeEVENT408 EventCode = "EVENT_408"

	// EventCodeEVENT409 captures enum value "EVENT_409"
	EventCodeEVENT409 EventCode = "EVENT_409"

	// EventCodeEVENT411 captures enum value "EVENT_411"
	EventCodeEVENT411 EventCode = "EVENT_411"

	// EventCodeEVENT412 captures enum value "EVENT_412"
	EventCodeEVENT412 EventCode = "EVENT_412"

	// EventCodeEVENT413 captures enum value "EVENT_413"
	EventCodeEVENT413 EventCode = "EVENT_413"

	// EventCodeEVENT414 captures enum value "EVENT_414"
	EventCodeEVENT414 EventCode = "EVENT_414"

	// EventCodeEVENT415 captures enum value "EVENT_415"
	EventCodeEVENT415 EventCode = "EVENT_415"

	// EventCodeEVENT416 captures enum value "EVENT_416"
	EventCodeEVENT416 EventCode = "EVENT_416"

	// EventCodeEVENT417 captures enum value "EVENT_417"
	EventCodeEVENT417 EventCode = "EVENT_417"

	// EventCodeEVENT418 captures enum value "EVENT_418"
	EventCodeEVENT418 EventCode = "EVENT_418"

	// EventCodeEVENT419 captures enum value "EVENT_419"
	EventCodeEVENT419 EventCode = "EVENT_419"
)

// for schema
var eventCodeEnum []interface{}

func init() {
	var res []EventCode
	if err := json.Unmarshal([]byte(`["EVENT_101","EVENT_102","EVENT_201","EVENT_202","EVENT_203","EVENT_204","EVENT_205","EVENT_206","EVENT_301","EVENT_302","EVENT_304","EVENT_306","EVENT_307","EVENT_308","EVENT_309","EVENT_401","EVENT_402","EVENT_403","EVENT_404","EVENT_405","EVENT_406","EVENT_407","EVENT_408","EVENT_409","EVENT_411","EVENT_412","EVENT_413","EVENT_414","EVENT_415","EVENT_416","EVENT_417","EVENT_418","EVENT_419"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventCodeEnum = append(eventCodeEnum, v)
	}
}

func (m EventCode) validateEventCodeEnum(path, location string, value EventCode) error {
	if err := validate.EnumCase(path, location, value, eventCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event code
func (m EventCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this event code based on context it is used
func (m EventCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
