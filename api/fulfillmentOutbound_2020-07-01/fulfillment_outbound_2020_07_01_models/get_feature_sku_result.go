// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFeatureSkuResult The payload for the `getFeatureSKU` operation.
//
// swagger:model GetFeatureSkuResult
type GetFeatureSkuResult struct {

	// The name of the feature.
	// Required: true
	FeatureName *string `json:"featureName"`

	// A list of one or more reasons that the seller SKU is ineligibile for the feature.
	//
	// Possible values:
	// * `MERCHANT_NOT_ENROLLED` - The merchant isn't enrolled for the feature.
	// * `SKU_NOT_ELIGIBLE` - The SKU doesn't reside in a warehouse that supports the feature.
	// * `INVALID_SKU` - There is an issue with the SKU provided.
	IneligibleReasons []string `json:"ineligibleReasons"`

	// When true, the seller SKU is eligible for the requested feature.
	// Required: true
	IsEligible *bool `json:"isEligible"`

	// The requested marketplace.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
	SkuInfo *FeatureSku `json:"skuInfo,omitempty"`
}

// Validate validates this get feature sku result
func (m *GetFeatureSkuResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsEligible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkuInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFeatureSkuResult) validateFeatureName(formats strfmt.Registry) error {

	if err := validate.Required("featureName", "body", m.FeatureName); err != nil {
		return err
	}

	return nil
}

func (m *GetFeatureSkuResult) validateIsEligible(formats strfmt.Registry) error {

	if err := validate.Required("isEligible", "body", m.IsEligible); err != nil {
		return err
	}

	return nil
}

func (m *GetFeatureSkuResult) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *GetFeatureSkuResult) validateSkuInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.SkuInfo) { // not required
		return nil
	}

	if m.SkuInfo != nil {
		if err := m.SkuInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("skuInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("skuInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get feature sku result based on the context it is used
func (m *GetFeatureSkuResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSkuInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFeatureSkuResult) contextValidateSkuInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.SkuInfo != nil {
		if err := m.SkuInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("skuInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("skuInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFeatureSkuResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFeatureSkuResult) UnmarshalBinary(b []byte) error {
	var res GetFeatureSkuResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
