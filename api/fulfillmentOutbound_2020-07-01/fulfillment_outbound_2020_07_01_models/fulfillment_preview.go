// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentPreview Information about a fulfillment order preview, including delivery and fee information based on shipping method.
//
// swagger:model FulfillmentPreview
type FulfillmentPreview struct {

	// The estimated fulfillment fees for this fulfillment order preview, if applicable.
	EstimatedFees FeeList `json:"estimatedFees,omitempty"`

	// Estimated shipping weight for this fulfillment order preview.
	EstimatedShippingWeight *Weight `json:"estimatedShippingWeight,omitempty"`

	// A list of features and their fulfillment policies to apply to the order.
	FeatureConstraints []*FeatureSettings `json:"featureConstraints"`

	// fulfillment preview shipments
	FulfillmentPreviewShipments FulfillmentPreviewShipmentList `json:"fulfillmentPreviewShipments,omitempty"`

	// When true, this fulfillment order preview is for COD (Cash On Delivery).
	// Required: true
	IsCODCapable *bool `json:"isCODCapable"`

	// When true, this fulfillment order preview is fulfillable.
	// Required: true
	IsFulfillable *bool `json:"isFulfillable"`

	// The marketplace the fulfillment order is placed against.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// Error codes associated with the fulfillment order preview that indicate why the order is not fulfillable.
	//
	// Error code examples:
	//
	// DeliverySLAUnavailable
	// InvalidDestinationAddress
	OrderUnfulfillableReasons StringList `json:"orderUnfulfillableReasons,omitempty"`

	// scheduled delivery info
	ScheduledDeliveryInfo *ScheduledDeliveryInfo `json:"scheduledDeliveryInfo,omitempty"`

	// shipping speed category
	// Required: true
	ShippingSpeedCategory *ShippingSpeedCategory `json:"shippingSpeedCategory"`

	// unfulfillable preview items
	UnfulfillablePreviewItems UnfulfillablePreviewItemList `json:"unfulfillablePreviewItems,omitempty"`
}

// Validate validates this fulfillment preview
func (m *FulfillmentPreview) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEstimatedFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedShippingWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeatureConstraints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentPreviewShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCODCapable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsFulfillable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderUnfulfillableReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDeliveryInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingSpeedCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnfulfillablePreviewItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPreview) validateEstimatedFees(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedFees) { // not required
		return nil
	}

	if err := m.EstimatedFees.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("estimatedFees")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("estimatedFees")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPreview) validateEstimatedShippingWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedShippingWeight) { // not required
		return nil
	}

	if m.EstimatedShippingWeight != nil {
		if err := m.EstimatedShippingWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("estimatedShippingWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("estimatedShippingWeight")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPreview) validateFeatureConstraints(formats strfmt.Registry) error {
	if swag.IsZero(m.FeatureConstraints) { // not required
		return nil
	}

	for i := 0; i < len(m.FeatureConstraints); i++ {
		if swag.IsZero(m.FeatureConstraints[i]) { // not required
			continue
		}

		if m.FeatureConstraints[i] != nil {
			if err := m.FeatureConstraints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FulfillmentPreview) validateFulfillmentPreviewShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentPreviewShipments) { // not required
		return nil
	}

	if err := m.FulfillmentPreviewShipments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentPreviewShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentPreviewShipments")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPreview) validateIsCODCapable(formats strfmt.Registry) error {

	if err := validate.Required("isCODCapable", "body", m.IsCODCapable); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPreview) validateIsFulfillable(formats strfmt.Registry) error {

	if err := validate.Required("isFulfillable", "body", m.IsFulfillable); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPreview) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPreview) validateOrderUnfulfillableReasons(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderUnfulfillableReasons) { // not required
		return nil
	}

	if err := m.OrderUnfulfillableReasons.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderUnfulfillableReasons")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderUnfulfillableReasons")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPreview) validateScheduledDeliveryInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDeliveryInfo) { // not required
		return nil
	}

	if m.ScheduledDeliveryInfo != nil {
		if err := m.ScheduledDeliveryInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDeliveryInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDeliveryInfo")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPreview) validateShippingSpeedCategory(formats strfmt.Registry) error {

	if err := validate.Required("shippingSpeedCategory", "body", m.ShippingSpeedCategory); err != nil {
		return err
	}

	if err := validate.Required("shippingSpeedCategory", "body", m.ShippingSpeedCategory); err != nil {
		return err
	}

	if m.ShippingSpeedCategory != nil {
		if err := m.ShippingSpeedCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingSpeedCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingSpeedCategory")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPreview) validateUnfulfillablePreviewItems(formats strfmt.Registry) error {
	if swag.IsZero(m.UnfulfillablePreviewItems) { // not required
		return nil
	}

	if err := m.UnfulfillablePreviewItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unfulfillablePreviewItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unfulfillablePreviewItems")
		}
		return err
	}

	return nil
}

// ContextValidate validate this fulfillment preview based on the context it is used
func (m *FulfillmentPreview) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEstimatedFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEstimatedShippingWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeatureConstraints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentPreviewShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderUnfulfillableReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledDeliveryInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingSpeedCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnfulfillablePreviewItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPreview) contextValidateEstimatedFees(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EstimatedFees.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("estimatedFees")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("estimatedFees")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPreview) contextValidateEstimatedShippingWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.EstimatedShippingWeight != nil {
		if err := m.EstimatedShippingWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("estimatedShippingWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("estimatedShippingWeight")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPreview) contextValidateFeatureConstraints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeatureConstraints); i++ {

		if m.FeatureConstraints[i] != nil {
			if err := m.FeatureConstraints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featureConstraints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FulfillmentPreview) contextValidateFulfillmentPreviewShipments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FulfillmentPreviewShipments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentPreviewShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentPreviewShipments")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPreview) contextValidateOrderUnfulfillableReasons(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderUnfulfillableReasons.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderUnfulfillableReasons")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderUnfulfillableReasons")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPreview) contextValidateScheduledDeliveryInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduledDeliveryInfo != nil {
		if err := m.ScheduledDeliveryInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDeliveryInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDeliveryInfo")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPreview) contextValidateShippingSpeedCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingSpeedCategory != nil {
		if err := m.ShippingSpeedCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingSpeedCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingSpeedCategory")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPreview) contextValidateUnfulfillablePreviewItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UnfulfillablePreviewItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unfulfillablePreviewItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unfulfillablePreviewItems")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentPreview) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentPreview) UnmarshalBinary(b []byte) error {
	var res FulfillmentPreview
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
