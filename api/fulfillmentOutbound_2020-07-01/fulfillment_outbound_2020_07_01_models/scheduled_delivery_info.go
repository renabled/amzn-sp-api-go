// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledDeliveryInfo Delivery information for a scheduled delivery. This is only available in the JP marketplace.
//
// swagger:model ScheduledDeliveryInfo
type ScheduledDeliveryInfo struct {

	// The time zone of the destination address for the fulfillment order preview. Must be an IANA time zone name. Example: Asia/Tokyo.
	// Required: true
	DeliveryTimeZone *string `json:"deliveryTimeZone"`

	// An array of time ranges that are available for scheduled delivery.
	// Required: true
	DeliveryWindows DeliveryWindowList `json:"deliveryWindows"`
}

// Validate validates this scheduled delivery info
func (m *ScheduledDeliveryInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryTimeZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryWindows(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledDeliveryInfo) validateDeliveryTimeZone(formats strfmt.Registry) error {

	if err := validate.Required("deliveryTimeZone", "body", m.DeliveryTimeZone); err != nil {
		return err
	}

	return nil
}

func (m *ScheduledDeliveryInfo) validateDeliveryWindows(formats strfmt.Registry) error {

	if err := validate.Required("deliveryWindows", "body", m.DeliveryWindows); err != nil {
		return err
	}

	if err := m.DeliveryWindows.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deliveryWindows")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deliveryWindows")
		}
		return err
	}

	return nil
}

// ContextValidate validate this scheduled delivery info based on the context it is used
func (m *ScheduledDeliveryInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeliveryWindows(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledDeliveryInfo) contextValidateDeliveryWindows(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeliveryWindows.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("deliveryWindows")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("deliveryWindows")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledDeliveryInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledDeliveryInfo) UnmarshalBinary(b []byte) error {
	var res ScheduledDeliveryInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
