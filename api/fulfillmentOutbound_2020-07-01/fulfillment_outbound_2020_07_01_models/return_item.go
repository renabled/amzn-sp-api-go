// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReturnItem An item that Amazon accepted for return.
//
// swagger:model ReturnItem
type ReturnItem struct {

	// The return reason code that the Amazon fulfillment center assigned to the return item.
	AmazonReturnReasonCode string `json:"amazonReturnReasonCode,omitempty"`

	// The identifier for the shipment that is associated with the return item.
	// Required: true
	AmazonShipmentID *string `json:"amazonShipmentId"`

	// The identifier for the Amazon fulfillment center that processed the return item.
	FulfillmentCenterID string `json:"fulfillmentCenterId,omitempty"`

	// Identifies the return authorization used to return this item. Refer to `ReturnAuthorization`.
	ReturnAuthorizationID string `json:"returnAuthorizationId,omitempty"`

	// An optional comment about the return item.
	ReturnComment string `json:"returnComment,omitempty"`

	// return received condition
	ReturnReceivedCondition ReturnItemDisposition `json:"returnReceivedCondition,omitempty"`

	// The identifier assigned to the item by the seller when the fulfillment order was created.
	// Required: true
	SellerFulfillmentOrderItemID *string `json:"sellerFulfillmentOrderItemId"`

	// An identifier assigned by the seller to the return item.
	// Required: true
	SellerReturnItemID *string `json:"sellerReturnItemId"`

	// The return reason code assigned to the return item by the seller.
	// Required: true
	SellerReturnReasonCode *string `json:"sellerReturnReasonCode"`

	// Indicates if the return item has been processed by an Amazon fulfillment center.
	// Required: true
	Status *FulfillmentReturnItemStatus `json:"status"`

	// Indicates when the status last changed.
	// Required: true
	// Format: date-time
	StatusChangedDate *Timestamp `json:"statusChangedDate"`
}

// Validate validates this return item
func (m *ReturnItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnReceivedCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFulfillmentOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerReturnItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerReturnReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnItem) validateAmazonShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("amazonShipmentId", "body", m.AmazonShipmentID); err != nil {
		return err
	}

	return nil
}

func (m *ReturnItem) validateReturnReceivedCondition(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnReceivedCondition) { // not required
		return nil
	}

	if err := m.ReturnReceivedCondition.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("returnReceivedCondition")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("returnReceivedCondition")
		}
		return err
	}

	return nil
}

func (m *ReturnItem) validateSellerFulfillmentOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerFulfillmentOrderItemId", "body", m.SellerFulfillmentOrderItemID); err != nil {
		return err
	}

	return nil
}

func (m *ReturnItem) validateSellerReturnItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerReturnItemId", "body", m.SellerReturnItemID); err != nil {
		return err
	}

	return nil
}

func (m *ReturnItem) validateSellerReturnReasonCode(formats strfmt.Registry) error {

	if err := validate.Required("sellerReturnReasonCode", "body", m.SellerReturnReasonCode); err != nil {
		return err
	}

	return nil
}

func (m *ReturnItem) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnItem) validateStatusChangedDate(formats strfmt.Registry) error {

	if err := validate.Required("statusChangedDate", "body", m.StatusChangedDate); err != nil {
		return err
	}

	if err := validate.Required("statusChangedDate", "body", m.StatusChangedDate); err != nil {
		return err
	}

	if m.StatusChangedDate != nil {
		if err := m.StatusChangedDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangedDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangedDate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this return item based on the context it is used
func (m *ReturnItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReturnReceivedCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusChangedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReturnItem) contextValidateReturnReceivedCondition(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReturnReceivedCondition.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("returnReceivedCondition")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("returnReceivedCondition")
		}
		return err
	}

	return nil
}

func (m *ReturnItem) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

func (m *ReturnItem) contextValidateStatusChangedDate(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusChangedDate != nil {
		if err := m.StatusChangedDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusChangedDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusChangedDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReturnItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReturnItem) UnmarshalBinary(b []byte) error {
	var res ReturnItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
