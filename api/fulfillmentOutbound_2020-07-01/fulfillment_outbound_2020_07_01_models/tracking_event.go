// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackingEvent Information for tracking package deliveries.
//
// swagger:model TrackingEvent
type TrackingEvent struct {

	// The city where the delivery event took place.
	// Required: true
	EventAddress *TrackingAddress `json:"eventAddress"`

	// The event code for the delivery event.
	// Required: true
	EventCode *EventCode `json:"eventCode"`

	// The date and time that the delivery event took place, in ISO 8601 date time format.
	// Required: true
	// Format: date-time
	EventDate *Timestamp `json:"eventDate"`

	// A description for the corresponding event code.
	// Required: true
	EventDescription *string `json:"eventDescription"`
}

// Validate validates this tracking event
func (m *TrackingEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackingEvent) validateEventAddress(formats strfmt.Registry) error {

	if err := validate.Required("eventAddress", "body", m.EventAddress); err != nil {
		return err
	}

	if m.EventAddress != nil {
		if err := m.EventAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventAddress")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingEvent) validateEventCode(formats strfmt.Registry) error {

	if err := validate.Required("eventCode", "body", m.EventCode); err != nil {
		return err
	}

	if err := validate.Required("eventCode", "body", m.EventCode); err != nil {
		return err
	}

	if m.EventCode != nil {
		if err := m.EventCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventCode")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingEvent) validateEventDate(formats strfmt.Registry) error {

	if err := validate.Required("eventDate", "body", m.EventDate); err != nil {
		return err
	}

	if err := validate.Required("eventDate", "body", m.EventDate); err != nil {
		return err
	}

	if m.EventDate != nil {
		if err := m.EventDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventDate")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingEvent) validateEventDescription(formats strfmt.Registry) error {

	if err := validate.Required("eventDescription", "body", m.EventDescription); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tracking event based on the context it is used
func (m *TrackingEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackingEvent) contextValidateEventAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.EventAddress != nil {
		if err := m.EventAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventAddress")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingEvent) contextValidateEventCode(ctx context.Context, formats strfmt.Registry) error {

	if m.EventCode != nil {
		if err := m.EventCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventCode")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingEvent) contextValidateEventDate(ctx context.Context, formats strfmt.Registry) error {

	if m.EventDate != nil {
		if err := m.EventDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventDate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrackingEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackingEvent) UnmarshalBinary(b []byte) error {
	var res TrackingEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
