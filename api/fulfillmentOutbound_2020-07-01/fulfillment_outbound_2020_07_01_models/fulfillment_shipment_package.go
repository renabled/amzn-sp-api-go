// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentShipmentPackage Package information for a shipment in a fulfillment order.
//
// swagger:model FulfillmentShipmentPackage
type FulfillmentShipmentPackage struct {

	// Identifies the carrier who will deliver the shipment to the recipient.
	// Required: true
	CarrierCode *string `json:"carrierCode"`

	// The estimated arrival date and time of the package. Must be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format.
	// Format: date-time
	EstimatedArrivalDate Timestamp `json:"estimatedArrivalDate,omitempty"`

	// The locker details, if provided can be used to access locker delivery box.
	LockerDetails *LockerDetails `json:"lockerDetails,omitempty"`

	// Identifies a package in a shipment.
	// Required: true
	PackageNumber *int32 `json:"packageNumber"`

	// The tracking number, if provided, can be used to obtain tracking and delivery information.
	TrackingNumber string `json:"trackingNumber,omitempty"`
}

// Validate validates this fulfillment shipment package
func (m *FulfillmentShipmentPackage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedArrivalDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLockerDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentShipmentPackage) validateCarrierCode(formats strfmt.Registry) error {

	if err := validate.Required("carrierCode", "body", m.CarrierCode); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentShipmentPackage) validateEstimatedArrivalDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedArrivalDate) { // not required
		return nil
	}

	if err := m.EstimatedArrivalDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("estimatedArrivalDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("estimatedArrivalDate")
		}
		return err
	}

	return nil
}

func (m *FulfillmentShipmentPackage) validateLockerDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.LockerDetails) { // not required
		return nil
	}

	if m.LockerDetails != nil {
		if err := m.LockerDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockerDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockerDetails")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentShipmentPackage) validatePackageNumber(formats strfmt.Registry) error {

	if err := validate.Required("packageNumber", "body", m.PackageNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fulfillment shipment package based on the context it is used
func (m *FulfillmentShipmentPackage) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEstimatedArrivalDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLockerDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentShipmentPackage) contextValidateEstimatedArrivalDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EstimatedArrivalDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("estimatedArrivalDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("estimatedArrivalDate")
		}
		return err
	}

	return nil
}

func (m *FulfillmentShipmentPackage) contextValidateLockerDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.LockerDetails != nil {
		if err := m.LockerDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockerDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockerDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentShipmentPackage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentShipmentPackage) UnmarshalBinary(b []byte) error {
	var res FulfillmentShipmentPackage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
