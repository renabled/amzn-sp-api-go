// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CurrentStatus The current delivery status of the package.
//
// swagger:model CurrentStatus
type CurrentStatus string

func NewCurrentStatus(value CurrentStatus) *CurrentStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CurrentStatus.
func (m CurrentStatus) Pointer() *CurrentStatus {
	return &m
}

const (

	// CurrentStatusINTRANSIT captures enum value "IN_TRANSIT"
	CurrentStatusINTRANSIT CurrentStatus = "IN_TRANSIT"

	// CurrentStatusDELIVERED captures enum value "DELIVERED"
	CurrentStatusDELIVERED CurrentStatus = "DELIVERED"

	// CurrentStatusRETURNING captures enum value "RETURNING"
	CurrentStatusRETURNING CurrentStatus = "RETURNING"

	// CurrentStatusRETURNED captures enum value "RETURNED"
	CurrentStatusRETURNED CurrentStatus = "RETURNED"

	// CurrentStatusUNDELIVERABLE captures enum value "UNDELIVERABLE"
	CurrentStatusUNDELIVERABLE CurrentStatus = "UNDELIVERABLE"

	// CurrentStatusDELAYED captures enum value "DELAYED"
	CurrentStatusDELAYED CurrentStatus = "DELAYED"

	// CurrentStatusAVAILABLEFORPICKUP captures enum value "AVAILABLE_FOR_PICKUP"
	CurrentStatusAVAILABLEFORPICKUP CurrentStatus = "AVAILABLE_FOR_PICKUP"

	// CurrentStatusCUSTOMERACTION captures enum value "CUSTOMER_ACTION"
	CurrentStatusCUSTOMERACTION CurrentStatus = "CUSTOMER_ACTION"

	// CurrentStatusUNKNOWN captures enum value "UNKNOWN"
	CurrentStatusUNKNOWN CurrentStatus = "UNKNOWN"

	// CurrentStatusOUTFORDELIVERY captures enum value "OUT_FOR_DELIVERY"
	CurrentStatusOUTFORDELIVERY CurrentStatus = "OUT_FOR_DELIVERY"

	// CurrentStatusDELIVERYATTEMPTED captures enum value "DELIVERY_ATTEMPTED"
	CurrentStatusDELIVERYATTEMPTED CurrentStatus = "DELIVERY_ATTEMPTED"

	// CurrentStatusPICKUPSUCCESSFUL captures enum value "PICKUP_SUCCESSFUL"
	CurrentStatusPICKUPSUCCESSFUL CurrentStatus = "PICKUP_SUCCESSFUL"

	// CurrentStatusPICKUPCANCELLED captures enum value "PICKUP_CANCELLED"
	CurrentStatusPICKUPCANCELLED CurrentStatus = "PICKUP_CANCELLED"

	// CurrentStatusPICKUPATTEMPTED captures enum value "PICKUP_ATTEMPTED"
	CurrentStatusPICKUPATTEMPTED CurrentStatus = "PICKUP_ATTEMPTED"

	// CurrentStatusPICKUPSCHEDULED captures enum value "PICKUP_SCHEDULED"
	CurrentStatusPICKUPSCHEDULED CurrentStatus = "PICKUP_SCHEDULED"

	// CurrentStatusRETURNREQUESTACCEPTED captures enum value "RETURN_REQUEST_ACCEPTED"
	CurrentStatusRETURNREQUESTACCEPTED CurrentStatus = "RETURN_REQUEST_ACCEPTED"

	// CurrentStatusREFUNDISSUED captures enum value "REFUND_ISSUED"
	CurrentStatusREFUNDISSUED CurrentStatus = "REFUND_ISSUED"

	// CurrentStatusRETURNRECEIVEDINFC captures enum value "RETURN_RECEIVED_IN_FC"
	CurrentStatusRETURNRECEIVEDINFC CurrentStatus = "RETURN_RECEIVED_IN_FC"
)

// for schema
var currentStatusEnum []interface{}

func init() {
	var res []CurrentStatus
	if err := json.Unmarshal([]byte(`["IN_TRANSIT","DELIVERED","RETURNING","RETURNED","UNDELIVERABLE","DELAYED","AVAILABLE_FOR_PICKUP","CUSTOMER_ACTION","UNKNOWN","OUT_FOR_DELIVERY","DELIVERY_ATTEMPTED","PICKUP_SUCCESSFUL","PICKUP_CANCELLED","PICKUP_ATTEMPTED","PICKUP_SCHEDULED","RETURN_REQUEST_ACCEPTED","REFUND_ISSUED","RETURN_RECEIVED_IN_FC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		currentStatusEnum = append(currentStatusEnum, v)
	}
}

func (m CurrentStatus) validateCurrentStatusEnum(path, location string, value CurrentStatus) error {
	if err := validate.EnumCase(path, location, value, currentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this current status
func (m CurrentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCurrentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this current status based on context it is used
func (m CurrentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
