// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FulfillmentPolicy The `FulfillmentPolicy` value specified when you submitted the `createFulfillmentOrder` operation.
//
// swagger:model FulfillmentPolicy
type FulfillmentPolicy string

func NewFulfillmentPolicy(value FulfillmentPolicy) *FulfillmentPolicy {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FulfillmentPolicy.
func (m FulfillmentPolicy) Pointer() *FulfillmentPolicy {
	return &m
}

const (

	// FulfillmentPolicyFillOrKill captures enum value "FillOrKill"
	FulfillmentPolicyFillOrKill FulfillmentPolicy = "FillOrKill"

	// FulfillmentPolicyFillAll captures enum value "FillAll"
	FulfillmentPolicyFillAll FulfillmentPolicy = "FillAll"

	// FulfillmentPolicyFillAllAvailable captures enum value "FillAllAvailable"
	FulfillmentPolicyFillAllAvailable FulfillmentPolicy = "FillAllAvailable"
)

// for schema
var fulfillmentPolicyEnum []interface{}

func init() {
	var res []FulfillmentPolicy
	if err := json.Unmarshal([]byte(`["FillOrKill","FillAll","FillAllAvailable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentPolicyEnum = append(fulfillmentPolicyEnum, v)
	}
}

func (m FulfillmentPolicy) validateFulfillmentPolicyEnum(path, location string, value FulfillmentPolicy) error {
	if err := validate.EnumCase(path, location, value, fulfillmentPolicyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fulfillment policy
func (m FulfillmentPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFulfillmentPolicyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fulfillment policy based on context it is used
func (m FulfillmentPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
