// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDeliveryOffersRequest The request body schema for the getDeliveryOffers operation.
//
// swagger:model GetDeliveryOffersRequest
type GetDeliveryOffersRequest struct {

	// The product details for the delivery offer.
	// Required: true
	Product *GetDeliveryOffersProduct `json:"product"`

	// The terms for the delivery offer.
	// Required: true
	Terms *GetDeliveryOffersTerms `json:"terms"`
}

// Validate validates this get delivery offers request
func (m *GetDeliveryOffersRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTerms(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDeliveryOffersRequest) validateProduct(formats strfmt.Registry) error {

	if err := validate.Required("product", "body", m.Product); err != nil {
		return err
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *GetDeliveryOffersRequest) validateTerms(formats strfmt.Registry) error {

	if err := validate.Required("terms", "body", m.Terms); err != nil {
		return err
	}

	if m.Terms != nil {
		if err := m.Terms.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terms")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get delivery offers request based on the context it is used
func (m *GetDeliveryOffersRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProduct(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTerms(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDeliveryOffersRequest) contextValidateProduct(ctx context.Context, formats strfmt.Registry) error {

	if m.Product != nil {
		if err := m.Product.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("product")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("product")
			}
			return err
		}
	}

	return nil
}

func (m *GetDeliveryOffersRequest) contextValidateTerms(ctx context.Context, formats strfmt.Registry) error {

	if m.Terms != nil {
		if err := m.Terms.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terms")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terms")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetDeliveryOffersRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDeliveryOffersRequest) UnmarshalBinary(b []byte) error {
	var res GetDeliveryOffersRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
