// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFulfillmentOrderResult get fulfillment order result
//
// swagger:model GetFulfillmentOrderResult
type GetFulfillmentOrderResult struct {

	// fulfillment order
	// Required: true
	FulfillmentOrder *FulfillmentOrder `json:"fulfillmentOrder"`

	// fulfillment order items
	// Required: true
	FulfillmentOrderItems FulfillmentOrderItemList `json:"fulfillmentOrderItems"`

	// fulfillment shipments
	FulfillmentShipments FulfillmentShipmentList `json:"fulfillmentShipments,omitempty"`

	// payment information
	PaymentInformation PaymentInformationList `json:"paymentInformation,omitempty"`

	// return authorizations
	// Required: true
	ReturnAuthorizations ReturnAuthorizationList `json:"returnAuthorizations"`

	// return items
	// Required: true
	ReturnItems ReturnItemList `json:"returnItems"`
}

// Validate validates this get fulfillment order result
func (m *GetFulfillmentOrderResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentOrder(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentOrderItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnAuthorizations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFulfillmentOrderResult) validateFulfillmentOrder(formats strfmt.Registry) error {

	if err := validate.Required("fulfillmentOrder", "body", m.FulfillmentOrder); err != nil {
		return err
	}

	if m.FulfillmentOrder != nil {
		if err := m.FulfillmentOrder.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfillmentOrder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulfillmentOrder")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentOrderResult) validateFulfillmentOrderItems(formats strfmt.Registry) error {

	if err := validate.Required("fulfillmentOrderItems", "body", m.FulfillmentOrderItems); err != nil {
		return err
	}

	if err := m.FulfillmentOrderItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentOrderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentOrderItems")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) validateFulfillmentShipments(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentShipments) { // not required
		return nil
	}

	if err := m.FulfillmentShipments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentShipments")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) validatePaymentInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentInformation) { // not required
		return nil
	}

	if err := m.PaymentInformation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentInformation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentInformation")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) validateReturnAuthorizations(formats strfmt.Registry) error {

	if err := validate.Required("returnAuthorizations", "body", m.ReturnAuthorizations); err != nil {
		return err
	}

	if err := m.ReturnAuthorizations.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("returnAuthorizations")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("returnAuthorizations")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) validateReturnItems(formats strfmt.Registry) error {

	if err := validate.Required("returnItems", "body", m.ReturnItems); err != nil {
		return err
	}

	if err := m.ReturnItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("returnItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("returnItems")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get fulfillment order result based on the context it is used
func (m *GetFulfillmentOrderResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFulfillmentOrder(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentOrderItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnAuthorizations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFulfillmentOrderResult) contextValidateFulfillmentOrder(ctx context.Context, formats strfmt.Registry) error {

	if m.FulfillmentOrder != nil {
		if err := m.FulfillmentOrder.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfillmentOrder")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulfillmentOrder")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentOrderResult) contextValidateFulfillmentOrderItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FulfillmentOrderItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentOrderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentOrderItems")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) contextValidateFulfillmentShipments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FulfillmentShipments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentShipments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentShipments")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) contextValidatePaymentInformation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PaymentInformation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentInformation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentInformation")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) contextValidateReturnAuthorizations(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReturnAuthorizations.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("returnAuthorizations")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("returnAuthorizations")
		}
		return err
	}

	return nil
}

func (m *GetFulfillmentOrderResult) contextValidateReturnItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReturnItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("returnItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("returnItems")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFulfillmentOrderResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFulfillmentOrderResult) UnmarshalBinary(b []byte) error {
	var res GetFulfillmentOrderResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
