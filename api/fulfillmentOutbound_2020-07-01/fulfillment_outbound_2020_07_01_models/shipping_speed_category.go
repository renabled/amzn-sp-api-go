// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShippingSpeedCategory The shipping method used for the fulfillment order. When this value is ScheduledDelivery, choose Ship for the fulfillmentAction. Hold is not a valid fulfillmentAction value when the shippingSpeedCategory value is ScheduledDelivery.
//
// swagger:model ShippingSpeedCategory
type ShippingSpeedCategory string

func NewShippingSpeedCategory(value ShippingSpeedCategory) *ShippingSpeedCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ShippingSpeedCategory.
func (m ShippingSpeedCategory) Pointer() *ShippingSpeedCategory {
	return &m
}

const (

	// ShippingSpeedCategoryStandard captures enum value "Standard"
	ShippingSpeedCategoryStandard ShippingSpeedCategory = "Standard"

	// ShippingSpeedCategoryExpedited captures enum value "Expedited"
	ShippingSpeedCategoryExpedited ShippingSpeedCategory = "Expedited"

	// ShippingSpeedCategoryPriority captures enum value "Priority"
	ShippingSpeedCategoryPriority ShippingSpeedCategory = "Priority"

	// ShippingSpeedCategoryScheduledDelivery captures enum value "ScheduledDelivery"
	ShippingSpeedCategoryScheduledDelivery ShippingSpeedCategory = "ScheduledDelivery"
)

// for schema
var shippingSpeedCategoryEnum []interface{}

func init() {
	var res []ShippingSpeedCategory
	if err := json.Unmarshal([]byte(`["Standard","Expedited","Priority","ScheduledDelivery"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shippingSpeedCategoryEnum = append(shippingSpeedCategoryEnum, v)
	}
}

func (m ShippingSpeedCategory) validateShippingSpeedCategoryEnum(path, location string, value ShippingSpeedCategory) error {
	if err := validate.EnumCase(path, location, value, shippingSpeedCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shipping speed category
func (m ShippingSpeedCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShippingSpeedCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this shipping speed category based on context it is used
func (m ShippingSpeedCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
