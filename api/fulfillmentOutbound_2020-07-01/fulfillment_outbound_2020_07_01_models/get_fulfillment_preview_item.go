// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetFulfillmentPreviewItem Item information for a fulfillment order preview.
//
// swagger:model GetFulfillmentPreviewItem
type GetFulfillmentPreviewItem struct {

	// The monetary value assigned by the seller to this item. This is a required field if this order is an export order.
	PerUnitDeclaredValue *Money `json:"perUnitDeclaredValue,omitempty"`

	// quantity
	// Required: true
	Quantity *Quantity `json:"quantity"`

	// A fulfillment order item identifier that the seller creates to track items in the fulfillment preview.
	// Required: true
	// Max Length: 50
	SellerFulfillmentOrderItemID *string `json:"sellerFulfillmentOrderItemId"`

	// The seller SKU of the item.
	// Required: true
	// Max Length: 50
	SellerSku *string `json:"sellerSku"`
}

// Validate validates this get fulfillment preview item
func (m *GetFulfillmentPreviewItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePerUnitDeclaredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerFulfillmentOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFulfillmentPreviewItem) validatePerUnitDeclaredValue(formats strfmt.Registry) error {
	if swag.IsZero(m.PerUnitDeclaredValue) { // not required
		return nil
	}

	if m.PerUnitDeclaredValue != nil {
		if err := m.PerUnitDeclaredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perUnitDeclaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perUnitDeclaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentPreviewItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if m.Quantity != nil {
		if err := m.Quantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantity")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentPreviewItem) validateSellerFulfillmentOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("sellerFulfillmentOrderItemId", "body", m.SellerFulfillmentOrderItemID); err != nil {
		return err
	}

	if err := validate.MaxLength("sellerFulfillmentOrderItemId", "body", *m.SellerFulfillmentOrderItemID, 50); err != nil {
		return err
	}

	return nil
}

func (m *GetFulfillmentPreviewItem) validateSellerSku(formats strfmt.Registry) error {

	if err := validate.Required("sellerSku", "body", m.SellerSku); err != nil {
		return err
	}

	if err := validate.MaxLength("sellerSku", "body", *m.SellerSku, 50); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get fulfillment preview item based on the context it is used
func (m *GetFulfillmentPreviewItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePerUnitDeclaredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetFulfillmentPreviewItem) contextValidatePerUnitDeclaredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.PerUnitDeclaredValue != nil {
		if err := m.PerUnitDeclaredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("perUnitDeclaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("perUnitDeclaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *GetFulfillmentPreviewItem) contextValidateQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.Quantity != nil {
		if err := m.Quantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetFulfillmentPreviewItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetFulfillmentPreviewItem) UnmarshalBinary(b []byte) error {
	var res GetFulfillmentPreviewItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
