// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CODSettings The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
//
// swagger:model CODSettings
type CODSettings struct {

	// The amount of the COD charge to be collected from the recipient for a COD order.
	CodCharge *Money `json:"codCharge,omitempty"`

	// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
	CodChargeTax *Money `json:"codChargeTax,omitempty"`

	// When true, this fulfillment order requires a COD (Cash On Delivery) payment.
	// Required: true
	IsCodRequired *bool `json:"isCodRequired"`

	// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
	ShippingCharge *Money `json:"shippingCharge,omitempty"`

	// The amount of the tax on the shipping charge to be collected from the recipient for a COD order.
	ShippingChargeTax *Money `json:"shippingChargeTax,omitempty"`
}

// Validate validates this c o d settings
func (m *CODSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCodCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCodChargeTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsCodRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingChargeTax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CODSettings) validateCodCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.CodCharge) { // not required
		return nil
	}

	if m.CodCharge != nil {
		if err := m.CodCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("codCharge")
			}
			return err
		}
	}

	return nil
}

func (m *CODSettings) validateCodChargeTax(formats strfmt.Registry) error {
	if swag.IsZero(m.CodChargeTax) { // not required
		return nil
	}

	if m.CodChargeTax != nil {
		if err := m.CodChargeTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codChargeTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("codChargeTax")
			}
			return err
		}
	}

	return nil
}

func (m *CODSettings) validateIsCodRequired(formats strfmt.Registry) error {

	if err := validate.Required("isCodRequired", "body", m.IsCodRequired); err != nil {
		return err
	}

	return nil
}

func (m *CODSettings) validateShippingCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingCharge) { // not required
		return nil
	}

	if m.ShippingCharge != nil {
		if err := m.ShippingCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingCharge")
			}
			return err
		}
	}

	return nil
}

func (m *CODSettings) validateShippingChargeTax(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingChargeTax) { // not required
		return nil
	}

	if m.ShippingChargeTax != nil {
		if err := m.ShippingChargeTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingChargeTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingChargeTax")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this c o d settings based on the context it is used
func (m *CODSettings) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCodCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCodChargeTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingChargeTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CODSettings) contextValidateCodCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.CodCharge != nil {
		if err := m.CodCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("codCharge")
			}
			return err
		}
	}

	return nil
}

func (m *CODSettings) contextValidateCodChargeTax(ctx context.Context, formats strfmt.Registry) error {

	if m.CodChargeTax != nil {
		if err := m.CodChargeTax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("codChargeTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("codChargeTax")
			}
			return err
		}
	}

	return nil
}

func (m *CODSettings) contextValidateShippingCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingCharge != nil {
		if err := m.ShippingCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingCharge")
			}
			return err
		}
	}

	return nil
}

func (m *CODSettings) contextValidateShippingChargeTax(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingChargeTax != nil {
		if err := m.ShippingChargeTax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingChargeTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingChargeTax")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CODSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CODSettings) UnmarshalBinary(b []byte) error {
	var res CODSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
