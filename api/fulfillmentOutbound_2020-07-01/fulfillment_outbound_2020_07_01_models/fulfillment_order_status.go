// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FulfillmentOrderStatus The current status of the fulfillment order.
//
// swagger:model FulfillmentOrderStatus
type FulfillmentOrderStatus string

func NewFulfillmentOrderStatus(value FulfillmentOrderStatus) *FulfillmentOrderStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FulfillmentOrderStatus.
func (m FulfillmentOrderStatus) Pointer() *FulfillmentOrderStatus {
	return &m
}

const (

	// FulfillmentOrderStatusNew captures enum value "New"
	FulfillmentOrderStatusNew FulfillmentOrderStatus = "New"

	// FulfillmentOrderStatusReceived captures enum value "Received"
	FulfillmentOrderStatusReceived FulfillmentOrderStatus = "Received"

	// FulfillmentOrderStatusPlanning captures enum value "Planning"
	FulfillmentOrderStatusPlanning FulfillmentOrderStatus = "Planning"

	// FulfillmentOrderStatusProcessing captures enum value "Processing"
	FulfillmentOrderStatusProcessing FulfillmentOrderStatus = "Processing"

	// FulfillmentOrderStatusCancelled captures enum value "Cancelled"
	FulfillmentOrderStatusCancelled FulfillmentOrderStatus = "Cancelled"

	// FulfillmentOrderStatusComplete captures enum value "Complete"
	FulfillmentOrderStatusComplete FulfillmentOrderStatus = "Complete"

	// FulfillmentOrderStatusCompletePartialled captures enum value "CompletePartialled"
	FulfillmentOrderStatusCompletePartialled FulfillmentOrderStatus = "CompletePartialled"

	// FulfillmentOrderStatusUnfulfillable captures enum value "Unfulfillable"
	FulfillmentOrderStatusUnfulfillable FulfillmentOrderStatus = "Unfulfillable"

	// FulfillmentOrderStatusInvalid captures enum value "Invalid"
	FulfillmentOrderStatusInvalid FulfillmentOrderStatus = "Invalid"
)

// for schema
var fulfillmentOrderStatusEnum []interface{}

func init() {
	var res []FulfillmentOrderStatus
	if err := json.Unmarshal([]byte(`["New","Received","Planning","Processing","Cancelled","Complete","CompletePartialled","Unfulfillable","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentOrderStatusEnum = append(fulfillmentOrderStatusEnum, v)
	}
}

func (m FulfillmentOrderStatus) validateFulfillmentOrderStatusEnum(path, location string, value FulfillmentOrderStatus) error {
	if err := validate.EnumCase(path, location, value, fulfillmentOrderStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fulfillment order status
func (m FulfillmentOrderStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFulfillmentOrderStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fulfillment order status based on context it is used
func (m FulfillmentOrderStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
