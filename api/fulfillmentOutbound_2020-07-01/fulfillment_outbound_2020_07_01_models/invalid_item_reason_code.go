// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InvalidItemReasonCode A code for why the item is invalid for return.
//
// swagger:model InvalidItemReasonCode
type InvalidItemReasonCode string

func NewInvalidItemReasonCode(value InvalidItemReasonCode) *InvalidItemReasonCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InvalidItemReasonCode.
func (m InvalidItemReasonCode) Pointer() *InvalidItemReasonCode {
	return &m
}

const (

	// InvalidItemReasonCodeInvalidValues captures enum value "InvalidValues"
	InvalidItemReasonCodeInvalidValues InvalidItemReasonCode = "InvalidValues"

	// InvalidItemReasonCodeDuplicateRequest captures enum value "DuplicateRequest"
	InvalidItemReasonCodeDuplicateRequest InvalidItemReasonCode = "DuplicateRequest"

	// InvalidItemReasonCodeNoCompletedShipItems captures enum value "NoCompletedShipItems"
	InvalidItemReasonCodeNoCompletedShipItems InvalidItemReasonCode = "NoCompletedShipItems"

	// InvalidItemReasonCodeNoReturnableQuantity captures enum value "NoReturnableQuantity"
	InvalidItemReasonCodeNoReturnableQuantity InvalidItemReasonCode = "NoReturnableQuantity"
)

// for schema
var invalidItemReasonCodeEnum []interface{}

func init() {
	var res []InvalidItemReasonCode
	if err := json.Unmarshal([]byte(`["InvalidValues","DuplicateRequest","NoCompletedShipItems","NoReturnableQuantity"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		invalidItemReasonCodeEnum = append(invalidItemReasonCodeEnum, v)
	}
}

func (m InvalidItemReasonCode) validateInvalidItemReasonCodeEnum(path, location string, value InvalidItemReasonCode) error {
	if err := validate.EnumCase(path, location, value, invalidItemReasonCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this invalid item reason code
func (m InvalidItemReasonCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInvalidItemReasonCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this invalid item reason code based on context it is used
func (m InvalidItemReasonCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
