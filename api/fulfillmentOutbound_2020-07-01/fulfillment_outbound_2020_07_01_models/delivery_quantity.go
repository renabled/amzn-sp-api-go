// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_outbound_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeliveryQuantity A quantity based on unit of measure.
//
// swagger:model DeliveryQuantity
type DeliveryQuantity struct {

	// The amount of a product in the associated unit of measure.
	// Required: true
	Amount *Decimal `json:"amount"`

	// The unit of measure for the amount.
	// Required: true
	// Enum: [Each]
	UnitOfMeasure *string `json:"unitOfMeasure"`
}

// Validate validates this delivery quantity
func (m *DeliveryQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasure(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryQuantity) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

var deliveryQuantityTypeUnitOfMeasurePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Each"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deliveryQuantityTypeUnitOfMeasurePropEnum = append(deliveryQuantityTypeUnitOfMeasurePropEnum, v)
	}
}

const (

	// DeliveryQuantityUnitOfMeasureEach captures enum value "Each"
	DeliveryQuantityUnitOfMeasureEach string = "Each"
)

// prop value enum
func (m *DeliveryQuantity) validateUnitOfMeasureEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, deliveryQuantityTypeUnitOfMeasurePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DeliveryQuantity) validateUnitOfMeasure(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasure", "body", m.UnitOfMeasure); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitOfMeasureEnum("unitOfMeasure", "body", *m.UnitOfMeasure); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this delivery quantity based on the context it is used
func (m *DeliveryQuantity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryQuantity) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeliveryQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeliveryQuantity) UnmarshalBinary(b []byte) error {
	var res DeliveryQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
