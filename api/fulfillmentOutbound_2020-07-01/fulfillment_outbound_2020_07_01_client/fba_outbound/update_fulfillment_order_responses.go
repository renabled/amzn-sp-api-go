// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// UpdateFulfillmentOrderReader is a Reader for the UpdateFulfillmentOrder structure.
type UpdateFulfillmentOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateFulfillmentOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateFulfillmentOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateFulfillmentOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUpdateFulfillmentOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateFulfillmentOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateFulfillmentOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateFulfillmentOrderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateFulfillmentOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateFulfillmentOrderServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateFulfillmentOrderOK creates a UpdateFulfillmentOrderOK with default headers values
func NewUpdateFulfillmentOrderOK() *UpdateFulfillmentOrderOK {
	return &UpdateFulfillmentOrderOK{}
}

/* UpdateFulfillmentOrderOK describes a response with status code 200, with default header values.

Success.
*/
type UpdateFulfillmentOrderOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderOK) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderOK  %+v", 200, o.Payload)
}
func (o *UpdateFulfillmentOrderOK) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderBadRequest creates a UpdateFulfillmentOrderBadRequest with default headers values
func NewUpdateFulfillmentOrderBadRequest() *UpdateFulfillmentOrderBadRequest {
	return &UpdateFulfillmentOrderBadRequest{}
}

/* UpdateFulfillmentOrderBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateFulfillmentOrderBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderBadRequest) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateFulfillmentOrderBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderUnauthorized creates a UpdateFulfillmentOrderUnauthorized with default headers values
func NewUpdateFulfillmentOrderUnauthorized() *UpdateFulfillmentOrderUnauthorized {
	return &UpdateFulfillmentOrderUnauthorized{}
}

/* UpdateFulfillmentOrderUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type UpdateFulfillmentOrderUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderUnauthorized  %+v", 401, o.Payload)
}
func (o *UpdateFulfillmentOrderUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderForbidden creates a UpdateFulfillmentOrderForbidden with default headers values
func NewUpdateFulfillmentOrderForbidden() *UpdateFulfillmentOrderForbidden {
	return &UpdateFulfillmentOrderForbidden{}
}

/* UpdateFulfillmentOrderForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateFulfillmentOrderForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderForbidden) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderForbidden  %+v", 403, o.Payload)
}
func (o *UpdateFulfillmentOrderForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderNotFound creates a UpdateFulfillmentOrderNotFound with default headers values
func NewUpdateFulfillmentOrderNotFound() *UpdateFulfillmentOrderNotFound {
	return &UpdateFulfillmentOrderNotFound{}
}

/* UpdateFulfillmentOrderNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type UpdateFulfillmentOrderNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderNotFound) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderNotFound  %+v", 404, o.Payload)
}
func (o *UpdateFulfillmentOrderNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderTooManyRequests creates a UpdateFulfillmentOrderTooManyRequests with default headers values
func NewUpdateFulfillmentOrderTooManyRequests() *UpdateFulfillmentOrderTooManyRequests {
	return &UpdateFulfillmentOrderTooManyRequests{}
}

/* UpdateFulfillmentOrderTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateFulfillmentOrderTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderTooManyRequests  %+v", 429, o.Payload)
}
func (o *UpdateFulfillmentOrderTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderInternalServerError creates a UpdateFulfillmentOrderInternalServerError with default headers values
func NewUpdateFulfillmentOrderInternalServerError() *UpdateFulfillmentOrderInternalServerError {
	return &UpdateFulfillmentOrderInternalServerError{}
}

/* UpdateFulfillmentOrderInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateFulfillmentOrderInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateFulfillmentOrderInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateFulfillmentOrderServiceUnavailable creates a UpdateFulfillmentOrderServiceUnavailable with default headers values
func NewUpdateFulfillmentOrderServiceUnavailable() *UpdateFulfillmentOrderServiceUnavailable {
	return &UpdateFulfillmentOrderServiceUnavailable{}
}

/* UpdateFulfillmentOrderServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateFulfillmentOrderServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse
}

func (o *UpdateFulfillmentOrderServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}][%d] updateFulfillmentOrderServiceUnavailable  %+v", 503, o.Payload)
}
func (o *UpdateFulfillmentOrderServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse {
	return o.Payload
}

func (o *UpdateFulfillmentOrderServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.UpdateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
