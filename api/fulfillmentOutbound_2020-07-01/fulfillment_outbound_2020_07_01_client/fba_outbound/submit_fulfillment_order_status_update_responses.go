// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// SubmitFulfillmentOrderStatusUpdateReader is a Reader for the SubmitFulfillmentOrderStatusUpdate structure.
type SubmitFulfillmentOrderStatusUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitFulfillmentOrderStatusUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSubmitFulfillmentOrderStatusUpdateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitFulfillmentOrderStatusUpdateBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSubmitFulfillmentOrderStatusUpdateUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitFulfillmentOrderStatusUpdateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitFulfillmentOrderStatusUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSubmitFulfillmentOrderStatusUpdateTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitFulfillmentOrderStatusUpdateInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSubmitFulfillmentOrderStatusUpdateServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitFulfillmentOrderStatusUpdateOK creates a SubmitFulfillmentOrderStatusUpdateOK with default headers values
func NewSubmitFulfillmentOrderStatusUpdateOK() *SubmitFulfillmentOrderStatusUpdateOK {
	return &SubmitFulfillmentOrderStatusUpdateOK{}
}

/*
SubmitFulfillmentOrderStatusUpdateOK describes a response with status code 200, with default header values.

Success.
*/
type SubmitFulfillmentOrderStatusUpdateOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update o k response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this submit fulfillment order status update o k response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update o k response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit fulfillment order status update o k response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this submit fulfillment order status update o k response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateOK) IsCode(code int) bool {
	return code == 200
}

func (o *SubmitFulfillmentOrderStatusUpdateOK) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateOK  %+v", 200, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateOK) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateOK  %+v", 200, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateOK) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateBadRequest creates a SubmitFulfillmentOrderStatusUpdateBadRequest with default headers values
func NewSubmitFulfillmentOrderStatusUpdateBadRequest() *SubmitFulfillmentOrderStatusUpdateBadRequest {
	return &SubmitFulfillmentOrderStatusUpdateBadRequest{}
}

/*
SubmitFulfillmentOrderStatusUpdateBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SubmitFulfillmentOrderStatusUpdateBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update bad request response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update bad request response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update bad request response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit fulfillment order status update bad request response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this submit fulfillment order status update bad request response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateBadRequest  %+v", 400, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateUnauthorized creates a SubmitFulfillmentOrderStatusUpdateUnauthorized with default headers values
func NewSubmitFulfillmentOrderStatusUpdateUnauthorized() *SubmitFulfillmentOrderStatusUpdateUnauthorized {
	return &SubmitFulfillmentOrderStatusUpdateUnauthorized{}
}

/*
SubmitFulfillmentOrderStatusUpdateUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type SubmitFulfillmentOrderStatusUpdateUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update unauthorized response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update unauthorized response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update unauthorized response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit fulfillment order status update unauthorized response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this submit fulfillment order status update unauthorized response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateUnauthorized  %+v", 401, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateForbidden creates a SubmitFulfillmentOrderStatusUpdateForbidden with default headers values
func NewSubmitFulfillmentOrderStatusUpdateForbidden() *SubmitFulfillmentOrderStatusUpdateForbidden {
	return &SubmitFulfillmentOrderStatusUpdateForbidden{}
}

/*
SubmitFulfillmentOrderStatusUpdateForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SubmitFulfillmentOrderStatusUpdateForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update forbidden response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update forbidden response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update forbidden response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit fulfillment order status update forbidden response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this submit fulfillment order status update forbidden response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SubmitFulfillmentOrderStatusUpdateForbidden) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateForbidden) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateForbidden  %+v", 403, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateNotFound creates a SubmitFulfillmentOrderStatusUpdateNotFound with default headers values
func NewSubmitFulfillmentOrderStatusUpdateNotFound() *SubmitFulfillmentOrderStatusUpdateNotFound {
	return &SubmitFulfillmentOrderStatusUpdateNotFound{}
}

/*
SubmitFulfillmentOrderStatusUpdateNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type SubmitFulfillmentOrderStatusUpdateNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update not found response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update not found response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update not found response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit fulfillment order status update not found response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this submit fulfillment order status update not found response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SubmitFulfillmentOrderStatusUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateNotFound) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateNotFound  %+v", 404, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateTooManyRequests creates a SubmitFulfillmentOrderStatusUpdateTooManyRequests with default headers values
func NewSubmitFulfillmentOrderStatusUpdateTooManyRequests() *SubmitFulfillmentOrderStatusUpdateTooManyRequests {
	return &SubmitFulfillmentOrderStatusUpdateTooManyRequests{}
}

/*
SubmitFulfillmentOrderStatusUpdateTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SubmitFulfillmentOrderStatusUpdateTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update too many requests response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update too many requests response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update too many requests response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this submit fulfillment order status update too many requests response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this submit fulfillment order status update too many requests response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateTooManyRequests  %+v", 429, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateInternalServerError creates a SubmitFulfillmentOrderStatusUpdateInternalServerError with default headers values
func NewSubmitFulfillmentOrderStatusUpdateInternalServerError() *SubmitFulfillmentOrderStatusUpdateInternalServerError {
	return &SubmitFulfillmentOrderStatusUpdateInternalServerError{}
}

/*
SubmitFulfillmentOrderStatusUpdateInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SubmitFulfillmentOrderStatusUpdateInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update internal server error response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update internal server error response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update internal server error response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit fulfillment order status update internal server error response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this submit fulfillment order status update internal server error response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateInternalServerError  %+v", 500, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitFulfillmentOrderStatusUpdateServiceUnavailable creates a SubmitFulfillmentOrderStatusUpdateServiceUnavailable with default headers values
func NewSubmitFulfillmentOrderStatusUpdateServiceUnavailable() *SubmitFulfillmentOrderStatusUpdateServiceUnavailable {
	return &SubmitFulfillmentOrderStatusUpdateServiceUnavailable{}
}

/*
SubmitFulfillmentOrderStatusUpdateServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SubmitFulfillmentOrderStatusUpdateServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse
}

// IsSuccess returns true when this submit fulfillment order status update service unavailable response has a 2xx status code
func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this submit fulfillment order status update service unavailable response has a 3xx status code
func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this submit fulfillment order status update service unavailable response has a 4xx status code
func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this submit fulfillment order status update service unavailable response has a 5xx status code
func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this submit fulfillment order status update service unavailable response a status code equal to that given
func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /fba/outbound/2020-07-01/fulfillmentOrders/{sellerFulfillmentOrderId}/status][%d] submitFulfillmentOrderStatusUpdateServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse {
	return o.Payload
}

func (o *SubmitFulfillmentOrderStatusUpdateServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.SubmitFulfillmentOrderStatusUpdateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
