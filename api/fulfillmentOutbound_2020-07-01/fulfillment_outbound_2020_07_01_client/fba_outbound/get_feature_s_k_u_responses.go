// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// GetFeatureSKUReader is a Reader for the GetFeatureSKU structure.
type GetFeatureSKUReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeatureSKUReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeatureSKUOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFeatureSKUBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFeatureSKUUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeatureSKUForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeatureSKUNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFeatureSKUTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFeatureSKUInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFeatureSKUServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFeatureSKUOK creates a GetFeatureSKUOK with default headers values
func NewGetFeatureSKUOK() *GetFeatureSKUOK {
	return &GetFeatureSKUOK{}
}

/* GetFeatureSKUOK describes a response with status code 200, with default header values.

Success.
*/
type GetFeatureSKUOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUOK) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUOK  %+v", 200, o.Payload)
}
func (o *GetFeatureSKUOK) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUBadRequest creates a GetFeatureSKUBadRequest with default headers values
func NewGetFeatureSKUBadRequest() *GetFeatureSKUBadRequest {
	return &GetFeatureSKUBadRequest{}
}

/* GetFeatureSKUBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetFeatureSKUBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUBadRequest  %+v", 400, o.Payload)
}
func (o *GetFeatureSKUBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUUnauthorized creates a GetFeatureSKUUnauthorized with default headers values
func NewGetFeatureSKUUnauthorized() *GetFeatureSKUUnauthorized {
	return &GetFeatureSKUUnauthorized{}
}

/* GetFeatureSKUUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetFeatureSKUUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUUnauthorized  %+v", 401, o.Payload)
}
func (o *GetFeatureSKUUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUForbidden creates a GetFeatureSKUForbidden with default headers values
func NewGetFeatureSKUForbidden() *GetFeatureSKUForbidden {
	return &GetFeatureSKUForbidden{}
}

/* GetFeatureSKUForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetFeatureSKUForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUForbidden  %+v", 403, o.Payload)
}
func (o *GetFeatureSKUForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUNotFound creates a GetFeatureSKUNotFound with default headers values
func NewGetFeatureSKUNotFound() *GetFeatureSKUNotFound {
	return &GetFeatureSKUNotFound{}
}

/* GetFeatureSKUNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetFeatureSKUNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUNotFound  %+v", 404, o.Payload)
}
func (o *GetFeatureSKUNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUTooManyRequests creates a GetFeatureSKUTooManyRequests with default headers values
func NewGetFeatureSKUTooManyRequests() *GetFeatureSKUTooManyRequests {
	return &GetFeatureSKUTooManyRequests{}
}

/* GetFeatureSKUTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetFeatureSKUTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetFeatureSKUTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUInternalServerError creates a GetFeatureSKUInternalServerError with default headers values
func NewGetFeatureSKUInternalServerError() *GetFeatureSKUInternalServerError {
	return &GetFeatureSKUInternalServerError{}
}

/* GetFeatureSKUInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetFeatureSKUInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUInternalServerError  %+v", 500, o.Payload)
}
func (o *GetFeatureSKUInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureSKUServiceUnavailable creates a GetFeatureSKUServiceUnavailable with default headers values
func NewGetFeatureSKUServiceUnavailable() *GetFeatureSKUServiceUnavailable {
	return &GetFeatureSKUServiceUnavailable{}
}

/* GetFeatureSKUServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetFeatureSKUServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse
}

func (o *GetFeatureSKUServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}/{sellerSku}][%d] getFeatureSKUServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetFeatureSKUServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse {
	return o.Payload
}

func (o *GetFeatureSKUServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureSkuResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
