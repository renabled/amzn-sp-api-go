// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// DeliveryOffersReader is a Reader for the DeliveryOffers structure.
type DeliveryOffersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeliveryOffersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeliveryOffersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeliveryOffersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDeliveryOffersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeliveryOffersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeliveryOffersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeliveryOffersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeliveryOffersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeliveryOffersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeliveryOffersOK creates a DeliveryOffersOK with default headers values
func NewDeliveryOffersOK() *DeliveryOffersOK {
	return &DeliveryOffersOK{}
}

/*
DeliveryOffersOK describes a response with status code 200, with default header values.

Success.
*/
type DeliveryOffersOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers o k response has a 2xx status code
func (o *DeliveryOffersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delivery offers o k response has a 3xx status code
func (o *DeliveryOffersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers o k response has a 4xx status code
func (o *DeliveryOffersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delivery offers o k response has a 5xx status code
func (o *DeliveryOffersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delivery offers o k response a status code equal to that given
func (o *DeliveryOffersOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeliveryOffersOK) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersOK  %+v", 200, o.Payload)
}

func (o *DeliveryOffersOK) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersOK  %+v", 200, o.Payload)
}

func (o *DeliveryOffersOK) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersBadRequest creates a DeliveryOffersBadRequest with default headers values
func NewDeliveryOffersBadRequest() *DeliveryOffersBadRequest {
	return &DeliveryOffersBadRequest{}
}

/*
DeliveryOffersBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type DeliveryOffersBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers bad request response has a 2xx status code
func (o *DeliveryOffersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers bad request response has a 3xx status code
func (o *DeliveryOffersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers bad request response has a 4xx status code
func (o *DeliveryOffersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delivery offers bad request response has a 5xx status code
func (o *DeliveryOffersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delivery offers bad request response a status code equal to that given
func (o *DeliveryOffersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeliveryOffersBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersBadRequest  %+v", 400, o.Payload)
}

func (o *DeliveryOffersBadRequest) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersBadRequest  %+v", 400, o.Payload)
}

func (o *DeliveryOffersBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersUnauthorized creates a DeliveryOffersUnauthorized with default headers values
func NewDeliveryOffersUnauthorized() *DeliveryOffersUnauthorized {
	return &DeliveryOffersUnauthorized{}
}

/*
DeliveryOffersUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type DeliveryOffersUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers unauthorized response has a 2xx status code
func (o *DeliveryOffersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers unauthorized response has a 3xx status code
func (o *DeliveryOffersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers unauthorized response has a 4xx status code
func (o *DeliveryOffersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this delivery offers unauthorized response has a 5xx status code
func (o *DeliveryOffersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this delivery offers unauthorized response a status code equal to that given
func (o *DeliveryOffersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DeliveryOffersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersUnauthorized  %+v", 401, o.Payload)
}

func (o *DeliveryOffersUnauthorized) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersUnauthorized  %+v", 401, o.Payload)
}

func (o *DeliveryOffersUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersForbidden creates a DeliveryOffersForbidden with default headers values
func NewDeliveryOffersForbidden() *DeliveryOffersForbidden {
	return &DeliveryOffersForbidden{}
}

/*
DeliveryOffersForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type DeliveryOffersForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers forbidden response has a 2xx status code
func (o *DeliveryOffersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers forbidden response has a 3xx status code
func (o *DeliveryOffersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers forbidden response has a 4xx status code
func (o *DeliveryOffersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delivery offers forbidden response has a 5xx status code
func (o *DeliveryOffersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delivery offers forbidden response a status code equal to that given
func (o *DeliveryOffersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeliveryOffersForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersForbidden  %+v", 403, o.Payload)
}

func (o *DeliveryOffersForbidden) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersForbidden  %+v", 403, o.Payload)
}

func (o *DeliveryOffersForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersNotFound creates a DeliveryOffersNotFound with default headers values
func NewDeliveryOffersNotFound() *DeliveryOffersNotFound {
	return &DeliveryOffersNotFound{}
}

/*
DeliveryOffersNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type DeliveryOffersNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers not found response has a 2xx status code
func (o *DeliveryOffersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers not found response has a 3xx status code
func (o *DeliveryOffersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers not found response has a 4xx status code
func (o *DeliveryOffersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delivery offers not found response has a 5xx status code
func (o *DeliveryOffersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delivery offers not found response a status code equal to that given
func (o *DeliveryOffersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeliveryOffersNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersNotFound  %+v", 404, o.Payload)
}

func (o *DeliveryOffersNotFound) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersNotFound  %+v", 404, o.Payload)
}

func (o *DeliveryOffersNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersTooManyRequests creates a DeliveryOffersTooManyRequests with default headers values
func NewDeliveryOffersTooManyRequests() *DeliveryOffersTooManyRequests {
	return &DeliveryOffersTooManyRequests{}
}

/*
DeliveryOffersTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type DeliveryOffersTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers too many requests response has a 2xx status code
func (o *DeliveryOffersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers too many requests response has a 3xx status code
func (o *DeliveryOffersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers too many requests response has a 4xx status code
func (o *DeliveryOffersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delivery offers too many requests response has a 5xx status code
func (o *DeliveryOffersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delivery offers too many requests response a status code equal to that given
func (o *DeliveryOffersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeliveryOffersTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeliveryOffersTooManyRequests) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeliveryOffersTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersInternalServerError creates a DeliveryOffersInternalServerError with default headers values
func NewDeliveryOffersInternalServerError() *DeliveryOffersInternalServerError {
	return &DeliveryOffersInternalServerError{}
}

/*
DeliveryOffersInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type DeliveryOffersInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers internal server error response has a 2xx status code
func (o *DeliveryOffersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers internal server error response has a 3xx status code
func (o *DeliveryOffersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers internal server error response has a 4xx status code
func (o *DeliveryOffersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delivery offers internal server error response has a 5xx status code
func (o *DeliveryOffersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delivery offers internal server error response a status code equal to that given
func (o *DeliveryOffersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeliveryOffersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersInternalServerError  %+v", 500, o.Payload)
}

func (o *DeliveryOffersInternalServerError) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersInternalServerError  %+v", 500, o.Payload)
}

func (o *DeliveryOffersInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeliveryOffersServiceUnavailable creates a DeliveryOffersServiceUnavailable with default headers values
func NewDeliveryOffersServiceUnavailable() *DeliveryOffersServiceUnavailable {
	return &DeliveryOffersServiceUnavailable{}
}

/*
DeliveryOffersServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type DeliveryOffersServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse
}

// IsSuccess returns true when this delivery offers service unavailable response has a 2xx status code
func (o *DeliveryOffersServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delivery offers service unavailable response has a 3xx status code
func (o *DeliveryOffersServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delivery offers service unavailable response has a 4xx status code
func (o *DeliveryOffersServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delivery offers service unavailable response has a 5xx status code
func (o *DeliveryOffersServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delivery offers service unavailable response a status code equal to that given
func (o *DeliveryOffersServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeliveryOffersServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeliveryOffersServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/deliveryOffers][%d] deliveryOffersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeliveryOffersServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse {
	return o.Payload
}

func (o *DeliveryOffersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetDeliveryOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
