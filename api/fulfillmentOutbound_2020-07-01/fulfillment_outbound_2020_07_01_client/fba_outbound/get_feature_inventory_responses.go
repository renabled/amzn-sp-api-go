// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// GetFeatureInventoryReader is a Reader for the GetFeatureInventory structure.
type GetFeatureInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeatureInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeatureInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFeatureInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFeatureInventoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeatureInventoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeatureInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFeatureInventoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFeatureInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFeatureInventoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFeatureInventoryOK creates a GetFeatureInventoryOK with default headers values
func NewGetFeatureInventoryOK() *GetFeatureInventoryOK {
	return &GetFeatureInventoryOK{}
}

/*
GetFeatureInventoryOK describes a response with status code 200, with default header values.

Success.
*/
type GetFeatureInventoryOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory o k response has a 2xx status code
func (o *GetFeatureInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get feature inventory o k response has a 3xx status code
func (o *GetFeatureInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory o k response has a 4xx status code
func (o *GetFeatureInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feature inventory o k response has a 5xx status code
func (o *GetFeatureInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature inventory o k response a status code equal to that given
func (o *GetFeatureInventoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFeatureInventoryOK) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryOK  %+v", 200, o.Payload)
}

func (o *GetFeatureInventoryOK) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryOK  %+v", 200, o.Payload)
}

func (o *GetFeatureInventoryOK) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryBadRequest creates a GetFeatureInventoryBadRequest with default headers values
func NewGetFeatureInventoryBadRequest() *GetFeatureInventoryBadRequest {
	return &GetFeatureInventoryBadRequest{}
}

/*
GetFeatureInventoryBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetFeatureInventoryBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory bad request response has a 2xx status code
func (o *GetFeatureInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory bad request response has a 3xx status code
func (o *GetFeatureInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory bad request response has a 4xx status code
func (o *GetFeatureInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature inventory bad request response has a 5xx status code
func (o *GetFeatureInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature inventory bad request response a status code equal to that given
func (o *GetFeatureInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetFeatureInventoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeatureInventoryBadRequest) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeatureInventoryBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryUnauthorized creates a GetFeatureInventoryUnauthorized with default headers values
func NewGetFeatureInventoryUnauthorized() *GetFeatureInventoryUnauthorized {
	return &GetFeatureInventoryUnauthorized{}
}

/*
GetFeatureInventoryUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetFeatureInventoryUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory unauthorized response has a 2xx status code
func (o *GetFeatureInventoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory unauthorized response has a 3xx status code
func (o *GetFeatureInventoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory unauthorized response has a 4xx status code
func (o *GetFeatureInventoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature inventory unauthorized response has a 5xx status code
func (o *GetFeatureInventoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature inventory unauthorized response a status code equal to that given
func (o *GetFeatureInventoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetFeatureInventoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeatureInventoryUnauthorized) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeatureInventoryUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryForbidden creates a GetFeatureInventoryForbidden with default headers values
func NewGetFeatureInventoryForbidden() *GetFeatureInventoryForbidden {
	return &GetFeatureInventoryForbidden{}
}

/*
GetFeatureInventoryForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetFeatureInventoryForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory forbidden response has a 2xx status code
func (o *GetFeatureInventoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory forbidden response has a 3xx status code
func (o *GetFeatureInventoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory forbidden response has a 4xx status code
func (o *GetFeatureInventoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature inventory forbidden response has a 5xx status code
func (o *GetFeatureInventoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature inventory forbidden response a status code equal to that given
func (o *GetFeatureInventoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFeatureInventoryForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryForbidden  %+v", 403, o.Payload)
}

func (o *GetFeatureInventoryForbidden) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryForbidden  %+v", 403, o.Payload)
}

func (o *GetFeatureInventoryForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryNotFound creates a GetFeatureInventoryNotFound with default headers values
func NewGetFeatureInventoryNotFound() *GetFeatureInventoryNotFound {
	return &GetFeatureInventoryNotFound{}
}

/*
GetFeatureInventoryNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetFeatureInventoryNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory not found response has a 2xx status code
func (o *GetFeatureInventoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory not found response has a 3xx status code
func (o *GetFeatureInventoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory not found response has a 4xx status code
func (o *GetFeatureInventoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature inventory not found response has a 5xx status code
func (o *GetFeatureInventoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature inventory not found response a status code equal to that given
func (o *GetFeatureInventoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFeatureInventoryNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryNotFound  %+v", 404, o.Payload)
}

func (o *GetFeatureInventoryNotFound) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryNotFound  %+v", 404, o.Payload)
}

func (o *GetFeatureInventoryNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryTooManyRequests creates a GetFeatureInventoryTooManyRequests with default headers values
func NewGetFeatureInventoryTooManyRequests() *GetFeatureInventoryTooManyRequests {
	return &GetFeatureInventoryTooManyRequests{}
}

/*
GetFeatureInventoryTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetFeatureInventoryTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory too many requests response has a 2xx status code
func (o *GetFeatureInventoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory too many requests response has a 3xx status code
func (o *GetFeatureInventoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory too many requests response has a 4xx status code
func (o *GetFeatureInventoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feature inventory too many requests response has a 5xx status code
func (o *GetFeatureInventoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get feature inventory too many requests response a status code equal to that given
func (o *GetFeatureInventoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetFeatureInventoryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFeatureInventoryTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFeatureInventoryTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryInternalServerError creates a GetFeatureInventoryInternalServerError with default headers values
func NewGetFeatureInventoryInternalServerError() *GetFeatureInventoryInternalServerError {
	return &GetFeatureInventoryInternalServerError{}
}

/*
GetFeatureInventoryInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetFeatureInventoryInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory internal server error response has a 2xx status code
func (o *GetFeatureInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory internal server error response has a 3xx status code
func (o *GetFeatureInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory internal server error response has a 4xx status code
func (o *GetFeatureInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feature inventory internal server error response has a 5xx status code
func (o *GetFeatureInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get feature inventory internal server error response a status code equal to that given
func (o *GetFeatureInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetFeatureInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFeatureInventoryInternalServerError) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFeatureInventoryInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeatureInventoryServiceUnavailable creates a GetFeatureInventoryServiceUnavailable with default headers values
func NewGetFeatureInventoryServiceUnavailable() *GetFeatureInventoryServiceUnavailable {
	return &GetFeatureInventoryServiceUnavailable{}
}

/*
GetFeatureInventoryServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetFeatureInventoryServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse
}

// IsSuccess returns true when this get feature inventory service unavailable response has a 2xx status code
func (o *GetFeatureInventoryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feature inventory service unavailable response has a 3xx status code
func (o *GetFeatureInventoryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feature inventory service unavailable response has a 4xx status code
func (o *GetFeatureInventoryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feature inventory service unavailable response has a 5xx status code
func (o *GetFeatureInventoryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get feature inventory service unavailable response a status code equal to that given
func (o *GetFeatureInventoryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetFeatureInventoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeatureInventoryServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/features/inventory/{featureName}][%d] getFeatureInventoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeatureInventoryServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse {
	return o.Payload
}

func (o *GetFeatureInventoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.GetFeatureInventoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
