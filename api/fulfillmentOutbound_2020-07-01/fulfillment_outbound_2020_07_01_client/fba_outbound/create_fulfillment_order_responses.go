// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// CreateFulfillmentOrderReader is a Reader for the CreateFulfillmentOrder structure.
type CreateFulfillmentOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateFulfillmentOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateFulfillmentOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateFulfillmentOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateFulfillmentOrderUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateFulfillmentOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateFulfillmentOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateFulfillmentOrderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateFulfillmentOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateFulfillmentOrderServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateFulfillmentOrderOK creates a CreateFulfillmentOrderOK with default headers values
func NewCreateFulfillmentOrderOK() *CreateFulfillmentOrderOK {
	return &CreateFulfillmentOrderOK{}
}

/* CreateFulfillmentOrderOK describes a response with status code 200, with default header values.

Success.
*/
type CreateFulfillmentOrderOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderOK) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderOK  %+v", 200, o.Payload)
}
func (o *CreateFulfillmentOrderOK) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderBadRequest creates a CreateFulfillmentOrderBadRequest with default headers values
func NewCreateFulfillmentOrderBadRequest() *CreateFulfillmentOrderBadRequest {
	return &CreateFulfillmentOrderBadRequest{}
}

/* CreateFulfillmentOrderBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateFulfillmentOrderBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderBadRequest  %+v", 400, o.Payload)
}
func (o *CreateFulfillmentOrderBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderUnauthorized creates a CreateFulfillmentOrderUnauthorized with default headers values
func NewCreateFulfillmentOrderUnauthorized() *CreateFulfillmentOrderUnauthorized {
	return &CreateFulfillmentOrderUnauthorized{}
}

/* CreateFulfillmentOrderUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateFulfillmentOrderUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderUnauthorized) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderUnauthorized  %+v", 401, o.Payload)
}
func (o *CreateFulfillmentOrderUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderForbidden creates a CreateFulfillmentOrderForbidden with default headers values
func NewCreateFulfillmentOrderForbidden() *CreateFulfillmentOrderForbidden {
	return &CreateFulfillmentOrderForbidden{}
}

/* CreateFulfillmentOrderForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateFulfillmentOrderForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderForbidden  %+v", 403, o.Payload)
}
func (o *CreateFulfillmentOrderForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderNotFound creates a CreateFulfillmentOrderNotFound with default headers values
func NewCreateFulfillmentOrderNotFound() *CreateFulfillmentOrderNotFound {
	return &CreateFulfillmentOrderNotFound{}
}

/* CreateFulfillmentOrderNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateFulfillmentOrderNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderNotFound  %+v", 404, o.Payload)
}
func (o *CreateFulfillmentOrderNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderTooManyRequests creates a CreateFulfillmentOrderTooManyRequests with default headers values
func NewCreateFulfillmentOrderTooManyRequests() *CreateFulfillmentOrderTooManyRequests {
	return &CreateFulfillmentOrderTooManyRequests{}
}

/* CreateFulfillmentOrderTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateFulfillmentOrderTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderTooManyRequests  %+v", 429, o.Payload)
}
func (o *CreateFulfillmentOrderTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderInternalServerError creates a CreateFulfillmentOrderInternalServerError with default headers values
func NewCreateFulfillmentOrderInternalServerError() *CreateFulfillmentOrderInternalServerError {
	return &CreateFulfillmentOrderInternalServerError{}
}

/* CreateFulfillmentOrderInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateFulfillmentOrderInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateFulfillmentOrderInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFulfillmentOrderServiceUnavailable creates a CreateFulfillmentOrderServiceUnavailable with default headers values
func NewCreateFulfillmentOrderServiceUnavailable() *CreateFulfillmentOrderServiceUnavailable {
	return &CreateFulfillmentOrderServiceUnavailable{}
}

/* CreateFulfillmentOrderServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateFulfillmentOrderServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse
}

func (o *CreateFulfillmentOrderServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/outbound/2020-07-01/fulfillmentOrders][%d] createFulfillmentOrderServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CreateFulfillmentOrderServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse {
	return o.Payload
}

func (o *CreateFulfillmentOrderServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.CreateFulfillmentOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
