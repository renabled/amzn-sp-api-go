// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fulfillmentOutbound_2020-07-01/fulfillment_outbound_2020_07_01_models"
)

// ListAllFulfillmentOrdersReader is a Reader for the ListAllFulfillmentOrders structure.
type ListAllFulfillmentOrdersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAllFulfillmentOrdersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAllFulfillmentOrdersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListAllFulfillmentOrdersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListAllFulfillmentOrdersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListAllFulfillmentOrdersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListAllFulfillmentOrdersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListAllFulfillmentOrdersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListAllFulfillmentOrdersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListAllFulfillmentOrdersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListAllFulfillmentOrdersOK creates a ListAllFulfillmentOrdersOK with default headers values
func NewListAllFulfillmentOrdersOK() *ListAllFulfillmentOrdersOK {
	return &ListAllFulfillmentOrdersOK{}
}

/*
ListAllFulfillmentOrdersOK describes a response with status code 200, with default header values.

Success.
*/
type ListAllFulfillmentOrdersOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders o k response has a 2xx status code
func (o *ListAllFulfillmentOrdersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list all fulfillment orders o k response has a 3xx status code
func (o *ListAllFulfillmentOrdersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders o k response has a 4xx status code
func (o *ListAllFulfillmentOrdersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list all fulfillment orders o k response has a 5xx status code
func (o *ListAllFulfillmentOrdersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list all fulfillment orders o k response a status code equal to that given
func (o *ListAllFulfillmentOrdersOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListAllFulfillmentOrdersOK) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersOK  %+v", 200, o.Payload)
}

func (o *ListAllFulfillmentOrdersOK) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersOK  %+v", 200, o.Payload)
}

func (o *ListAllFulfillmentOrdersOK) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersBadRequest creates a ListAllFulfillmentOrdersBadRequest with default headers values
func NewListAllFulfillmentOrdersBadRequest() *ListAllFulfillmentOrdersBadRequest {
	return &ListAllFulfillmentOrdersBadRequest{}
}

/*
ListAllFulfillmentOrdersBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListAllFulfillmentOrdersBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders bad request response has a 2xx status code
func (o *ListAllFulfillmentOrdersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders bad request response has a 3xx status code
func (o *ListAllFulfillmentOrdersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders bad request response has a 4xx status code
func (o *ListAllFulfillmentOrdersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all fulfillment orders bad request response has a 5xx status code
func (o *ListAllFulfillmentOrdersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list all fulfillment orders bad request response a status code equal to that given
func (o *ListAllFulfillmentOrdersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListAllFulfillmentOrdersBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *ListAllFulfillmentOrdersBadRequest) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersBadRequest  %+v", 400, o.Payload)
}

func (o *ListAllFulfillmentOrdersBadRequest) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersUnauthorized creates a ListAllFulfillmentOrdersUnauthorized with default headers values
func NewListAllFulfillmentOrdersUnauthorized() *ListAllFulfillmentOrdersUnauthorized {
	return &ListAllFulfillmentOrdersUnauthorized{}
}

/*
ListAllFulfillmentOrdersUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type ListAllFulfillmentOrdersUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders unauthorized response has a 2xx status code
func (o *ListAllFulfillmentOrdersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders unauthorized response has a 3xx status code
func (o *ListAllFulfillmentOrdersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders unauthorized response has a 4xx status code
func (o *ListAllFulfillmentOrdersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all fulfillment orders unauthorized response has a 5xx status code
func (o *ListAllFulfillmentOrdersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list all fulfillment orders unauthorized response a status code equal to that given
func (o *ListAllFulfillmentOrdersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListAllFulfillmentOrdersUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAllFulfillmentOrdersUnauthorized) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAllFulfillmentOrdersUnauthorized) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersForbidden creates a ListAllFulfillmentOrdersForbidden with default headers values
func NewListAllFulfillmentOrdersForbidden() *ListAllFulfillmentOrdersForbidden {
	return &ListAllFulfillmentOrdersForbidden{}
}

/*
ListAllFulfillmentOrdersForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListAllFulfillmentOrdersForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders forbidden response has a 2xx status code
func (o *ListAllFulfillmentOrdersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders forbidden response has a 3xx status code
func (o *ListAllFulfillmentOrdersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders forbidden response has a 4xx status code
func (o *ListAllFulfillmentOrdersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all fulfillment orders forbidden response has a 5xx status code
func (o *ListAllFulfillmentOrdersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list all fulfillment orders forbidden response a status code equal to that given
func (o *ListAllFulfillmentOrdersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListAllFulfillmentOrdersForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersForbidden  %+v", 403, o.Payload)
}

func (o *ListAllFulfillmentOrdersForbidden) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersForbidden  %+v", 403, o.Payload)
}

func (o *ListAllFulfillmentOrdersForbidden) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersNotFound creates a ListAllFulfillmentOrdersNotFound with default headers values
func NewListAllFulfillmentOrdersNotFound() *ListAllFulfillmentOrdersNotFound {
	return &ListAllFulfillmentOrdersNotFound{}
}

/*
ListAllFulfillmentOrdersNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type ListAllFulfillmentOrdersNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders not found response has a 2xx status code
func (o *ListAllFulfillmentOrdersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders not found response has a 3xx status code
func (o *ListAllFulfillmentOrdersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders not found response has a 4xx status code
func (o *ListAllFulfillmentOrdersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all fulfillment orders not found response has a 5xx status code
func (o *ListAllFulfillmentOrdersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list all fulfillment orders not found response a status code equal to that given
func (o *ListAllFulfillmentOrdersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListAllFulfillmentOrdersNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersNotFound  %+v", 404, o.Payload)
}

func (o *ListAllFulfillmentOrdersNotFound) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersNotFound  %+v", 404, o.Payload)
}

func (o *ListAllFulfillmentOrdersNotFound) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersTooManyRequests creates a ListAllFulfillmentOrdersTooManyRequests with default headers values
func NewListAllFulfillmentOrdersTooManyRequests() *ListAllFulfillmentOrdersTooManyRequests {
	return &ListAllFulfillmentOrdersTooManyRequests{}
}

/*
ListAllFulfillmentOrdersTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListAllFulfillmentOrdersTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders too many requests response has a 2xx status code
func (o *ListAllFulfillmentOrdersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders too many requests response has a 3xx status code
func (o *ListAllFulfillmentOrdersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders too many requests response has a 4xx status code
func (o *ListAllFulfillmentOrdersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list all fulfillment orders too many requests response has a 5xx status code
func (o *ListAllFulfillmentOrdersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list all fulfillment orders too many requests response a status code equal to that given
func (o *ListAllFulfillmentOrdersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListAllFulfillmentOrdersTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListAllFulfillmentOrdersTooManyRequests) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListAllFulfillmentOrdersTooManyRequests) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersInternalServerError creates a ListAllFulfillmentOrdersInternalServerError with default headers values
func NewListAllFulfillmentOrdersInternalServerError() *ListAllFulfillmentOrdersInternalServerError {
	return &ListAllFulfillmentOrdersInternalServerError{}
}

/*
ListAllFulfillmentOrdersInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListAllFulfillmentOrdersInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders internal server error response has a 2xx status code
func (o *ListAllFulfillmentOrdersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders internal server error response has a 3xx status code
func (o *ListAllFulfillmentOrdersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders internal server error response has a 4xx status code
func (o *ListAllFulfillmentOrdersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list all fulfillment orders internal server error response has a 5xx status code
func (o *ListAllFulfillmentOrdersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list all fulfillment orders internal server error response a status code equal to that given
func (o *ListAllFulfillmentOrdersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListAllFulfillmentOrdersInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAllFulfillmentOrdersInternalServerError) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListAllFulfillmentOrdersInternalServerError) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllFulfillmentOrdersServiceUnavailable creates a ListAllFulfillmentOrdersServiceUnavailable with default headers values
func NewListAllFulfillmentOrdersServiceUnavailable() *ListAllFulfillmentOrdersServiceUnavailable {
	return &ListAllFulfillmentOrdersServiceUnavailable{}
}

/*
ListAllFulfillmentOrdersServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListAllFulfillmentOrdersServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse
}

// IsSuccess returns true when this list all fulfillment orders service unavailable response has a 2xx status code
func (o *ListAllFulfillmentOrdersServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list all fulfillment orders service unavailable response has a 3xx status code
func (o *ListAllFulfillmentOrdersServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list all fulfillment orders service unavailable response has a 4xx status code
func (o *ListAllFulfillmentOrdersServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list all fulfillment orders service unavailable response has a 5xx status code
func (o *ListAllFulfillmentOrdersServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list all fulfillment orders service unavailable response a status code equal to that given
func (o *ListAllFulfillmentOrdersServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListAllFulfillmentOrdersServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListAllFulfillmentOrdersServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /fba/outbound/2020-07-01/fulfillmentOrders][%d] listAllFulfillmentOrdersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListAllFulfillmentOrdersServiceUnavailable) GetPayload() *fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse {
	return o.Payload
}

func (o *ListAllFulfillmentOrdersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_outbound_2020_07_01_models.ListAllFulfillmentOrdersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
