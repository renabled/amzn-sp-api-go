// Code generated by go-swagger; DO NOT EDIT.

package fba_outbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListAllFulfillmentOrdersParams creates a new ListAllFulfillmentOrdersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListAllFulfillmentOrdersParams() *ListAllFulfillmentOrdersParams {
	return &ListAllFulfillmentOrdersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListAllFulfillmentOrdersParamsWithTimeout creates a new ListAllFulfillmentOrdersParams object
// with the ability to set a timeout on a request.
func NewListAllFulfillmentOrdersParamsWithTimeout(timeout time.Duration) *ListAllFulfillmentOrdersParams {
	return &ListAllFulfillmentOrdersParams{
		timeout: timeout,
	}
}

// NewListAllFulfillmentOrdersParamsWithContext creates a new ListAllFulfillmentOrdersParams object
// with the ability to set a context for a request.
func NewListAllFulfillmentOrdersParamsWithContext(ctx context.Context) *ListAllFulfillmentOrdersParams {
	return &ListAllFulfillmentOrdersParams{
		Context: ctx,
	}
}

// NewListAllFulfillmentOrdersParamsWithHTTPClient creates a new ListAllFulfillmentOrdersParams object
// with the ability to set a custom HTTPClient for a request.
func NewListAllFulfillmentOrdersParamsWithHTTPClient(client *http.Client) *ListAllFulfillmentOrdersParams {
	return &ListAllFulfillmentOrdersParams{
		HTTPClient: client,
	}
}

/* ListAllFulfillmentOrdersParams contains all the parameters to send to the API endpoint
   for the list all fulfillment orders operation.

   Typically these are written to a http.Request.
*/
type ListAllFulfillmentOrdersParams struct {

	/* NextToken.

	   A string token returned in the response to your previous request.
	*/
	NextToken *string

	/* QueryStartDate.

	   A date used to select fulfillment orders that were last updated after (or at) a specified time. An update is defined as any change in fulfillment order status, including the creation of a new fulfillment order.

	   Format: date-time
	*/
	QueryStartDate *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list all fulfillment orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAllFulfillmentOrdersParams) WithDefaults() *ListAllFulfillmentOrdersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list all fulfillment orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListAllFulfillmentOrdersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) WithTimeout(timeout time.Duration) *ListAllFulfillmentOrdersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) WithContext(ctx context.Context) *ListAllFulfillmentOrdersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) WithHTTPClient(client *http.Client) *ListAllFulfillmentOrdersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNextToken adds the nextToken to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) WithNextToken(nextToken *string) *ListAllFulfillmentOrdersParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithQueryStartDate adds the queryStartDate to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) WithQueryStartDate(queryStartDate *strfmt.DateTime) *ListAllFulfillmentOrdersParams {
	o.SetQueryStartDate(queryStartDate)
	return o
}

// SetQueryStartDate adds the queryStartDate to the list all fulfillment orders params
func (o *ListAllFulfillmentOrdersParams) SetQueryStartDate(queryStartDate *strfmt.DateTime) {
	o.QueryStartDate = queryStartDate
}

// WriteToRequest writes these params to a swagger request
func (o *ListAllFulfillmentOrdersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NextToken != nil {

		// query param nextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("nextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.QueryStartDate != nil {

		// query param queryStartDate
		var qrQueryStartDate strfmt.DateTime

		if o.QueryStartDate != nil {
			qrQueryStartDate = *o.QueryStartDate
		}
		qQueryStartDate := qrQueryStartDate.String()
		if qQueryStartDate != "" {

			if err := r.SetQueryParam("queryStartDate", qQueryStartDate); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
