// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_payments_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxDetail Details of tax amount applied.
//
// swagger:model TaxDetail
type TaxDetail struct {

	// Total tax amount applied on invoice total or an item total.
	// Required: true
	TaxAmount *Money `json:"taxAmount"`

	// Tax percentage applied. Percentage must be expressed in decimal.
	TaxRate Decimal `json:"taxRate,omitempty"`

	// Type of the tax applied.
	// Required: true
	// Enum: [CGST SGST CESS UTGST IGST MwSt. PST TVA VAT GST ST Consumption MutuallyDefined DomesticVAT]
	TaxType *string `json:"taxType"`

	// This field will contain the invoice amount that is taxable at the rate specified in the tax rate field.
	TaxableAmount *Money `json:"taxableAmount,omitempty"`
}

// Validate validates this tax detail
func (m *TaxDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxableAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDetail) validateTaxAmount(formats strfmt.Registry) error {

	if err := validate.Required("taxAmount", "body", m.TaxAmount); err != nil {
		return err
	}

	if m.TaxAmount != nil {
		if err := m.TaxAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *TaxDetail) validateTaxRate(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxRate) { // not required
		return nil
	}

	if err := m.TaxRate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxRate")
		}
		return err
	}

	return nil
}

var taxDetailTypeTaxTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CGST","SGST","CESS","UTGST","IGST","MwSt.","PST","TVA","VAT","GST","ST","Consumption","MutuallyDefined","DomesticVAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taxDetailTypeTaxTypePropEnum = append(taxDetailTypeTaxTypePropEnum, v)
	}
}

const (

	// TaxDetailTaxTypeCGST captures enum value "CGST"
	TaxDetailTaxTypeCGST string = "CGST"

	// TaxDetailTaxTypeSGST captures enum value "SGST"
	TaxDetailTaxTypeSGST string = "SGST"

	// TaxDetailTaxTypeCESS captures enum value "CESS"
	TaxDetailTaxTypeCESS string = "CESS"

	// TaxDetailTaxTypeUTGST captures enum value "UTGST"
	TaxDetailTaxTypeUTGST string = "UTGST"

	// TaxDetailTaxTypeIGST captures enum value "IGST"
	TaxDetailTaxTypeIGST string = "IGST"

	// TaxDetailTaxTypeMwStDot captures enum value "MwSt."
	TaxDetailTaxTypeMwStDot string = "MwSt."

	// TaxDetailTaxTypePST captures enum value "PST"
	TaxDetailTaxTypePST string = "PST"

	// TaxDetailTaxTypeTVA captures enum value "TVA"
	TaxDetailTaxTypeTVA string = "TVA"

	// TaxDetailTaxTypeVAT captures enum value "VAT"
	TaxDetailTaxTypeVAT string = "VAT"

	// TaxDetailTaxTypeGST captures enum value "GST"
	TaxDetailTaxTypeGST string = "GST"

	// TaxDetailTaxTypeST captures enum value "ST"
	TaxDetailTaxTypeST string = "ST"

	// TaxDetailTaxTypeConsumption captures enum value "Consumption"
	TaxDetailTaxTypeConsumption string = "Consumption"

	// TaxDetailTaxTypeMutuallyDefined captures enum value "MutuallyDefined"
	TaxDetailTaxTypeMutuallyDefined string = "MutuallyDefined"

	// TaxDetailTaxTypeDomesticVAT captures enum value "DomesticVAT"
	TaxDetailTaxTypeDomesticVAT string = "DomesticVAT"
)

// prop value enum
func (m *TaxDetail) validateTaxTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taxDetailTypeTaxTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaxDetail) validateTaxType(formats strfmt.Registry) error {

	if err := validate.Required("taxType", "body", m.TaxType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTaxTypeEnum("taxType", "body", *m.TaxType); err != nil {
		return err
	}

	return nil
}

func (m *TaxDetail) validateTaxableAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxableAmount) { // not required
		return nil
	}

	if m.TaxableAmount != nil {
		if err := m.TaxableAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxableAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxableAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tax detail based on the context it is used
func (m *TaxDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaxAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxableAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TaxDetail) contextValidateTaxAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxAmount != nil {
		if err := m.TaxAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *TaxDetail) contextValidateTaxRate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TaxRate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxRate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxRate")
		}
		return err
	}

	return nil
}

func (m *TaxDetail) contextValidateTaxableAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxableAmount != nil {
		if err := m.TaxableAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxableAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxableAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TaxDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxDetail) UnmarshalBinary(b []byte) error {
	var res TaxDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
