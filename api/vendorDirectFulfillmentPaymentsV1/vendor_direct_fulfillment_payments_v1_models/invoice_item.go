// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_payments_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoiceItem invoice item
//
// swagger:model InvoiceItem
type InvoiceItem struct {

	// Buyer's standard identification number (ASIN) of an item.
	BuyerProductIdentifier string `json:"buyerProductIdentifier,omitempty"`

	// Individual charge details per line item.
	ChargeDetails []*ChargeDetails `json:"chargeDetails"`

	// HSN tax code. The HSN number cannot contain alphabets.
	HsnCode string `json:"hsnCode,omitempty"`

	// Item quantity invoiced.
	// Required: true
	InvoicedQuantity *ItemQuantity `json:"invoicedQuantity"`

	// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	// Required: true
	ItemSequenceNumber *string `json:"itemSequenceNumber"`

	// Net price (before tax) to vendor with currency details.
	// Required: true
	NetCost *Money `json:"netCost"`

	// The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
	// Required: true
	PurchaseOrderNumber *string `json:"purchaseOrderNumber"`

	// Individual tax details per line item.
	TaxDetails []*TaxDetail `json:"taxDetails"`

	// The vendor's order number for this order.
	VendorOrderNumber string `json:"vendorOrderNumber,omitempty"`

	// The vendor selected product identification of the item.
	VendorProductIdentifier string `json:"vendorProductIdentifier,omitempty"`
}

// Validate validates this invoice item
func (m *InvoiceItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoicedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseOrderNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceItem) validateChargeDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.ChargeDetails); i++ {
		if swag.IsZero(m.ChargeDetails[i]) { // not required
			continue
		}

		if m.ChargeDetails[i] != nil {
			if err := m.ChargeDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chargeDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chargeDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoiceItem) validateInvoicedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("invoicedQuantity", "body", m.InvoicedQuantity); err != nil {
		return err
	}

	if m.InvoicedQuantity != nil {
		if err := m.InvoicedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoicedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoicedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceItem) validateItemSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("itemSequenceNumber", "body", m.ItemSequenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateNetCost(formats strfmt.Registry) error {

	if err := validate.Required("netCost", "body", m.NetCost); err != nil {
		return err
	}

	if m.NetCost != nil {
		if err := m.NetCost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netCost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netCost")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceItem) validatePurchaseOrderNumber(formats strfmt.Registry) error {

	if err := validate.Required("purchaseOrderNumber", "body", m.PurchaseOrderNumber); err != nil {
		return err
	}

	return nil
}

func (m *InvoiceItem) validateTaxDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxDetails) { // not required
		return nil
	}

	for i := 0; i < len(m.TaxDetails); i++ {
		if swag.IsZero(m.TaxDetails[i]) { // not required
			continue
		}

		if m.TaxDetails[i] != nil {
			if err := m.TaxDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this invoice item based on the context it is used
func (m *InvoiceItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChargeDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvoicedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetCost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceItem) contextValidateChargeDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ChargeDetails); i++ {

		if m.ChargeDetails[i] != nil {
			if err := m.ChargeDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("chargeDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("chargeDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InvoiceItem) contextValidateInvoicedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.InvoicedQuantity != nil {
		if err := m.InvoicedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoicedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoicedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceItem) contextValidateNetCost(ctx context.Context, formats strfmt.Registry) error {

	if m.NetCost != nil {
		if err := m.NetCost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netCost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netCost")
			}
			return err
		}
	}

	return nil
}

func (m *InvoiceItem) contextValidateTaxDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxDetails); i++ {

		if m.TaxDetails[i] != nil {
			if err := m.TaxDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("taxDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoiceItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoiceItem) UnmarshalBinary(b []byte) error {
	var res InvoiceItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
