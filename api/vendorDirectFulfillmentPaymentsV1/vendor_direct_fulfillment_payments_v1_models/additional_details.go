// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_payments_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalDetails A field where the selling party can provide additional information for tax-related or any other purposes.
//
// swagger:model AdditionalDetails
type AdditionalDetails struct {

	// The detail of the additional information provided by the selling party.
	// Required: true
	Detail *string `json:"detail"`

	// The language code of the additional information detail.
	LanguageCode string `json:"languageCode,omitempty"`

	// The type of the additional information provided by the selling party.
	// Required: true
	// Enum: [SUR OCR]
	Type *string `json:"type"`
}

// Validate validates this additional details
func (m *AdditionalDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalDetails) validateDetail(formats strfmt.Registry) error {

	if err := validate.Required("detail", "body", m.Detail); err != nil {
		return err
	}

	return nil
}

var additionalDetailsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUR","OCR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		additionalDetailsTypeTypePropEnum = append(additionalDetailsTypeTypePropEnum, v)
	}
}

const (

	// AdditionalDetailsTypeSUR captures enum value "SUR"
	AdditionalDetailsTypeSUR string = "SUR"

	// AdditionalDetailsTypeOCR captures enum value "OCR"
	AdditionalDetailsTypeOCR string = "OCR"
)

// prop value enum
func (m *AdditionalDetails) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, additionalDetailsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AdditionalDetails) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this additional details based on context it is used
func (m *AdditionalDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalDetails) UnmarshalBinary(b []byte) error {
	var res AdditionalDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
