// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryQuantity Quantity of inventory with an associated measurement unit context.
//
// swagger:model InventoryQuantity
type InventoryQuantity struct {

	// Quantity of the respective inventory.
	// Required: true
	Quantity *float64 `json:"quantity"`

	// Unit of measurement for the inventory.
	// Required: true
	UnitOfMeasurement *InventoryUnitOfMeasurement `json:"unitOfMeasurement"`
}

// Validate validates this inventory quantity
func (m *InventoryQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitOfMeasurement(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryQuantity) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *InventoryQuantity) validateUnitOfMeasurement(formats strfmt.Registry) error {

	if err := validate.Required("unitOfMeasurement", "body", m.UnitOfMeasurement); err != nil {
		return err
	}

	if err := validate.Required("unitOfMeasurement", "body", m.UnitOfMeasurement); err != nil {
		return err
	}

	if m.UnitOfMeasurement != nil {
		if err := m.UnitOfMeasurement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasurement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitOfMeasurement")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inventory quantity based on the context it is used
func (m *InventoryQuantity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnitOfMeasurement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryQuantity) contextValidateUnitOfMeasurement(ctx context.Context, formats strfmt.Registry) error {

	if m.UnitOfMeasurement != nil {
		if err := m.UnitOfMeasurement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitOfMeasurement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitOfMeasurement")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryQuantity) UnmarshalBinary(b []byte) error {
	var res InventoryQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
