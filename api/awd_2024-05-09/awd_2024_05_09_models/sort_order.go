// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SortOrder Sort order for a collection of items. For example, order or shipment.
// Example: ASCENDING
//
// swagger:model SortOrder
type SortOrder string

func NewSortOrder(value SortOrder) *SortOrder {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SortOrder.
func (m SortOrder) Pointer() *SortOrder {
	return &m
}

const (

	// SortOrderASCENDING captures enum value "ASCENDING"
	SortOrderASCENDING SortOrder = "ASCENDING"

	// SortOrderDESCENDING captures enum value "DESCENDING"
	SortOrderDESCENDING SortOrder = "DESCENDING"
)

// for schema
var sortOrderEnum []interface{}

func init() {
	var res []SortOrder
	if err := json.Unmarshal([]byte(`["ASCENDING","DESCENDING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sortOrderEnum = append(sortOrderEnum, v)
	}
}

func (m SortOrder) validateSortOrderEnum(path, location string, value SortOrder) error {
	if err := validate.EnumCase(path, location, value, sortOrderEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this sort order
func (m SortOrder) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSortOrderEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this sort order based on context it is used
func (m SortOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
