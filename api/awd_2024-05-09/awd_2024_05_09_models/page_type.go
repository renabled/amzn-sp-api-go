// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PageType Label page type.
// Example: PLAIN_PAPER
//
// swagger:model PageType
type PageType string

func NewPageType(value PageType) *PageType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PageType.
func (m PageType) Pointer() *PageType {
	return &m
}

const (

	// PageTypeTHERMALNONPCP captures enum value "THERMAL_NONPCP"
	PageTypeTHERMALNONPCP PageType = "THERMAL_NONPCP"

	// PageTypePLAINPAPER captures enum value "PLAIN_PAPER"
	PageTypePLAINPAPER PageType = "PLAIN_PAPER"

	// PageTypeLETTER6 captures enum value "LETTER_6"
	PageTypeLETTER6 PageType = "LETTER_6"
)

// for schema
var pageTypeEnum []interface{}

func init() {
	var res []PageType
	if err := json.Unmarshal([]byte(`["THERMAL_NONPCP","PLAIN_PAPER","LETTER_6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pageTypeEnum = append(pageTypeEnum, v)
	}
}

func (m PageType) validatePageTypeEnum(path, location string, value PageType) error {
	if err := validate.EnumCase(path, location, value, pageTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this page type
func (m PageType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePageTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this page type based on context it is used
func (m PageType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
