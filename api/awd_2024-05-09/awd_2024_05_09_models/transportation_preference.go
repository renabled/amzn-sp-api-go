// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransportationPreference Represents the transportation preference for an AWD shipment.
// Example: SELLER_MANAGED
//
// swagger:model TransportationPreference
type TransportationPreference string

func NewTransportationPreference(value TransportationPreference) *TransportationPreference {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TransportationPreference.
func (m TransportationPreference) Pointer() *TransportationPreference {
	return &m
}

const (

	// TransportationPreferenceAMAZONMANAGED captures enum value "AMAZON_MANAGED"
	TransportationPreferenceAMAZONMANAGED TransportationPreference = "AMAZON_MANAGED"

	// TransportationPreferenceSELLERMANAGED captures enum value "SELLER_MANAGED"
	TransportationPreferenceSELLERMANAGED TransportationPreference = "SELLER_MANAGED"
)

// for schema
var transportationPreferenceEnum []interface{}

func init() {
	var res []TransportationPreference
	if err := json.Unmarshal([]byte(`["AMAZON_MANAGED","SELLER_MANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transportationPreferenceEnum = append(transportationPreferenceEnum, v)
	}
}

func (m TransportationPreference) validateTransportationPreferenceEnum(path, location string, value TransportationPreference) error {
	if err := validate.EnumCase(path, location, value, transportationPreferenceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transportation preference
func (m TransportationPreference) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransportationPreferenceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this transportation preference based on context it is used
func (m TransportationPreference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
