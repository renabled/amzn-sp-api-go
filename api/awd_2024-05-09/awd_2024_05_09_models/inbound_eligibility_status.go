// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InboundEligibilityStatus Enum denoting the package inbound eligibility.
//
// swagger:model InboundEligibilityStatus
type InboundEligibilityStatus string

func NewInboundEligibilityStatus(value InboundEligibilityStatus) *InboundEligibilityStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InboundEligibilityStatus.
func (m InboundEligibilityStatus) Pointer() *InboundEligibilityStatus {
	return &m
}

const (

	// InboundEligibilityStatusELIGIBLE captures enum value "ELIGIBLE"
	InboundEligibilityStatusELIGIBLE InboundEligibilityStatus = "ELIGIBLE"

	// InboundEligibilityStatusINELIGIBLE captures enum value "INELIGIBLE"
	InboundEligibilityStatusINELIGIBLE InboundEligibilityStatus = "INELIGIBLE"
)

// for schema
var inboundEligibilityStatusEnum []interface{}

func init() {
	var res []InboundEligibilityStatus
	if err := json.Unmarshal([]byte(`["ELIGIBLE","INELIGIBLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inboundEligibilityStatusEnum = append(inboundEligibilityStatusEnum, v)
	}
}

func (m InboundEligibilityStatus) validateInboundEligibilityStatusEnum(path, location string, value InboundEligibilityStatus) error {
	if err := validate.EnumCase(path, location, value, inboundEligibilityStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this inbound eligibility status
func (m InboundEligibilityStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInboundEligibilityStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this inbound eligibility status based on context it is used
func (m InboundEligibilityStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
