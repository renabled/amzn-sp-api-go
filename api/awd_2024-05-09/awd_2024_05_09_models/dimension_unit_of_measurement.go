// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DimensionUnitOfMeasurement Unit of measurement for package dimensions.
// Example: INCHES
//
// swagger:model DimensionUnitOfMeasurement
type DimensionUnitOfMeasurement string

func NewDimensionUnitOfMeasurement(value DimensionUnitOfMeasurement) *DimensionUnitOfMeasurement {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DimensionUnitOfMeasurement.
func (m DimensionUnitOfMeasurement) Pointer() *DimensionUnitOfMeasurement {
	return &m
}

const (

	// DimensionUnitOfMeasurementINCHES captures enum value "INCHES"
	DimensionUnitOfMeasurementINCHES DimensionUnitOfMeasurement = "INCHES"

	// DimensionUnitOfMeasurementCENTIMETERS captures enum value "CENTIMETERS"
	DimensionUnitOfMeasurementCENTIMETERS DimensionUnitOfMeasurement = "CENTIMETERS"
)

// for schema
var dimensionUnitOfMeasurementEnum []interface{}

func init() {
	var res []DimensionUnitOfMeasurement
	if err := json.Unmarshal([]byte(`["INCHES","CENTIMETERS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dimensionUnitOfMeasurementEnum = append(dimensionUnitOfMeasurementEnum, v)
	}
}

func (m DimensionUnitOfMeasurement) validateDimensionUnitOfMeasurementEnum(path, location string, value DimensionUnitOfMeasurement) error {
	if err := validate.EnumCase(path, location, value, dimensionUnitOfMeasurementEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this dimension unit of measurement
func (m DimensionUnitOfMeasurement) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDimensionUnitOfMeasurementEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this dimension unit of measurement based on context it is used
func (m DimensionUnitOfMeasurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
