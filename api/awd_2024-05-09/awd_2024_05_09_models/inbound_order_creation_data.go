// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundOrderCreationData Payload for creating an inbound order.
// Example: {"externalReferenceId":"TestReferenceId","originAddress":{"addressLine1":"address_1","addressLine2":"address_2","addressLine3":"address_3","city":"City1","countryCode":"CC","district":"District1","name":"address_name","postalCode":"123456","stateOrRegion":"State1"},"packagesToInbound":[{"count":1,"distributionPackage":{"contents":{"products":[{"quantity":1,"sku":"testPen"}]},"measurements":{"dimensions":{"height":1,"length":1,"unitOfMeasurement":"INCHES","width":1},"volume":{"unitOfMeasurement":"CUIN","volume":1},"weight":{"unitOfMeasurement":"POUNDS","weight":1}},"type":"CASE"}}],"shipBy":"2023-06-07T12:12:09.061Z","transportationPreference":"SELLER_MANAGED"}
//
// swagger:model InboundOrderCreationData
type InboundOrderCreationData struct {

	// Reference ID that can be used to correlate the order with partner resources.
	// Example: TestReferenceId
	ExternalReferenceID string `json:"externalReferenceId,omitempty"`

	// Origin address from where the inbound order will be shipped.
	// Required: true
	OriginAddress *Address `json:"originAddress"`

	// List of packages to be inbounded.
	// Example: [{"count":1,"distributionPackage":{"contents":{"products":[{"quantity":1,"sku":"testPen"}]},"measurements":{"dimensions":{"height":1,"length":1,"unitOfMeasurement":"INCHES","width":1},"volume":{"unitOfMeasurement":"CUIN","volume":1},"weight":{"unitOfMeasurement":"POUNDS","weight":1}},"type":"CASE"}}]
	// Required: true
	// Min Items: 1
	PackagesToInbound []*DistributionPackageQuantity `json:"packagesToInbound"`

	// Estimated date by when goods have to be picked up.
	// Example: 2023-06-07T12:12:09.061Z
	// Format: date-time
	ShipBy strfmt.DateTime `json:"shipBy,omitempty"`

	// Represents the transportation preference to be used for the inbound order. We only support `SELLER_MANAGED`
	// Required: true
	TransportationPreference *TransportationPreference `json:"transportationPreference"`
}

// Validate validates this inbound order creation data
func (m *InboundOrderCreationData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOriginAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagesToInbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationPreference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundOrderCreationData) validateOriginAddress(formats strfmt.Registry) error {

	if err := validate.Required("originAddress", "body", m.OriginAddress); err != nil {
		return err
	}

	if m.OriginAddress != nil {
		if err := m.OriginAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundOrderCreationData) validatePackagesToInbound(formats strfmt.Registry) error {

	if err := validate.Required("packagesToInbound", "body", m.PackagesToInbound); err != nil {
		return err
	}

	iPackagesToInboundSize := int64(len(m.PackagesToInbound))

	if err := validate.MinItems("packagesToInbound", "body", iPackagesToInboundSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.PackagesToInbound); i++ {
		if swag.IsZero(m.PackagesToInbound[i]) { // not required
			continue
		}

		if m.PackagesToInbound[i] != nil {
			if err := m.PackagesToInbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InboundOrderCreationData) validateShipBy(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipBy) { // not required
		return nil
	}

	if err := validate.FormatOf("shipBy", "body", "date-time", m.ShipBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InboundOrderCreationData) validateTransportationPreference(formats strfmt.Registry) error {

	if err := validate.Required("transportationPreference", "body", m.TransportationPreference); err != nil {
		return err
	}

	if err := validate.Required("transportationPreference", "body", m.TransportationPreference); err != nil {
		return err
	}

	if m.TransportationPreference != nil {
		if err := m.TransportationPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationPreference")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inbound order creation data based on the context it is used
func (m *InboundOrderCreationData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOriginAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackagesToInbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransportationPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundOrderCreationData) contextValidateOriginAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginAddress != nil {
		if err := m.OriginAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

func (m *InboundOrderCreationData) contextValidatePackagesToInbound(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackagesToInbound); i++ {

		if m.PackagesToInbound[i] != nil {
			if err := m.PackagesToInbound[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InboundOrderCreationData) contextValidateTransportationPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.TransportationPreference != nil {
		if err := m.TransportationPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("transportationPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("transportationPreference")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundOrderCreationData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundOrderCreationData) UnmarshalBinary(b []byte) error {
	var res InboundOrderCreationData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
