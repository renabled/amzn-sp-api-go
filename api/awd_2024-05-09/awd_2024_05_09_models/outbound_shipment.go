// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OutboundShipment Represents an AWD outbound shipment.
// Example: {"createdAt":"2023-01-12T10:00:00.000Z","destinationAddress":{"addressLine1":"address_1","addressLine2":"address_2","addressLine3":"address_3","city":"Seattle","countryCode":"US","county":"Washington","district":"District1","name":"address_name","phoneNumber":"+14155552671","postalCode":"123456","stateOrRegion":"Washington"},"orderId":"TestOrderId","originAddress":{"addressLine1":"address_1","addressLine2":"address_2","addressLine3":"address_3","city":"Seattle","countryCode":"US","county":"Washington","district":"District1","name":"address_name","phoneNumber":"+14155552671","postalCode":"123456","stateOrRegion":"Washington"},"shipmentId":"TestShipmentId","shipmentPackageQuantities":[{"count":1,"distributionPackage":{"contents":{"products":[{"quantity":1,"sku":"testPen"}]},"measurements":{"dimensions":{"height":1,"length":1,"unitOfMeasurement":"INCHES","width":1},"volume":{"unitOfMeasurement":"CUIN","volume":1},"weight":{"unitOfMeasurement":"POUNDS","weight":1}},"type":"CASE"}}],"shipmentProductQuantities":[],"shipmentStatus":"CREATED","updatedAt":"2023-01-12T10:00:00.000Z"}
//
// swagger:model OutboundShipment
type OutboundShipment struct {

	// Timestamp when the shipment was created.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Destination address for this shipment.
	// Required: true
	DestinationAddress *Address `json:"destinationAddress"`

	// Outbound order ID this outbound shipment belongs to.
	// Required: true
	OrderID *string `json:"orderId"`

	// Origin address for this shipment.
	// Required: true
	OriginAddress *Address `json:"originAddress"`

	// Unique shipment ID.
	// Required: true
	ShipmentID *string `json:"shipmentId"`

	// Specific distribution packages that are included in the context of this shipment.
	ShipmentPackageQuantities []*DistributionPackageQuantity `json:"shipmentPackageQuantities"`

	// Specific product units that are included in the context of this shipment.
	ShipmentProductQuantities []*ProductQuantity `json:"shipmentProductQuantities"`

	// Current status of this shipment.
	// Required: true
	ShipmentStatus *OutboundShipmentStatus `json:"shipmentStatus"`

	// Timestamp when the shipment was updated.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this outbound shipment
func (m *OutboundShipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentPackageQuantities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentProductQuantities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundShipment) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OutboundShipment) validateDestinationAddress(formats strfmt.Registry) error {

	if err := validate.Required("destinationAddress", "body", m.DestinationAddress); err != nil {
		return err
	}

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundShipment) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("orderId", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *OutboundShipment) validateOriginAddress(formats strfmt.Registry) error {

	if err := validate.Required("originAddress", "body", m.OriginAddress); err != nil {
		return err
	}

	if m.OriginAddress != nil {
		if err := m.OriginAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundShipment) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	return nil
}

func (m *OutboundShipment) validateShipmentPackageQuantities(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentPackageQuantities) { // not required
		return nil
	}

	for i := 0; i < len(m.ShipmentPackageQuantities); i++ {
		if swag.IsZero(m.ShipmentPackageQuantities[i]) { // not required
			continue
		}

		if m.ShipmentPackageQuantities[i] != nil {
			if err := m.ShipmentPackageQuantities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentPackageQuantities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipmentPackageQuantities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundShipment) validateShipmentProductQuantities(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentProductQuantities) { // not required
		return nil
	}

	for i := 0; i < len(m.ShipmentProductQuantities); i++ {
		if swag.IsZero(m.ShipmentProductQuantities[i]) { // not required
			continue
		}

		if m.ShipmentProductQuantities[i] != nil {
			if err := m.ShipmentProductQuantities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentProductQuantities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipmentProductQuantities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundShipment) validateShipmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundShipment) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this outbound shipment based on the context it is used
func (m *OutboundShipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDestinationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentPackageQuantities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentProductQuantities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundShipment) contextValidateDestinationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAddress != nil {
		if err := m.DestinationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundShipment) contextValidateOriginAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginAddress != nil {
		if err := m.OriginAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("originAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("originAddress")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundShipment) contextValidateShipmentPackageQuantities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShipmentPackageQuantities); i++ {

		if m.ShipmentPackageQuantities[i] != nil {
			if err := m.ShipmentPackageQuantities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentPackageQuantities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipmentPackageQuantities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundShipment) contextValidateShipmentProductQuantities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShipmentProductQuantities); i++ {

		if m.ShipmentProductQuantities[i] != nil {
			if err := m.ShipmentProductQuantities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentProductQuantities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipmentProductQuantities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundShipment) contextValidateShipmentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundShipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundShipment) UnmarshalBinary(b []byte) error {
	var res OutboundShipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
