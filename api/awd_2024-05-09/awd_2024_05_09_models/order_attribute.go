// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderAttribute Consists of the order preference and corresponding preference value.
// Example: {"orderPreference":"PARTIAL_ORDER","orderPreferenceValue":"SET"}
//
// swagger:model OrderAttribute
type OrderAttribute struct {

	// Preference for the distribution order.
	// Required: true
	OrderPreference *OrderPreference `json:"orderPreference"`

	// Value for the order preference.
	// Required: true
	OrderPreferenceValue *OrderPreferenceValue `json:"orderPreferenceValue"`
}

// Validate validates this order attribute
func (m *OrderAttribute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderPreference(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderPreferenceValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderAttribute) validateOrderPreference(formats strfmt.Registry) error {

	if err := validate.Required("orderPreference", "body", m.OrderPreference); err != nil {
		return err
	}

	if err := validate.Required("orderPreference", "body", m.OrderPreference); err != nil {
		return err
	}

	if m.OrderPreference != nil {
		if err := m.OrderPreference.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderPreference")
			}
			return err
		}
	}

	return nil
}

func (m *OrderAttribute) validateOrderPreferenceValue(formats strfmt.Registry) error {

	if err := validate.Required("orderPreferenceValue", "body", m.OrderPreferenceValue); err != nil {
		return err
	}

	if err := validate.Required("orderPreferenceValue", "body", m.OrderPreferenceValue); err != nil {
		return err
	}

	if m.OrderPreferenceValue != nil {
		if err := m.OrderPreferenceValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderPreferenceValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderPreferenceValue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order attribute based on the context it is used
func (m *OrderAttribute) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderPreference(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderPreferenceValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderAttribute) contextValidateOrderPreference(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderPreference != nil {
		if err := m.OrderPreference.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderPreference")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderPreference")
			}
			return err
		}
	}

	return nil
}

func (m *OrderAttribute) contextValidateOrderPreferenceValue(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderPreferenceValue != nil {
		if err := m.OrderPreferenceValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderPreferenceValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderPreferenceValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderAttribute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderAttribute) UnmarshalBinary(b []byte) error {
	var res OrderAttribute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
