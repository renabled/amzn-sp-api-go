// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DistributionPackageType Type of distribution packages.
// Example: CASE
//
// swagger:model DistributionPackageType
type DistributionPackageType string

func NewDistributionPackageType(value DistributionPackageType) *DistributionPackageType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DistributionPackageType.
func (m DistributionPackageType) Pointer() *DistributionPackageType {
	return &m
}

const (

	// DistributionPackageTypeCASE captures enum value "CASE"
	DistributionPackageTypeCASE DistributionPackageType = "CASE"

	// DistributionPackageTypePALLET captures enum value "PALLET"
	DistributionPackageTypePALLET DistributionPackageType = "PALLET"
)

// for schema
var distributionPackageTypeEnum []interface{}

func init() {
	var res []DistributionPackageType
	if err := json.Unmarshal([]byte(`["CASE","PALLET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		distributionPackageTypeEnum = append(distributionPackageTypeEnum, v)
	}
}

func (m DistributionPackageType) validateDistributionPackageTypeEnum(path, location string, value DistributionPackageType) error {
	if err := validate.EnumCase(path, location, value, distributionPackageTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this distribution package type
func (m DistributionPackageType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDistributionPackageTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this distribution package type based on context it is used
func (m DistributionPackageType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
