// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundPackages Represents the packages to inbound.
// Example: {"packagesToInbound":[{"count":1,"distributionPackage":{"contents":{"products":[{"quantity":1,"sku":"testPen"}]},"measurements":{"dimensions":{"height":1,"length":1,"unitOfMeasurement":"INCHES","width":1},"volume":{"unitOfMeasurement":"CUIN","volume":1},"weight":{"unitOfMeasurement":"POUNDS","weight":1}},"type":"CASE"}}]}
//
// swagger:model InboundPackages
type InboundPackages struct {

	// List of packages to be inbounded.
	// Example: [{"count":1,"distributionPackage":{"contents":{"products":[{"quantity":1,"sku":"testPen"}]},"measurements":{"dimensions":{"height":1,"length":1,"unitOfMeasurement":"INCHES","width":1},"volume":{"unitOfMeasurement":"CUIN","volume":1},"weight":{"unitOfMeasurement":"POUNDS","weight":1}},"type":"CASE"}}]
	// Required: true
	// Min Items: 1
	PackagesToInbound []*DistributionPackageQuantity `json:"packagesToInbound"`
}

// Validate validates this inbound packages
func (m *InboundPackages) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackagesToInbound(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundPackages) validatePackagesToInbound(formats strfmt.Registry) error {

	if err := validate.Required("packagesToInbound", "body", m.PackagesToInbound); err != nil {
		return err
	}

	iPackagesToInboundSize := int64(len(m.PackagesToInbound))

	if err := validate.MinItems("packagesToInbound", "body", iPackagesToInboundSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.PackagesToInbound); i++ {
		if swag.IsZero(m.PackagesToInbound[i]) { // not required
			continue
		}

		if m.PackagesToInbound[i] != nil {
			if err := m.PackagesToInbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this inbound packages based on the context it is used
func (m *InboundPackages) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackagesToInbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundPackages) contextValidatePackagesToInbound(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackagesToInbound); i++ {

		if m.PackagesToInbound[i] != nil {
			if err := m.PackagesToInbound[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packagesToInbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundPackages) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundPackages) UnmarshalBinary(b []byte) error {
	var res InboundPackages
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
