// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InventoryUnitOfMeasurement Unit of measurement for the inventory.
//
// swagger:model InventoryUnitOfMeasurement
type InventoryUnitOfMeasurement string

func NewInventoryUnitOfMeasurement(value InventoryUnitOfMeasurement) *InventoryUnitOfMeasurement {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InventoryUnitOfMeasurement.
func (m InventoryUnitOfMeasurement) Pointer() *InventoryUnitOfMeasurement {
	return &m
}

const (

	// InventoryUnitOfMeasurementPRODUCTUNITS captures enum value "PRODUCT_UNITS"
	InventoryUnitOfMeasurementPRODUCTUNITS InventoryUnitOfMeasurement = "PRODUCT_UNITS"

	// InventoryUnitOfMeasurementCASES captures enum value "CASES"
	InventoryUnitOfMeasurementCASES InventoryUnitOfMeasurement = "CASES"

	// InventoryUnitOfMeasurementPALLETS captures enum value "PALLETS"
	InventoryUnitOfMeasurementPALLETS InventoryUnitOfMeasurement = "PALLETS"
)

// for schema
var inventoryUnitOfMeasurementEnum []interface{}

func init() {
	var res []InventoryUnitOfMeasurement
	if err := json.Unmarshal([]byte(`["PRODUCT_UNITS","CASES","PALLETS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryUnitOfMeasurementEnum = append(inventoryUnitOfMeasurementEnum, v)
	}
}

func (m InventoryUnitOfMeasurement) validateInventoryUnitOfMeasurementEnum(path, location string, value InventoryUnitOfMeasurement) error {
	if err := validate.EnumCase(path, location, value, inventoryUnitOfMeasurementEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this inventory unit of measurement
func (m InventoryUnitOfMeasurement) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInventoryUnitOfMeasurementEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this inventory unit of measurement based on context it is used
func (m InventoryUnitOfMeasurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
