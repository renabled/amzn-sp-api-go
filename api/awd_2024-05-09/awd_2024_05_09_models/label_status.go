// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LabelStatus The status of your label.
//
// swagger:model LabelStatus
type LabelStatus string

func NewLabelStatus(value LabelStatus) *LabelStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LabelStatus.
func (m LabelStatus) Pointer() *LabelStatus {
	return &m
}

const (

	// LabelStatusGENERATING captures enum value "GENERATING"
	LabelStatusGENERATING LabelStatus = "GENERATING"

	// LabelStatusGENERATED captures enum value "GENERATED"
	LabelStatusGENERATED LabelStatus = "GENERATED"

	// LabelStatusGENERATIONFAILED captures enum value "GENERATION_FAILED"
	LabelStatusGENERATIONFAILED LabelStatus = "GENERATION_FAILED"

	// LabelStatusNOTREADY captures enum value "NOT_READY"
	LabelStatusNOTREADY LabelStatus = "NOT_READY"
)

// for schema
var labelStatusEnum []interface{}

func init() {
	var res []LabelStatus
	if err := json.Unmarshal([]byte(`["GENERATING","GENERATED","GENERATION_FAILED","NOT_READY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelStatusEnum = append(labelStatusEnum, v)
	}
}

func (m LabelStatus) validateLabelStatusEnum(path, location string, value LabelStatus) error {
	if err := validate.EnumCase(path, location, value, labelStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this label status
func (m LabelStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLabelStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this label status based on context it is used
func (m LabelStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
