// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InventoryDetailsVisibility Enum to specify if returned summaries should include additional summarized inventory details and quantities.
// Example: SHOW
//
// swagger:model InventoryDetailsVisibility
type InventoryDetailsVisibility string

func NewInventoryDetailsVisibility(value InventoryDetailsVisibility) *InventoryDetailsVisibility {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InventoryDetailsVisibility.
func (m InventoryDetailsVisibility) Pointer() *InventoryDetailsVisibility {
	return &m
}

const (

	// InventoryDetailsVisibilitySHOW captures enum value "SHOW"
	InventoryDetailsVisibilitySHOW InventoryDetailsVisibility = "SHOW"

	// InventoryDetailsVisibilityHIDE captures enum value "HIDE"
	InventoryDetailsVisibilityHIDE InventoryDetailsVisibility = "HIDE"
)

// for schema
var inventoryDetailsVisibilityEnum []interface{}

func init() {
	var res []InventoryDetailsVisibility
	if err := json.Unmarshal([]byte(`["SHOW","HIDE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inventoryDetailsVisibilityEnum = append(inventoryDetailsVisibilityEnum, v)
	}
}

func (m InventoryDetailsVisibility) validateInventoryDetailsVisibilityEnum(path, location string, value InventoryDetailsVisibility) error {
	if err := validate.EnumCase(path, location, value, inventoryDetailsVisibilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this inventory details visibility
func (m InventoryDetailsVisibility) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInventoryDetailsVisibilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this inventory details visibility based on context it is used
func (m InventoryDetailsVisibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
