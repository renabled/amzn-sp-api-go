// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SkuEligibility Represents eligibility of one SKU.
//
// swagger:model SkuEligibility
type SkuEligibility struct {

	// If not eligible, these are list of error codes and descriptions.
	IneligibilityReasons []*SkuIneligibilityReason `json:"ineligibilityReasons"`

	// package quantity
	// Required: true
	PackageQuantity *DistributionPackageQuantity `json:"packageQuantity"`

	// status
	// Required: true
	Status *InboundEligibilityStatus `json:"status"`
}

// Validate validates this sku eligibility
func (m *SkuEligibility) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIneligibilityReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkuEligibility) validateIneligibilityReasons(formats strfmt.Registry) error {
	if swag.IsZero(m.IneligibilityReasons) { // not required
		return nil
	}

	for i := 0; i < len(m.IneligibilityReasons); i++ {
		if swag.IsZero(m.IneligibilityReasons[i]) { // not required
			continue
		}

		if m.IneligibilityReasons[i] != nil {
			if err := m.IneligibilityReasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SkuEligibility) validatePackageQuantity(formats strfmt.Registry) error {

	if err := validate.Required("packageQuantity", "body", m.PackageQuantity); err != nil {
		return err
	}

	if m.PackageQuantity != nil {
		if err := m.PackageQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *SkuEligibility) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this sku eligibility based on the context it is used
func (m *SkuEligibility) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIneligibilityReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkuEligibility) contextValidateIneligibilityReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IneligibilityReasons); i++ {

		if m.IneligibilityReasons[i] != nil {
			if err := m.IneligibilityReasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SkuEligibility) contextValidatePackageQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageQuantity != nil {
		if err := m.PackageQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *SkuEligibility) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("status")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SkuEligibility) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SkuEligibility) UnmarshalBinary(b []byte) error {
	var res SkuEligibility
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
