// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderPreferenceValue Value for the order preference.
// Example: SET
//
// swagger:model OrderPreferenceValue
type OrderPreferenceValue string

func NewOrderPreferenceValue(value OrderPreferenceValue) *OrderPreferenceValue {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrderPreferenceValue.
func (m OrderPreferenceValue) Pointer() *OrderPreferenceValue {
	return &m
}

const (

	// OrderPreferenceValueSET captures enum value "SET"
	OrderPreferenceValueSET OrderPreferenceValue = "SET"

	// OrderPreferenceValueUNSET captures enum value "UNSET"
	OrderPreferenceValueUNSET OrderPreferenceValue = "UNSET"
)

// for schema
var orderPreferenceValueEnum []interface{}

func init() {
	var res []OrderPreferenceValue
	if err := json.Unmarshal([]byte(`["SET","UNSET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderPreferenceValueEnum = append(orderPreferenceValueEnum, v)
	}
}

func (m OrderPreferenceValue) validateOrderPreferenceValueEnum(path, location string, value OrderPreferenceValue) error {
	if err := validate.EnumCase(path, location, value, orderPreferenceValueEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order preference value
func (m OrderPreferenceValue) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderPreferenceValueEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order preference value based on context it is used
func (m OrderPreferenceValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
