// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderIneligibilityReason Represents one ineligibility reason for the order (there can be multiple reasons).
// Example: {"code":"INVALID_MSKU","description":"The MSKU of an invalid order."}
//
// swagger:model OrderIneligibilityReason
type OrderIneligibilityReason struct {

	// Code for the order ineligibility.
	// Example: INVALID_MSKU
	// Required: true
	Code *string `json:"code"`

	// Description detailing the ineligibility reason of the order.
	// Example: The MSKU passed as part of order is invalid
	// Required: true
	Description *string `json:"description"`
}

// Validate validates this order ineligibility reason
func (m *OrderIneligibilityReason) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderIneligibilityReason) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *OrderIneligibilityReason) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this order ineligibility reason based on context it is used
func (m *OrderIneligibilityReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OrderIneligibilityReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderIneligibilityReason) UnmarshalBinary(b []byte) error {
	var res OrderIneligibilityReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
