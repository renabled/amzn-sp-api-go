// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SkuQuantity Quantity details for a SKU as part of a shipment
//
// swagger:model SkuQuantity
type SkuQuantity struct {

	// expected quantity
	// Required: true
	ExpectedQuantity *InventoryQuantity `json:"expectedQuantity"`

	// received quantity
	ReceivedQuantity *InventoryQuantity `json:"receivedQuantity,omitempty"`

	// The merchant stock keeping unit
	// Required: true
	Sku *string `json:"sku"`
}

// Validate validates this sku quantity
func (m *SkuQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpectedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceivedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkuQuantity) validateExpectedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("expectedQuantity", "body", m.ExpectedQuantity); err != nil {
		return err
	}

	if m.ExpectedQuantity != nil {
		if err := m.ExpectedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expectedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expectedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *SkuQuantity) validateReceivedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.ReceivedQuantity) { // not required
		return nil
	}

	if m.ReceivedQuantity != nil {
		if err := m.ReceivedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *SkuQuantity) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this sku quantity based on the context it is used
func (m *SkuQuantity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExpectedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReceivedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SkuQuantity) contextValidateExpectedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.ExpectedQuantity != nil {
		if err := m.ExpectedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("expectedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("expectedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *SkuQuantity) contextValidateReceivedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.ReceivedQuantity != nil {
		if err := m.ReceivedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("receivedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("receivedQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SkuQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SkuQuantity) UnmarshalBinary(b []byte) error {
	var res SkuQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
