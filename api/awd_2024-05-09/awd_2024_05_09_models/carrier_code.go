// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CarrierCode Identifies the carrier that will deliver the shipment.
// Example: {"carrierCodeType":"SCAC","carrierCodeValue":"TestCarrierCode"}
//
// swagger:model CarrierCode
type CarrierCode struct {

	// Denotes the carrier type.
	CarrierCodeType CarrierCodeType `json:"carrierCodeType,omitempty"`

	// Value of the carrier code.
	// Example: TestCarrierCode
	CarrierCodeValue string `json:"carrierCodeValue,omitempty"`
}

// Validate validates this carrier code
func (m *CarrierCode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierCodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CarrierCode) validateCarrierCodeType(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierCodeType) { // not required
		return nil
	}

	if err := m.CarrierCodeType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierCodeType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierCodeType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this carrier code based on the context it is used
func (m *CarrierCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierCodeType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CarrierCode) contextValidateCarrierCodeType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CarrierCodeType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierCodeType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierCodeType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CarrierCode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CarrierCode) UnmarshalBinary(b []byte) error {
	var res CarrierCode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
