// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationDetails Transportation details for the shipment.
// Example: {"carrierCode":{"carrierCodeType":"SCAC","carrierCodeValue":"TestCarrierCode"},"shipBy":"2023-01-12T10:00:00.000Z","trackingId":"TestTrackingId"}
//
// swagger:model TransportationDetails
type TransportationDetails struct {

	// Unique or identifying code for the carrier.
	CarrierCode *CarrierCode `json:"carrierCode,omitempty"`

	// Timestamp when the shipment will be shipped.
	// Example: 2023-01-12T10:00:00.000Z
	// Required: true
	// Format: date-time
	ShipBy *strfmt.DateTime `json:"shipBy"`

	// Tracking ID for transportation.
	// Example: TestTrackingId
	// Min Length: 1
	TrackingID string `json:"trackingId,omitempty"`
}

// Validate validates this transportation details
func (m *TransportationDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationDetails) validateCarrierCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierCode) { // not required
		return nil
	}

	if m.CarrierCode != nil {
		if err := m.CarrierCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierCode")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationDetails) validateShipBy(formats strfmt.Registry) error {

	if err := validate.Required("shipBy", "body", m.ShipBy); err != nil {
		return err
	}

	if err := validate.FormatOf("shipBy", "body", "date-time", m.ShipBy.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *TransportationDetails) validateTrackingID(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingID) { // not required
		return nil
	}

	if err := validate.MinLength("trackingId", "body", m.TrackingID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transportation details based on the context it is used
func (m *TransportationDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationDetails) contextValidateCarrierCode(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierCode != nil {
		if err := m.CarrierCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportationDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationDetails) UnmarshalBinary(b []byte) error {
	var res TransportationDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
