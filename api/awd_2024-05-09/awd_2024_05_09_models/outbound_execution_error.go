// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OutboundExecutionError Execution errors associated with the outbound order. This field will be populated if the order failed validation.
// Example: {"failureCode":"TestErrorCode","failureReasons":["Test failure reason"],"sku":"SampleSKU"}
//
// swagger:model OutboundExecutionError
type OutboundExecutionError struct {

	// Failure code details for the error.
	// Example: TestErrorCode
	// Required: true
	FailureCode *string `json:"failureCode"`

	// Failure reasons for the error.
	// Example: ["Test failure reason"]
	// Required: true
	FailureReasons []string `json:"failureReasons"`

	// MSKU associated with the error.
	// Example: SampleSKU
	Sku string `json:"sku,omitempty"`
}

// Validate validates this outbound execution error
func (m *OutboundExecutionError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailureCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailureReasons(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundExecutionError) validateFailureCode(formats strfmt.Registry) error {

	if err := validate.Required("failureCode", "body", m.FailureCode); err != nil {
		return err
	}

	return nil
}

func (m *OutboundExecutionError) validateFailureReasons(formats strfmt.Registry) error {

	if err := validate.Required("failureReasons", "body", m.FailureReasons); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this outbound execution error based on context it is used
func (m *OutboundExecutionError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OutboundExecutionError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundExecutionError) UnmarshalBinary(b []byte) error {
	var res OutboundExecutionError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
