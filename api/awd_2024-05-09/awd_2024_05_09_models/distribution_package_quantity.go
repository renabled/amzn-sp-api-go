// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DistributionPackageQuantity Represents a distribution package with its respective quantity.
// Example: {"count":1,"distributionPackage":{"contents":{"products":[{"quantity":1,"sku":"testPen"}]},"measurements":{"dimensions":{"height":1,"length":1,"unitOfMeasurement":"INCHES","width":1},"volume":{"unitOfMeasurement":"CUIN","volume":1},"weight":{"unitOfMeasurement":"POUNDS","weight":1}},"type":"CASE"}}
//
// swagger:model DistributionPackageQuantity
type DistributionPackageQuantity struct {

	// Number of cases or pallets with the same package configuration.
	// Required: true
	Count *int32 `json:"count"`

	// distribution package
	// Required: true
	DistributionPackage *DistributionPackage `json:"distributionPackage"`
}

// Validate validates this distribution package quantity
func (m *DistributionPackageQuantity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDistributionPackage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistributionPackageQuantity) validateCount(formats strfmt.Registry) error {

	if err := validate.Required("count", "body", m.Count); err != nil {
		return err
	}

	return nil
}

func (m *DistributionPackageQuantity) validateDistributionPackage(formats strfmt.Registry) error {

	if err := validate.Required("distributionPackage", "body", m.DistributionPackage); err != nil {
		return err
	}

	if m.DistributionPackage != nil {
		if err := m.DistributionPackage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributionPackage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distributionPackage")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this distribution package quantity based on the context it is used
func (m *DistributionPackageQuantity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDistributionPackage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistributionPackageQuantity) contextValidateDistributionPackage(ctx context.Context, formats strfmt.Registry) error {

	if m.DistributionPackage != nil {
		if err := m.DistributionPackage.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("distributionPackage")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("distributionPackage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DistributionPackageQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistributionPackageQuantity) UnmarshalBinary(b []byte) error {
	var res DistributionPackageQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
