// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InboundStatus The supported statuses for an inbound order.
//
// swagger:model InboundStatus
type InboundStatus string

func NewInboundStatus(value InboundStatus) *InboundStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InboundStatus.
func (m InboundStatus) Pointer() *InboundStatus {
	return &m
}

const (

	// InboundStatusDRAFT captures enum value "DRAFT"
	InboundStatusDRAFT InboundStatus = "DRAFT"

	// InboundStatusVALIDATING captures enum value "VALIDATING"
	InboundStatusVALIDATING InboundStatus = "VALIDATING"

	// InboundStatusCONFIRMED captures enum value "CONFIRMED"
	InboundStatusCONFIRMED InboundStatus = "CONFIRMED"

	// InboundStatusCLOSED captures enum value "CLOSED"
	InboundStatusCLOSED InboundStatus = "CLOSED"

	// InboundStatusEXPIRED captures enum value "EXPIRED"
	InboundStatusEXPIRED InboundStatus = "EXPIRED"

	// InboundStatusCANCELLED captures enum value "CANCELLED"
	InboundStatusCANCELLED InboundStatus = "CANCELLED"
)

// for schema
var inboundStatusEnum []interface{}

func init() {
	var res []InboundStatus
	if err := json.Unmarshal([]byte(`["DRAFT","VALIDATING","CONFIRMED","CLOSED","EXPIRED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inboundStatusEnum = append(inboundStatusEnum, v)
	}
}

func (m InboundStatus) validateInboundStatusEnum(path, location string, value InboundStatus) error {
	if err := validate.EnumCase(path, location, value, inboundStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this inbound status
func (m InboundStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInboundStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this inbound status based on context it is used
func (m InboundStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
