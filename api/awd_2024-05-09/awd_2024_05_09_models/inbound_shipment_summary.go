// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InboundShipmentSummary Summary for an AWD inbound shipment containing the shipment ID, which can be used to retrieve the actual shipment.
//
// swagger:model InboundShipmentSummary
type InboundShipmentSummary struct {

	// Timestamp when the shipment was created.
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// Optional client-provided reference ID that can be used to correlate this shipment with client resources. For example, to map this shipment to an internal bookkeeping order record.
	// Example: TestReferenceId
	ExternalReferenceID string `json:"externalReferenceId,omitempty"`

	// The AWD inbound order ID that this inbound shipment belongs to.
	// Required: true
	// Min Length: 1
	OrderID *string `json:"orderId"`

	// A unique shipment ID.
	// Required: true
	// Min Length: 1
	ShipmentID *string `json:"shipmentId"`

	// shipment status
	// Required: true
	ShipmentStatus *InboundShipmentStatus `json:"shipmentStatus"`

	// Timestamp when the shipment was updated.
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this inbound shipment summary
func (m *InboundShipmentSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentSummary) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentSummary) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("orderId", "body", m.OrderID); err != nil {
		return err
	}

	if err := validate.MinLength("orderId", "body", *m.OrderID, 1); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentSummary) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.MinLength("shipmentId", "body", *m.ShipmentID, 1); err != nil {
		return err
	}

	return nil
}

func (m *InboundShipmentSummary) validateShipmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentStatus")
			}
			return err
		}
	}

	return nil
}

func (m *InboundShipmentSummary) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this inbound shipment summary based on the context it is used
func (m *InboundShipmentSummary) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShipmentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InboundShipmentSummary) contextValidateShipmentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InboundShipmentSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InboundShipmentSummary) UnmarshalBinary(b []byte) error {
	var res InboundShipmentSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
