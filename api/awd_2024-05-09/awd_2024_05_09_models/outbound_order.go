// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OutboundOrder Represents an AWD outbound order.
//
// swagger:model OutboundOrder
type OutboundOrder struct {

	// Date on which this outbound order was confirmed.
	// Example: 2023-01-12T10:00:00.000Z
	// Format: date-time
	ConfirmedOn strfmt.DateTime `json:"confirmedOn,omitempty"`

	// Date on which this outbound order was created.
	// Example: 2023-01-12T10:00:00.000Z
	// Format: date-time
	CreatedAt strfmt.DateTime `json:"createdAt,omitempty"`

	// List of packages that are eligible for outbound.
	EligiblePackagesToOutbound []*DistributionPackageQuantity `json:"eligiblePackagesToOutbound"`

	// List of product units that are eligible for outbound.
	EligibleProductsToOutbound []*ProductQuantity `json:"eligibleProductsToOutbound"`

	// Execution errors associated with the outbound order. This field will be populated if the order failed validation.
	ExecutionErrors []*OutboundExecutionError `json:"executionErrors"`

	// Order ID for the outbound order.
	// Required: true
	OrderID *string `json:"orderId"`

	// Order preferences for this outbound order.
	OrderPreferences []*OrderAttribute `json:"orderPreferences"`

	// Status for the outbound order.
	// Required: true
	OrderStatus *OutboundStatus `json:"orderStatus"`

	// List of outbound shipments that are part of this order.
	// Required: true
	OutboundShipments []*OutboundShipment `json:"outboundShipments"`

	// List of packages to be outbound.
	PackagesToOutbound []*DistributionPackageQuantity `json:"packagesToOutbound"`

	// List of product units to be outbound.
	ProductsToOutbound []*ProductQuantity `json:"productsToOutbound"`

	// Outbound packages that are shipped after the execution has completed post confirmation.
	ShippedOutboundPackages []*DistributionPackageQuantity `json:"shippedOutboundPackages"`

	// Outbound product units that are shipped after the execution has completed post confirmation.
	ShippedOutboundProducts []*ProductQuantity `json:"shippedOutboundProducts"`

	// Date on which this outbound order was last updated.
	// Example: 2023-01-12T10:00:00.000Z
	// Format: date-time
	UpdatedAt strfmt.DateTime `json:"updatedAt,omitempty"`
}

// Validate validates this outbound order
func (m *OutboundOrder) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfirmedOn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEligiblePackagesToOutbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEligibleProductsToOutbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExecutionErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderPreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundShipments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackagesToOutbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductsToOutbound(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedOutboundPackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedOutboundProducts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundOrder) validateConfirmedOn(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfirmedOn) { // not required
		return nil
	}

	if err := validate.FormatOf("confirmedOn", "body", "date-time", m.ConfirmedOn.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OutboundOrder) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("createdAt", "body", "date-time", m.CreatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OutboundOrder) validateEligiblePackagesToOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.EligiblePackagesToOutbound) { // not required
		return nil
	}

	for i := 0; i < len(m.EligiblePackagesToOutbound); i++ {
		if swag.IsZero(m.EligiblePackagesToOutbound[i]) { // not required
			continue
		}

		if m.EligiblePackagesToOutbound[i] != nil {
			if err := m.EligiblePackagesToOutbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eligiblePackagesToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eligiblePackagesToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateEligibleProductsToOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.EligibleProductsToOutbound) { // not required
		return nil
	}

	for i := 0; i < len(m.EligibleProductsToOutbound); i++ {
		if swag.IsZero(m.EligibleProductsToOutbound[i]) { // not required
			continue
		}

		if m.EligibleProductsToOutbound[i] != nil {
			if err := m.EligibleProductsToOutbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eligibleProductsToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eligibleProductsToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateExecutionErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.ExecutionErrors) { // not required
		return nil
	}

	for i := 0; i < len(m.ExecutionErrors); i++ {
		if swag.IsZero(m.ExecutionErrors[i]) { // not required
			continue
		}

		if m.ExecutionErrors[i] != nil {
			if err := m.ExecutionErrors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("executionErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("executionErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("orderId", "body", m.OrderID); err != nil {
		return err
	}

	return nil
}

func (m *OutboundOrder) validateOrderPreferences(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderPreferences) { // not required
		return nil
	}

	for i := 0; i < len(m.OrderPreferences); i++ {
		if swag.IsZero(m.OrderPreferences[i]) { // not required
			continue
		}

		if m.OrderPreferences[i] != nil {
			if err := m.OrderPreferences[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderPreferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderPreferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateOrderStatus(formats strfmt.Registry) error {

	if err := validate.Required("orderStatus", "body", m.OrderStatus); err != nil {
		return err
	}

	if err := validate.Required("orderStatus", "body", m.OrderStatus); err != nil {
		return err
	}

	if m.OrderStatus != nil {
		if err := m.OrderStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderStatus")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundOrder) validateOutboundShipments(formats strfmt.Registry) error {

	if err := validate.Required("outboundShipments", "body", m.OutboundShipments); err != nil {
		return err
	}

	for i := 0; i < len(m.OutboundShipments); i++ {
		if swag.IsZero(m.OutboundShipments[i]) { // not required
			continue
		}

		if m.OutboundShipments[i] != nil {
			if err := m.OutboundShipments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outboundShipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outboundShipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validatePackagesToOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.PackagesToOutbound) { // not required
		return nil
	}

	for i := 0; i < len(m.PackagesToOutbound); i++ {
		if swag.IsZero(m.PackagesToOutbound[i]) { // not required
			continue
		}

		if m.PackagesToOutbound[i] != nil {
			if err := m.PackagesToOutbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packagesToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packagesToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateProductsToOutbound(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductsToOutbound) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductsToOutbound); i++ {
		if swag.IsZero(m.ProductsToOutbound[i]) { // not required
			continue
		}

		if m.ProductsToOutbound[i] != nil {
			if err := m.ProductsToOutbound[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("productsToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("productsToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateShippedOutboundPackages(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippedOutboundPackages) { // not required
		return nil
	}

	for i := 0; i < len(m.ShippedOutboundPackages); i++ {
		if swag.IsZero(m.ShippedOutboundPackages[i]) { // not required
			continue
		}

		if m.ShippedOutboundPackages[i] != nil {
			if err := m.ShippedOutboundPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippedOutboundPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippedOutboundPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateShippedOutboundProducts(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippedOutboundProducts) { // not required
		return nil
	}

	for i := 0; i < len(m.ShippedOutboundProducts); i++ {
		if swag.IsZero(m.ShippedOutboundProducts[i]) { // not required
			continue
		}

		if m.ShippedOutboundProducts[i] != nil {
			if err := m.ShippedOutboundProducts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippedOutboundProducts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippedOutboundProducts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("updatedAt", "body", "date-time", m.UpdatedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this outbound order based on the context it is used
func (m *OutboundOrder) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEligiblePackagesToOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEligibleProductsToOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExecutionErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderPreferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOutboundShipments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackagesToOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductsToOutbound(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippedOutboundPackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippedOutboundProducts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundOrder) contextValidateEligiblePackagesToOutbound(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EligiblePackagesToOutbound); i++ {

		if m.EligiblePackagesToOutbound[i] != nil {
			if err := m.EligiblePackagesToOutbound[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eligiblePackagesToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eligiblePackagesToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateEligibleProductsToOutbound(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EligibleProductsToOutbound); i++ {

		if m.EligibleProductsToOutbound[i] != nil {
			if err := m.EligibleProductsToOutbound[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eligibleProductsToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eligibleProductsToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateExecutionErrors(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExecutionErrors); i++ {

		if m.ExecutionErrors[i] != nil {
			if err := m.ExecutionErrors[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("executionErrors" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("executionErrors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateOrderPreferences(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderPreferences); i++ {

		if m.OrderPreferences[i] != nil {
			if err := m.OrderPreferences[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderPreferences" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderPreferences" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateOrderStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderStatus != nil {
		if err := m.OrderStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderStatus")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundOrder) contextValidateOutboundShipments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutboundShipments); i++ {

		if m.OutboundShipments[i] != nil {
			if err := m.OutboundShipments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outboundShipments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outboundShipments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidatePackagesToOutbound(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackagesToOutbound); i++ {

		if m.PackagesToOutbound[i] != nil {
			if err := m.PackagesToOutbound[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packagesToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packagesToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateProductsToOutbound(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ProductsToOutbound); i++ {

		if m.ProductsToOutbound[i] != nil {
			if err := m.ProductsToOutbound[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("productsToOutbound" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("productsToOutbound" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateShippedOutboundPackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShippedOutboundPackages); i++ {

		if m.ShippedOutboundPackages[i] != nil {
			if err := m.ShippedOutboundPackages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippedOutboundPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippedOutboundPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OutboundOrder) contextValidateShippedOutboundProducts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShippedOutboundProducts); i++ {

		if m.ShippedOutboundProducts[i] != nil {
			if err := m.ShippedOutboundProducts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shippedOutboundProducts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shippedOutboundProducts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundOrder) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundOrder) UnmarshalBinary(b []byte) error {
	var res OutboundOrder
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
