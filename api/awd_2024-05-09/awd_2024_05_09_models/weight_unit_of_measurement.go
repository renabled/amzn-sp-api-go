// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WeightUnitOfMeasurement Unit of measurement for the package weight.
//
// swagger:model WeightUnitOfMeasurement
type WeightUnitOfMeasurement string

func NewWeightUnitOfMeasurement(value WeightUnitOfMeasurement) *WeightUnitOfMeasurement {
	return &value
}

// Pointer returns a pointer to a freshly-allocated WeightUnitOfMeasurement.
func (m WeightUnitOfMeasurement) Pointer() *WeightUnitOfMeasurement {
	return &m
}

const (

	// WeightUnitOfMeasurementPOUNDS captures enum value "POUNDS"
	WeightUnitOfMeasurementPOUNDS WeightUnitOfMeasurement = "POUNDS"

	// WeightUnitOfMeasurementKILOGRAMS captures enum value "KILOGRAMS"
	WeightUnitOfMeasurementKILOGRAMS WeightUnitOfMeasurement = "KILOGRAMS"
)

// for schema
var weightUnitOfMeasurementEnum []interface{}

func init() {
	var res []WeightUnitOfMeasurement
	if err := json.Unmarshal([]byte(`["POUNDS","KILOGRAMS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		weightUnitOfMeasurementEnum = append(weightUnitOfMeasurementEnum, v)
	}
}

func (m WeightUnitOfMeasurement) validateWeightUnitOfMeasurementEnum(path, location string, value WeightUnitOfMeasurement) error {
	if err := validate.EnumCase(path, location, value, weightUnitOfMeasurementEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this weight unit of measurement
func (m WeightUnitOfMeasurement) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWeightUnitOfMeasurementEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this weight unit of measurement based on context it is used
func (m WeightUnitOfMeasurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
