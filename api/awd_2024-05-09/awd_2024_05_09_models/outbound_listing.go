// Code generated by go-swagger; DO NOT EDIT.

package awd_2024_05_09_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OutboundListing A list of paginated outbound orders filtered by the attributes passed in the request.
//
// swagger:model OutboundListing
type OutboundListing struct {

	// Token to retrieve the next set of paginated results.
	// Example: SampleToken
	NextToken string `json:"nextToken,omitempty"`

	// List of outbound orders.
	OutboundOrders []*OutboundOrder `json:"outboundOrders"`
}

// Validate validates this outbound listing
func (m *OutboundListing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOutboundOrders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundListing) validateOutboundOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.OutboundOrders) { // not required
		return nil
	}

	for i := 0; i < len(m.OutboundOrders); i++ {
		if swag.IsZero(m.OutboundOrders[i]) { // not required
			continue
		}

		if m.OutboundOrders[i] != nil {
			if err := m.OutboundOrders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outboundOrders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outboundOrders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this outbound listing based on the context it is used
func (m *OutboundListing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOutboundOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundListing) contextValidateOutboundOrders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OutboundOrders); i++ {

		if m.OutboundOrders[i] != nil {
			if err := m.OutboundOrders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("outboundOrders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("outboundOrders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundListing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundListing) UnmarshalBinary(b []byte) error {
	var res OutboundListing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
