// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// UpdateInboundShipmentTransportDetailsReader is a Reader for the UpdateInboundShipmentTransportDetails structure.
type UpdateInboundShipmentTransportDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInboundShipmentTransportDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInboundShipmentTransportDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInboundShipmentTransportDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInboundShipmentTransportDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInboundShipmentTransportDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateInboundShipmentTransportDetailsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateInboundShipmentTransportDetailsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateInboundShipmentTransportDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInboundShipmentTransportDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateInboundShipmentTransportDetailsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateInboundShipmentTransportDetailsOK creates a UpdateInboundShipmentTransportDetailsOK with default headers values
func NewUpdateInboundShipmentTransportDetailsOK() *UpdateInboundShipmentTransportDetailsOK {
	return &UpdateInboundShipmentTransportDetailsOK{}
}

/*
UpdateInboundShipmentTransportDetailsOK describes a response with status code 200, with default header values.

The 200 response for `updateInboundShipmentTransportDetails`.
*/
type UpdateInboundShipmentTransportDetailsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.InboundShipment
}

// IsSuccess returns true when this update inbound shipment transport details o k response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update inbound shipment transport details o k response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details o k response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inbound shipment transport details o k response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details o k response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateInboundShipmentTransportDetailsOK) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsOK  %+v", 200, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsOK) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsOK  %+v", 200, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsOK) GetPayload() *awd_2024_05_09_models.InboundShipment {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.InboundShipment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsBadRequest creates a UpdateInboundShipmentTransportDetailsBadRequest with default headers values
func NewUpdateInboundShipmentTransportDetailsBadRequest() *UpdateInboundShipmentTransportDetailsBadRequest {
	return &UpdateInboundShipmentTransportDetailsBadRequest{}
}

/*
UpdateInboundShipmentTransportDetailsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateInboundShipmentTransportDetailsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details bad request response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details bad request response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details bad request response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound shipment transport details bad request response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details bad request response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateInboundShipmentTransportDetailsBadRequest) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsBadRequest) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsForbidden creates a UpdateInboundShipmentTransportDetailsForbidden with default headers values
func NewUpdateInboundShipmentTransportDetailsForbidden() *UpdateInboundShipmentTransportDetailsForbidden {
	return &UpdateInboundShipmentTransportDetailsForbidden{}
}

/*
UpdateInboundShipmentTransportDetailsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateInboundShipmentTransportDetailsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details forbidden response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details forbidden response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details forbidden response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound shipment transport details forbidden response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details forbidden response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateInboundShipmentTransportDetailsForbidden) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsForbidden) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsNotFound creates a UpdateInboundShipmentTransportDetailsNotFound with default headers values
func NewUpdateInboundShipmentTransportDetailsNotFound() *UpdateInboundShipmentTransportDetailsNotFound {
	return &UpdateInboundShipmentTransportDetailsNotFound{}
}

/*
UpdateInboundShipmentTransportDetailsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateInboundShipmentTransportDetailsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details not found response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details not found response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details not found response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound shipment transport details not found response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details not found response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateInboundShipmentTransportDetailsNotFound) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsNotFound) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsRequestEntityTooLarge creates a UpdateInboundShipmentTransportDetailsRequestEntityTooLarge with default headers values
func NewUpdateInboundShipmentTransportDetailsRequestEntityTooLarge() *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge {
	return &UpdateInboundShipmentTransportDetailsRequestEntityTooLarge{}
}

/*
UpdateInboundShipmentTransportDetailsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateInboundShipmentTransportDetailsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details request entity too large response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details request entity too large response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details request entity too large response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound shipment transport details request entity too large response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details request entity too large response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsUnsupportedMediaType creates a UpdateInboundShipmentTransportDetailsUnsupportedMediaType with default headers values
func NewUpdateInboundShipmentTransportDetailsUnsupportedMediaType() *UpdateInboundShipmentTransportDetailsUnsupportedMediaType {
	return &UpdateInboundShipmentTransportDetailsUnsupportedMediaType{}
}

/*
UpdateInboundShipmentTransportDetailsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateInboundShipmentTransportDetailsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details unsupported media type response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details unsupported media type response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details unsupported media type response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound shipment transport details unsupported media type response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details unsupported media type response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsTooManyRequests creates a UpdateInboundShipmentTransportDetailsTooManyRequests with default headers values
func NewUpdateInboundShipmentTransportDetailsTooManyRequests() *UpdateInboundShipmentTransportDetailsTooManyRequests {
	return &UpdateInboundShipmentTransportDetailsTooManyRequests{}
}

/*
UpdateInboundShipmentTransportDetailsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateInboundShipmentTransportDetailsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details too many requests response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details too many requests response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details too many requests response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound shipment transport details too many requests response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound shipment transport details too many requests response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsInternalServerError creates a UpdateInboundShipmentTransportDetailsInternalServerError with default headers values
func NewUpdateInboundShipmentTransportDetailsInternalServerError() *UpdateInboundShipmentTransportDetailsInternalServerError {
	return &UpdateInboundShipmentTransportDetailsInternalServerError{}
}

/*
UpdateInboundShipmentTransportDetailsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateInboundShipmentTransportDetailsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details internal server error response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details internal server error response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details internal server error response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inbound shipment transport details internal server error response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update inbound shipment transport details internal server error response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateInboundShipmentTransportDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsInternalServerError) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundShipmentTransportDetailsServiceUnavailable creates a UpdateInboundShipmentTransportDetailsServiceUnavailable with default headers values
func NewUpdateInboundShipmentTransportDetailsServiceUnavailable() *UpdateInboundShipmentTransportDetailsServiceUnavailable {
	return &UpdateInboundShipmentTransportDetailsServiceUnavailable{}
}

/*
UpdateInboundShipmentTransportDetailsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateInboundShipmentTransportDetailsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update inbound shipment transport details service unavailable response has a 2xx status code
func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound shipment transport details service unavailable response has a 3xx status code
func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound shipment transport details service unavailable response has a 4xx status code
func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inbound shipment transport details service unavailable response has a 5xx status code
func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update inbound shipment transport details service unavailable response a status code equal to that given
func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/inboundShipments/{shipmentId}/transport][%d] updateInboundShipmentTransportDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundShipmentTransportDetailsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
