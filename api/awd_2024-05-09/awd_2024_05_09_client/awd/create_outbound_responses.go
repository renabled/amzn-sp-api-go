// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// CreateOutboundReader is a Reader for the CreateOutbound structure.
type CreateOutboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOutboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateOutboundCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateOutboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateOutboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateOutboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateOutboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateOutboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateOutboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateOutboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateOutboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateOutboundCreated creates a CreateOutboundCreated with default headers values
func NewCreateOutboundCreated() *CreateOutboundCreated {
	return &CreateOutboundCreated{}
}

/*
CreateOutboundCreated describes a response with status code 201, with default header values.

The 201 response for `createOutbound`.
*/
type CreateOutboundCreated struct {

	/* Location header with the order ID for the newly created outbound order.
	 */
	Location string

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.OutboundOrderReference
}

// IsSuccess returns true when this create outbound created response has a 2xx status code
func (o *CreateOutboundCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create outbound created response has a 3xx status code
func (o *CreateOutboundCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound created response has a 4xx status code
func (o *CreateOutboundCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create outbound created response has a 5xx status code
func (o *CreateOutboundCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound created response a status code equal to that given
func (o *CreateOutboundCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateOutboundCreated) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundCreated  %+v", 201, o.Payload)
}

func (o *CreateOutboundCreated) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundCreated  %+v", 201, o.Payload)
}

func (o *CreateOutboundCreated) GetPayload() *awd_2024_05_09_models.OutboundOrderReference {
	return o.Payload
}

func (o *CreateOutboundCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header location
	hdrLocation := response.GetHeader("location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.OutboundOrderReference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundBadRequest creates a CreateOutboundBadRequest with default headers values
func NewCreateOutboundBadRequest() *CreateOutboundBadRequest {
	return &CreateOutboundBadRequest{}
}

/*
CreateOutboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateOutboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound bad request response has a 2xx status code
func (o *CreateOutboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound bad request response has a 3xx status code
func (o *CreateOutboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound bad request response has a 4xx status code
func (o *CreateOutboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create outbound bad request response has a 5xx status code
func (o *CreateOutboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound bad request response a status code equal to that given
func (o *CreateOutboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateOutboundBadRequest) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *CreateOutboundBadRequest) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *CreateOutboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundForbidden creates a CreateOutboundForbidden with default headers values
func NewCreateOutboundForbidden() *CreateOutboundForbidden {
	return &CreateOutboundForbidden{}
}

/*
CreateOutboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateOutboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound forbidden response has a 2xx status code
func (o *CreateOutboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound forbidden response has a 3xx status code
func (o *CreateOutboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound forbidden response has a 4xx status code
func (o *CreateOutboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create outbound forbidden response has a 5xx status code
func (o *CreateOutboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound forbidden response a status code equal to that given
func (o *CreateOutboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateOutboundForbidden) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundForbidden  %+v", 403, o.Payload)
}

func (o *CreateOutboundForbidden) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundForbidden  %+v", 403, o.Payload)
}

func (o *CreateOutboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundNotFound creates a CreateOutboundNotFound with default headers values
func NewCreateOutboundNotFound() *CreateOutboundNotFound {
	return &CreateOutboundNotFound{}
}

/*
CreateOutboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateOutboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound not found response has a 2xx status code
func (o *CreateOutboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound not found response has a 3xx status code
func (o *CreateOutboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound not found response has a 4xx status code
func (o *CreateOutboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create outbound not found response has a 5xx status code
func (o *CreateOutboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound not found response a status code equal to that given
func (o *CreateOutboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateOutboundNotFound) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundNotFound  %+v", 404, o.Payload)
}

func (o *CreateOutboundNotFound) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundNotFound  %+v", 404, o.Payload)
}

func (o *CreateOutboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundRequestEntityTooLarge creates a CreateOutboundRequestEntityTooLarge with default headers values
func NewCreateOutboundRequestEntityTooLarge() *CreateOutboundRequestEntityTooLarge {
	return &CreateOutboundRequestEntityTooLarge{}
}

/*
CreateOutboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateOutboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound request entity too large response has a 2xx status code
func (o *CreateOutboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound request entity too large response has a 3xx status code
func (o *CreateOutboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound request entity too large response has a 4xx status code
func (o *CreateOutboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create outbound request entity too large response has a 5xx status code
func (o *CreateOutboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound request entity too large response a status code equal to that given
func (o *CreateOutboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateOutboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateOutboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateOutboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundUnsupportedMediaType creates a CreateOutboundUnsupportedMediaType with default headers values
func NewCreateOutboundUnsupportedMediaType() *CreateOutboundUnsupportedMediaType {
	return &CreateOutboundUnsupportedMediaType{}
}

/*
CreateOutboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateOutboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound unsupported media type response has a 2xx status code
func (o *CreateOutboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound unsupported media type response has a 3xx status code
func (o *CreateOutboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound unsupported media type response has a 4xx status code
func (o *CreateOutboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create outbound unsupported media type response has a 5xx status code
func (o *CreateOutboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound unsupported media type response a status code equal to that given
func (o *CreateOutboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateOutboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateOutboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateOutboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundTooManyRequests creates a CreateOutboundTooManyRequests with default headers values
func NewCreateOutboundTooManyRequests() *CreateOutboundTooManyRequests {
	return &CreateOutboundTooManyRequests{}
}

/*
CreateOutboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateOutboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound too many requests response has a 2xx status code
func (o *CreateOutboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound too many requests response has a 3xx status code
func (o *CreateOutboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound too many requests response has a 4xx status code
func (o *CreateOutboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create outbound too many requests response has a 5xx status code
func (o *CreateOutboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create outbound too many requests response a status code equal to that given
func (o *CreateOutboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateOutboundTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateOutboundTooManyRequests) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateOutboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundInternalServerError creates a CreateOutboundInternalServerError with default headers values
func NewCreateOutboundInternalServerError() *CreateOutboundInternalServerError {
	return &CreateOutboundInternalServerError{}
}

/*
CreateOutboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateOutboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound internal server error response has a 2xx status code
func (o *CreateOutboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound internal server error response has a 3xx status code
func (o *CreateOutboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound internal server error response has a 4xx status code
func (o *CreateOutboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create outbound internal server error response has a 5xx status code
func (o *CreateOutboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create outbound internal server error response a status code equal to that given
func (o *CreateOutboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateOutboundInternalServerError) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateOutboundInternalServerError) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateOutboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateOutboundServiceUnavailable creates a CreateOutboundServiceUnavailable with default headers values
func NewCreateOutboundServiceUnavailable() *CreateOutboundServiceUnavailable {
	return &CreateOutboundServiceUnavailable{}
}

/*
CreateOutboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateOutboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create outbound service unavailable response has a 2xx status code
func (o *CreateOutboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create outbound service unavailable response has a 3xx status code
func (o *CreateOutboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create outbound service unavailable response has a 4xx status code
func (o *CreateOutboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create outbound service unavailable response has a 5xx status code
func (o *CreateOutboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create outbound service unavailable response a status code equal to that given
func (o *CreateOutboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateOutboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateOutboundServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders][%d] createOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateOutboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateOutboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
