// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// GetInboundReader is a Reader for the GetInbound structure.
type GetInboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInboundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInboundOK creates a GetInboundOK with default headers values
func NewGetInboundOK() *GetInboundOK {
	return &GetInboundOK{}
}

/*
GetInboundOK describes a response with status code 200, with default header values.

The 200 response for `getInbound`.
*/
type GetInboundOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.InboundOrder
}

// IsSuccess returns true when this get inbound o k response has a 2xx status code
func (o *GetInboundOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get inbound o k response has a 3xx status code
func (o *GetInboundOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound o k response has a 4xx status code
func (o *GetInboundOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound o k response has a 5xx status code
func (o *GetInboundOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound o k response a status code equal to that given
func (o *GetInboundOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInboundOK) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundOK  %+v", 200, o.Payload)
}

func (o *GetInboundOK) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundOK  %+v", 200, o.Payload)
}

func (o *GetInboundOK) GetPayload() *awd_2024_05_09_models.InboundOrder {
	return o.Payload
}

func (o *GetInboundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.InboundOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundBadRequest creates a GetInboundBadRequest with default headers values
func NewGetInboundBadRequest() *GetInboundBadRequest {
	return &GetInboundBadRequest{}
}

/*
GetInboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound bad request response has a 2xx status code
func (o *GetInboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound bad request response has a 3xx status code
func (o *GetInboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound bad request response has a 4xx status code
func (o *GetInboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound bad request response has a 5xx status code
func (o *GetInboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound bad request response a status code equal to that given
func (o *GetInboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInboundBadRequest) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundBadRequest) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundForbidden creates a GetInboundForbidden with default headers values
func NewGetInboundForbidden() *GetInboundForbidden {
	return &GetInboundForbidden{}
}

/*
GetInboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound forbidden response has a 2xx status code
func (o *GetInboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound forbidden response has a 3xx status code
func (o *GetInboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound forbidden response has a 4xx status code
func (o *GetInboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound forbidden response has a 5xx status code
func (o *GetInboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound forbidden response a status code equal to that given
func (o *GetInboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInboundForbidden) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundForbidden) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundNotFound creates a GetInboundNotFound with default headers values
func NewGetInboundNotFound() *GetInboundNotFound {
	return &GetInboundNotFound{}
}

/*
GetInboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound not found response has a 2xx status code
func (o *GetInboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound not found response has a 3xx status code
func (o *GetInboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound not found response has a 4xx status code
func (o *GetInboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound not found response has a 5xx status code
func (o *GetInboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound not found response a status code equal to that given
func (o *GetInboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInboundNotFound) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundNotFound) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundRequestEntityTooLarge creates a GetInboundRequestEntityTooLarge with default headers values
func NewGetInboundRequestEntityTooLarge() *GetInboundRequestEntityTooLarge {
	return &GetInboundRequestEntityTooLarge{}
}

/*
GetInboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound request entity too large response has a 2xx status code
func (o *GetInboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound request entity too large response has a 3xx status code
func (o *GetInboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound request entity too large response has a 4xx status code
func (o *GetInboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound request entity too large response has a 5xx status code
func (o *GetInboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound request entity too large response a status code equal to that given
func (o *GetInboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundUnsupportedMediaType creates a GetInboundUnsupportedMediaType with default headers values
func NewGetInboundUnsupportedMediaType() *GetInboundUnsupportedMediaType {
	return &GetInboundUnsupportedMediaType{}
}

/*
GetInboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound unsupported media type response has a 2xx status code
func (o *GetInboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound unsupported media type response has a 3xx status code
func (o *GetInboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound unsupported media type response has a 4xx status code
func (o *GetInboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound unsupported media type response has a 5xx status code
func (o *GetInboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound unsupported media type response a status code equal to that given
func (o *GetInboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundTooManyRequests creates a GetInboundTooManyRequests with default headers values
func NewGetInboundTooManyRequests() *GetInboundTooManyRequests {
	return &GetInboundTooManyRequests{}
}

/*
GetInboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound too many requests response has a 2xx status code
func (o *GetInboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound too many requests response has a 3xx status code
func (o *GetInboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound too many requests response has a 4xx status code
func (o *GetInboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound too many requests response has a 5xx status code
func (o *GetInboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound too many requests response a status code equal to that given
func (o *GetInboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInboundTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundTooManyRequests) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundInternalServerError creates a GetInboundInternalServerError with default headers values
func NewGetInboundInternalServerError() *GetInboundInternalServerError {
	return &GetInboundInternalServerError{}
}

/*
GetInboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound internal server error response has a 2xx status code
func (o *GetInboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound internal server error response has a 3xx status code
func (o *GetInboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound internal server error response has a 4xx status code
func (o *GetInboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound internal server error response has a 5xx status code
func (o *GetInboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound internal server error response a status code equal to that given
func (o *GetInboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInboundInternalServerError) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundInternalServerError) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundServiceUnavailable creates a GetInboundServiceUnavailable with default headers values
func NewGetInboundServiceUnavailable() *GetInboundServiceUnavailable {
	return &GetInboundServiceUnavailable{}
}

/*
GetInboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound service unavailable response has a 2xx status code
func (o *GetInboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound service unavailable response has a 3xx status code
func (o *GetInboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound service unavailable response has a 4xx status code
func (o *GetInboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound service unavailable response has a 5xx status code
func (o *GetInboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound service unavailable response a status code equal to that given
func (o *GetInboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundOrders/{orderId}][%d] getInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
