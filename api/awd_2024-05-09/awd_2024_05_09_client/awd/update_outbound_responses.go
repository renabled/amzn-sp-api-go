// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// UpdateOutboundReader is a Reader for the UpdateOutbound structure.
type UpdateOutboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOutboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOutboundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateOutboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateOutboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateOutboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateOutboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateOutboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateOutboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateOutboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateOutboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateOutboundOK creates a UpdateOutboundOK with default headers values
func NewUpdateOutboundOK() *UpdateOutboundOK {
	return &UpdateOutboundOK{}
}

/*
UpdateOutboundOK describes a response with status code 200, with default header values.

The 200 response for `updateOutbound`.
*/
type UpdateOutboundOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.OutboundOrderReference
}

// IsSuccess returns true when this update outbound o k response has a 2xx status code
func (o *UpdateOutboundOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update outbound o k response has a 3xx status code
func (o *UpdateOutboundOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound o k response has a 4xx status code
func (o *UpdateOutboundOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update outbound o k response has a 5xx status code
func (o *UpdateOutboundOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound o k response a status code equal to that given
func (o *UpdateOutboundOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateOutboundOK) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundOK  %+v", 200, o.Payload)
}

func (o *UpdateOutboundOK) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundOK  %+v", 200, o.Payload)
}

func (o *UpdateOutboundOK) GetPayload() *awd_2024_05_09_models.OutboundOrderReference {
	return o.Payload
}

func (o *UpdateOutboundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.OutboundOrderReference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundBadRequest creates a UpdateOutboundBadRequest with default headers values
func NewUpdateOutboundBadRequest() *UpdateOutboundBadRequest {
	return &UpdateOutboundBadRequest{}
}

/*
UpdateOutboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateOutboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound bad request response has a 2xx status code
func (o *UpdateOutboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound bad request response has a 3xx status code
func (o *UpdateOutboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound bad request response has a 4xx status code
func (o *UpdateOutboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update outbound bad request response has a 5xx status code
func (o *UpdateOutboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound bad request response a status code equal to that given
func (o *UpdateOutboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateOutboundBadRequest) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateOutboundBadRequest) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateOutboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundForbidden creates a UpdateOutboundForbidden with default headers values
func NewUpdateOutboundForbidden() *UpdateOutboundForbidden {
	return &UpdateOutboundForbidden{}
}

/*
UpdateOutboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateOutboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound forbidden response has a 2xx status code
func (o *UpdateOutboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound forbidden response has a 3xx status code
func (o *UpdateOutboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound forbidden response has a 4xx status code
func (o *UpdateOutboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update outbound forbidden response has a 5xx status code
func (o *UpdateOutboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound forbidden response a status code equal to that given
func (o *UpdateOutboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateOutboundForbidden) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundForbidden  %+v", 403, o.Payload)
}

func (o *UpdateOutboundForbidden) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundForbidden  %+v", 403, o.Payload)
}

func (o *UpdateOutboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundNotFound creates a UpdateOutboundNotFound with default headers values
func NewUpdateOutboundNotFound() *UpdateOutboundNotFound {
	return &UpdateOutboundNotFound{}
}

/*
UpdateOutboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateOutboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound not found response has a 2xx status code
func (o *UpdateOutboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound not found response has a 3xx status code
func (o *UpdateOutboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound not found response has a 4xx status code
func (o *UpdateOutboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update outbound not found response has a 5xx status code
func (o *UpdateOutboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound not found response a status code equal to that given
func (o *UpdateOutboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateOutboundNotFound) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundNotFound  %+v", 404, o.Payload)
}

func (o *UpdateOutboundNotFound) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundNotFound  %+v", 404, o.Payload)
}

func (o *UpdateOutboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundRequestEntityTooLarge creates a UpdateOutboundRequestEntityTooLarge with default headers values
func NewUpdateOutboundRequestEntityTooLarge() *UpdateOutboundRequestEntityTooLarge {
	return &UpdateOutboundRequestEntityTooLarge{}
}

/*
UpdateOutboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateOutboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound request entity too large response has a 2xx status code
func (o *UpdateOutboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound request entity too large response has a 3xx status code
func (o *UpdateOutboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound request entity too large response has a 4xx status code
func (o *UpdateOutboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update outbound request entity too large response has a 5xx status code
func (o *UpdateOutboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound request entity too large response a status code equal to that given
func (o *UpdateOutboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateOutboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateOutboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateOutboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundUnsupportedMediaType creates a UpdateOutboundUnsupportedMediaType with default headers values
func NewUpdateOutboundUnsupportedMediaType() *UpdateOutboundUnsupportedMediaType {
	return &UpdateOutboundUnsupportedMediaType{}
}

/*
UpdateOutboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateOutboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound unsupported media type response has a 2xx status code
func (o *UpdateOutboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound unsupported media type response has a 3xx status code
func (o *UpdateOutboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound unsupported media type response has a 4xx status code
func (o *UpdateOutboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update outbound unsupported media type response has a 5xx status code
func (o *UpdateOutboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound unsupported media type response a status code equal to that given
func (o *UpdateOutboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateOutboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateOutboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateOutboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundTooManyRequests creates a UpdateOutboundTooManyRequests with default headers values
func NewUpdateOutboundTooManyRequests() *UpdateOutboundTooManyRequests {
	return &UpdateOutboundTooManyRequests{}
}

/*
UpdateOutboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateOutboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound too many requests response has a 2xx status code
func (o *UpdateOutboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound too many requests response has a 3xx status code
func (o *UpdateOutboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound too many requests response has a 4xx status code
func (o *UpdateOutboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update outbound too many requests response has a 5xx status code
func (o *UpdateOutboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update outbound too many requests response a status code equal to that given
func (o *UpdateOutboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateOutboundTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateOutboundTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateOutboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundInternalServerError creates a UpdateOutboundInternalServerError with default headers values
func NewUpdateOutboundInternalServerError() *UpdateOutboundInternalServerError {
	return &UpdateOutboundInternalServerError{}
}

/*
UpdateOutboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateOutboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound internal server error response has a 2xx status code
func (o *UpdateOutboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound internal server error response has a 3xx status code
func (o *UpdateOutboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound internal server error response has a 4xx status code
func (o *UpdateOutboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update outbound internal server error response has a 5xx status code
func (o *UpdateOutboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update outbound internal server error response a status code equal to that given
func (o *UpdateOutboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateOutboundInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateOutboundInternalServerError) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateOutboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOutboundServiceUnavailable creates a UpdateOutboundServiceUnavailable with default headers values
func NewUpdateOutboundServiceUnavailable() *UpdateOutboundServiceUnavailable {
	return &UpdateOutboundServiceUnavailable{}
}

/*
UpdateOutboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateOutboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this update outbound service unavailable response has a 2xx status code
func (o *UpdateOutboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update outbound service unavailable response has a 3xx status code
func (o *UpdateOutboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update outbound service unavailable response has a 4xx status code
func (o *UpdateOutboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update outbound service unavailable response has a 5xx status code
func (o *UpdateOutboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update outbound service unavailable response a status code equal to that given
func (o *UpdateOutboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateOutboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateOutboundServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /awd/2024-05-09/outboundOrders/{orderId}][%d] updateOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateOutboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *UpdateOutboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
