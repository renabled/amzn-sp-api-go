// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// GetInboundShipmentReader is a Reader for the GetInboundShipment structure.
type GetInboundShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInboundShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInboundShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInboundShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInboundShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInboundShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInboundShipmentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInboundShipmentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInboundShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInboundShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInboundShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInboundShipmentOK creates a GetInboundShipmentOK with default headers values
func NewGetInboundShipmentOK() *GetInboundShipmentOK {
	return &GetInboundShipmentOK{}
}

/*
GetInboundShipmentOK describes a response with status code 200, with default header values.

The 200 response for `getInboundShipment`.
*/
type GetInboundShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.InboundShipment
}

// IsSuccess returns true when this get inbound shipment o k response has a 2xx status code
func (o *GetInboundShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get inbound shipment o k response has a 3xx status code
func (o *GetInboundShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment o k response has a 4xx status code
func (o *GetInboundShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound shipment o k response has a 5xx status code
func (o *GetInboundShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment o k response a status code equal to that given
func (o *GetInboundShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInboundShipmentOK) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentOK  %+v", 200, o.Payload)
}

func (o *GetInboundShipmentOK) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentOK  %+v", 200, o.Payload)
}

func (o *GetInboundShipmentOK) GetPayload() *awd_2024_05_09_models.InboundShipment {
	return o.Payload
}

func (o *GetInboundShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.InboundShipment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentBadRequest creates a GetInboundShipmentBadRequest with default headers values
func NewGetInboundShipmentBadRequest() *GetInboundShipmentBadRequest {
	return &GetInboundShipmentBadRequest{}
}

/*
GetInboundShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInboundShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment bad request response has a 2xx status code
func (o *GetInboundShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment bad request response has a 3xx status code
func (o *GetInboundShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment bad request response has a 4xx status code
func (o *GetInboundShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound shipment bad request response has a 5xx status code
func (o *GetInboundShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment bad request response a status code equal to that given
func (o *GetInboundShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInboundShipmentBadRequest) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundShipmentBadRequest) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundShipmentBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentForbidden creates a GetInboundShipmentForbidden with default headers values
func NewGetInboundShipmentForbidden() *GetInboundShipmentForbidden {
	return &GetInboundShipmentForbidden{}
}

/*
GetInboundShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInboundShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment forbidden response has a 2xx status code
func (o *GetInboundShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment forbidden response has a 3xx status code
func (o *GetInboundShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment forbidden response has a 4xx status code
func (o *GetInboundShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound shipment forbidden response has a 5xx status code
func (o *GetInboundShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment forbidden response a status code equal to that given
func (o *GetInboundShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInboundShipmentForbidden) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundShipmentForbidden) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundShipmentForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentNotFound creates a GetInboundShipmentNotFound with default headers values
func NewGetInboundShipmentNotFound() *GetInboundShipmentNotFound {
	return &GetInboundShipmentNotFound{}
}

/*
GetInboundShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInboundShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment not found response has a 2xx status code
func (o *GetInboundShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment not found response has a 3xx status code
func (o *GetInboundShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment not found response has a 4xx status code
func (o *GetInboundShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound shipment not found response has a 5xx status code
func (o *GetInboundShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment not found response a status code equal to that given
func (o *GetInboundShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInboundShipmentNotFound) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundShipmentNotFound) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundShipmentNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentRequestEntityTooLarge creates a GetInboundShipmentRequestEntityTooLarge with default headers values
func NewGetInboundShipmentRequestEntityTooLarge() *GetInboundShipmentRequestEntityTooLarge {
	return &GetInboundShipmentRequestEntityTooLarge{}
}

/*
GetInboundShipmentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInboundShipmentRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment request entity too large response has a 2xx status code
func (o *GetInboundShipmentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment request entity too large response has a 3xx status code
func (o *GetInboundShipmentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment request entity too large response has a 4xx status code
func (o *GetInboundShipmentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound shipment request entity too large response has a 5xx status code
func (o *GetInboundShipmentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment request entity too large response a status code equal to that given
func (o *GetInboundShipmentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInboundShipmentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundShipmentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundShipmentRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentUnsupportedMediaType creates a GetInboundShipmentUnsupportedMediaType with default headers values
func NewGetInboundShipmentUnsupportedMediaType() *GetInboundShipmentUnsupportedMediaType {
	return &GetInboundShipmentUnsupportedMediaType{}
}

/*
GetInboundShipmentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInboundShipmentUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment unsupported media type response has a 2xx status code
func (o *GetInboundShipmentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment unsupported media type response has a 3xx status code
func (o *GetInboundShipmentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment unsupported media type response has a 4xx status code
func (o *GetInboundShipmentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound shipment unsupported media type response has a 5xx status code
func (o *GetInboundShipmentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment unsupported media type response a status code equal to that given
func (o *GetInboundShipmentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInboundShipmentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundShipmentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundShipmentUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentTooManyRequests creates a GetInboundShipmentTooManyRequests with default headers values
func NewGetInboundShipmentTooManyRequests() *GetInboundShipmentTooManyRequests {
	return &GetInboundShipmentTooManyRequests{}
}

/*
GetInboundShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInboundShipmentTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment too many requests response has a 2xx status code
func (o *GetInboundShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment too many requests response has a 3xx status code
func (o *GetInboundShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment too many requests response has a 4xx status code
func (o *GetInboundShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound shipment too many requests response has a 5xx status code
func (o *GetInboundShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound shipment too many requests response a status code equal to that given
func (o *GetInboundShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInboundShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundShipmentTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentInternalServerError creates a GetInboundShipmentInternalServerError with default headers values
func NewGetInboundShipmentInternalServerError() *GetInboundShipmentInternalServerError {
	return &GetInboundShipmentInternalServerError{}
}

/*
GetInboundShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInboundShipmentInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment internal server error response has a 2xx status code
func (o *GetInboundShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment internal server error response has a 3xx status code
func (o *GetInboundShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment internal server error response has a 4xx status code
func (o *GetInboundShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound shipment internal server error response has a 5xx status code
func (o *GetInboundShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound shipment internal server error response a status code equal to that given
func (o *GetInboundShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInboundShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundShipmentInternalServerError) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundShipmentInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundShipmentServiceUnavailable creates a GetInboundShipmentServiceUnavailable with default headers values
func NewGetInboundShipmentServiceUnavailable() *GetInboundShipmentServiceUnavailable {
	return &GetInboundShipmentServiceUnavailable{}
}

/*
GetInboundShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInboundShipmentServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get inbound shipment service unavailable response has a 2xx status code
func (o *GetInboundShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound shipment service unavailable response has a 3xx status code
func (o *GetInboundShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound shipment service unavailable response has a 4xx status code
func (o *GetInboundShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound shipment service unavailable response has a 5xx status code
func (o *GetInboundShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound shipment service unavailable response a status code equal to that given
func (o *GetInboundShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInboundShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inboundShipments/{shipmentId}][%d] getInboundShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundShipmentServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetInboundShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
