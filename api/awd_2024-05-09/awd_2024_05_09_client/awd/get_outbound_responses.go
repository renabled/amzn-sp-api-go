// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// GetOutboundReader is a Reader for the GetOutbound structure.
type GetOutboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOutboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOutboundOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOutboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOutboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOutboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOutboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOutboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOutboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOutboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOutboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOutboundOK creates a GetOutboundOK with default headers values
func NewGetOutboundOK() *GetOutboundOK {
	return &GetOutboundOK{}
}

/*
GetOutboundOK describes a response with status code 200, with default header values.

The 200 response for `getOutbound`.
*/
type GetOutboundOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.OutboundOrder
}

// IsSuccess returns true when this get outbound o k response has a 2xx status code
func (o *GetOutboundOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get outbound o k response has a 3xx status code
func (o *GetOutboundOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound o k response has a 4xx status code
func (o *GetOutboundOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound o k response has a 5xx status code
func (o *GetOutboundOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound o k response a status code equal to that given
func (o *GetOutboundOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOutboundOK) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundOK  %+v", 200, o.Payload)
}

func (o *GetOutboundOK) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundOK  %+v", 200, o.Payload)
}

func (o *GetOutboundOK) GetPayload() *awd_2024_05_09_models.OutboundOrder {
	return o.Payload
}

func (o *GetOutboundOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.OutboundOrder)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundBadRequest creates a GetOutboundBadRequest with default headers values
func NewGetOutboundBadRequest() *GetOutboundBadRequest {
	return &GetOutboundBadRequest{}
}

/*
GetOutboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetOutboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound bad request response has a 2xx status code
func (o *GetOutboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound bad request response has a 3xx status code
func (o *GetOutboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound bad request response has a 4xx status code
func (o *GetOutboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound bad request response has a 5xx status code
func (o *GetOutboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound bad request response a status code equal to that given
func (o *GetOutboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOutboundBadRequest) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundBadRequest) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *GetOutboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundForbidden creates a GetOutboundForbidden with default headers values
func NewGetOutboundForbidden() *GetOutboundForbidden {
	return &GetOutboundForbidden{}
}

/*
GetOutboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetOutboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound forbidden response has a 2xx status code
func (o *GetOutboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound forbidden response has a 3xx status code
func (o *GetOutboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound forbidden response has a 4xx status code
func (o *GetOutboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound forbidden response has a 5xx status code
func (o *GetOutboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound forbidden response a status code equal to that given
func (o *GetOutboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOutboundForbidden) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundForbidden) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundForbidden  %+v", 403, o.Payload)
}

func (o *GetOutboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundNotFound creates a GetOutboundNotFound with default headers values
func NewGetOutboundNotFound() *GetOutboundNotFound {
	return &GetOutboundNotFound{}
}

/*
GetOutboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetOutboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound not found response has a 2xx status code
func (o *GetOutboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound not found response has a 3xx status code
func (o *GetOutboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound not found response has a 4xx status code
func (o *GetOutboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound not found response has a 5xx status code
func (o *GetOutboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound not found response a status code equal to that given
func (o *GetOutboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOutboundNotFound) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundNotFound) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundNotFound  %+v", 404, o.Payload)
}

func (o *GetOutboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundRequestEntityTooLarge creates a GetOutboundRequestEntityTooLarge with default headers values
func NewGetOutboundRequestEntityTooLarge() *GetOutboundRequestEntityTooLarge {
	return &GetOutboundRequestEntityTooLarge{}
}

/*
GetOutboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetOutboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound request entity too large response has a 2xx status code
func (o *GetOutboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound request entity too large response has a 3xx status code
func (o *GetOutboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound request entity too large response has a 4xx status code
func (o *GetOutboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound request entity too large response has a 5xx status code
func (o *GetOutboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound request entity too large response a status code equal to that given
func (o *GetOutboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetOutboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOutboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundUnsupportedMediaType creates a GetOutboundUnsupportedMediaType with default headers values
func NewGetOutboundUnsupportedMediaType() *GetOutboundUnsupportedMediaType {
	return &GetOutboundUnsupportedMediaType{}
}

/*
GetOutboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetOutboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound unsupported media type response has a 2xx status code
func (o *GetOutboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound unsupported media type response has a 3xx status code
func (o *GetOutboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound unsupported media type response has a 4xx status code
func (o *GetOutboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound unsupported media type response has a 5xx status code
func (o *GetOutboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound unsupported media type response a status code equal to that given
func (o *GetOutboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOutboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOutboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundTooManyRequests creates a GetOutboundTooManyRequests with default headers values
func NewGetOutboundTooManyRequests() *GetOutboundTooManyRequests {
	return &GetOutboundTooManyRequests{}
}

/*
GetOutboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetOutboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound too many requests response has a 2xx status code
func (o *GetOutboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound too many requests response has a 3xx status code
func (o *GetOutboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound too many requests response has a 4xx status code
func (o *GetOutboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get outbound too many requests response has a 5xx status code
func (o *GetOutboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get outbound too many requests response a status code equal to that given
func (o *GetOutboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOutboundTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundTooManyRequests) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOutboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundInternalServerError creates a GetOutboundInternalServerError with default headers values
func NewGetOutboundInternalServerError() *GetOutboundInternalServerError {
	return &GetOutboundInternalServerError{}
}

/*
GetOutboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetOutboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound internal server error response has a 2xx status code
func (o *GetOutboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound internal server error response has a 3xx status code
func (o *GetOutboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound internal server error response has a 4xx status code
func (o *GetOutboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound internal server error response has a 5xx status code
func (o *GetOutboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound internal server error response a status code equal to that given
func (o *GetOutboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOutboundInternalServerError) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundInternalServerError) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOutboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOutboundServiceUnavailable creates a GetOutboundServiceUnavailable with default headers values
func NewGetOutboundServiceUnavailable() *GetOutboundServiceUnavailable {
	return &GetOutboundServiceUnavailable{}
}

/*
GetOutboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetOutboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this get outbound service unavailable response has a 2xx status code
func (o *GetOutboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get outbound service unavailable response has a 3xx status code
func (o *GetOutboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get outbound service unavailable response has a 4xx status code
func (o *GetOutboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get outbound service unavailable response has a 5xx status code
func (o *GetOutboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get outbound service unavailable response a status code equal to that given
func (o *GetOutboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOutboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders/{orderId}][%d] getOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOutboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *GetOutboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
