// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// ListOutboundsReader is a Reader for the ListOutbounds structure.
type ListOutboundsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOutboundsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListOutboundsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListOutboundsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListOutboundsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListOutboundsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListOutboundsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListOutboundsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListOutboundsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListOutboundsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListOutboundsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListOutboundsOK creates a ListOutboundsOK with default headers values
func NewListOutboundsOK() *ListOutboundsOK {
	return &ListOutboundsOK{}
}

/*
ListOutboundsOK describes a response with status code 200, with default header values.

The 200 response for `listOutbounds`.
*/
type ListOutboundsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.OutboundListing
}

// IsSuccess returns true when this list outbounds o k response has a 2xx status code
func (o *ListOutboundsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list outbounds o k response has a 3xx status code
func (o *ListOutboundsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds o k response has a 4xx status code
func (o *ListOutboundsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list outbounds o k response has a 5xx status code
func (o *ListOutboundsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds o k response a status code equal to that given
func (o *ListOutboundsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListOutboundsOK) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsOK  %+v", 200, o.Payload)
}

func (o *ListOutboundsOK) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsOK  %+v", 200, o.Payload)
}

func (o *ListOutboundsOK) GetPayload() *awd_2024_05_09_models.OutboundListing {
	return o.Payload
}

func (o *ListOutboundsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.OutboundListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsBadRequest creates a ListOutboundsBadRequest with default headers values
func NewListOutboundsBadRequest() *ListOutboundsBadRequest {
	return &ListOutboundsBadRequest{}
}

/*
ListOutboundsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListOutboundsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds bad request response has a 2xx status code
func (o *ListOutboundsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds bad request response has a 3xx status code
func (o *ListOutboundsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds bad request response has a 4xx status code
func (o *ListOutboundsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list outbounds bad request response has a 5xx status code
func (o *ListOutboundsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds bad request response a status code equal to that given
func (o *ListOutboundsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListOutboundsBadRequest) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsBadRequest  %+v", 400, o.Payload)
}

func (o *ListOutboundsBadRequest) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsBadRequest  %+v", 400, o.Payload)
}

func (o *ListOutboundsBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsForbidden creates a ListOutboundsForbidden with default headers values
func NewListOutboundsForbidden() *ListOutboundsForbidden {
	return &ListOutboundsForbidden{}
}

/*
ListOutboundsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListOutboundsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds forbidden response has a 2xx status code
func (o *ListOutboundsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds forbidden response has a 3xx status code
func (o *ListOutboundsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds forbidden response has a 4xx status code
func (o *ListOutboundsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list outbounds forbidden response has a 5xx status code
func (o *ListOutboundsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds forbidden response a status code equal to that given
func (o *ListOutboundsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListOutboundsForbidden) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsForbidden  %+v", 403, o.Payload)
}

func (o *ListOutboundsForbidden) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsForbidden  %+v", 403, o.Payload)
}

func (o *ListOutboundsForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsNotFound creates a ListOutboundsNotFound with default headers values
func NewListOutboundsNotFound() *ListOutboundsNotFound {
	return &ListOutboundsNotFound{}
}

/*
ListOutboundsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListOutboundsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds not found response has a 2xx status code
func (o *ListOutboundsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds not found response has a 3xx status code
func (o *ListOutboundsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds not found response has a 4xx status code
func (o *ListOutboundsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list outbounds not found response has a 5xx status code
func (o *ListOutboundsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds not found response a status code equal to that given
func (o *ListOutboundsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListOutboundsNotFound) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsNotFound  %+v", 404, o.Payload)
}

func (o *ListOutboundsNotFound) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsNotFound  %+v", 404, o.Payload)
}

func (o *ListOutboundsNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsRequestEntityTooLarge creates a ListOutboundsRequestEntityTooLarge with default headers values
func NewListOutboundsRequestEntityTooLarge() *ListOutboundsRequestEntityTooLarge {
	return &ListOutboundsRequestEntityTooLarge{}
}

/*
ListOutboundsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListOutboundsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds request entity too large response has a 2xx status code
func (o *ListOutboundsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds request entity too large response has a 3xx status code
func (o *ListOutboundsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds request entity too large response has a 4xx status code
func (o *ListOutboundsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list outbounds request entity too large response has a 5xx status code
func (o *ListOutboundsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds request entity too large response a status code equal to that given
func (o *ListOutboundsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListOutboundsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListOutboundsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListOutboundsRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsUnsupportedMediaType creates a ListOutboundsUnsupportedMediaType with default headers values
func NewListOutboundsUnsupportedMediaType() *ListOutboundsUnsupportedMediaType {
	return &ListOutboundsUnsupportedMediaType{}
}

/*
ListOutboundsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListOutboundsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds unsupported media type response has a 2xx status code
func (o *ListOutboundsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds unsupported media type response has a 3xx status code
func (o *ListOutboundsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds unsupported media type response has a 4xx status code
func (o *ListOutboundsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list outbounds unsupported media type response has a 5xx status code
func (o *ListOutboundsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds unsupported media type response a status code equal to that given
func (o *ListOutboundsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListOutboundsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListOutboundsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListOutboundsUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsTooManyRequests creates a ListOutboundsTooManyRequests with default headers values
func NewListOutboundsTooManyRequests() *ListOutboundsTooManyRequests {
	return &ListOutboundsTooManyRequests{}
}

/*
ListOutboundsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListOutboundsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds too many requests response has a 2xx status code
func (o *ListOutboundsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds too many requests response has a 3xx status code
func (o *ListOutboundsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds too many requests response has a 4xx status code
func (o *ListOutboundsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list outbounds too many requests response has a 5xx status code
func (o *ListOutboundsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list outbounds too many requests response a status code equal to that given
func (o *ListOutboundsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListOutboundsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOutboundsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOutboundsTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsInternalServerError creates a ListOutboundsInternalServerError with default headers values
func NewListOutboundsInternalServerError() *ListOutboundsInternalServerError {
	return &ListOutboundsInternalServerError{}
}

/*
ListOutboundsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListOutboundsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds internal server error response has a 2xx status code
func (o *ListOutboundsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds internal server error response has a 3xx status code
func (o *ListOutboundsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds internal server error response has a 4xx status code
func (o *ListOutboundsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list outbounds internal server error response has a 5xx status code
func (o *ListOutboundsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list outbounds internal server error response a status code equal to that given
func (o *ListOutboundsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListOutboundsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListOutboundsInternalServerError) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListOutboundsInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOutboundsServiceUnavailable creates a ListOutboundsServiceUnavailable with default headers values
func NewListOutboundsServiceUnavailable() *ListOutboundsServiceUnavailable {
	return &ListOutboundsServiceUnavailable{}
}

/*
ListOutboundsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListOutboundsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list outbounds service unavailable response has a 2xx status code
func (o *ListOutboundsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list outbounds service unavailable response has a 3xx status code
func (o *ListOutboundsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list outbounds service unavailable response has a 4xx status code
func (o *ListOutboundsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list outbounds service unavailable response has a 5xx status code
func (o *ListOutboundsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list outbounds service unavailable response a status code equal to that given
func (o *ListOutboundsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListOutboundsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListOutboundsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/outboundOrders][%d] listOutboundsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListOutboundsServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListOutboundsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
