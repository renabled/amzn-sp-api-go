// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetInboundShipmentLabelsParams creates a new GetInboundShipmentLabelsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetInboundShipmentLabelsParams() *GetInboundShipmentLabelsParams {
	return &GetInboundShipmentLabelsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetInboundShipmentLabelsParamsWithTimeout creates a new GetInboundShipmentLabelsParams object
// with the ability to set a timeout on a request.
func NewGetInboundShipmentLabelsParamsWithTimeout(timeout time.Duration) *GetInboundShipmentLabelsParams {
	return &GetInboundShipmentLabelsParams{
		timeout: timeout,
	}
}

// NewGetInboundShipmentLabelsParamsWithContext creates a new GetInboundShipmentLabelsParams object
// with the ability to set a context for a request.
func NewGetInboundShipmentLabelsParamsWithContext(ctx context.Context) *GetInboundShipmentLabelsParams {
	return &GetInboundShipmentLabelsParams{
		Context: ctx,
	}
}

// NewGetInboundShipmentLabelsParamsWithHTTPClient creates a new GetInboundShipmentLabelsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetInboundShipmentLabelsParamsWithHTTPClient(client *http.Client) *GetInboundShipmentLabelsParams {
	return &GetInboundShipmentLabelsParams{
		HTTPClient: client,
	}
}

/*
GetInboundShipmentLabelsParams contains all the parameters to send to the API endpoint

	for the get inbound shipment labels operation.

	Typically these are written to a http.Request.
*/
type GetInboundShipmentLabelsParams struct {

	/* FormatType.

	   The format type of the output file that contains your labels.
	*/
	FormatType *string

	/* PageType.

	   Page type for the generated labels. The default is `PLAIN_PAPER`.
	*/
	PageType *string

	/* ShipmentID.

	   ID for the shipment.
	*/
	ShipmentID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get inbound shipment labels params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInboundShipmentLabelsParams) WithDefaults() *GetInboundShipmentLabelsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get inbound shipment labels params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetInboundShipmentLabelsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) WithTimeout(timeout time.Duration) *GetInboundShipmentLabelsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) WithContext(ctx context.Context) *GetInboundShipmentLabelsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) WithHTTPClient(client *http.Client) *GetInboundShipmentLabelsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFormatType adds the formatType to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) WithFormatType(formatType *string) *GetInboundShipmentLabelsParams {
	o.SetFormatType(formatType)
	return o
}

// SetFormatType adds the formatType to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) SetFormatType(formatType *string) {
	o.FormatType = formatType
}

// WithPageType adds the pageType to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) WithPageType(pageType *string) *GetInboundShipmentLabelsParams {
	o.SetPageType(pageType)
	return o
}

// SetPageType adds the pageType to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) SetPageType(pageType *string) {
	o.PageType = pageType
}

// WithShipmentID adds the shipmentID to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) WithShipmentID(shipmentID string) *GetInboundShipmentLabelsParams {
	o.SetShipmentID(shipmentID)
	return o
}

// SetShipmentID adds the shipmentId to the get inbound shipment labels params
func (o *GetInboundShipmentLabelsParams) SetShipmentID(shipmentID string) {
	o.ShipmentID = shipmentID
}

// WriteToRequest writes these params to a swagger request
func (o *GetInboundShipmentLabelsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FormatType != nil {

		// query param formatType
		var qrFormatType string

		if o.FormatType != nil {
			qrFormatType = *o.FormatType
		}
		qFormatType := qrFormatType
		if qFormatType != "" {

			if err := r.SetQueryParam("formatType", qFormatType); err != nil {
				return err
			}
		}
	}

	if o.PageType != nil {

		// query param pageType
		var qrPageType string

		if o.PageType != nil {
			qrPageType = *o.PageType
		}
		qPageType := qrPageType
		if qPageType != "" {

			if err := r.SetQueryParam("pageType", qPageType); err != nil {
				return err
			}
		}
	}

	// path param shipmentId
	if err := r.SetPathParam("shipmentId", o.ShipmentID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
