// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// ConfirmInboundReader is a Reader for the ConfirmInbound structure.
type ConfirmInboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmInboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewConfirmInboundNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmInboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmInboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmInboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewConfirmInboundConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmInboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmInboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmInboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmInboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmInboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmInboundNoContent creates a ConfirmInboundNoContent with default headers values
func NewConfirmInboundNoContent() *ConfirmInboundNoContent {
	return &ConfirmInboundNoContent{}
}

/*
ConfirmInboundNoContent describes a response with status code 204, with default header values.

The 204 response for `confirmInbound`.
*/
type ConfirmInboundNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this confirm inbound no content response has a 2xx status code
func (o *ConfirmInboundNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm inbound no content response has a 3xx status code
func (o *ConfirmInboundNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound no content response has a 4xx status code
func (o *ConfirmInboundNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm inbound no content response has a 5xx status code
func (o *ConfirmInboundNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound no content response a status code equal to that given
func (o *ConfirmInboundNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *ConfirmInboundNoContent) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundNoContent ", 204)
}

func (o *ConfirmInboundNoContent) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundNoContent ", 204)
}

func (o *ConfirmInboundNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewConfirmInboundBadRequest creates a ConfirmInboundBadRequest with default headers values
func NewConfirmInboundBadRequest() *ConfirmInboundBadRequest {
	return &ConfirmInboundBadRequest{}
}

/*
ConfirmInboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmInboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound bad request response has a 2xx status code
func (o *ConfirmInboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound bad request response has a 3xx status code
func (o *ConfirmInboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound bad request response has a 4xx status code
func (o *ConfirmInboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound bad request response has a 5xx status code
func (o *ConfirmInboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound bad request response a status code equal to that given
func (o *ConfirmInboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmInboundBadRequest) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmInboundBadRequest) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmInboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundForbidden creates a ConfirmInboundForbidden with default headers values
func NewConfirmInboundForbidden() *ConfirmInboundForbidden {
	return &ConfirmInboundForbidden{}
}

/*
ConfirmInboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmInboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound forbidden response has a 2xx status code
func (o *ConfirmInboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound forbidden response has a 3xx status code
func (o *ConfirmInboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound forbidden response has a 4xx status code
func (o *ConfirmInboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound forbidden response has a 5xx status code
func (o *ConfirmInboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound forbidden response a status code equal to that given
func (o *ConfirmInboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmInboundForbidden) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmInboundForbidden) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmInboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundNotFound creates a ConfirmInboundNotFound with default headers values
func NewConfirmInboundNotFound() *ConfirmInboundNotFound {
	return &ConfirmInboundNotFound{}
}

/*
ConfirmInboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmInboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound not found response has a 2xx status code
func (o *ConfirmInboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound not found response has a 3xx status code
func (o *ConfirmInboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound not found response has a 4xx status code
func (o *ConfirmInboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound not found response has a 5xx status code
func (o *ConfirmInboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound not found response a status code equal to that given
func (o *ConfirmInboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmInboundNotFound) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmInboundNotFound) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmInboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundConflict creates a ConfirmInboundConflict with default headers values
func NewConfirmInboundConflict() *ConfirmInboundConflict {
	return &ConfirmInboundConflict{}
}

/*
ConfirmInboundConflict describes a response with status code 409, with default header values.

`ConflictException` 409 response.
*/
type ConfirmInboundConflict struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound conflict response has a 2xx status code
func (o *ConfirmInboundConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound conflict response has a 3xx status code
func (o *ConfirmInboundConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound conflict response has a 4xx status code
func (o *ConfirmInboundConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound conflict response has a 5xx status code
func (o *ConfirmInboundConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound conflict response a status code equal to that given
func (o *ConfirmInboundConflict) IsCode(code int) bool {
	return code == 409
}

func (o *ConfirmInboundConflict) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundConflict  %+v", 409, o.Payload)
}

func (o *ConfirmInboundConflict) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundConflict  %+v", 409, o.Payload)
}

func (o *ConfirmInboundConflict) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundRequestEntityTooLarge creates a ConfirmInboundRequestEntityTooLarge with default headers values
func NewConfirmInboundRequestEntityTooLarge() *ConfirmInboundRequestEntityTooLarge {
	return &ConfirmInboundRequestEntityTooLarge{}
}

/*
ConfirmInboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmInboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound request entity too large response has a 2xx status code
func (o *ConfirmInboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound request entity too large response has a 3xx status code
func (o *ConfirmInboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound request entity too large response has a 4xx status code
func (o *ConfirmInboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound request entity too large response has a 5xx status code
func (o *ConfirmInboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound request entity too large response a status code equal to that given
func (o *ConfirmInboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ConfirmInboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmInboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmInboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundUnsupportedMediaType creates a ConfirmInboundUnsupportedMediaType with default headers values
func NewConfirmInboundUnsupportedMediaType() *ConfirmInboundUnsupportedMediaType {
	return &ConfirmInboundUnsupportedMediaType{}
}

/*
ConfirmInboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmInboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound unsupported media type response has a 2xx status code
func (o *ConfirmInboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound unsupported media type response has a 3xx status code
func (o *ConfirmInboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound unsupported media type response has a 4xx status code
func (o *ConfirmInboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound unsupported media type response has a 5xx status code
func (o *ConfirmInboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound unsupported media type response a status code equal to that given
func (o *ConfirmInboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ConfirmInboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmInboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmInboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundTooManyRequests creates a ConfirmInboundTooManyRequests with default headers values
func NewConfirmInboundTooManyRequests() *ConfirmInboundTooManyRequests {
	return &ConfirmInboundTooManyRequests{}
}

/*
ConfirmInboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmInboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound too many requests response has a 2xx status code
func (o *ConfirmInboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound too many requests response has a 3xx status code
func (o *ConfirmInboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound too many requests response has a 4xx status code
func (o *ConfirmInboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm inbound too many requests response has a 5xx status code
func (o *ConfirmInboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm inbound too many requests response a status code equal to that given
func (o *ConfirmInboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmInboundTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmInboundTooManyRequests) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmInboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundInternalServerError creates a ConfirmInboundInternalServerError with default headers values
func NewConfirmInboundInternalServerError() *ConfirmInboundInternalServerError {
	return &ConfirmInboundInternalServerError{}
}

/*
ConfirmInboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmInboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound internal server error response has a 2xx status code
func (o *ConfirmInboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound internal server error response has a 3xx status code
func (o *ConfirmInboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound internal server error response has a 4xx status code
func (o *ConfirmInboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm inbound internal server error response has a 5xx status code
func (o *ConfirmInboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm inbound internal server error response a status code equal to that given
func (o *ConfirmInboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmInboundInternalServerError) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmInboundInternalServerError) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmInboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmInboundServiceUnavailable creates a ConfirmInboundServiceUnavailable with default headers values
func NewConfirmInboundServiceUnavailable() *ConfirmInboundServiceUnavailable {
	return &ConfirmInboundServiceUnavailable{}
}

/*
ConfirmInboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmInboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm inbound service unavailable response has a 2xx status code
func (o *ConfirmInboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm inbound service unavailable response has a 3xx status code
func (o *ConfirmInboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm inbound service unavailable response has a 4xx status code
func (o *ConfirmInboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm inbound service unavailable response has a 5xx status code
func (o *ConfirmInboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm inbound service unavailable response a status code equal to that given
func (o *ConfirmInboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmInboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmInboundServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/confirmation][%d] confirmInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmInboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmInboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
