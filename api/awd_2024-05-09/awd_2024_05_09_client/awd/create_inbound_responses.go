// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// CreateInboundReader is a Reader for the CreateInbound structure.
type CreateInboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCreateInboundCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateInboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateInboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateInboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateInboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateInboundCreated creates a CreateInboundCreated with default headers values
func NewCreateInboundCreated() *CreateInboundCreated {
	return &CreateInboundCreated{}
}

/*
CreateInboundCreated describes a response with status code 201, with default header values.

`createInbound` 201 response.
*/
type CreateInboundCreated struct {

	/* Location header with the order ID for the newly created inbound order.
	 */
	Location string

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.InboundOrderReference
}

// IsSuccess returns true when this create inbound created response has a 2xx status code
func (o *CreateInboundCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create inbound created response has a 3xx status code
func (o *CreateInboundCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound created response has a 4xx status code
func (o *CreateInboundCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inbound created response has a 5xx status code
func (o *CreateInboundCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound created response a status code equal to that given
func (o *CreateInboundCreated) IsCode(code int) bool {
	return code == 201
}

func (o *CreateInboundCreated) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundCreated  %+v", 201, o.Payload)
}

func (o *CreateInboundCreated) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundCreated  %+v", 201, o.Payload)
}

func (o *CreateInboundCreated) GetPayload() *awd_2024_05_09_models.InboundOrderReference {
	return o.Payload
}

func (o *CreateInboundCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		o.Location = hdrLocation
	}

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.InboundOrderReference)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundBadRequest creates a CreateInboundBadRequest with default headers values
func NewCreateInboundBadRequest() *CreateInboundBadRequest {
	return &CreateInboundBadRequest{}
}

/*
CreateInboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateInboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound bad request response has a 2xx status code
func (o *CreateInboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound bad request response has a 3xx status code
func (o *CreateInboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound bad request response has a 4xx status code
func (o *CreateInboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound bad request response has a 5xx status code
func (o *CreateInboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound bad request response a status code equal to that given
func (o *CreateInboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateInboundBadRequest) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInboundBadRequest) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundForbidden creates a CreateInboundForbidden with default headers values
func NewCreateInboundForbidden() *CreateInboundForbidden {
	return &CreateInboundForbidden{}
}

/*
CreateInboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateInboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound forbidden response has a 2xx status code
func (o *CreateInboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound forbidden response has a 3xx status code
func (o *CreateInboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound forbidden response has a 4xx status code
func (o *CreateInboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound forbidden response has a 5xx status code
func (o *CreateInboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound forbidden response a status code equal to that given
func (o *CreateInboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateInboundForbidden) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundForbidden  %+v", 403, o.Payload)
}

func (o *CreateInboundForbidden) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundForbidden  %+v", 403, o.Payload)
}

func (o *CreateInboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundNotFound creates a CreateInboundNotFound with default headers values
func NewCreateInboundNotFound() *CreateInboundNotFound {
	return &CreateInboundNotFound{}
}

/*
CreateInboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateInboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound not found response has a 2xx status code
func (o *CreateInboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound not found response has a 3xx status code
func (o *CreateInboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound not found response has a 4xx status code
func (o *CreateInboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound not found response has a 5xx status code
func (o *CreateInboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound not found response a status code equal to that given
func (o *CreateInboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateInboundNotFound) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundNotFound  %+v", 404, o.Payload)
}

func (o *CreateInboundNotFound) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundNotFound  %+v", 404, o.Payload)
}

func (o *CreateInboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundRequestEntityTooLarge creates a CreateInboundRequestEntityTooLarge with default headers values
func NewCreateInboundRequestEntityTooLarge() *CreateInboundRequestEntityTooLarge {
	return &CreateInboundRequestEntityTooLarge{}
}

/*
CreateInboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateInboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound request entity too large response has a 2xx status code
func (o *CreateInboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound request entity too large response has a 3xx status code
func (o *CreateInboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound request entity too large response has a 4xx status code
func (o *CreateInboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound request entity too large response has a 5xx status code
func (o *CreateInboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound request entity too large response a status code equal to that given
func (o *CreateInboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateInboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateInboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateInboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundUnsupportedMediaType creates a CreateInboundUnsupportedMediaType with default headers values
func NewCreateInboundUnsupportedMediaType() *CreateInboundUnsupportedMediaType {
	return &CreateInboundUnsupportedMediaType{}
}

/*
CreateInboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateInboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound unsupported media type response has a 2xx status code
func (o *CreateInboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound unsupported media type response has a 3xx status code
func (o *CreateInboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound unsupported media type response has a 4xx status code
func (o *CreateInboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound unsupported media type response has a 5xx status code
func (o *CreateInboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound unsupported media type response a status code equal to that given
func (o *CreateInboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateInboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateInboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateInboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundTooManyRequests creates a CreateInboundTooManyRequests with default headers values
func NewCreateInboundTooManyRequests() *CreateInboundTooManyRequests {
	return &CreateInboundTooManyRequests{}
}

/*
CreateInboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateInboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound too many requests response has a 2xx status code
func (o *CreateInboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound too many requests response has a 3xx status code
func (o *CreateInboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound too many requests response has a 4xx status code
func (o *CreateInboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound too many requests response has a 5xx status code
func (o *CreateInboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound too many requests response a status code equal to that given
func (o *CreateInboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateInboundTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateInboundTooManyRequests) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateInboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundInternalServerError creates a CreateInboundInternalServerError with default headers values
func NewCreateInboundInternalServerError() *CreateInboundInternalServerError {
	return &CreateInboundInternalServerError{}
}

/*
CreateInboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateInboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound internal server error response has a 2xx status code
func (o *CreateInboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound internal server error response has a 3xx status code
func (o *CreateInboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound internal server error response has a 4xx status code
func (o *CreateInboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inbound internal server error response has a 5xx status code
func (o *CreateInboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create inbound internal server error response a status code equal to that given
func (o *CreateInboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateInboundInternalServerError) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInboundInternalServerError) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundServiceUnavailable creates a CreateInboundServiceUnavailable with default headers values
func NewCreateInboundServiceUnavailable() *CreateInboundServiceUnavailable {
	return &CreateInboundServiceUnavailable{}
}

/*
CreateInboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateInboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this create inbound service unavailable response has a 2xx status code
func (o *CreateInboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound service unavailable response has a 3xx status code
func (o *CreateInboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound service unavailable response has a 4xx status code
func (o *CreateInboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inbound service unavailable response has a 5xx status code
func (o *CreateInboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create inbound service unavailable response a status code equal to that given
func (o *CreateInboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateInboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateInboundServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders][%d] createInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateInboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
