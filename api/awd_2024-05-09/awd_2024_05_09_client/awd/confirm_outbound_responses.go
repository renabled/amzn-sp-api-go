// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// ConfirmOutboundReader is a Reader for the ConfirmOutbound structure.
type ConfirmOutboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmOutboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewConfirmOutboundNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmOutboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmOutboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmOutboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmOutboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmOutboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmOutboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmOutboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmOutboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmOutboundNoContent creates a ConfirmOutboundNoContent with default headers values
func NewConfirmOutboundNoContent() *ConfirmOutboundNoContent {
	return &ConfirmOutboundNoContent{}
}

/*
ConfirmOutboundNoContent describes a response with status code 204, with default header values.

The 204 response for `confirmOutbound`.
*/
type ConfirmOutboundNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this confirm outbound no content response has a 2xx status code
func (o *ConfirmOutboundNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm outbound no content response has a 3xx status code
func (o *ConfirmOutboundNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound no content response has a 4xx status code
func (o *ConfirmOutboundNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm outbound no content response has a 5xx status code
func (o *ConfirmOutboundNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound no content response a status code equal to that given
func (o *ConfirmOutboundNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *ConfirmOutboundNoContent) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundNoContent ", 204)
}

func (o *ConfirmOutboundNoContent) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundNoContent ", 204)
}

func (o *ConfirmOutboundNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewConfirmOutboundBadRequest creates a ConfirmOutboundBadRequest with default headers values
func NewConfirmOutboundBadRequest() *ConfirmOutboundBadRequest {
	return &ConfirmOutboundBadRequest{}
}

/*
ConfirmOutboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmOutboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound bad request response has a 2xx status code
func (o *ConfirmOutboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound bad request response has a 3xx status code
func (o *ConfirmOutboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound bad request response has a 4xx status code
func (o *ConfirmOutboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm outbound bad request response has a 5xx status code
func (o *ConfirmOutboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound bad request response a status code equal to that given
func (o *ConfirmOutboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmOutboundBadRequest) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmOutboundBadRequest) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmOutboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundForbidden creates a ConfirmOutboundForbidden with default headers values
func NewConfirmOutboundForbidden() *ConfirmOutboundForbidden {
	return &ConfirmOutboundForbidden{}
}

/*
ConfirmOutboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmOutboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound forbidden response has a 2xx status code
func (o *ConfirmOutboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound forbidden response has a 3xx status code
func (o *ConfirmOutboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound forbidden response has a 4xx status code
func (o *ConfirmOutboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm outbound forbidden response has a 5xx status code
func (o *ConfirmOutboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound forbidden response a status code equal to that given
func (o *ConfirmOutboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmOutboundForbidden) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmOutboundForbidden) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmOutboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundNotFound creates a ConfirmOutboundNotFound with default headers values
func NewConfirmOutboundNotFound() *ConfirmOutboundNotFound {
	return &ConfirmOutboundNotFound{}
}

/*
ConfirmOutboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmOutboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound not found response has a 2xx status code
func (o *ConfirmOutboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound not found response has a 3xx status code
func (o *ConfirmOutboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound not found response has a 4xx status code
func (o *ConfirmOutboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm outbound not found response has a 5xx status code
func (o *ConfirmOutboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound not found response a status code equal to that given
func (o *ConfirmOutboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmOutboundNotFound) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmOutboundNotFound) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmOutboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundRequestEntityTooLarge creates a ConfirmOutboundRequestEntityTooLarge with default headers values
func NewConfirmOutboundRequestEntityTooLarge() *ConfirmOutboundRequestEntityTooLarge {
	return &ConfirmOutboundRequestEntityTooLarge{}
}

/*
ConfirmOutboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmOutboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound request entity too large response has a 2xx status code
func (o *ConfirmOutboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound request entity too large response has a 3xx status code
func (o *ConfirmOutboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound request entity too large response has a 4xx status code
func (o *ConfirmOutboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm outbound request entity too large response has a 5xx status code
func (o *ConfirmOutboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound request entity too large response a status code equal to that given
func (o *ConfirmOutboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ConfirmOutboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmOutboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmOutboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundUnsupportedMediaType creates a ConfirmOutboundUnsupportedMediaType with default headers values
func NewConfirmOutboundUnsupportedMediaType() *ConfirmOutboundUnsupportedMediaType {
	return &ConfirmOutboundUnsupportedMediaType{}
}

/*
ConfirmOutboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmOutboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound unsupported media type response has a 2xx status code
func (o *ConfirmOutboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound unsupported media type response has a 3xx status code
func (o *ConfirmOutboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound unsupported media type response has a 4xx status code
func (o *ConfirmOutboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm outbound unsupported media type response has a 5xx status code
func (o *ConfirmOutboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound unsupported media type response a status code equal to that given
func (o *ConfirmOutboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ConfirmOutboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmOutboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmOutboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundTooManyRequests creates a ConfirmOutboundTooManyRequests with default headers values
func NewConfirmOutboundTooManyRequests() *ConfirmOutboundTooManyRequests {
	return &ConfirmOutboundTooManyRequests{}
}

/*
ConfirmOutboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmOutboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound too many requests response has a 2xx status code
func (o *ConfirmOutboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound too many requests response has a 3xx status code
func (o *ConfirmOutboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound too many requests response has a 4xx status code
func (o *ConfirmOutboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm outbound too many requests response has a 5xx status code
func (o *ConfirmOutboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm outbound too many requests response a status code equal to that given
func (o *ConfirmOutboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmOutboundTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmOutboundTooManyRequests) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmOutboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundInternalServerError creates a ConfirmOutboundInternalServerError with default headers values
func NewConfirmOutboundInternalServerError() *ConfirmOutboundInternalServerError {
	return &ConfirmOutboundInternalServerError{}
}

/*
ConfirmOutboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmOutboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound internal server error response has a 2xx status code
func (o *ConfirmOutboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound internal server error response has a 3xx status code
func (o *ConfirmOutboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound internal server error response has a 4xx status code
func (o *ConfirmOutboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm outbound internal server error response has a 5xx status code
func (o *ConfirmOutboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm outbound internal server error response a status code equal to that given
func (o *ConfirmOutboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmOutboundInternalServerError) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmOutboundInternalServerError) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmOutboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmOutboundServiceUnavailable creates a ConfirmOutboundServiceUnavailable with default headers values
func NewConfirmOutboundServiceUnavailable() *ConfirmOutboundServiceUnavailable {
	return &ConfirmOutboundServiceUnavailable{}
}

/*
ConfirmOutboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmOutboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this confirm outbound service unavailable response has a 2xx status code
func (o *ConfirmOutboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm outbound service unavailable response has a 3xx status code
func (o *ConfirmOutboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm outbound service unavailable response has a 4xx status code
func (o *ConfirmOutboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm outbound service unavailable response has a 5xx status code
func (o *ConfirmOutboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm outbound service unavailable response a status code equal to that given
func (o *ConfirmOutboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmOutboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmOutboundServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/outboundOrders/{orderId}/confirmation][%d] confirmOutboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmOutboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ConfirmOutboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
