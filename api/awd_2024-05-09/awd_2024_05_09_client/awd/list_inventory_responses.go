// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// ListInventoryReader is a Reader for the ListInventory structure.
type ListInventoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListInventoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListInventoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListInventoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListInventoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListInventoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListInventoryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListInventoryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListInventoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListInventoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListInventoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListInventoryOK creates a ListInventoryOK with default headers values
func NewListInventoryOK() *ListInventoryOK {
	return &ListInventoryOK{}
}

/*
ListInventoryOK describes a response with status code 200, with default header values.

The 200 response for `listInventory`.
*/
type ListInventoryOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.InventoryListing
}

// IsSuccess returns true when this list inventory o k response has a 2xx status code
func (o *ListInventoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list inventory o k response has a 3xx status code
func (o *ListInventoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory o k response has a 4xx status code
func (o *ListInventoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inventory o k response has a 5xx status code
func (o *ListInventoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory o k response a status code equal to that given
func (o *ListInventoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListInventoryOK) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryOK  %+v", 200, o.Payload)
}

func (o *ListInventoryOK) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryOK  %+v", 200, o.Payload)
}

func (o *ListInventoryOK) GetPayload() *awd_2024_05_09_models.InventoryListing {
	return o.Payload
}

func (o *ListInventoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.InventoryListing)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryBadRequest creates a ListInventoryBadRequest with default headers values
func NewListInventoryBadRequest() *ListInventoryBadRequest {
	return &ListInventoryBadRequest{}
}

/*
ListInventoryBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListInventoryBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory bad request response has a 2xx status code
func (o *ListInventoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory bad request response has a 3xx status code
func (o *ListInventoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory bad request response has a 4xx status code
func (o *ListInventoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inventory bad request response has a 5xx status code
func (o *ListInventoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory bad request response a status code equal to that given
func (o *ListInventoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListInventoryBadRequest) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *ListInventoryBadRequest) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryBadRequest  %+v", 400, o.Payload)
}

func (o *ListInventoryBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryForbidden creates a ListInventoryForbidden with default headers values
func NewListInventoryForbidden() *ListInventoryForbidden {
	return &ListInventoryForbidden{}
}

/*
ListInventoryForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListInventoryForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory forbidden response has a 2xx status code
func (o *ListInventoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory forbidden response has a 3xx status code
func (o *ListInventoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory forbidden response has a 4xx status code
func (o *ListInventoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inventory forbidden response has a 5xx status code
func (o *ListInventoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory forbidden response a status code equal to that given
func (o *ListInventoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListInventoryForbidden) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryForbidden  %+v", 403, o.Payload)
}

func (o *ListInventoryForbidden) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryForbidden  %+v", 403, o.Payload)
}

func (o *ListInventoryForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryNotFound creates a ListInventoryNotFound with default headers values
func NewListInventoryNotFound() *ListInventoryNotFound {
	return &ListInventoryNotFound{}
}

/*
ListInventoryNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListInventoryNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory not found response has a 2xx status code
func (o *ListInventoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory not found response has a 3xx status code
func (o *ListInventoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory not found response has a 4xx status code
func (o *ListInventoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inventory not found response has a 5xx status code
func (o *ListInventoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory not found response a status code equal to that given
func (o *ListInventoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListInventoryNotFound) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryNotFound  %+v", 404, o.Payload)
}

func (o *ListInventoryNotFound) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryNotFound  %+v", 404, o.Payload)
}

func (o *ListInventoryNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryRequestEntityTooLarge creates a ListInventoryRequestEntityTooLarge with default headers values
func NewListInventoryRequestEntityTooLarge() *ListInventoryRequestEntityTooLarge {
	return &ListInventoryRequestEntityTooLarge{}
}

/*
ListInventoryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListInventoryRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory request entity too large response has a 2xx status code
func (o *ListInventoryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory request entity too large response has a 3xx status code
func (o *ListInventoryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory request entity too large response has a 4xx status code
func (o *ListInventoryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inventory request entity too large response has a 5xx status code
func (o *ListInventoryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory request entity too large response a status code equal to that given
func (o *ListInventoryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListInventoryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListInventoryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListInventoryRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryUnsupportedMediaType creates a ListInventoryUnsupportedMediaType with default headers values
func NewListInventoryUnsupportedMediaType() *ListInventoryUnsupportedMediaType {
	return &ListInventoryUnsupportedMediaType{}
}

/*
ListInventoryUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListInventoryUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory unsupported media type response has a 2xx status code
func (o *ListInventoryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory unsupported media type response has a 3xx status code
func (o *ListInventoryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory unsupported media type response has a 4xx status code
func (o *ListInventoryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inventory unsupported media type response has a 5xx status code
func (o *ListInventoryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory unsupported media type response a status code equal to that given
func (o *ListInventoryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListInventoryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListInventoryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListInventoryUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryTooManyRequests creates a ListInventoryTooManyRequests with default headers values
func NewListInventoryTooManyRequests() *ListInventoryTooManyRequests {
	return &ListInventoryTooManyRequests{}
}

/*
ListInventoryTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListInventoryTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory too many requests response has a 2xx status code
func (o *ListInventoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory too many requests response has a 3xx status code
func (o *ListInventoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory too many requests response has a 4xx status code
func (o *ListInventoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list inventory too many requests response has a 5xx status code
func (o *ListInventoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list inventory too many requests response a status code equal to that given
func (o *ListInventoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListInventoryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListInventoryTooManyRequests) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListInventoryTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryInternalServerError creates a ListInventoryInternalServerError with default headers values
func NewListInventoryInternalServerError() *ListInventoryInternalServerError {
	return &ListInventoryInternalServerError{}
}

/*
ListInventoryInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListInventoryInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory internal server error response has a 2xx status code
func (o *ListInventoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory internal server error response has a 3xx status code
func (o *ListInventoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory internal server error response has a 4xx status code
func (o *ListInventoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inventory internal server error response has a 5xx status code
func (o *ListInventoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list inventory internal server error response a status code equal to that given
func (o *ListInventoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListInventoryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInventoryInternalServerError) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInventoryInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInventoryServiceUnavailable creates a ListInventoryServiceUnavailable with default headers values
func NewListInventoryServiceUnavailable() *ListInventoryServiceUnavailable {
	return &ListInventoryServiceUnavailable{}
}

/*
ListInventoryServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListInventoryServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this list inventory service unavailable response has a 2xx status code
func (o *ListInventoryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list inventory service unavailable response has a 3xx status code
func (o *ListInventoryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list inventory service unavailable response has a 4xx status code
func (o *ListInventoryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list inventory service unavailable response has a 5xx status code
func (o *ListInventoryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list inventory service unavailable response a status code equal to that given
func (o *ListInventoryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListInventoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListInventoryServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /awd/2024-05-09/inventory][%d] listInventoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListInventoryServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *ListInventoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
