// Code generated by go-swagger; DO NOT EDIT.

package awd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/awd_2024-05-09/awd_2024_05_09_models"
)

// CancelInboundReader is a Reader for the CancelInbound structure.
type CancelInboundReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelInboundReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCancelInboundNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelInboundBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelInboundForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelInboundNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCancelInboundConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCancelInboundRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCancelInboundUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelInboundTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelInboundInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelInboundServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelInboundNoContent creates a CancelInboundNoContent with default headers values
func NewCancelInboundNoContent() *CancelInboundNoContent {
	return &CancelInboundNoContent{}
}

/*
CancelInboundNoContent describes a response with status code 204, with default header values.

`CancelInbound` 204 response.
*/
type CancelInboundNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this cancel inbound no content response has a 2xx status code
func (o *CancelInboundNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel inbound no content response has a 3xx status code
func (o *CancelInboundNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound no content response has a 4xx status code
func (o *CancelInboundNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel inbound no content response has a 5xx status code
func (o *CancelInboundNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound no content response a status code equal to that given
func (o *CancelInboundNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *CancelInboundNoContent) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundNoContent ", 204)
}

func (o *CancelInboundNoContent) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundNoContent ", 204)
}

func (o *CancelInboundNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewCancelInboundBadRequest creates a CancelInboundBadRequest with default headers values
func NewCancelInboundBadRequest() *CancelInboundBadRequest {
	return &CancelInboundBadRequest{}
}

/*
CancelInboundBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelInboundBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound bad request response has a 2xx status code
func (o *CancelInboundBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound bad request response has a 3xx status code
func (o *CancelInboundBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound bad request response has a 4xx status code
func (o *CancelInboundBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound bad request response has a 5xx status code
func (o *CancelInboundBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound bad request response a status code equal to that given
func (o *CancelInboundBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CancelInboundBadRequest) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundBadRequest  %+v", 400, o.Payload)
}

func (o *CancelInboundBadRequest) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundBadRequest  %+v", 400, o.Payload)
}

func (o *CancelInboundBadRequest) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundForbidden creates a CancelInboundForbidden with default headers values
func NewCancelInboundForbidden() *CancelInboundForbidden {
	return &CancelInboundForbidden{}
}

/*
CancelInboundForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CancelInboundForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound forbidden response has a 2xx status code
func (o *CancelInboundForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound forbidden response has a 3xx status code
func (o *CancelInboundForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound forbidden response has a 4xx status code
func (o *CancelInboundForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound forbidden response has a 5xx status code
func (o *CancelInboundForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound forbidden response a status code equal to that given
func (o *CancelInboundForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CancelInboundForbidden) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundForbidden  %+v", 403, o.Payload)
}

func (o *CancelInboundForbidden) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundForbidden  %+v", 403, o.Payload)
}

func (o *CancelInboundForbidden) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundNotFound creates a CancelInboundNotFound with default headers values
func NewCancelInboundNotFound() *CancelInboundNotFound {
	return &CancelInboundNotFound{}
}

/*
CancelInboundNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CancelInboundNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound not found response has a 2xx status code
func (o *CancelInboundNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound not found response has a 3xx status code
func (o *CancelInboundNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound not found response has a 4xx status code
func (o *CancelInboundNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound not found response has a 5xx status code
func (o *CancelInboundNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound not found response a status code equal to that given
func (o *CancelInboundNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CancelInboundNotFound) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundNotFound  %+v", 404, o.Payload)
}

func (o *CancelInboundNotFound) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundNotFound  %+v", 404, o.Payload)
}

func (o *CancelInboundNotFound) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundConflict creates a CancelInboundConflict with default headers values
func NewCancelInboundConflict() *CancelInboundConflict {
	return &CancelInboundConflict{}
}

/*
CancelInboundConflict describes a response with status code 409, with default header values.

`ConflictException` 409 response.
*/
type CancelInboundConflict struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound conflict response has a 2xx status code
func (o *CancelInboundConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound conflict response has a 3xx status code
func (o *CancelInboundConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound conflict response has a 4xx status code
func (o *CancelInboundConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound conflict response has a 5xx status code
func (o *CancelInboundConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound conflict response a status code equal to that given
func (o *CancelInboundConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CancelInboundConflict) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundConflict  %+v", 409, o.Payload)
}

func (o *CancelInboundConflict) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundConflict  %+v", 409, o.Payload)
}

func (o *CancelInboundConflict) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundRequestEntityTooLarge creates a CancelInboundRequestEntityTooLarge with default headers values
func NewCancelInboundRequestEntityTooLarge() *CancelInboundRequestEntityTooLarge {
	return &CancelInboundRequestEntityTooLarge{}
}

/*
CancelInboundRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CancelInboundRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound request entity too large response has a 2xx status code
func (o *CancelInboundRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound request entity too large response has a 3xx status code
func (o *CancelInboundRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound request entity too large response has a 4xx status code
func (o *CancelInboundRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound request entity too large response has a 5xx status code
func (o *CancelInboundRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound request entity too large response a status code equal to that given
func (o *CancelInboundRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CancelInboundRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CancelInboundRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CancelInboundRequestEntityTooLarge) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundUnsupportedMediaType creates a CancelInboundUnsupportedMediaType with default headers values
func NewCancelInboundUnsupportedMediaType() *CancelInboundUnsupportedMediaType {
	return &CancelInboundUnsupportedMediaType{}
}

/*
CancelInboundUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CancelInboundUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound unsupported media type response has a 2xx status code
func (o *CancelInboundUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound unsupported media type response has a 3xx status code
func (o *CancelInboundUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound unsupported media type response has a 4xx status code
func (o *CancelInboundUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound unsupported media type response has a 5xx status code
func (o *CancelInboundUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound unsupported media type response a status code equal to that given
func (o *CancelInboundUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CancelInboundUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CancelInboundUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CancelInboundUnsupportedMediaType) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundTooManyRequests creates a CancelInboundTooManyRequests with default headers values
func NewCancelInboundTooManyRequests() *CancelInboundTooManyRequests {
	return &CancelInboundTooManyRequests{}
}

/*
CancelInboundTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelInboundTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound too many requests response has a 2xx status code
func (o *CancelInboundTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound too many requests response has a 3xx status code
func (o *CancelInboundTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound too many requests response has a 4xx status code
func (o *CancelInboundTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel inbound too many requests response has a 5xx status code
func (o *CancelInboundTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel inbound too many requests response a status code equal to that given
func (o *CancelInboundTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CancelInboundTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelInboundTooManyRequests) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelInboundTooManyRequests) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundInternalServerError creates a CancelInboundInternalServerError with default headers values
func NewCancelInboundInternalServerError() *CancelInboundInternalServerError {
	return &CancelInboundInternalServerError{}
}

/*
CancelInboundInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CancelInboundInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound internal server error response has a 2xx status code
func (o *CancelInboundInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound internal server error response has a 3xx status code
func (o *CancelInboundInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound internal server error response has a 4xx status code
func (o *CancelInboundInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel inbound internal server error response has a 5xx status code
func (o *CancelInboundInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel inbound internal server error response a status code equal to that given
func (o *CancelInboundInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CancelInboundInternalServerError) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelInboundInternalServerError) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelInboundInternalServerError) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelInboundServiceUnavailable creates a CancelInboundServiceUnavailable with default headers values
func NewCancelInboundServiceUnavailable() *CancelInboundServiceUnavailable {
	return &CancelInboundServiceUnavailable{}
}

/*
CancelInboundServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelInboundServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *awd_2024_05_09_models.ErrorList
}

// IsSuccess returns true when this cancel inbound service unavailable response has a 2xx status code
func (o *CancelInboundServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel inbound service unavailable response has a 3xx status code
func (o *CancelInboundServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel inbound service unavailable response has a 4xx status code
func (o *CancelInboundServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel inbound service unavailable response has a 5xx status code
func (o *CancelInboundServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel inbound service unavailable response a status code equal to that given
func (o *CancelInboundServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CancelInboundServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelInboundServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /awd/2024-05-09/inboundOrders/{orderId}/cancellation][%d] cancelInboundServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelInboundServiceUnavailable) GetPayload() *awd_2024_05_09_models.ErrorList {
	return o.Payload
}

func (o *CancelInboundServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(awd_2024_05_09_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
