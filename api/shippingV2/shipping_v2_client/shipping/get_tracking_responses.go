// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// GetTrackingReader is a Reader for the GetTracking structure.
type GetTrackingReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTrackingReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTrackingOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTrackingBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTrackingUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTrackingForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTrackingNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetTrackingRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetTrackingUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTrackingTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTrackingInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTrackingServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTrackingOK creates a GetTrackingOK with default headers values
func NewGetTrackingOK() *GetTrackingOK {
	return &GetTrackingOK{}
}

/*
GetTrackingOK describes a response with status code 200, with default header values.

Success.
*/
type GetTrackingOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.GetTrackingResponse
}

// IsSuccess returns true when this get tracking o k response has a 2xx status code
func (o *GetTrackingOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get tracking o k response has a 3xx status code
func (o *GetTrackingOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking o k response has a 4xx status code
func (o *GetTrackingOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tracking o k response has a 5xx status code
func (o *GetTrackingOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking o k response a status code equal to that given
func (o *GetTrackingOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTrackingOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingOK  %+v", 200, o.Payload)
}

func (o *GetTrackingOK) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingOK  %+v", 200, o.Payload)
}

func (o *GetTrackingOK) GetPayload() *shipping_v2_models.GetTrackingResponse {
	return o.Payload
}

func (o *GetTrackingOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.GetTrackingResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingBadRequest creates a GetTrackingBadRequest with default headers values
func NewGetTrackingBadRequest() *GetTrackingBadRequest {
	return &GetTrackingBadRequest{}
}

/*
GetTrackingBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetTrackingBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking bad request response has a 2xx status code
func (o *GetTrackingBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking bad request response has a 3xx status code
func (o *GetTrackingBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking bad request response has a 4xx status code
func (o *GetTrackingBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking bad request response has a 5xx status code
func (o *GetTrackingBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking bad request response a status code equal to that given
func (o *GetTrackingBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTrackingBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingBadRequest  %+v", 400, o.Payload)
}

func (o *GetTrackingBadRequest) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingBadRequest  %+v", 400, o.Payload)
}

func (o *GetTrackingBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingUnauthorized creates a GetTrackingUnauthorized with default headers values
func NewGetTrackingUnauthorized() *GetTrackingUnauthorized {
	return &GetTrackingUnauthorized{}
}

/*
GetTrackingUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetTrackingUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking unauthorized response has a 2xx status code
func (o *GetTrackingUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking unauthorized response has a 3xx status code
func (o *GetTrackingUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking unauthorized response has a 4xx status code
func (o *GetTrackingUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking unauthorized response has a 5xx status code
func (o *GetTrackingUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking unauthorized response a status code equal to that given
func (o *GetTrackingUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetTrackingUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTrackingUnauthorized) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTrackingUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingForbidden creates a GetTrackingForbidden with default headers values
func NewGetTrackingForbidden() *GetTrackingForbidden {
	return &GetTrackingForbidden{}
}

/*
GetTrackingForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetTrackingForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking forbidden response has a 2xx status code
func (o *GetTrackingForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking forbidden response has a 3xx status code
func (o *GetTrackingForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking forbidden response has a 4xx status code
func (o *GetTrackingForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking forbidden response has a 5xx status code
func (o *GetTrackingForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking forbidden response a status code equal to that given
func (o *GetTrackingForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTrackingForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingForbidden  %+v", 403, o.Payload)
}

func (o *GetTrackingForbidden) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingForbidden  %+v", 403, o.Payload)
}

func (o *GetTrackingForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingNotFound creates a GetTrackingNotFound with default headers values
func NewGetTrackingNotFound() *GetTrackingNotFound {
	return &GetTrackingNotFound{}
}

/*
GetTrackingNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetTrackingNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking not found response has a 2xx status code
func (o *GetTrackingNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking not found response has a 3xx status code
func (o *GetTrackingNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking not found response has a 4xx status code
func (o *GetTrackingNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking not found response has a 5xx status code
func (o *GetTrackingNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking not found response a status code equal to that given
func (o *GetTrackingNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTrackingNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingNotFound  %+v", 404, o.Payload)
}

func (o *GetTrackingNotFound) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingNotFound  %+v", 404, o.Payload)
}

func (o *GetTrackingNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingRequestEntityTooLarge creates a GetTrackingRequestEntityTooLarge with default headers values
func NewGetTrackingRequestEntityTooLarge() *GetTrackingRequestEntityTooLarge {
	return &GetTrackingRequestEntityTooLarge{}
}

/*
GetTrackingRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetTrackingRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking request entity too large response has a 2xx status code
func (o *GetTrackingRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking request entity too large response has a 3xx status code
func (o *GetTrackingRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking request entity too large response has a 4xx status code
func (o *GetTrackingRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking request entity too large response has a 5xx status code
func (o *GetTrackingRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking request entity too large response a status code equal to that given
func (o *GetTrackingRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetTrackingRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetTrackingRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetTrackingRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingUnsupportedMediaType creates a GetTrackingUnsupportedMediaType with default headers values
func NewGetTrackingUnsupportedMediaType() *GetTrackingUnsupportedMediaType {
	return &GetTrackingUnsupportedMediaType{}
}

/*
GetTrackingUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetTrackingUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking unsupported media type response has a 2xx status code
func (o *GetTrackingUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking unsupported media type response has a 3xx status code
func (o *GetTrackingUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking unsupported media type response has a 4xx status code
func (o *GetTrackingUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking unsupported media type response has a 5xx status code
func (o *GetTrackingUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking unsupported media type response a status code equal to that given
func (o *GetTrackingUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetTrackingUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTrackingUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTrackingUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingTooManyRequests creates a GetTrackingTooManyRequests with default headers values
func NewGetTrackingTooManyRequests() *GetTrackingTooManyRequests {
	return &GetTrackingTooManyRequests{}
}

/*
GetTrackingTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetTrackingTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking too many requests response has a 2xx status code
func (o *GetTrackingTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking too many requests response has a 3xx status code
func (o *GetTrackingTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking too many requests response has a 4xx status code
func (o *GetTrackingTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get tracking too many requests response has a 5xx status code
func (o *GetTrackingTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get tracking too many requests response a status code equal to that given
func (o *GetTrackingTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetTrackingTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTrackingTooManyRequests) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTrackingTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInternalServerError creates a GetTrackingInternalServerError with default headers values
func NewGetTrackingInternalServerError() *GetTrackingInternalServerError {
	return &GetTrackingInternalServerError{}
}

/*
GetTrackingInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetTrackingInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking internal server error response has a 2xx status code
func (o *GetTrackingInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking internal server error response has a 3xx status code
func (o *GetTrackingInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking internal server error response has a 4xx status code
func (o *GetTrackingInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tracking internal server error response has a 5xx status code
func (o *GetTrackingInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get tracking internal server error response a status code equal to that given
func (o *GetTrackingInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTrackingInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTrackingInternalServerError) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTrackingInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingServiceUnavailable creates a GetTrackingServiceUnavailable with default headers values
func NewGetTrackingServiceUnavailable() *GetTrackingServiceUnavailable {
	return &GetTrackingServiceUnavailable{}
}

/*
GetTrackingServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetTrackingServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get tracking service unavailable response has a 2xx status code
func (o *GetTrackingServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get tracking service unavailable response has a 3xx status code
func (o *GetTrackingServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get tracking service unavailable response has a 4xx status code
func (o *GetTrackingServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get tracking service unavailable response has a 5xx status code
func (o *GetTrackingServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get tracking service unavailable response a status code equal to that given
func (o *GetTrackingServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetTrackingServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTrackingServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /shipping/v2/tracking][%d] getTrackingServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTrackingServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetTrackingServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
