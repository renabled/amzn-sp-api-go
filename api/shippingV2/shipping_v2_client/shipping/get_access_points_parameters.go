// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAccessPointsParams creates a new GetAccessPointsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAccessPointsParams() *GetAccessPointsParams {
	return &GetAccessPointsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAccessPointsParamsWithTimeout creates a new GetAccessPointsParams object
// with the ability to set a timeout on a request.
func NewGetAccessPointsParamsWithTimeout(timeout time.Duration) *GetAccessPointsParams {
	return &GetAccessPointsParams{
		timeout: timeout,
	}
}

// NewGetAccessPointsParamsWithContext creates a new GetAccessPointsParams object
// with the ability to set a context for a request.
func NewGetAccessPointsParamsWithContext(ctx context.Context) *GetAccessPointsParams {
	return &GetAccessPointsParams{
		Context: ctx,
	}
}

// NewGetAccessPointsParamsWithHTTPClient creates a new GetAccessPointsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAccessPointsParamsWithHTTPClient(client *http.Client) *GetAccessPointsParams {
	return &GetAccessPointsParams{
		HTTPClient: client,
	}
}

/*
GetAccessPointsParams contains all the parameters to send to the API endpoint

	for the get access points operation.

	Typically these are written to a http.Request.
*/
type GetAccessPointsParams struct {

	// AccessPointTypes.
	AccessPointTypes []string

	// CountryCode.
	CountryCode string

	// PostalCode.
	PostalCode string

	/* XAmznShippingBusinessID.

	   Amazon shipping business to assume for this request. The default is AmazonShipping_UK.
	*/
	XAmznShippingBusinessID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get access points params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccessPointsParams) WithDefaults() *GetAccessPointsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get access points params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAccessPointsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get access points params
func (o *GetAccessPointsParams) WithTimeout(timeout time.Duration) *GetAccessPointsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get access points params
func (o *GetAccessPointsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get access points params
func (o *GetAccessPointsParams) WithContext(ctx context.Context) *GetAccessPointsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get access points params
func (o *GetAccessPointsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get access points params
func (o *GetAccessPointsParams) WithHTTPClient(client *http.Client) *GetAccessPointsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get access points params
func (o *GetAccessPointsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccessPointTypes adds the accessPointTypes to the get access points params
func (o *GetAccessPointsParams) WithAccessPointTypes(accessPointTypes []string) *GetAccessPointsParams {
	o.SetAccessPointTypes(accessPointTypes)
	return o
}

// SetAccessPointTypes adds the accessPointTypes to the get access points params
func (o *GetAccessPointsParams) SetAccessPointTypes(accessPointTypes []string) {
	o.AccessPointTypes = accessPointTypes
}

// WithCountryCode adds the countryCode to the get access points params
func (o *GetAccessPointsParams) WithCountryCode(countryCode string) *GetAccessPointsParams {
	o.SetCountryCode(countryCode)
	return o
}

// SetCountryCode adds the countryCode to the get access points params
func (o *GetAccessPointsParams) SetCountryCode(countryCode string) {
	o.CountryCode = countryCode
}

// WithPostalCode adds the postalCode to the get access points params
func (o *GetAccessPointsParams) WithPostalCode(postalCode string) *GetAccessPointsParams {
	o.SetPostalCode(postalCode)
	return o
}

// SetPostalCode adds the postalCode to the get access points params
func (o *GetAccessPointsParams) SetPostalCode(postalCode string) {
	o.PostalCode = postalCode
}

// WithXAmznShippingBusinessID adds the xAmznShippingBusinessID to the get access points params
func (o *GetAccessPointsParams) WithXAmznShippingBusinessID(xAmznShippingBusinessID *string) *GetAccessPointsParams {
	o.SetXAmznShippingBusinessID(xAmznShippingBusinessID)
	return o
}

// SetXAmznShippingBusinessID adds the xAmznShippingBusinessId to the get access points params
func (o *GetAccessPointsParams) SetXAmznShippingBusinessID(xAmznShippingBusinessID *string) {
	o.XAmznShippingBusinessID = xAmznShippingBusinessID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAccessPointsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccessPointTypes != nil {

		// binding items for accessPointTypes
		joinedAccessPointTypes := o.bindParamAccessPointTypes(reg)

		// query array param accessPointTypes
		if err := r.SetQueryParam("accessPointTypes", joinedAccessPointTypes...); err != nil {
			return err
		}
	}

	// query param countryCode
	qrCountryCode := o.CountryCode
	qCountryCode := qrCountryCode
	if qCountryCode != "" {

		if err := r.SetQueryParam("countryCode", qCountryCode); err != nil {
			return err
		}
	}

	// query param postalCode
	qrPostalCode := o.PostalCode
	qPostalCode := qrPostalCode
	if qPostalCode != "" {

		if err := r.SetQueryParam("postalCode", qPostalCode); err != nil {
			return err
		}
	}

	if o.XAmznShippingBusinessID != nil {

		// header param x-amzn-shipping-business-id
		if err := r.SetHeaderParam("x-amzn-shipping-business-id", *o.XAmznShippingBusinessID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAccessPoints binds the parameter accessPointTypes
func (o *GetAccessPointsParams) bindParamAccessPointTypes(formats strfmt.Registry) []string {
	accessPointTypesIR := o.AccessPointTypes

	var accessPointTypesIC []string
	for _, accessPointTypesIIR := range accessPointTypesIR { // explode []string

		accessPointTypesIIV := accessPointTypesIIR // string as string
		accessPointTypesIC = append(accessPointTypesIC, accessPointTypesIIV)
	}

	// items.CollectionFormat: "csv"
	accessPointTypesIS := swag.JoinByFormat(accessPointTypesIC, "csv")

	return accessPointTypesIS
}
