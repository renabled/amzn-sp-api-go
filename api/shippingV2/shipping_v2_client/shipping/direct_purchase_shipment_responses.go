// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// DirectPurchaseShipmentReader is a Reader for the DirectPurchaseShipment structure.
type DirectPurchaseShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DirectPurchaseShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDirectPurchaseShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDirectPurchaseShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewDirectPurchaseShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDirectPurchaseShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDirectPurchaseShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDirectPurchaseShipmentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDirectPurchaseShipmentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDirectPurchaseShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDirectPurchaseShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDirectPurchaseShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDirectPurchaseShipmentOK creates a DirectPurchaseShipmentOK with default headers values
func NewDirectPurchaseShipmentOK() *DirectPurchaseShipmentOK {
	return &DirectPurchaseShipmentOK{}
}

/*
DirectPurchaseShipmentOK describes a response with status code 200, with default header values.

Success
*/
type DirectPurchaseShipmentOK struct {

	/* A unique value which the server uses to recognize subsequent retries of the same request.
	 */
	XAmznIdempotencyKey string

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.DirectPurchaseResponse
}

// IsSuccess returns true when this direct purchase shipment o k response has a 2xx status code
func (o *DirectPurchaseShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this direct purchase shipment o k response has a 3xx status code
func (o *DirectPurchaseShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment o k response has a 4xx status code
func (o *DirectPurchaseShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this direct purchase shipment o k response has a 5xx status code
func (o *DirectPurchaseShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment o k response a status code equal to that given
func (o *DirectPurchaseShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *DirectPurchaseShipmentOK) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentOK  %+v", 200, o.Payload)
}

func (o *DirectPurchaseShipmentOK) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentOK  %+v", 200, o.Payload)
}

func (o *DirectPurchaseShipmentOK) GetPayload() *shipping_v2_models.DirectPurchaseResponse {
	return o.Payload
}

func (o *DirectPurchaseShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-IdempotencyKey
	hdrXAmznIdempotencyKey := response.GetHeader("x-amzn-IdempotencyKey")

	if hdrXAmznIdempotencyKey != "" {
		o.XAmznIdempotencyKey = hdrXAmznIdempotencyKey
	}

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.DirectPurchaseResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentBadRequest creates a DirectPurchaseShipmentBadRequest with default headers values
func NewDirectPurchaseShipmentBadRequest() *DirectPurchaseShipmentBadRequest {
	return &DirectPurchaseShipmentBadRequest{}
}

/*
DirectPurchaseShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type DirectPurchaseShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment bad request response has a 2xx status code
func (o *DirectPurchaseShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment bad request response has a 3xx status code
func (o *DirectPurchaseShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment bad request response has a 4xx status code
func (o *DirectPurchaseShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment bad request response has a 5xx status code
func (o *DirectPurchaseShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment bad request response a status code equal to that given
func (o *DirectPurchaseShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DirectPurchaseShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *DirectPurchaseShipmentBadRequest) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *DirectPurchaseShipmentBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentUnauthorized creates a DirectPurchaseShipmentUnauthorized with default headers values
func NewDirectPurchaseShipmentUnauthorized() *DirectPurchaseShipmentUnauthorized {
	return &DirectPurchaseShipmentUnauthorized{}
}

/*
DirectPurchaseShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type DirectPurchaseShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment unauthorized response has a 2xx status code
func (o *DirectPurchaseShipmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment unauthorized response has a 3xx status code
func (o *DirectPurchaseShipmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment unauthorized response has a 4xx status code
func (o *DirectPurchaseShipmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment unauthorized response has a 5xx status code
func (o *DirectPurchaseShipmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment unauthorized response a status code equal to that given
func (o *DirectPurchaseShipmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *DirectPurchaseShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *DirectPurchaseShipmentUnauthorized) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *DirectPurchaseShipmentUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentForbidden creates a DirectPurchaseShipmentForbidden with default headers values
func NewDirectPurchaseShipmentForbidden() *DirectPurchaseShipmentForbidden {
	return &DirectPurchaseShipmentForbidden{}
}

/*
DirectPurchaseShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type DirectPurchaseShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment forbidden response has a 2xx status code
func (o *DirectPurchaseShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment forbidden response has a 3xx status code
func (o *DirectPurchaseShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment forbidden response has a 4xx status code
func (o *DirectPurchaseShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment forbidden response has a 5xx status code
func (o *DirectPurchaseShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment forbidden response a status code equal to that given
func (o *DirectPurchaseShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DirectPurchaseShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentForbidden  %+v", 403, o.Payload)
}

func (o *DirectPurchaseShipmentForbidden) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentForbidden  %+v", 403, o.Payload)
}

func (o *DirectPurchaseShipmentForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentNotFound creates a DirectPurchaseShipmentNotFound with default headers values
func NewDirectPurchaseShipmentNotFound() *DirectPurchaseShipmentNotFound {
	return &DirectPurchaseShipmentNotFound{}
}

/*
DirectPurchaseShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type DirectPurchaseShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment not found response has a 2xx status code
func (o *DirectPurchaseShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment not found response has a 3xx status code
func (o *DirectPurchaseShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment not found response has a 4xx status code
func (o *DirectPurchaseShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment not found response has a 5xx status code
func (o *DirectPurchaseShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment not found response a status code equal to that given
func (o *DirectPurchaseShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DirectPurchaseShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentNotFound  %+v", 404, o.Payload)
}

func (o *DirectPurchaseShipmentNotFound) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentNotFound  %+v", 404, o.Payload)
}

func (o *DirectPurchaseShipmentNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentRequestEntityTooLarge creates a DirectPurchaseShipmentRequestEntityTooLarge with default headers values
func NewDirectPurchaseShipmentRequestEntityTooLarge() *DirectPurchaseShipmentRequestEntityTooLarge {
	return &DirectPurchaseShipmentRequestEntityTooLarge{}
}

/*
DirectPurchaseShipmentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type DirectPurchaseShipmentRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment request entity too large response has a 2xx status code
func (o *DirectPurchaseShipmentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment request entity too large response has a 3xx status code
func (o *DirectPurchaseShipmentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment request entity too large response has a 4xx status code
func (o *DirectPurchaseShipmentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment request entity too large response has a 5xx status code
func (o *DirectPurchaseShipmentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment request entity too large response a status code equal to that given
func (o *DirectPurchaseShipmentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DirectPurchaseShipmentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DirectPurchaseShipmentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DirectPurchaseShipmentRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentUnsupportedMediaType creates a DirectPurchaseShipmentUnsupportedMediaType with default headers values
func NewDirectPurchaseShipmentUnsupportedMediaType() *DirectPurchaseShipmentUnsupportedMediaType {
	return &DirectPurchaseShipmentUnsupportedMediaType{}
}

/*
DirectPurchaseShipmentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type DirectPurchaseShipmentUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment unsupported media type response has a 2xx status code
func (o *DirectPurchaseShipmentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment unsupported media type response has a 3xx status code
func (o *DirectPurchaseShipmentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment unsupported media type response has a 4xx status code
func (o *DirectPurchaseShipmentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment unsupported media type response has a 5xx status code
func (o *DirectPurchaseShipmentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment unsupported media type response a status code equal to that given
func (o *DirectPurchaseShipmentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DirectPurchaseShipmentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DirectPurchaseShipmentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DirectPurchaseShipmentUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentTooManyRequests creates a DirectPurchaseShipmentTooManyRequests with default headers values
func NewDirectPurchaseShipmentTooManyRequests() *DirectPurchaseShipmentTooManyRequests {
	return &DirectPurchaseShipmentTooManyRequests{}
}

/*
DirectPurchaseShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type DirectPurchaseShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment too many requests response has a 2xx status code
func (o *DirectPurchaseShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment too many requests response has a 3xx status code
func (o *DirectPurchaseShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment too many requests response has a 4xx status code
func (o *DirectPurchaseShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this direct purchase shipment too many requests response has a 5xx status code
func (o *DirectPurchaseShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this direct purchase shipment too many requests response a status code equal to that given
func (o *DirectPurchaseShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DirectPurchaseShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *DirectPurchaseShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *DirectPurchaseShipmentTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentInternalServerError creates a DirectPurchaseShipmentInternalServerError with default headers values
func NewDirectPurchaseShipmentInternalServerError() *DirectPurchaseShipmentInternalServerError {
	return &DirectPurchaseShipmentInternalServerError{}
}

/*
DirectPurchaseShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type DirectPurchaseShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment internal server error response has a 2xx status code
func (o *DirectPurchaseShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment internal server error response has a 3xx status code
func (o *DirectPurchaseShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment internal server error response has a 4xx status code
func (o *DirectPurchaseShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this direct purchase shipment internal server error response has a 5xx status code
func (o *DirectPurchaseShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this direct purchase shipment internal server error response a status code equal to that given
func (o *DirectPurchaseShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DirectPurchaseShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *DirectPurchaseShipmentInternalServerError) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *DirectPurchaseShipmentInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDirectPurchaseShipmentServiceUnavailable creates a DirectPurchaseShipmentServiceUnavailable with default headers values
func NewDirectPurchaseShipmentServiceUnavailable() *DirectPurchaseShipmentServiceUnavailable {
	return &DirectPurchaseShipmentServiceUnavailable{}
}

/*
DirectPurchaseShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type DirectPurchaseShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this direct purchase shipment service unavailable response has a 2xx status code
func (o *DirectPurchaseShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this direct purchase shipment service unavailable response has a 3xx status code
func (o *DirectPurchaseShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this direct purchase shipment service unavailable response has a 4xx status code
func (o *DirectPurchaseShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this direct purchase shipment service unavailable response has a 5xx status code
func (o *DirectPurchaseShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this direct purchase shipment service unavailable response a status code equal to that given
func (o *DirectPurchaseShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DirectPurchaseShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DirectPurchaseShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /shipping/v2/shipments/directPurchase][%d] directPurchaseShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DirectPurchaseShipmentServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *DirectPurchaseShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
