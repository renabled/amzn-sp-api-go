// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// OneClickShipmentReader is a Reader for the OneClickShipment structure.
type OneClickShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *OneClickShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewOneClickShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewOneClickShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewOneClickShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewOneClickShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewOneClickShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewOneClickShipmentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewOneClickShipmentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewOneClickShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewOneClickShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewOneClickShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewOneClickShipmentOK creates a OneClickShipmentOK with default headers values
func NewOneClickShipmentOK() *OneClickShipmentOK {
	return &OneClickShipmentOK{}
}

/*
OneClickShipmentOK describes a response with status code 200, with default header values.

Success.
*/
type OneClickShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.OneClickShipmentResponse
}

// IsSuccess returns true when this one click shipment o k response has a 2xx status code
func (o *OneClickShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this one click shipment o k response has a 3xx status code
func (o *OneClickShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment o k response has a 4xx status code
func (o *OneClickShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this one click shipment o k response has a 5xx status code
func (o *OneClickShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment o k response a status code equal to that given
func (o *OneClickShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *OneClickShipmentOK) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentOK  %+v", 200, o.Payload)
}

func (o *OneClickShipmentOK) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentOK  %+v", 200, o.Payload)
}

func (o *OneClickShipmentOK) GetPayload() *shipping_v2_models.OneClickShipmentResponse {
	return o.Payload
}

func (o *OneClickShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.OneClickShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentBadRequest creates a OneClickShipmentBadRequest with default headers values
func NewOneClickShipmentBadRequest() *OneClickShipmentBadRequest {
	return &OneClickShipmentBadRequest{}
}

/*
OneClickShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type OneClickShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment bad request response has a 2xx status code
func (o *OneClickShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment bad request response has a 3xx status code
func (o *OneClickShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment bad request response has a 4xx status code
func (o *OneClickShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment bad request response has a 5xx status code
func (o *OneClickShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment bad request response a status code equal to that given
func (o *OneClickShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *OneClickShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *OneClickShipmentBadRequest) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *OneClickShipmentBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentUnauthorized creates a OneClickShipmentUnauthorized with default headers values
func NewOneClickShipmentUnauthorized() *OneClickShipmentUnauthorized {
	return &OneClickShipmentUnauthorized{}
}

/*
OneClickShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type OneClickShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment unauthorized response has a 2xx status code
func (o *OneClickShipmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment unauthorized response has a 3xx status code
func (o *OneClickShipmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment unauthorized response has a 4xx status code
func (o *OneClickShipmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment unauthorized response has a 5xx status code
func (o *OneClickShipmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment unauthorized response a status code equal to that given
func (o *OneClickShipmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *OneClickShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *OneClickShipmentUnauthorized) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *OneClickShipmentUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentForbidden creates a OneClickShipmentForbidden with default headers values
func NewOneClickShipmentForbidden() *OneClickShipmentForbidden {
	return &OneClickShipmentForbidden{}
}

/*
OneClickShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type OneClickShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment forbidden response has a 2xx status code
func (o *OneClickShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment forbidden response has a 3xx status code
func (o *OneClickShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment forbidden response has a 4xx status code
func (o *OneClickShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment forbidden response has a 5xx status code
func (o *OneClickShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment forbidden response a status code equal to that given
func (o *OneClickShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *OneClickShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentForbidden  %+v", 403, o.Payload)
}

func (o *OneClickShipmentForbidden) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentForbidden  %+v", 403, o.Payload)
}

func (o *OneClickShipmentForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentNotFound creates a OneClickShipmentNotFound with default headers values
func NewOneClickShipmentNotFound() *OneClickShipmentNotFound {
	return &OneClickShipmentNotFound{}
}

/*
OneClickShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type OneClickShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment not found response has a 2xx status code
func (o *OneClickShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment not found response has a 3xx status code
func (o *OneClickShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment not found response has a 4xx status code
func (o *OneClickShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment not found response has a 5xx status code
func (o *OneClickShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment not found response a status code equal to that given
func (o *OneClickShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *OneClickShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentNotFound  %+v", 404, o.Payload)
}

func (o *OneClickShipmentNotFound) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentNotFound  %+v", 404, o.Payload)
}

func (o *OneClickShipmentNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentRequestEntityTooLarge creates a OneClickShipmentRequestEntityTooLarge with default headers values
func NewOneClickShipmentRequestEntityTooLarge() *OneClickShipmentRequestEntityTooLarge {
	return &OneClickShipmentRequestEntityTooLarge{}
}

/*
OneClickShipmentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type OneClickShipmentRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment request entity too large response has a 2xx status code
func (o *OneClickShipmentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment request entity too large response has a 3xx status code
func (o *OneClickShipmentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment request entity too large response has a 4xx status code
func (o *OneClickShipmentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment request entity too large response has a 5xx status code
func (o *OneClickShipmentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment request entity too large response a status code equal to that given
func (o *OneClickShipmentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *OneClickShipmentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *OneClickShipmentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *OneClickShipmentRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentUnsupportedMediaType creates a OneClickShipmentUnsupportedMediaType with default headers values
func NewOneClickShipmentUnsupportedMediaType() *OneClickShipmentUnsupportedMediaType {
	return &OneClickShipmentUnsupportedMediaType{}
}

/*
OneClickShipmentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type OneClickShipmentUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment unsupported media type response has a 2xx status code
func (o *OneClickShipmentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment unsupported media type response has a 3xx status code
func (o *OneClickShipmentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment unsupported media type response has a 4xx status code
func (o *OneClickShipmentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment unsupported media type response has a 5xx status code
func (o *OneClickShipmentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment unsupported media type response a status code equal to that given
func (o *OneClickShipmentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *OneClickShipmentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *OneClickShipmentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *OneClickShipmentUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentTooManyRequests creates a OneClickShipmentTooManyRequests with default headers values
func NewOneClickShipmentTooManyRequests() *OneClickShipmentTooManyRequests {
	return &OneClickShipmentTooManyRequests{}
}

/*
OneClickShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type OneClickShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment too many requests response has a 2xx status code
func (o *OneClickShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment too many requests response has a 3xx status code
func (o *OneClickShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment too many requests response has a 4xx status code
func (o *OneClickShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this one click shipment too many requests response has a 5xx status code
func (o *OneClickShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this one click shipment too many requests response a status code equal to that given
func (o *OneClickShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *OneClickShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *OneClickShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *OneClickShipmentTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentInternalServerError creates a OneClickShipmentInternalServerError with default headers values
func NewOneClickShipmentInternalServerError() *OneClickShipmentInternalServerError {
	return &OneClickShipmentInternalServerError{}
}

/*
OneClickShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type OneClickShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment internal server error response has a 2xx status code
func (o *OneClickShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment internal server error response has a 3xx status code
func (o *OneClickShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment internal server error response has a 4xx status code
func (o *OneClickShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this one click shipment internal server error response has a 5xx status code
func (o *OneClickShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this one click shipment internal server error response a status code equal to that given
func (o *OneClickShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *OneClickShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *OneClickShipmentInternalServerError) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *OneClickShipmentInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewOneClickShipmentServiceUnavailable creates a OneClickShipmentServiceUnavailable with default headers values
func NewOneClickShipmentServiceUnavailable() *OneClickShipmentServiceUnavailable {
	return &OneClickShipmentServiceUnavailable{}
}

/*
OneClickShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type OneClickShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this one click shipment service unavailable response has a 2xx status code
func (o *OneClickShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this one click shipment service unavailable response has a 3xx status code
func (o *OneClickShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this one click shipment service unavailable response has a 4xx status code
func (o *OneClickShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this one click shipment service unavailable response has a 5xx status code
func (o *OneClickShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this one click shipment service unavailable response a status code equal to that given
func (o *OneClickShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *OneClickShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *OneClickShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /shipping/v2/oneClickShipment][%d] oneClickShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *OneClickShipmentServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *OneClickShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
