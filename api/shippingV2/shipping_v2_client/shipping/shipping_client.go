// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new shipping API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for shipping API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CancelShipment(params *CancelShipmentParams, opts ...ClientOption) (*CancelShipmentOK, error)

	DirectPurchaseShipment(params *DirectPurchaseShipmentParams, opts ...ClientOption) (*DirectPurchaseShipmentOK, error)

	GenerateCollectionForm(params *GenerateCollectionFormParams, opts ...ClientOption) (*GenerateCollectionFormOK, error)

	GetAccessPoints(params *GetAccessPointsParams, opts ...ClientOption) (*GetAccessPointsOK, error)

	GetAdditionalInputs(params *GetAdditionalInputsParams, opts ...ClientOption) (*GetAdditionalInputsOK, error)

	GetCarrierAccountFormInputs(params *GetCarrierAccountFormInputsParams, opts ...ClientOption) (*GetCarrierAccountFormInputsOK, error)

	GetCarrierAccounts(params *GetCarrierAccountsParams, opts ...ClientOption) (*GetCarrierAccountsOK, error)

	GetCollectionForm(params *GetCollectionFormParams, opts ...ClientOption) (*GetCollectionFormOK, error)

	GetCollectionFormHistory(params *GetCollectionFormHistoryParams, opts ...ClientOption) (*GetCollectionFormHistoryOK, error)

	GetRates(params *GetRatesParams, opts ...ClientOption) (*GetRatesOK, error)

	GetShipmentDocuments(params *GetShipmentDocumentsParams, opts ...ClientOption) (*GetShipmentDocumentsOK, error)

	GetTracking(params *GetTrackingParams, opts ...ClientOption) (*GetTrackingOK, error)

	GetUnmanifestedShipments(params *GetUnmanifestedShipmentsParams, opts ...ClientOption) (*GetUnmanifestedShipmentsOK, error)

	LinkCarrierAccount(params *LinkCarrierAccountParams, opts ...ClientOption) (*LinkCarrierAccountOK, error)

	OneClickShipment(params *OneClickShipmentParams, opts ...ClientOption) (*OneClickShipmentOK, error)

	PurchaseShipment(params *PurchaseShipmentParams, opts ...ClientOption) (*PurchaseShipmentOK, error)

	UnlinkCarrierAccount(params *UnlinkCarrierAccountParams, opts ...ClientOption) (*UnlinkCarrierAccountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	CancelShipment Cancels a purchased shipment. Returns an empty object if the shipment is successfully cancelled.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) CancelShipment(params *CancelShipmentParams, opts ...ClientOption) (*CancelShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelShipment",
		Method:             "PUT",
		PathPattern:        "/shipping/v2/shipments/{shipmentId}/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	DirectPurchaseShipment Purchases the shipping service for a shipment using the best fit service offering. Returns purchase related details and documents.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) DirectPurchaseShipment(params *DirectPurchaseShipmentParams, opts ...ClientOption) (*DirectPurchaseShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDirectPurchaseShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "directPurchaseShipment",
		Method:             "POST",
		PathPattern:        "/shipping/v2/shipments/directPurchase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DirectPurchaseShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DirectPurchaseShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for directPurchaseShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GenerateCollectionForm This API  Call to generate the collection form.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GenerateCollectionForm(params *GenerateCollectionFormParams, opts ...ClientOption) (*GenerateCollectionFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateCollectionFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "generateCollectionForm",
		Method:             "POST",
		PathPattern:        "/shipping/v2/collectionForms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GenerateCollectionFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GenerateCollectionFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for generateCollectionForm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAccessPoints Returns a list of access points in proximity of input postal code.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetAccessPoints(params *GetAccessPointsParams, opts ...ClientOption) (*GetAccessPointsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessPointsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAccessPoints",
		Method:             "GET",
		PathPattern:        "/shipping/v2/accessPoints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAccessPointsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAccessPointsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAccessPoints: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetAdditionalInputs Returns the JSON schema to use for providing additional inputs when needed to purchase a shipping offering. Call the getAdditionalInputs operation when the response to a previous call to the getRates operation indicates that additional inputs are required for the rate (shipping offering) that you want to purchase.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetAdditionalInputs(params *GetAdditionalInputsParams, opts ...ClientOption) (*GetAdditionalInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAdditionalInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAdditionalInputs",
		Method:             "GET",
		PathPattern:        "/shipping/v2/shipments/additionalInputs/schema",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAdditionalInputsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetAdditionalInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getAdditionalInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCarrierAccountFormInputs This API will return a list of input schema required to register a shipper account with the carrier.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetCarrierAccountFormInputs(params *GetCarrierAccountFormInputsParams, opts ...ClientOption) (*GetCarrierAccountFormInputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCarrierAccountFormInputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCarrierAccountFormInputs",
		Method:             "GET",
		PathPattern:        "/shipping/v2/carrierAccountFormInputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCarrierAccountFormInputsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCarrierAccountFormInputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCarrierAccountFormInputs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCarrierAccounts This API will return Get all carrier accounts for a merchant.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetCarrierAccounts(params *GetCarrierAccountsParams, opts ...ClientOption) (*GetCarrierAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCarrierAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCarrierAccounts",
		Method:             "PUT",
		PathPattern:        "/shipping/v2/carrierAccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCarrierAccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCarrierAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCarrierAccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCollectionForm This API reprint a collection form.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetCollectionForm(params *GetCollectionFormParams, opts ...ClientOption) (*GetCollectionFormOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectionFormParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCollectionForm",
		Method:             "GET",
		PathPattern:        "/shipping/v2/collectionForms/{collectionFormId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectionFormReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCollectionFormOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCollectionForm: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetCollectionFormHistory This API Call to get the history of the previously generated collection forms.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetCollectionFormHistory(params *GetCollectionFormHistoryParams, opts ...ClientOption) (*GetCollectionFormHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCollectionFormHistoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCollectionFormHistory",
		Method:             "PUT",
		PathPattern:        "/shipping/v2/collectionForms/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCollectionFormHistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCollectionFormHistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getCollectionFormHistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetRates Returns the available shipping service offerings.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetRates(params *GetRatesParams, opts ...ClientOption) (*GetRatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRates",
		Method:             "POST",
		PathPattern:        "/shipping/v2/shipments/rates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getRates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetShipmentDocuments Returns the shipping documents associated with a package in a shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetShipmentDocuments(params *GetShipmentDocumentsParams, opts ...ClientOption) (*GetShipmentDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentDocumentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShipmentDocuments",
		Method:             "GET",
		PathPattern:        "/shipping/v2/shipments/{shipmentId}/documents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShipmentDocumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShipmentDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetTracking Returns tracking information for a purchased shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetTracking(params *GetTrackingParams, opts ...ClientOption) (*GetTrackingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTrackingParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTracking",
		Method:             "GET",
		PathPattern:        "/shipping/v2/tracking",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTrackingReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTrackingOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getTracking: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetUnmanifestedShipments This API Get all unmanifested carriers with shipment locations. Any locations which has unmanifested shipments
	      with an eligible carrier for manifesting shall be returned.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetUnmanifestedShipments(params *GetUnmanifestedShipmentsParams, opts ...ClientOption) (*GetUnmanifestedShipmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUnmanifestedShipmentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUnmanifestedShipments",
		Method:             "PUT",
		PathPattern:        "/shipping/v2/unmanifestedShipments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUnmanifestedShipmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUnmanifestedShipmentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getUnmanifestedShipments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	LinkCarrierAccount This API associates/links the specified carrier account with the merchant.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) LinkCarrierAccount(params *LinkCarrierAccountParams, opts ...ClientOption) (*LinkCarrierAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLinkCarrierAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "linkCarrierAccount",
		Method:             "PUT",
		PathPattern:        "/shipping/v2/carrierAccounts/{carrierId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LinkCarrierAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LinkCarrierAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for linkCarrierAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	OneClickShipment Purchases a shipping service identifier and returns purchase-related details and documents.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) OneClickShipment(params *OneClickShipmentParams, opts ...ClientOption) (*OneClickShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewOneClickShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "oneClickShipment",
		Method:             "POST",
		PathPattern:        "/shipping/v2/oneClickShipment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &OneClickShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*OneClickShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for oneClickShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	PurchaseShipment Purchases a shipping service and returns purchase related details and documents.

Note: You must complete the purchase within 10 minutes of rate creation by the shipping service provider. If you make the request after the 10 minutes have expired, you will receive an error response with the error code equal to "TOKEN_EXPIRED". If you receive this error response, you must get the rates for the shipment again.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) PurchaseShipment(params *PurchaseShipmentParams, opts ...ClientOption) (*PurchaseShipmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPurchaseShipmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "purchaseShipment",
		Method:             "POST",
		PathPattern:        "/shipping/v2/shipments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PurchaseShipmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PurchaseShipmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for purchaseShipment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	UnlinkCarrierAccount This API Unlink the specified carrier account with the merchant.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 80 | 100 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) UnlinkCarrierAccount(params *UnlinkCarrierAccountParams, opts ...ClientOption) (*UnlinkCarrierAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlinkCarrierAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlinkCarrierAccount",
		Method:             "PUT",
		PathPattern:        "/shipping/v2/carrierAccounts/{carrierId}/unlink",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlinkCarrierAccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlinkCarrierAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for unlinkCarrierAccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
