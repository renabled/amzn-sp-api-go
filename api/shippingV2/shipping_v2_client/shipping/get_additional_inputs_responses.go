// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// GetAdditionalInputsReader is a Reader for the GetAdditionalInputs structure.
type GetAdditionalInputsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdditionalInputsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdditionalInputsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAdditionalInputsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAdditionalInputsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAdditionalInputsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAdditionalInputsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAdditionalInputsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAdditionalInputsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAdditionalInputsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAdditionalInputsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAdditionalInputsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAdditionalInputsOK creates a GetAdditionalInputsOK with default headers values
func NewGetAdditionalInputsOK() *GetAdditionalInputsOK {
	return &GetAdditionalInputsOK{}
}

/*
GetAdditionalInputsOK describes a response with status code 200, with default header values.

Success.
*/
type GetAdditionalInputsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.GetAdditionalInputsResponse
}

// IsSuccess returns true when this get additional inputs o k response has a 2xx status code
func (o *GetAdditionalInputsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get additional inputs o k response has a 3xx status code
func (o *GetAdditionalInputsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs o k response has a 4xx status code
func (o *GetAdditionalInputsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional inputs o k response has a 5xx status code
func (o *GetAdditionalInputsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs o k response a status code equal to that given
func (o *GetAdditionalInputsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAdditionalInputsOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalInputsOK) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalInputsOK) GetPayload() *shipping_v2_models.GetAdditionalInputsResponse {
	return o.Payload
}

func (o *GetAdditionalInputsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.GetAdditionalInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsBadRequest creates a GetAdditionalInputsBadRequest with default headers values
func NewGetAdditionalInputsBadRequest() *GetAdditionalInputsBadRequest {
	return &GetAdditionalInputsBadRequest{}
}

/*
GetAdditionalInputsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAdditionalInputsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs bad request response has a 2xx status code
func (o *GetAdditionalInputsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs bad request response has a 3xx status code
func (o *GetAdditionalInputsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs bad request response has a 4xx status code
func (o *GetAdditionalInputsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs bad request response has a 5xx status code
func (o *GetAdditionalInputsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs bad request response a status code equal to that given
func (o *GetAdditionalInputsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAdditionalInputsBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalInputsBadRequest) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalInputsBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsUnauthorized creates a GetAdditionalInputsUnauthorized with default headers values
func NewGetAdditionalInputsUnauthorized() *GetAdditionalInputsUnauthorized {
	return &GetAdditionalInputsUnauthorized{}
}

/*
GetAdditionalInputsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetAdditionalInputsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs unauthorized response has a 2xx status code
func (o *GetAdditionalInputsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs unauthorized response has a 3xx status code
func (o *GetAdditionalInputsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs unauthorized response has a 4xx status code
func (o *GetAdditionalInputsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs unauthorized response has a 5xx status code
func (o *GetAdditionalInputsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs unauthorized response a status code equal to that given
func (o *GetAdditionalInputsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAdditionalInputsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionalInputsUnauthorized) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionalInputsUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsForbidden creates a GetAdditionalInputsForbidden with default headers values
func NewGetAdditionalInputsForbidden() *GetAdditionalInputsForbidden {
	return &GetAdditionalInputsForbidden{}
}

/*
GetAdditionalInputsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAdditionalInputsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs forbidden response has a 2xx status code
func (o *GetAdditionalInputsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs forbidden response has a 3xx status code
func (o *GetAdditionalInputsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs forbidden response has a 4xx status code
func (o *GetAdditionalInputsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs forbidden response has a 5xx status code
func (o *GetAdditionalInputsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs forbidden response a status code equal to that given
func (o *GetAdditionalInputsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAdditionalInputsForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalInputsForbidden) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalInputsForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsNotFound creates a GetAdditionalInputsNotFound with default headers values
func NewGetAdditionalInputsNotFound() *GetAdditionalInputsNotFound {
	return &GetAdditionalInputsNotFound{}
}

/*
GetAdditionalInputsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetAdditionalInputsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs not found response has a 2xx status code
func (o *GetAdditionalInputsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs not found response has a 3xx status code
func (o *GetAdditionalInputsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs not found response has a 4xx status code
func (o *GetAdditionalInputsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs not found response has a 5xx status code
func (o *GetAdditionalInputsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs not found response a status code equal to that given
func (o *GetAdditionalInputsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAdditionalInputsNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalInputsNotFound) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalInputsNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsRequestEntityTooLarge creates a GetAdditionalInputsRequestEntityTooLarge with default headers values
func NewGetAdditionalInputsRequestEntityTooLarge() *GetAdditionalInputsRequestEntityTooLarge {
	return &GetAdditionalInputsRequestEntityTooLarge{}
}

/*
GetAdditionalInputsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetAdditionalInputsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs request entity too large response has a 2xx status code
func (o *GetAdditionalInputsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs request entity too large response has a 3xx status code
func (o *GetAdditionalInputsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs request entity too large response has a 4xx status code
func (o *GetAdditionalInputsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs request entity too large response has a 5xx status code
func (o *GetAdditionalInputsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs request entity too large response a status code equal to that given
func (o *GetAdditionalInputsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAdditionalInputsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAdditionalInputsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAdditionalInputsRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsUnsupportedMediaType creates a GetAdditionalInputsUnsupportedMediaType with default headers values
func NewGetAdditionalInputsUnsupportedMediaType() *GetAdditionalInputsUnsupportedMediaType {
	return &GetAdditionalInputsUnsupportedMediaType{}
}

/*
GetAdditionalInputsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetAdditionalInputsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs unsupported media type response has a 2xx status code
func (o *GetAdditionalInputsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs unsupported media type response has a 3xx status code
func (o *GetAdditionalInputsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs unsupported media type response has a 4xx status code
func (o *GetAdditionalInputsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs unsupported media type response has a 5xx status code
func (o *GetAdditionalInputsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs unsupported media type response a status code equal to that given
func (o *GetAdditionalInputsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAdditionalInputsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAdditionalInputsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAdditionalInputsUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsTooManyRequests creates a GetAdditionalInputsTooManyRequests with default headers values
func NewGetAdditionalInputsTooManyRequests() *GetAdditionalInputsTooManyRequests {
	return &GetAdditionalInputsTooManyRequests{}
}

/*
GetAdditionalInputsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAdditionalInputsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs too many requests response has a 2xx status code
func (o *GetAdditionalInputsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs too many requests response has a 3xx status code
func (o *GetAdditionalInputsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs too many requests response has a 4xx status code
func (o *GetAdditionalInputsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional inputs too many requests response has a 5xx status code
func (o *GetAdditionalInputsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional inputs too many requests response a status code equal to that given
func (o *GetAdditionalInputsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAdditionalInputsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalInputsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalInputsTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsInternalServerError creates a GetAdditionalInputsInternalServerError with default headers values
func NewGetAdditionalInputsInternalServerError() *GetAdditionalInputsInternalServerError {
	return &GetAdditionalInputsInternalServerError{}
}

/*
GetAdditionalInputsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAdditionalInputsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs internal server error response has a 2xx status code
func (o *GetAdditionalInputsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs internal server error response has a 3xx status code
func (o *GetAdditionalInputsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs internal server error response has a 4xx status code
func (o *GetAdditionalInputsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional inputs internal server error response has a 5xx status code
func (o *GetAdditionalInputsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get additional inputs internal server error response a status code equal to that given
func (o *GetAdditionalInputsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAdditionalInputsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionalInputsInternalServerError) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionalInputsInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalInputsServiceUnavailable creates a GetAdditionalInputsServiceUnavailable with default headers values
func NewGetAdditionalInputsServiceUnavailable() *GetAdditionalInputsServiceUnavailable {
	return &GetAdditionalInputsServiceUnavailable{}
}

/*
GetAdditionalInputsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAdditionalInputsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get additional inputs service unavailable response has a 2xx status code
func (o *GetAdditionalInputsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional inputs service unavailable response has a 3xx status code
func (o *GetAdditionalInputsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional inputs service unavailable response has a 4xx status code
func (o *GetAdditionalInputsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional inputs service unavailable response has a 5xx status code
func (o *GetAdditionalInputsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get additional inputs service unavailable response a status code equal to that given
func (o *GetAdditionalInputsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAdditionalInputsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAdditionalInputsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/additionalInputs/schema][%d] getAdditionalInputsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAdditionalInputsServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAdditionalInputsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
