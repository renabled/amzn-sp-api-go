// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// LinkCarrierAccountReader is a Reader for the LinkCarrierAccount structure.
type LinkCarrierAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LinkCarrierAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLinkCarrierAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLinkCarrierAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewLinkCarrierAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewLinkCarrierAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLinkCarrierAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewLinkCarrierAccountRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewLinkCarrierAccountUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewLinkCarrierAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLinkCarrierAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewLinkCarrierAccountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewLinkCarrierAccountOK creates a LinkCarrierAccountOK with default headers values
func NewLinkCarrierAccountOK() *LinkCarrierAccountOK {
	return &LinkCarrierAccountOK{}
}

/*
LinkCarrierAccountOK describes a response with status code 200, with default header values.

Success.
*/
type LinkCarrierAccountOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.LinkCarrierAccountResponse
}

// IsSuccess returns true when this link carrier account o k response has a 2xx status code
func (o *LinkCarrierAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this link carrier account o k response has a 3xx status code
func (o *LinkCarrierAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account o k response has a 4xx status code
func (o *LinkCarrierAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this link carrier account o k response has a 5xx status code
func (o *LinkCarrierAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account o k response a status code equal to that given
func (o *LinkCarrierAccountOK) IsCode(code int) bool {
	return code == 200
}

func (o *LinkCarrierAccountOK) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountOK  %+v", 200, o.Payload)
}

func (o *LinkCarrierAccountOK) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountOK  %+v", 200, o.Payload)
}

func (o *LinkCarrierAccountOK) GetPayload() *shipping_v2_models.LinkCarrierAccountResponse {
	return o.Payload
}

func (o *LinkCarrierAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.LinkCarrierAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountBadRequest creates a LinkCarrierAccountBadRequest with default headers values
func NewLinkCarrierAccountBadRequest() *LinkCarrierAccountBadRequest {
	return &LinkCarrierAccountBadRequest{}
}

/*
LinkCarrierAccountBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type LinkCarrierAccountBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account bad request response has a 2xx status code
func (o *LinkCarrierAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account bad request response has a 3xx status code
func (o *LinkCarrierAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account bad request response has a 4xx status code
func (o *LinkCarrierAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account bad request response has a 5xx status code
func (o *LinkCarrierAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account bad request response a status code equal to that given
func (o *LinkCarrierAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *LinkCarrierAccountBadRequest) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountBadRequest  %+v", 400, o.Payload)
}

func (o *LinkCarrierAccountBadRequest) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountBadRequest  %+v", 400, o.Payload)
}

func (o *LinkCarrierAccountBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountUnauthorized creates a LinkCarrierAccountUnauthorized with default headers values
func NewLinkCarrierAccountUnauthorized() *LinkCarrierAccountUnauthorized {
	return &LinkCarrierAccountUnauthorized{}
}

/*
LinkCarrierAccountUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type LinkCarrierAccountUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account unauthorized response has a 2xx status code
func (o *LinkCarrierAccountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account unauthorized response has a 3xx status code
func (o *LinkCarrierAccountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account unauthorized response has a 4xx status code
func (o *LinkCarrierAccountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account unauthorized response has a 5xx status code
func (o *LinkCarrierAccountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account unauthorized response a status code equal to that given
func (o *LinkCarrierAccountUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *LinkCarrierAccountUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *LinkCarrierAccountUnauthorized) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *LinkCarrierAccountUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountForbidden creates a LinkCarrierAccountForbidden with default headers values
func NewLinkCarrierAccountForbidden() *LinkCarrierAccountForbidden {
	return &LinkCarrierAccountForbidden{}
}

/*
LinkCarrierAccountForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type LinkCarrierAccountForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account forbidden response has a 2xx status code
func (o *LinkCarrierAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account forbidden response has a 3xx status code
func (o *LinkCarrierAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account forbidden response has a 4xx status code
func (o *LinkCarrierAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account forbidden response has a 5xx status code
func (o *LinkCarrierAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account forbidden response a status code equal to that given
func (o *LinkCarrierAccountForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *LinkCarrierAccountForbidden) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountForbidden  %+v", 403, o.Payload)
}

func (o *LinkCarrierAccountForbidden) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountForbidden  %+v", 403, o.Payload)
}

func (o *LinkCarrierAccountForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountNotFound creates a LinkCarrierAccountNotFound with default headers values
func NewLinkCarrierAccountNotFound() *LinkCarrierAccountNotFound {
	return &LinkCarrierAccountNotFound{}
}

/*
LinkCarrierAccountNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type LinkCarrierAccountNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account not found response has a 2xx status code
func (o *LinkCarrierAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account not found response has a 3xx status code
func (o *LinkCarrierAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account not found response has a 4xx status code
func (o *LinkCarrierAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account not found response has a 5xx status code
func (o *LinkCarrierAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account not found response a status code equal to that given
func (o *LinkCarrierAccountNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *LinkCarrierAccountNotFound) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountNotFound  %+v", 404, o.Payload)
}

func (o *LinkCarrierAccountNotFound) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountNotFound  %+v", 404, o.Payload)
}

func (o *LinkCarrierAccountNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountRequestEntityTooLarge creates a LinkCarrierAccountRequestEntityTooLarge with default headers values
func NewLinkCarrierAccountRequestEntityTooLarge() *LinkCarrierAccountRequestEntityTooLarge {
	return &LinkCarrierAccountRequestEntityTooLarge{}
}

/*
LinkCarrierAccountRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type LinkCarrierAccountRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account request entity too large response has a 2xx status code
func (o *LinkCarrierAccountRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account request entity too large response has a 3xx status code
func (o *LinkCarrierAccountRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account request entity too large response has a 4xx status code
func (o *LinkCarrierAccountRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account request entity too large response has a 5xx status code
func (o *LinkCarrierAccountRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account request entity too large response a status code equal to that given
func (o *LinkCarrierAccountRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *LinkCarrierAccountRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *LinkCarrierAccountRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *LinkCarrierAccountRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountUnsupportedMediaType creates a LinkCarrierAccountUnsupportedMediaType with default headers values
func NewLinkCarrierAccountUnsupportedMediaType() *LinkCarrierAccountUnsupportedMediaType {
	return &LinkCarrierAccountUnsupportedMediaType{}
}

/*
LinkCarrierAccountUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type LinkCarrierAccountUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account unsupported media type response has a 2xx status code
func (o *LinkCarrierAccountUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account unsupported media type response has a 3xx status code
func (o *LinkCarrierAccountUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account unsupported media type response has a 4xx status code
func (o *LinkCarrierAccountUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account unsupported media type response has a 5xx status code
func (o *LinkCarrierAccountUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account unsupported media type response a status code equal to that given
func (o *LinkCarrierAccountUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *LinkCarrierAccountUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *LinkCarrierAccountUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *LinkCarrierAccountUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountTooManyRequests creates a LinkCarrierAccountTooManyRequests with default headers values
func NewLinkCarrierAccountTooManyRequests() *LinkCarrierAccountTooManyRequests {
	return &LinkCarrierAccountTooManyRequests{}
}

/*
LinkCarrierAccountTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type LinkCarrierAccountTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account too many requests response has a 2xx status code
func (o *LinkCarrierAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account too many requests response has a 3xx status code
func (o *LinkCarrierAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account too many requests response has a 4xx status code
func (o *LinkCarrierAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this link carrier account too many requests response has a 5xx status code
func (o *LinkCarrierAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this link carrier account too many requests response a status code equal to that given
func (o *LinkCarrierAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *LinkCarrierAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *LinkCarrierAccountTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *LinkCarrierAccountTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountInternalServerError creates a LinkCarrierAccountInternalServerError with default headers values
func NewLinkCarrierAccountInternalServerError() *LinkCarrierAccountInternalServerError {
	return &LinkCarrierAccountInternalServerError{}
}

/*
LinkCarrierAccountInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type LinkCarrierAccountInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account internal server error response has a 2xx status code
func (o *LinkCarrierAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account internal server error response has a 3xx status code
func (o *LinkCarrierAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account internal server error response has a 4xx status code
func (o *LinkCarrierAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this link carrier account internal server error response has a 5xx status code
func (o *LinkCarrierAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this link carrier account internal server error response a status code equal to that given
func (o *LinkCarrierAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *LinkCarrierAccountInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *LinkCarrierAccountInternalServerError) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *LinkCarrierAccountInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLinkCarrierAccountServiceUnavailable creates a LinkCarrierAccountServiceUnavailable with default headers values
func NewLinkCarrierAccountServiceUnavailable() *LinkCarrierAccountServiceUnavailable {
	return &LinkCarrierAccountServiceUnavailable{}
}

/*
LinkCarrierAccountServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type LinkCarrierAccountServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this link carrier account service unavailable response has a 2xx status code
func (o *LinkCarrierAccountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this link carrier account service unavailable response has a 3xx status code
func (o *LinkCarrierAccountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this link carrier account service unavailable response has a 4xx status code
func (o *LinkCarrierAccountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this link carrier account service unavailable response has a 5xx status code
func (o *LinkCarrierAccountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this link carrier account service unavailable response a status code equal to that given
func (o *LinkCarrierAccountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *LinkCarrierAccountServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountServiceUnavailable  %+v", 503, o.Payload)
}

func (o *LinkCarrierAccountServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}][%d] linkCarrierAccountServiceUnavailable  %+v", 503, o.Payload)
}

func (o *LinkCarrierAccountServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *LinkCarrierAccountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
