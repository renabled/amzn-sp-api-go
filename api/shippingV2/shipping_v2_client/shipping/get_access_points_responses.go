// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// GetAccessPointsReader is a Reader for the GetAccessPoints structure.
type GetAccessPointsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccessPointsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccessPointsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccessPointsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAccessPointsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccessPointsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAccessPointsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAccessPointsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAccessPointsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAccessPointsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccessPointsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAccessPointsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccessPointsOK creates a GetAccessPointsOK with default headers values
func NewGetAccessPointsOK() *GetAccessPointsOK {
	return &GetAccessPointsOK{}
}

/*
GetAccessPointsOK describes a response with status code 200, with default header values.

Success.
*/
type GetAccessPointsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.GetAccessPointsResponse
}

// IsSuccess returns true when this get access points o k response has a 2xx status code
func (o *GetAccessPointsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get access points o k response has a 3xx status code
func (o *GetAccessPointsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points o k response has a 4xx status code
func (o *GetAccessPointsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access points o k response has a 5xx status code
func (o *GetAccessPointsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points o k response a status code equal to that given
func (o *GetAccessPointsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAccessPointsOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsOK  %+v", 200, o.Payload)
}

func (o *GetAccessPointsOK) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsOK  %+v", 200, o.Payload)
}

func (o *GetAccessPointsOK) GetPayload() *shipping_v2_models.GetAccessPointsResponse {
	return o.Payload
}

func (o *GetAccessPointsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.GetAccessPointsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsBadRequest creates a GetAccessPointsBadRequest with default headers values
func NewGetAccessPointsBadRequest() *GetAccessPointsBadRequest {
	return &GetAccessPointsBadRequest{}
}

/*
GetAccessPointsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAccessPointsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points bad request response has a 2xx status code
func (o *GetAccessPointsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points bad request response has a 3xx status code
func (o *GetAccessPointsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points bad request response has a 4xx status code
func (o *GetAccessPointsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points bad request response has a 5xx status code
func (o *GetAccessPointsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points bad request response a status code equal to that given
func (o *GetAccessPointsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAccessPointsBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccessPointsBadRequest) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccessPointsBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsUnauthorized creates a GetAccessPointsUnauthorized with default headers values
func NewGetAccessPointsUnauthorized() *GetAccessPointsUnauthorized {
	return &GetAccessPointsUnauthorized{}
}

/*
GetAccessPointsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetAccessPointsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points unauthorized response has a 2xx status code
func (o *GetAccessPointsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points unauthorized response has a 3xx status code
func (o *GetAccessPointsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points unauthorized response has a 4xx status code
func (o *GetAccessPointsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points unauthorized response has a 5xx status code
func (o *GetAccessPointsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points unauthorized response a status code equal to that given
func (o *GetAccessPointsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAccessPointsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAccessPointsUnauthorized) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAccessPointsUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsForbidden creates a GetAccessPointsForbidden with default headers values
func NewGetAccessPointsForbidden() *GetAccessPointsForbidden {
	return &GetAccessPointsForbidden{}
}

/*
GetAccessPointsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAccessPointsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points forbidden response has a 2xx status code
func (o *GetAccessPointsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points forbidden response has a 3xx status code
func (o *GetAccessPointsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points forbidden response has a 4xx status code
func (o *GetAccessPointsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points forbidden response has a 5xx status code
func (o *GetAccessPointsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points forbidden response a status code equal to that given
func (o *GetAccessPointsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAccessPointsForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsForbidden  %+v", 403, o.Payload)
}

func (o *GetAccessPointsForbidden) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsForbidden  %+v", 403, o.Payload)
}

func (o *GetAccessPointsForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsNotFound creates a GetAccessPointsNotFound with default headers values
func NewGetAccessPointsNotFound() *GetAccessPointsNotFound {
	return &GetAccessPointsNotFound{}
}

/*
GetAccessPointsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetAccessPointsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points not found response has a 2xx status code
func (o *GetAccessPointsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points not found response has a 3xx status code
func (o *GetAccessPointsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points not found response has a 4xx status code
func (o *GetAccessPointsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points not found response has a 5xx status code
func (o *GetAccessPointsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points not found response a status code equal to that given
func (o *GetAccessPointsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAccessPointsNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsNotFound  %+v", 404, o.Payload)
}

func (o *GetAccessPointsNotFound) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsNotFound  %+v", 404, o.Payload)
}

func (o *GetAccessPointsNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsRequestEntityTooLarge creates a GetAccessPointsRequestEntityTooLarge with default headers values
func NewGetAccessPointsRequestEntityTooLarge() *GetAccessPointsRequestEntityTooLarge {
	return &GetAccessPointsRequestEntityTooLarge{}
}

/*
GetAccessPointsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetAccessPointsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points request entity too large response has a 2xx status code
func (o *GetAccessPointsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points request entity too large response has a 3xx status code
func (o *GetAccessPointsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points request entity too large response has a 4xx status code
func (o *GetAccessPointsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points request entity too large response has a 5xx status code
func (o *GetAccessPointsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points request entity too large response a status code equal to that given
func (o *GetAccessPointsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAccessPointsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAccessPointsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAccessPointsRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsUnsupportedMediaType creates a GetAccessPointsUnsupportedMediaType with default headers values
func NewGetAccessPointsUnsupportedMediaType() *GetAccessPointsUnsupportedMediaType {
	return &GetAccessPointsUnsupportedMediaType{}
}

/*
GetAccessPointsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetAccessPointsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points unsupported media type response has a 2xx status code
func (o *GetAccessPointsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points unsupported media type response has a 3xx status code
func (o *GetAccessPointsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points unsupported media type response has a 4xx status code
func (o *GetAccessPointsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points unsupported media type response has a 5xx status code
func (o *GetAccessPointsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points unsupported media type response a status code equal to that given
func (o *GetAccessPointsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAccessPointsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAccessPointsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAccessPointsUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsTooManyRequests creates a GetAccessPointsTooManyRequests with default headers values
func NewGetAccessPointsTooManyRequests() *GetAccessPointsTooManyRequests {
	return &GetAccessPointsTooManyRequests{}
}

/*
GetAccessPointsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAccessPointsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points too many requests response has a 2xx status code
func (o *GetAccessPointsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points too many requests response has a 3xx status code
func (o *GetAccessPointsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points too many requests response has a 4xx status code
func (o *GetAccessPointsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get access points too many requests response has a 5xx status code
func (o *GetAccessPointsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get access points too many requests response a status code equal to that given
func (o *GetAccessPointsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAccessPointsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAccessPointsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAccessPointsTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsInternalServerError creates a GetAccessPointsInternalServerError with default headers values
func NewGetAccessPointsInternalServerError() *GetAccessPointsInternalServerError {
	return &GetAccessPointsInternalServerError{}
}

/*
GetAccessPointsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAccessPointsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points internal server error response has a 2xx status code
func (o *GetAccessPointsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points internal server error response has a 3xx status code
func (o *GetAccessPointsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points internal server error response has a 4xx status code
func (o *GetAccessPointsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access points internal server error response has a 5xx status code
func (o *GetAccessPointsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get access points internal server error response a status code equal to that given
func (o *GetAccessPointsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAccessPointsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccessPointsInternalServerError) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccessPointsInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccessPointsServiceUnavailable creates a GetAccessPointsServiceUnavailable with default headers values
func NewGetAccessPointsServiceUnavailable() *GetAccessPointsServiceUnavailable {
	return &GetAccessPointsServiceUnavailable{}
}

/*
GetAccessPointsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAccessPointsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get access points service unavailable response has a 2xx status code
func (o *GetAccessPointsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get access points service unavailable response has a 3xx status code
func (o *GetAccessPointsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get access points service unavailable response has a 4xx status code
func (o *GetAccessPointsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get access points service unavailable response has a 5xx status code
func (o *GetAccessPointsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get access points service unavailable response a status code equal to that given
func (o *GetAccessPointsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAccessPointsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAccessPointsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /shipping/v2/accessPoints][%d] getAccessPointsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAccessPointsServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetAccessPointsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
