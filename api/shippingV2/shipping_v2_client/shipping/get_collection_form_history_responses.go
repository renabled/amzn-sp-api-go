// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// GetCollectionFormHistoryReader is a Reader for the GetCollectionFormHistory structure.
type GetCollectionFormHistoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCollectionFormHistoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCollectionFormHistoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCollectionFormHistoryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCollectionFormHistoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCollectionFormHistoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCollectionFormHistoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetCollectionFormHistoryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetCollectionFormHistoryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCollectionFormHistoryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCollectionFormHistoryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCollectionFormHistoryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCollectionFormHistoryOK creates a GetCollectionFormHistoryOK with default headers values
func NewGetCollectionFormHistoryOK() *GetCollectionFormHistoryOK {
	return &GetCollectionFormHistoryOK{}
}

/*
GetCollectionFormHistoryOK describes a response with status code 200, with default header values.

Success.
*/
type GetCollectionFormHistoryOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.GetCollectionFormHistoryResponse
}

// IsSuccess returns true when this get collection form history o k response has a 2xx status code
func (o *GetCollectionFormHistoryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get collection form history o k response has a 3xx status code
func (o *GetCollectionFormHistoryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history o k response has a 4xx status code
func (o *GetCollectionFormHistoryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get collection form history o k response has a 5xx status code
func (o *GetCollectionFormHistoryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history o k response a status code equal to that given
func (o *GetCollectionFormHistoryOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetCollectionFormHistoryOK) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryOK  %+v", 200, o.Payload)
}

func (o *GetCollectionFormHistoryOK) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryOK  %+v", 200, o.Payload)
}

func (o *GetCollectionFormHistoryOK) GetPayload() *shipping_v2_models.GetCollectionFormHistoryResponse {
	return o.Payload
}

func (o *GetCollectionFormHistoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.GetCollectionFormHistoryResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryBadRequest creates a GetCollectionFormHistoryBadRequest with default headers values
func NewGetCollectionFormHistoryBadRequest() *GetCollectionFormHistoryBadRequest {
	return &GetCollectionFormHistoryBadRequest{}
}

/*
GetCollectionFormHistoryBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetCollectionFormHistoryBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history bad request response has a 2xx status code
func (o *GetCollectionFormHistoryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history bad request response has a 3xx status code
func (o *GetCollectionFormHistoryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history bad request response has a 4xx status code
func (o *GetCollectionFormHistoryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history bad request response has a 5xx status code
func (o *GetCollectionFormHistoryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history bad request response a status code equal to that given
func (o *GetCollectionFormHistoryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetCollectionFormHistoryBadRequest) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetCollectionFormHistoryBadRequest) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryBadRequest  %+v", 400, o.Payload)
}

func (o *GetCollectionFormHistoryBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryUnauthorized creates a GetCollectionFormHistoryUnauthorized with default headers values
func NewGetCollectionFormHistoryUnauthorized() *GetCollectionFormHistoryUnauthorized {
	return &GetCollectionFormHistoryUnauthorized{}
}

/*
GetCollectionFormHistoryUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetCollectionFormHistoryUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history unauthorized response has a 2xx status code
func (o *GetCollectionFormHistoryUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history unauthorized response has a 3xx status code
func (o *GetCollectionFormHistoryUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history unauthorized response has a 4xx status code
func (o *GetCollectionFormHistoryUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history unauthorized response has a 5xx status code
func (o *GetCollectionFormHistoryUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history unauthorized response a status code equal to that given
func (o *GetCollectionFormHistoryUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetCollectionFormHistoryUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCollectionFormHistoryUnauthorized) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCollectionFormHistoryUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryForbidden creates a GetCollectionFormHistoryForbidden with default headers values
func NewGetCollectionFormHistoryForbidden() *GetCollectionFormHistoryForbidden {
	return &GetCollectionFormHistoryForbidden{}
}

/*
GetCollectionFormHistoryForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetCollectionFormHistoryForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history forbidden response has a 2xx status code
func (o *GetCollectionFormHistoryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history forbidden response has a 3xx status code
func (o *GetCollectionFormHistoryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history forbidden response has a 4xx status code
func (o *GetCollectionFormHistoryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history forbidden response has a 5xx status code
func (o *GetCollectionFormHistoryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history forbidden response a status code equal to that given
func (o *GetCollectionFormHistoryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetCollectionFormHistoryForbidden) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetCollectionFormHistoryForbidden) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryForbidden  %+v", 403, o.Payload)
}

func (o *GetCollectionFormHistoryForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryNotFound creates a GetCollectionFormHistoryNotFound with default headers values
func NewGetCollectionFormHistoryNotFound() *GetCollectionFormHistoryNotFound {
	return &GetCollectionFormHistoryNotFound{}
}

/*
GetCollectionFormHistoryNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetCollectionFormHistoryNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history not found response has a 2xx status code
func (o *GetCollectionFormHistoryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history not found response has a 3xx status code
func (o *GetCollectionFormHistoryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history not found response has a 4xx status code
func (o *GetCollectionFormHistoryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history not found response has a 5xx status code
func (o *GetCollectionFormHistoryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history not found response a status code equal to that given
func (o *GetCollectionFormHistoryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetCollectionFormHistoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetCollectionFormHistoryNotFound) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryNotFound  %+v", 404, o.Payload)
}

func (o *GetCollectionFormHistoryNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryRequestEntityTooLarge creates a GetCollectionFormHistoryRequestEntityTooLarge with default headers values
func NewGetCollectionFormHistoryRequestEntityTooLarge() *GetCollectionFormHistoryRequestEntityTooLarge {
	return &GetCollectionFormHistoryRequestEntityTooLarge{}
}

/*
GetCollectionFormHistoryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetCollectionFormHistoryRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history request entity too large response has a 2xx status code
func (o *GetCollectionFormHistoryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history request entity too large response has a 3xx status code
func (o *GetCollectionFormHistoryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history request entity too large response has a 4xx status code
func (o *GetCollectionFormHistoryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history request entity too large response has a 5xx status code
func (o *GetCollectionFormHistoryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history request entity too large response a status code equal to that given
func (o *GetCollectionFormHistoryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetCollectionFormHistoryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetCollectionFormHistoryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetCollectionFormHistoryRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryUnsupportedMediaType creates a GetCollectionFormHistoryUnsupportedMediaType with default headers values
func NewGetCollectionFormHistoryUnsupportedMediaType() *GetCollectionFormHistoryUnsupportedMediaType {
	return &GetCollectionFormHistoryUnsupportedMediaType{}
}

/*
GetCollectionFormHistoryUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetCollectionFormHistoryUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history unsupported media type response has a 2xx status code
func (o *GetCollectionFormHistoryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history unsupported media type response has a 3xx status code
func (o *GetCollectionFormHistoryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history unsupported media type response has a 4xx status code
func (o *GetCollectionFormHistoryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history unsupported media type response has a 5xx status code
func (o *GetCollectionFormHistoryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history unsupported media type response a status code equal to that given
func (o *GetCollectionFormHistoryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetCollectionFormHistoryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetCollectionFormHistoryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetCollectionFormHistoryUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryTooManyRequests creates a GetCollectionFormHistoryTooManyRequests with default headers values
func NewGetCollectionFormHistoryTooManyRequests() *GetCollectionFormHistoryTooManyRequests {
	return &GetCollectionFormHistoryTooManyRequests{}
}

/*
GetCollectionFormHistoryTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetCollectionFormHistoryTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history too many requests response has a 2xx status code
func (o *GetCollectionFormHistoryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history too many requests response has a 3xx status code
func (o *GetCollectionFormHistoryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history too many requests response has a 4xx status code
func (o *GetCollectionFormHistoryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form history too many requests response has a 5xx status code
func (o *GetCollectionFormHistoryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form history too many requests response a status code equal to that given
func (o *GetCollectionFormHistoryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetCollectionFormHistoryTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCollectionFormHistoryTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCollectionFormHistoryTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryInternalServerError creates a GetCollectionFormHistoryInternalServerError with default headers values
func NewGetCollectionFormHistoryInternalServerError() *GetCollectionFormHistoryInternalServerError {
	return &GetCollectionFormHistoryInternalServerError{}
}

/*
GetCollectionFormHistoryInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetCollectionFormHistoryInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history internal server error response has a 2xx status code
func (o *GetCollectionFormHistoryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history internal server error response has a 3xx status code
func (o *GetCollectionFormHistoryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history internal server error response has a 4xx status code
func (o *GetCollectionFormHistoryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get collection form history internal server error response has a 5xx status code
func (o *GetCollectionFormHistoryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get collection form history internal server error response a status code equal to that given
func (o *GetCollectionFormHistoryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetCollectionFormHistoryInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCollectionFormHistoryInternalServerError) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCollectionFormHistoryInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormHistoryServiceUnavailable creates a GetCollectionFormHistoryServiceUnavailable with default headers values
func NewGetCollectionFormHistoryServiceUnavailable() *GetCollectionFormHistoryServiceUnavailable {
	return &GetCollectionFormHistoryServiceUnavailable{}
}

/*
GetCollectionFormHistoryServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetCollectionFormHistoryServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form history service unavailable response has a 2xx status code
func (o *GetCollectionFormHistoryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form history service unavailable response has a 3xx status code
func (o *GetCollectionFormHistoryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form history service unavailable response has a 4xx status code
func (o *GetCollectionFormHistoryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get collection form history service unavailable response has a 5xx status code
func (o *GetCollectionFormHistoryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get collection form history service unavailable response a status code equal to that given
func (o *GetCollectionFormHistoryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetCollectionFormHistoryServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCollectionFormHistoryServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/collectionForms/history][%d] getCollectionFormHistoryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCollectionFormHistoryServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormHistoryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
