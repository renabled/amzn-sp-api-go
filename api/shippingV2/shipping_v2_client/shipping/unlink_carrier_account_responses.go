// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// UnlinkCarrierAccountReader is a Reader for the UnlinkCarrierAccount structure.
type UnlinkCarrierAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UnlinkCarrierAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUnlinkCarrierAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUnlinkCarrierAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewUnlinkCarrierAccountUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUnlinkCarrierAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUnlinkCarrierAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUnlinkCarrierAccountRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUnlinkCarrierAccountUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUnlinkCarrierAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUnlinkCarrierAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUnlinkCarrierAccountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUnlinkCarrierAccountOK creates a UnlinkCarrierAccountOK with default headers values
func NewUnlinkCarrierAccountOK() *UnlinkCarrierAccountOK {
	return &UnlinkCarrierAccountOK{}
}

/*
UnlinkCarrierAccountOK describes a response with status code 200, with default header values.

Success.
*/
type UnlinkCarrierAccountOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.UnlinkCarrierAccountResponse
}

// IsSuccess returns true when this unlink carrier account o k response has a 2xx status code
func (o *UnlinkCarrierAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this unlink carrier account o k response has a 3xx status code
func (o *UnlinkCarrierAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account o k response has a 4xx status code
func (o *UnlinkCarrierAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink carrier account o k response has a 5xx status code
func (o *UnlinkCarrierAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account o k response a status code equal to that given
func (o *UnlinkCarrierAccountOK) IsCode(code int) bool {
	return code == 200
}

func (o *UnlinkCarrierAccountOK) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountOK  %+v", 200, o.Payload)
}

func (o *UnlinkCarrierAccountOK) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountOK  %+v", 200, o.Payload)
}

func (o *UnlinkCarrierAccountOK) GetPayload() *shipping_v2_models.UnlinkCarrierAccountResponse {
	return o.Payload
}

func (o *UnlinkCarrierAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.UnlinkCarrierAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountBadRequest creates a UnlinkCarrierAccountBadRequest with default headers values
func NewUnlinkCarrierAccountBadRequest() *UnlinkCarrierAccountBadRequest {
	return &UnlinkCarrierAccountBadRequest{}
}

/*
UnlinkCarrierAccountBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UnlinkCarrierAccountBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account bad request response has a 2xx status code
func (o *UnlinkCarrierAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account bad request response has a 3xx status code
func (o *UnlinkCarrierAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account bad request response has a 4xx status code
func (o *UnlinkCarrierAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account bad request response has a 5xx status code
func (o *UnlinkCarrierAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account bad request response a status code equal to that given
func (o *UnlinkCarrierAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UnlinkCarrierAccountBadRequest) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountBadRequest  %+v", 400, o.Payload)
}

func (o *UnlinkCarrierAccountBadRequest) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountBadRequest  %+v", 400, o.Payload)
}

func (o *UnlinkCarrierAccountBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountUnauthorized creates a UnlinkCarrierAccountUnauthorized with default headers values
func NewUnlinkCarrierAccountUnauthorized() *UnlinkCarrierAccountUnauthorized {
	return &UnlinkCarrierAccountUnauthorized{}
}

/*
UnlinkCarrierAccountUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type UnlinkCarrierAccountUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account unauthorized response has a 2xx status code
func (o *UnlinkCarrierAccountUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account unauthorized response has a 3xx status code
func (o *UnlinkCarrierAccountUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account unauthorized response has a 4xx status code
func (o *UnlinkCarrierAccountUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account unauthorized response has a 5xx status code
func (o *UnlinkCarrierAccountUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account unauthorized response a status code equal to that given
func (o *UnlinkCarrierAccountUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *UnlinkCarrierAccountUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *UnlinkCarrierAccountUnauthorized) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountUnauthorized  %+v", 401, o.Payload)
}

func (o *UnlinkCarrierAccountUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountForbidden creates a UnlinkCarrierAccountForbidden with default headers values
func NewUnlinkCarrierAccountForbidden() *UnlinkCarrierAccountForbidden {
	return &UnlinkCarrierAccountForbidden{}
}

/*
UnlinkCarrierAccountForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UnlinkCarrierAccountForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account forbidden response has a 2xx status code
func (o *UnlinkCarrierAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account forbidden response has a 3xx status code
func (o *UnlinkCarrierAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account forbidden response has a 4xx status code
func (o *UnlinkCarrierAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account forbidden response has a 5xx status code
func (o *UnlinkCarrierAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account forbidden response a status code equal to that given
func (o *UnlinkCarrierAccountForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UnlinkCarrierAccountForbidden) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountForbidden  %+v", 403, o.Payload)
}

func (o *UnlinkCarrierAccountForbidden) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountForbidden  %+v", 403, o.Payload)
}

func (o *UnlinkCarrierAccountForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountNotFound creates a UnlinkCarrierAccountNotFound with default headers values
func NewUnlinkCarrierAccountNotFound() *UnlinkCarrierAccountNotFound {
	return &UnlinkCarrierAccountNotFound{}
}

/*
UnlinkCarrierAccountNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UnlinkCarrierAccountNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account not found response has a 2xx status code
func (o *UnlinkCarrierAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account not found response has a 3xx status code
func (o *UnlinkCarrierAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account not found response has a 4xx status code
func (o *UnlinkCarrierAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account not found response has a 5xx status code
func (o *UnlinkCarrierAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account not found response a status code equal to that given
func (o *UnlinkCarrierAccountNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UnlinkCarrierAccountNotFound) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountNotFound  %+v", 404, o.Payload)
}

func (o *UnlinkCarrierAccountNotFound) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountNotFound  %+v", 404, o.Payload)
}

func (o *UnlinkCarrierAccountNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountRequestEntityTooLarge creates a UnlinkCarrierAccountRequestEntityTooLarge with default headers values
func NewUnlinkCarrierAccountRequestEntityTooLarge() *UnlinkCarrierAccountRequestEntityTooLarge {
	return &UnlinkCarrierAccountRequestEntityTooLarge{}
}

/*
UnlinkCarrierAccountRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UnlinkCarrierAccountRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account request entity too large response has a 2xx status code
func (o *UnlinkCarrierAccountRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account request entity too large response has a 3xx status code
func (o *UnlinkCarrierAccountRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account request entity too large response has a 4xx status code
func (o *UnlinkCarrierAccountRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account request entity too large response has a 5xx status code
func (o *UnlinkCarrierAccountRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account request entity too large response a status code equal to that given
func (o *UnlinkCarrierAccountRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UnlinkCarrierAccountRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UnlinkCarrierAccountRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UnlinkCarrierAccountRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountUnsupportedMediaType creates a UnlinkCarrierAccountUnsupportedMediaType with default headers values
func NewUnlinkCarrierAccountUnsupportedMediaType() *UnlinkCarrierAccountUnsupportedMediaType {
	return &UnlinkCarrierAccountUnsupportedMediaType{}
}

/*
UnlinkCarrierAccountUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UnlinkCarrierAccountUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account unsupported media type response has a 2xx status code
func (o *UnlinkCarrierAccountUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account unsupported media type response has a 3xx status code
func (o *UnlinkCarrierAccountUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account unsupported media type response has a 4xx status code
func (o *UnlinkCarrierAccountUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account unsupported media type response has a 5xx status code
func (o *UnlinkCarrierAccountUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account unsupported media type response a status code equal to that given
func (o *UnlinkCarrierAccountUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UnlinkCarrierAccountUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UnlinkCarrierAccountUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UnlinkCarrierAccountUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountTooManyRequests creates a UnlinkCarrierAccountTooManyRequests with default headers values
func NewUnlinkCarrierAccountTooManyRequests() *UnlinkCarrierAccountTooManyRequests {
	return &UnlinkCarrierAccountTooManyRequests{}
}

/*
UnlinkCarrierAccountTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UnlinkCarrierAccountTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account too many requests response has a 2xx status code
func (o *UnlinkCarrierAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account too many requests response has a 3xx status code
func (o *UnlinkCarrierAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account too many requests response has a 4xx status code
func (o *UnlinkCarrierAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this unlink carrier account too many requests response has a 5xx status code
func (o *UnlinkCarrierAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this unlink carrier account too many requests response a status code equal to that given
func (o *UnlinkCarrierAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UnlinkCarrierAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *UnlinkCarrierAccountTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *UnlinkCarrierAccountTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountInternalServerError creates a UnlinkCarrierAccountInternalServerError with default headers values
func NewUnlinkCarrierAccountInternalServerError() *UnlinkCarrierAccountInternalServerError {
	return &UnlinkCarrierAccountInternalServerError{}
}

/*
UnlinkCarrierAccountInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UnlinkCarrierAccountInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account internal server error response has a 2xx status code
func (o *UnlinkCarrierAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account internal server error response has a 3xx status code
func (o *UnlinkCarrierAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account internal server error response has a 4xx status code
func (o *UnlinkCarrierAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink carrier account internal server error response has a 5xx status code
func (o *UnlinkCarrierAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this unlink carrier account internal server error response a status code equal to that given
func (o *UnlinkCarrierAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UnlinkCarrierAccountInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *UnlinkCarrierAccountInternalServerError) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *UnlinkCarrierAccountInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUnlinkCarrierAccountServiceUnavailable creates a UnlinkCarrierAccountServiceUnavailable with default headers values
func NewUnlinkCarrierAccountServiceUnavailable() *UnlinkCarrierAccountServiceUnavailable {
	return &UnlinkCarrierAccountServiceUnavailable{}
}

/*
UnlinkCarrierAccountServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UnlinkCarrierAccountServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this unlink carrier account service unavailable response has a 2xx status code
func (o *UnlinkCarrierAccountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this unlink carrier account service unavailable response has a 3xx status code
func (o *UnlinkCarrierAccountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this unlink carrier account service unavailable response has a 4xx status code
func (o *UnlinkCarrierAccountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this unlink carrier account service unavailable response has a 5xx status code
func (o *UnlinkCarrierAccountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this unlink carrier account service unavailable response a status code equal to that given
func (o *UnlinkCarrierAccountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UnlinkCarrierAccountServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UnlinkCarrierAccountServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /shipping/v2/carrierAccounts/{carrierId}/unlink][%d] unlinkCarrierAccountServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UnlinkCarrierAccountServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *UnlinkCarrierAccountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
