// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// GetCollectionFormReader is a Reader for the GetCollectionForm structure.
type GetCollectionFormReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCollectionFormReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCollectionFormOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCollectionFormBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetCollectionFormUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCollectionFormForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCollectionFormNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetCollectionFormRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetCollectionFormUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCollectionFormTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCollectionFormInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCollectionFormServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCollectionFormOK creates a GetCollectionFormOK with default headers values
func NewGetCollectionFormOK() *GetCollectionFormOK {
	return &GetCollectionFormOK{}
}

/*
GetCollectionFormOK describes a response with status code 200, with default header values.

Success.
*/
type GetCollectionFormOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.GetCollectionFormResponse
}

// IsSuccess returns true when this get collection form o k response has a 2xx status code
func (o *GetCollectionFormOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get collection form o k response has a 3xx status code
func (o *GetCollectionFormOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form o k response has a 4xx status code
func (o *GetCollectionFormOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get collection form o k response has a 5xx status code
func (o *GetCollectionFormOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form o k response a status code equal to that given
func (o *GetCollectionFormOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetCollectionFormOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormOK  %+v", 200, o.Payload)
}

func (o *GetCollectionFormOK) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormOK  %+v", 200, o.Payload)
}

func (o *GetCollectionFormOK) GetPayload() *shipping_v2_models.GetCollectionFormResponse {
	return o.Payload
}

func (o *GetCollectionFormOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.GetCollectionFormResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormBadRequest creates a GetCollectionFormBadRequest with default headers values
func NewGetCollectionFormBadRequest() *GetCollectionFormBadRequest {
	return &GetCollectionFormBadRequest{}
}

/*
GetCollectionFormBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetCollectionFormBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form bad request response has a 2xx status code
func (o *GetCollectionFormBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form bad request response has a 3xx status code
func (o *GetCollectionFormBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form bad request response has a 4xx status code
func (o *GetCollectionFormBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form bad request response has a 5xx status code
func (o *GetCollectionFormBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form bad request response a status code equal to that given
func (o *GetCollectionFormBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetCollectionFormBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormBadRequest  %+v", 400, o.Payload)
}

func (o *GetCollectionFormBadRequest) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormBadRequest  %+v", 400, o.Payload)
}

func (o *GetCollectionFormBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormUnauthorized creates a GetCollectionFormUnauthorized with default headers values
func NewGetCollectionFormUnauthorized() *GetCollectionFormUnauthorized {
	return &GetCollectionFormUnauthorized{}
}

/*
GetCollectionFormUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetCollectionFormUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form unauthorized response has a 2xx status code
func (o *GetCollectionFormUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form unauthorized response has a 3xx status code
func (o *GetCollectionFormUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form unauthorized response has a 4xx status code
func (o *GetCollectionFormUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form unauthorized response has a 5xx status code
func (o *GetCollectionFormUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form unauthorized response a status code equal to that given
func (o *GetCollectionFormUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetCollectionFormUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCollectionFormUnauthorized) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCollectionFormUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormForbidden creates a GetCollectionFormForbidden with default headers values
func NewGetCollectionFormForbidden() *GetCollectionFormForbidden {
	return &GetCollectionFormForbidden{}
}

/*
GetCollectionFormForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetCollectionFormForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form forbidden response has a 2xx status code
func (o *GetCollectionFormForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form forbidden response has a 3xx status code
func (o *GetCollectionFormForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form forbidden response has a 4xx status code
func (o *GetCollectionFormForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form forbidden response has a 5xx status code
func (o *GetCollectionFormForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form forbidden response a status code equal to that given
func (o *GetCollectionFormForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetCollectionFormForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormForbidden  %+v", 403, o.Payload)
}

func (o *GetCollectionFormForbidden) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormForbidden  %+v", 403, o.Payload)
}

func (o *GetCollectionFormForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormNotFound creates a GetCollectionFormNotFound with default headers values
func NewGetCollectionFormNotFound() *GetCollectionFormNotFound {
	return &GetCollectionFormNotFound{}
}

/*
GetCollectionFormNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetCollectionFormNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form not found response has a 2xx status code
func (o *GetCollectionFormNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form not found response has a 3xx status code
func (o *GetCollectionFormNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form not found response has a 4xx status code
func (o *GetCollectionFormNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form not found response has a 5xx status code
func (o *GetCollectionFormNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form not found response a status code equal to that given
func (o *GetCollectionFormNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetCollectionFormNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormNotFound  %+v", 404, o.Payload)
}

func (o *GetCollectionFormNotFound) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormNotFound  %+v", 404, o.Payload)
}

func (o *GetCollectionFormNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormRequestEntityTooLarge creates a GetCollectionFormRequestEntityTooLarge with default headers values
func NewGetCollectionFormRequestEntityTooLarge() *GetCollectionFormRequestEntityTooLarge {
	return &GetCollectionFormRequestEntityTooLarge{}
}

/*
GetCollectionFormRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetCollectionFormRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form request entity too large response has a 2xx status code
func (o *GetCollectionFormRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form request entity too large response has a 3xx status code
func (o *GetCollectionFormRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form request entity too large response has a 4xx status code
func (o *GetCollectionFormRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form request entity too large response has a 5xx status code
func (o *GetCollectionFormRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form request entity too large response a status code equal to that given
func (o *GetCollectionFormRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetCollectionFormRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetCollectionFormRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetCollectionFormRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormUnsupportedMediaType creates a GetCollectionFormUnsupportedMediaType with default headers values
func NewGetCollectionFormUnsupportedMediaType() *GetCollectionFormUnsupportedMediaType {
	return &GetCollectionFormUnsupportedMediaType{}
}

/*
GetCollectionFormUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetCollectionFormUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form unsupported media type response has a 2xx status code
func (o *GetCollectionFormUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form unsupported media type response has a 3xx status code
func (o *GetCollectionFormUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form unsupported media type response has a 4xx status code
func (o *GetCollectionFormUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form unsupported media type response has a 5xx status code
func (o *GetCollectionFormUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form unsupported media type response a status code equal to that given
func (o *GetCollectionFormUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetCollectionFormUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetCollectionFormUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetCollectionFormUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormTooManyRequests creates a GetCollectionFormTooManyRequests with default headers values
func NewGetCollectionFormTooManyRequests() *GetCollectionFormTooManyRequests {
	return &GetCollectionFormTooManyRequests{}
}

/*
GetCollectionFormTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetCollectionFormTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form too many requests response has a 2xx status code
func (o *GetCollectionFormTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form too many requests response has a 3xx status code
func (o *GetCollectionFormTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form too many requests response has a 4xx status code
func (o *GetCollectionFormTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get collection form too many requests response has a 5xx status code
func (o *GetCollectionFormTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get collection form too many requests response a status code equal to that given
func (o *GetCollectionFormTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetCollectionFormTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCollectionFormTooManyRequests) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCollectionFormTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormInternalServerError creates a GetCollectionFormInternalServerError with default headers values
func NewGetCollectionFormInternalServerError() *GetCollectionFormInternalServerError {
	return &GetCollectionFormInternalServerError{}
}

/*
GetCollectionFormInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetCollectionFormInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form internal server error response has a 2xx status code
func (o *GetCollectionFormInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form internal server error response has a 3xx status code
func (o *GetCollectionFormInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form internal server error response has a 4xx status code
func (o *GetCollectionFormInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get collection form internal server error response has a 5xx status code
func (o *GetCollectionFormInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get collection form internal server error response a status code equal to that given
func (o *GetCollectionFormInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetCollectionFormInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCollectionFormInternalServerError) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCollectionFormInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCollectionFormServiceUnavailable creates a GetCollectionFormServiceUnavailable with default headers values
func NewGetCollectionFormServiceUnavailable() *GetCollectionFormServiceUnavailable {
	return &GetCollectionFormServiceUnavailable{}
}

/*
GetCollectionFormServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetCollectionFormServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get collection form service unavailable response has a 2xx status code
func (o *GetCollectionFormServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get collection form service unavailable response has a 3xx status code
func (o *GetCollectionFormServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get collection form service unavailable response has a 4xx status code
func (o *GetCollectionFormServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get collection form service unavailable response has a 5xx status code
func (o *GetCollectionFormServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get collection form service unavailable response a status code equal to that given
func (o *GetCollectionFormServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetCollectionFormServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCollectionFormServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /shipping/v2/collectionForms/{collectionFormId}][%d] getCollectionFormServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCollectionFormServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetCollectionFormServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
