// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shippingV2/shipping_v2_models"
)

// GetShipmentDocumentsReader is a Reader for the GetShipmentDocuments structure.
type GetShipmentDocumentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShipmentDocumentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShipmentDocumentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShipmentDocumentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetShipmentDocumentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShipmentDocumentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShipmentDocumentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetShipmentDocumentsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetShipmentDocumentsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShipmentDocumentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShipmentDocumentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShipmentDocumentsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShipmentDocumentsOK creates a GetShipmentDocumentsOK with default headers values
func NewGetShipmentDocumentsOK() *GetShipmentDocumentsOK {
	return &GetShipmentDocumentsOK{}
}

/*
GetShipmentDocumentsOK describes a response with status code 200, with default header values.

Success.
*/
type GetShipmentDocumentsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.GetShipmentDocumentsResponse
}

// IsSuccess returns true when this get shipment documents o k response has a 2xx status code
func (o *GetShipmentDocumentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get shipment documents o k response has a 3xx status code
func (o *GetShipmentDocumentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents o k response has a 4xx status code
func (o *GetShipmentDocumentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment documents o k response has a 5xx status code
func (o *GetShipmentDocumentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents o k response a status code equal to that given
func (o *GetShipmentDocumentsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetShipmentDocumentsOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsOK  %+v", 200, o.Payload)
}

func (o *GetShipmentDocumentsOK) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsOK  %+v", 200, o.Payload)
}

func (o *GetShipmentDocumentsOK) GetPayload() *shipping_v2_models.GetShipmentDocumentsResponse {
	return o.Payload
}

func (o *GetShipmentDocumentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.GetShipmentDocumentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsBadRequest creates a GetShipmentDocumentsBadRequest with default headers values
func NewGetShipmentDocumentsBadRequest() *GetShipmentDocumentsBadRequest {
	return &GetShipmentDocumentsBadRequest{}
}

/*
GetShipmentDocumentsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShipmentDocumentsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents bad request response has a 2xx status code
func (o *GetShipmentDocumentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents bad request response has a 3xx status code
func (o *GetShipmentDocumentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents bad request response has a 4xx status code
func (o *GetShipmentDocumentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents bad request response has a 5xx status code
func (o *GetShipmentDocumentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents bad request response a status code equal to that given
func (o *GetShipmentDocumentsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetShipmentDocumentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetShipmentDocumentsBadRequest) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsBadRequest  %+v", 400, o.Payload)
}

func (o *GetShipmentDocumentsBadRequest) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsUnauthorized creates a GetShipmentDocumentsUnauthorized with default headers values
func NewGetShipmentDocumentsUnauthorized() *GetShipmentDocumentsUnauthorized {
	return &GetShipmentDocumentsUnauthorized{}
}

/*
GetShipmentDocumentsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetShipmentDocumentsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents unauthorized response has a 2xx status code
func (o *GetShipmentDocumentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents unauthorized response has a 3xx status code
func (o *GetShipmentDocumentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents unauthorized response has a 4xx status code
func (o *GetShipmentDocumentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents unauthorized response has a 5xx status code
func (o *GetShipmentDocumentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents unauthorized response a status code equal to that given
func (o *GetShipmentDocumentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetShipmentDocumentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetShipmentDocumentsUnauthorized) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetShipmentDocumentsUnauthorized) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsForbidden creates a GetShipmentDocumentsForbidden with default headers values
func NewGetShipmentDocumentsForbidden() *GetShipmentDocumentsForbidden {
	return &GetShipmentDocumentsForbidden{}
}

/*
GetShipmentDocumentsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetShipmentDocumentsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents forbidden response has a 2xx status code
func (o *GetShipmentDocumentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents forbidden response has a 3xx status code
func (o *GetShipmentDocumentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents forbidden response has a 4xx status code
func (o *GetShipmentDocumentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents forbidden response has a 5xx status code
func (o *GetShipmentDocumentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents forbidden response a status code equal to that given
func (o *GetShipmentDocumentsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetShipmentDocumentsForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsForbidden  %+v", 403, o.Payload)
}

func (o *GetShipmentDocumentsForbidden) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsForbidden  %+v", 403, o.Payload)
}

func (o *GetShipmentDocumentsForbidden) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsNotFound creates a GetShipmentDocumentsNotFound with default headers values
func NewGetShipmentDocumentsNotFound() *GetShipmentDocumentsNotFound {
	return &GetShipmentDocumentsNotFound{}
}

/*
GetShipmentDocumentsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetShipmentDocumentsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents not found response has a 2xx status code
func (o *GetShipmentDocumentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents not found response has a 3xx status code
func (o *GetShipmentDocumentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents not found response has a 4xx status code
func (o *GetShipmentDocumentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents not found response has a 5xx status code
func (o *GetShipmentDocumentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents not found response a status code equal to that given
func (o *GetShipmentDocumentsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetShipmentDocumentsNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsNotFound  %+v", 404, o.Payload)
}

func (o *GetShipmentDocumentsNotFound) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsNotFound  %+v", 404, o.Payload)
}

func (o *GetShipmentDocumentsNotFound) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsRequestEntityTooLarge creates a GetShipmentDocumentsRequestEntityTooLarge with default headers values
func NewGetShipmentDocumentsRequestEntityTooLarge() *GetShipmentDocumentsRequestEntityTooLarge {
	return &GetShipmentDocumentsRequestEntityTooLarge{}
}

/*
GetShipmentDocumentsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetShipmentDocumentsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents request entity too large response has a 2xx status code
func (o *GetShipmentDocumentsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents request entity too large response has a 3xx status code
func (o *GetShipmentDocumentsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents request entity too large response has a 4xx status code
func (o *GetShipmentDocumentsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents request entity too large response has a 5xx status code
func (o *GetShipmentDocumentsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents request entity too large response a status code equal to that given
func (o *GetShipmentDocumentsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetShipmentDocumentsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetShipmentDocumentsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetShipmentDocumentsRequestEntityTooLarge) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsUnsupportedMediaType creates a GetShipmentDocumentsUnsupportedMediaType with default headers values
func NewGetShipmentDocumentsUnsupportedMediaType() *GetShipmentDocumentsUnsupportedMediaType {
	return &GetShipmentDocumentsUnsupportedMediaType{}
}

/*
GetShipmentDocumentsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetShipmentDocumentsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents unsupported media type response has a 2xx status code
func (o *GetShipmentDocumentsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents unsupported media type response has a 3xx status code
func (o *GetShipmentDocumentsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents unsupported media type response has a 4xx status code
func (o *GetShipmentDocumentsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents unsupported media type response has a 5xx status code
func (o *GetShipmentDocumentsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents unsupported media type response a status code equal to that given
func (o *GetShipmentDocumentsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetShipmentDocumentsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShipmentDocumentsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShipmentDocumentsUnsupportedMediaType) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsTooManyRequests creates a GetShipmentDocumentsTooManyRequests with default headers values
func NewGetShipmentDocumentsTooManyRequests() *GetShipmentDocumentsTooManyRequests {
	return &GetShipmentDocumentsTooManyRequests{}
}

/*
GetShipmentDocumentsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShipmentDocumentsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents too many requests response has a 2xx status code
func (o *GetShipmentDocumentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents too many requests response has a 3xx status code
func (o *GetShipmentDocumentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents too many requests response has a 4xx status code
func (o *GetShipmentDocumentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment documents too many requests response has a 5xx status code
func (o *GetShipmentDocumentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment documents too many requests response a status code equal to that given
func (o *GetShipmentDocumentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetShipmentDocumentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShipmentDocumentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShipmentDocumentsTooManyRequests) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsInternalServerError creates a GetShipmentDocumentsInternalServerError with default headers values
func NewGetShipmentDocumentsInternalServerError() *GetShipmentDocumentsInternalServerError {
	return &GetShipmentDocumentsInternalServerError{}
}

/*
GetShipmentDocumentsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetShipmentDocumentsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents internal server error response has a 2xx status code
func (o *GetShipmentDocumentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents internal server error response has a 3xx status code
func (o *GetShipmentDocumentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents internal server error response has a 4xx status code
func (o *GetShipmentDocumentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment documents internal server error response has a 5xx status code
func (o *GetShipmentDocumentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipment documents internal server error response a status code equal to that given
func (o *GetShipmentDocumentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetShipmentDocumentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShipmentDocumentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShipmentDocumentsInternalServerError) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentDocumentsServiceUnavailable creates a GetShipmentDocumentsServiceUnavailable with default headers values
func NewGetShipmentDocumentsServiceUnavailable() *GetShipmentDocumentsServiceUnavailable {
	return &GetShipmentDocumentsServiceUnavailable{}
}

/*
GetShipmentDocumentsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShipmentDocumentsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *shipping_v2_models.ErrorList
}

// IsSuccess returns true when this get shipment documents service unavailable response has a 2xx status code
func (o *GetShipmentDocumentsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment documents service unavailable response has a 3xx status code
func (o *GetShipmentDocumentsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment documents service unavailable response has a 4xx status code
func (o *GetShipmentDocumentsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment documents service unavailable response has a 5xx status code
func (o *GetShipmentDocumentsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipment documents service unavailable response a status code equal to that given
func (o *GetShipmentDocumentsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetShipmentDocumentsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShipmentDocumentsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /shipping/v2/shipments/{shipmentId}/documents][%d] getShipmentDocumentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShipmentDocumentsServiceUnavailable) GetPayload() *shipping_v2_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentDocumentsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_v2_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
