// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShipmentType Shipment type.
//
// swagger:model ShipmentType
type ShipmentType string

func NewShipmentType(value ShipmentType) *ShipmentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ShipmentType.
func (m ShipmentType) Pointer() *ShipmentType {
	return &m
}

const (

	// ShipmentTypeFORWARD captures enum value "FORWARD"
	ShipmentTypeFORWARD ShipmentType = "FORWARD"

	// ShipmentTypeRETURNS captures enum value "RETURNS"
	ShipmentTypeRETURNS ShipmentType = "RETURNS"
)

// for schema
var shipmentTypeEnum []interface{}

func init() {
	var res []ShipmentType
	if err := json.Unmarshal([]byte(`["FORWARD","RETURNS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentTypeEnum = append(shipmentTypeEnum, v)
	}
}

func (m ShipmentType) validateShipmentTypeEnum(path, location string, value ShipmentType) error {
	if err := validate.EnumCase(path, location, value, shipmentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shipment type
func (m ShipmentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShipmentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this shipment type based on context it is used
func (m ShipmentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
