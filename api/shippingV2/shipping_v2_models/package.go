// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Package A package to be shipped through a shipping service offering.
//
// swagger:model Package
type Package struct {

	// charges
	Charges ChargeList `json:"charges,omitempty"`

	// dimensions
	// Required: true
	Dimensions *Dimensions `json:"dimensions"`

	// insured value
	// Required: true
	InsuredValue *Currency `json:"insuredValue"`

	// When true, the package contains hazardous materials. Defaults to false.
	IsHazmat bool `json:"isHazmat,omitempty"`

	// items
	// Required: true
	Items ItemList `json:"items"`

	// package client reference Id
	// Required: true
	PackageClientReferenceID *PackageClientReferenceID `json:"packageClientReferenceId"`

	// The seller name displayed on the label.
	SellerDisplayName string `json:"sellerDisplayName,omitempty"`

	// weight
	// Required: true
	Weight *Weight `json:"weight"`
}

// Validate validates this package
func (m *Package) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCharges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsuredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageClientReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Package) validateCharges(formats strfmt.Registry) error {
	if swag.IsZero(m.Charges) { // not required
		return nil
	}

	if err := m.Charges.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("charges")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("charges")
		}
		return err
	}

	return nil
}

func (m *Package) validateDimensions(formats strfmt.Registry) error {

	if err := validate.Required("dimensions", "body", m.Dimensions); err != nil {
		return err
	}

	if m.Dimensions != nil {
		if err := m.Dimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validateInsuredValue(formats strfmt.Registry) error {

	if err := validate.Required("insuredValue", "body", m.InsuredValue); err != nil {
		return err
	}

	if m.InsuredValue != nil {
		if err := m.InsuredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insuredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insuredValue")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	if err := m.Items.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *Package) validatePackageClientReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("packageClientReferenceId", "body", m.PackageClientReferenceID); err != nil {
		return err
	}

	if err := validate.Required("packageClientReferenceId", "body", m.PackageClientReferenceID); err != nil {
		return err
	}

	if m.PackageClientReferenceID != nil {
		if err := m.PackageClientReferenceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageClientReferenceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageClientReferenceId")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("weight", "body", m.Weight); err != nil {
		return err
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this package based on the context it is used
func (m *Package) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCharges(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsuredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageClientReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Package) contextValidateCharges(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Charges.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("charges")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("charges")
		}
		return err
	}

	return nil
}

func (m *Package) contextValidateDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.Dimensions != nil {
		if err := m.Dimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidateInsuredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.InsuredValue != nil {
		if err := m.InsuredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("insuredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("insuredValue")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Items.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *Package) contextValidatePackageClientReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageClientReferenceID != nil {
		if err := m.PackageClientReferenceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageClientReferenceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageClientReferenceId")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Package) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Package) UnmarshalBinary(b []byte) error {
	var res Package
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
