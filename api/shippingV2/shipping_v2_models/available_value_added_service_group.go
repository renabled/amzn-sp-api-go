// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailableValueAddedServiceGroup The value-added services available for purchase with a shipping service offering.
//
// swagger:model AvailableValueAddedServiceGroup
type AvailableValueAddedServiceGroup struct {

	// The name of the value-added service group.
	// Required: true
	GroupDescription *string `json:"groupDescription"`

	// The type of the value-added service group.
	// Required: true
	GroupID *string `json:"groupId"`

	// When true, one or more of the value-added services listed must be specified.
	// Required: true
	IsRequired *bool `json:"isRequired"`

	// A list of optional value-added services available for purchase with a shipping service offering.
	ValueAddedServices []*ValueAddedService `json:"valueAddedServices"`
}

// Validate validates this available value added service group
func (m *AvailableValueAddedServiceGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueAddedServices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailableValueAddedServiceGroup) validateGroupDescription(formats strfmt.Registry) error {

	if err := validate.Required("groupDescription", "body", m.GroupDescription); err != nil {
		return err
	}

	return nil
}

func (m *AvailableValueAddedServiceGroup) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("groupId", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *AvailableValueAddedServiceGroup) validateIsRequired(formats strfmt.Registry) error {

	if err := validate.Required("isRequired", "body", m.IsRequired); err != nil {
		return err
	}

	return nil
}

func (m *AvailableValueAddedServiceGroup) validateValueAddedServices(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueAddedServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ValueAddedServices); i++ {
		if swag.IsZero(m.ValueAddedServices[i]) { // not required
			continue
		}

		if m.ValueAddedServices[i] != nil {
			if err := m.ValueAddedServices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("valueAddedServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("valueAddedServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this available value added service group based on the context it is used
func (m *AvailableValueAddedServiceGroup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateValueAddedServices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailableValueAddedServiceGroup) contextValidateValueAddedServices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ValueAddedServices); i++ {

		if m.ValueAddedServices[i] != nil {
			if err := m.ValueAddedServices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("valueAddedServices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("valueAddedServices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailableValueAddedServiceGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailableValueAddedServiceGroup) UnmarshalBinary(b []byte) error {
	var res AvailableValueAddedServiceGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
