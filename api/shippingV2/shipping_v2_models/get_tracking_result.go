// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetTrackingResult The payload for the getTracking operation.
//
// swagger:model GetTrackingResult
type GetTrackingResult struct {

	// alternate leg tracking Id
	// Required: true
	AlternateLegTrackingID *AlternateLegTrackingID `json:"alternateLegTrackingId"`

	// A list of tracking events.
	// Required: true
	EventHistory []*Event `json:"eventHistory"`

	// The date and time by which the shipment is promised to be delivered.
	// Required: true
	// Format: date-time
	PromisedDeliveryDate *strfmt.DateTime `json:"promisedDeliveryDate"`

	// summary
	// Required: true
	Summary *TrackingSummary `json:"summary"`

	// tracking Id
	// Required: true
	TrackingID *TrackingID `json:"trackingId"`
}

// Validate validates this get tracking result
func (m *GetTrackingResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlternateLegTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEventHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromisedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTrackingResult) validateAlternateLegTrackingID(formats strfmt.Registry) error {

	if err := validate.Required("alternateLegTrackingId", "body", m.AlternateLegTrackingID); err != nil {
		return err
	}

	if err := validate.Required("alternateLegTrackingId", "body", m.AlternateLegTrackingID); err != nil {
		return err
	}

	if m.AlternateLegTrackingID != nil {
		if err := m.AlternateLegTrackingID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alternateLegTrackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alternateLegTrackingId")
			}
			return err
		}
	}

	return nil
}

func (m *GetTrackingResult) validateEventHistory(formats strfmt.Registry) error {

	if err := validate.Required("eventHistory", "body", m.EventHistory); err != nil {
		return err
	}

	for i := 0; i < len(m.EventHistory); i++ {
		if swag.IsZero(m.EventHistory[i]) { // not required
			continue
		}

		if m.EventHistory[i] != nil {
			if err := m.EventHistory[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventHistory" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventHistory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetTrackingResult) validatePromisedDeliveryDate(formats strfmt.Registry) error {

	if err := validate.Required("promisedDeliveryDate", "body", m.PromisedDeliveryDate); err != nil {
		return err
	}

	if err := validate.FormatOf("promisedDeliveryDate", "body", "date-time", m.PromisedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *GetTrackingResult) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *GetTrackingResult) validateTrackingID(formats strfmt.Registry) error {

	if err := validate.Required("trackingId", "body", m.TrackingID); err != nil {
		return err
	}

	if err := validate.Required("trackingId", "body", m.TrackingID); err != nil {
		return err
	}

	if m.TrackingID != nil {
		if err := m.TrackingID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get tracking result based on the context it is used
func (m *GetTrackingResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAlternateLegTrackingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEventHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetTrackingResult) contextValidateAlternateLegTrackingID(ctx context.Context, formats strfmt.Registry) error {

	if m.AlternateLegTrackingID != nil {
		if err := m.AlternateLegTrackingID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("alternateLegTrackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("alternateLegTrackingId")
			}
			return err
		}
	}

	return nil
}

func (m *GetTrackingResult) contextValidateEventHistory(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.EventHistory); i++ {

		if m.EventHistory[i] != nil {
			if err := m.EventHistory[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("eventHistory" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("eventHistory" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetTrackingResult) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *GetTrackingResult) contextValidateTrackingID(ctx context.Context, formats strfmt.Registry) error {

	if m.TrackingID != nil {
		if err := m.TrackingID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetTrackingResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetTrackingResult) UnmarshalBinary(b []byte) error {
	var res GetTrackingResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
