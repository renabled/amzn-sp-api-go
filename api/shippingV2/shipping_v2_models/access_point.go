// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AccessPoint Access point details
//
// swagger:model AccessPoint
type AccessPoint struct {

	// access point Id
	AccessPointID AccessPointID `json:"accessPointId,omitempty"`

	// accessibility attributes
	AccessibilityAttributes *AccessibilityAttributes `json:"accessibilityAttributes,omitempty"`

	// address
	Address *Address `json:"address,omitempty"`

	// assistance type
	// Enum: [STAFF_ASSISTED SELF_ASSISTED]
	AssistanceType string `json:"assistanceType,omitempty"`

	// exception operating hours
	ExceptionOperatingHours []*ExceptionOperatingHours `json:"exceptionOperatingHours"`

	// Name of entity (store/hub etc) where this access point is located
	Name string `json:"name,omitempty"`

	// The score of access point, based on proximity to postal code and sorting preference. This can be used to sort access point results on shipper's end.
	Score string `json:"score,omitempty"`

	// standard operating hours
	StandardOperatingHours DayOfWeekTimeMap `json:"standardOperatingHours,omitempty"`

	// Timezone of access point
	Timezone string `json:"timezone,omitempty"`

	// type
	Type AccessPointType `json:"type,omitempty"`
}

// Validate validates this access point
func (m *AccessPoint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessPointID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccessibilityAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssistanceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExceptionOperatingHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStandardOperatingHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessPoint) validateAccessPointID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessPointID) { // not required
		return nil
	}

	if err := m.AccessPointID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessPointId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accessPointId")
		}
		return err
	}

	return nil
}

func (m *AccessPoint) validateAccessibilityAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessibilityAttributes) { // not required
		return nil
	}

	if m.AccessibilityAttributes != nil {
		if err := m.AccessibilityAttributes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessibilityAttributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessibilityAttributes")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

var accessPointTypeAssistanceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["STAFF_ASSISTED","SELF_ASSISTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accessPointTypeAssistanceTypePropEnum = append(accessPointTypeAssistanceTypePropEnum, v)
	}
}

const (

	// AccessPointAssistanceTypeSTAFFASSISTED captures enum value "STAFF_ASSISTED"
	AccessPointAssistanceTypeSTAFFASSISTED string = "STAFF_ASSISTED"

	// AccessPointAssistanceTypeSELFASSISTED captures enum value "SELF_ASSISTED"
	AccessPointAssistanceTypeSELFASSISTED string = "SELF_ASSISTED"
)

// prop value enum
func (m *AccessPoint) validateAssistanceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, accessPointTypeAssistanceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AccessPoint) validateAssistanceType(formats strfmt.Registry) error {
	if swag.IsZero(m.AssistanceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAssistanceTypeEnum("assistanceType", "body", m.AssistanceType); err != nil {
		return err
	}

	return nil
}

func (m *AccessPoint) validateExceptionOperatingHours(formats strfmt.Registry) error {
	if swag.IsZero(m.ExceptionOperatingHours) { // not required
		return nil
	}

	for i := 0; i < len(m.ExceptionOperatingHours); i++ {
		if swag.IsZero(m.ExceptionOperatingHours[i]) { // not required
			continue
		}

		if m.ExceptionOperatingHours[i] != nil {
			if err := m.ExceptionOperatingHours[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptionOperatingHours" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exceptionOperatingHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccessPoint) validateStandardOperatingHours(formats strfmt.Registry) error {
	if swag.IsZero(m.StandardOperatingHours) { // not required
		return nil
	}

	if m.StandardOperatingHours != nil {
		if err := m.StandardOperatingHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("standardOperatingHours")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("standardOperatingHours")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this access point based on the context it is used
func (m *AccessPoint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessPointID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAccessibilityAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExceptionOperatingHours(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStandardOperatingHours(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AccessPoint) contextValidateAccessPointID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccessPointID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accessPointId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accessPointId")
		}
		return err
	}

	return nil
}

func (m *AccessPoint) contextValidateAccessibilityAttributes(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessibilityAttributes != nil {
		if err := m.AccessibilityAttributes.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessibilityAttributes")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessibilityAttributes")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *AccessPoint) contextValidateExceptionOperatingHours(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExceptionOperatingHours); i++ {

		if m.ExceptionOperatingHours[i] != nil {
			if err := m.ExceptionOperatingHours[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("exceptionOperatingHours" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("exceptionOperatingHours" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AccessPoint) contextValidateStandardOperatingHours(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StandardOperatingHours.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("standardOperatingHours")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("standardOperatingHours")
		}
		return err
	}

	return nil
}

func (m *AccessPoint) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AccessPoint) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AccessPoint) UnmarshalBinary(b []byte) error {
	var res AccessPoint
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
