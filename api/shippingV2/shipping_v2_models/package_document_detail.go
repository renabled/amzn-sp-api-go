// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackageDocumentDetail The post-purchase details of a package that will be shipped using a shipping service.
//
// swagger:model PackageDocumentDetail
type PackageDocumentDetail struct {

	// package client reference Id
	// Required: true
	PackageClientReferenceID *PackageClientReferenceID `json:"packageClientReferenceId"`

	// package documents
	// Required: true
	PackageDocuments PackageDocumentList `json:"packageDocuments"`

	// tracking Id
	TrackingID TrackingID `json:"trackingId,omitempty"`
}

// Validate validates this package document detail
func (m *PackageDocumentDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageClientReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageDocumentDetail) validatePackageClientReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("packageClientReferenceId", "body", m.PackageClientReferenceID); err != nil {
		return err
	}

	if err := validate.Required("packageClientReferenceId", "body", m.PackageClientReferenceID); err != nil {
		return err
	}

	if m.PackageClientReferenceID != nil {
		if err := m.PackageClientReferenceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageClientReferenceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageClientReferenceId")
			}
			return err
		}
	}

	return nil
}

func (m *PackageDocumentDetail) validatePackageDocuments(formats strfmt.Registry) error {

	if err := validate.Required("packageDocuments", "body", m.PackageDocuments); err != nil {
		return err
	}

	if err := m.PackageDocuments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageDocuments")
		}
		return err
	}

	return nil
}

func (m *PackageDocumentDetail) validateTrackingID(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingID) { // not required
		return nil
	}

	if err := m.TrackingID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trackingId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trackingId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this package document detail based on the context it is used
func (m *PackageDocumentDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageClientReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageDocumentDetail) contextValidatePackageClientReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageClientReferenceID != nil {
		if err := m.PackageClientReferenceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageClientReferenceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageClientReferenceId")
			}
			return err
		}
	}

	return nil
}

func (m *PackageDocumentDetail) contextValidatePackageDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageDocuments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageDocuments")
		}
		return err
	}

	return nil
}

func (m *PackageDocumentDetail) contextValidateTrackingID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TrackingID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trackingId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("trackingId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageDocumentDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageDocumentDetail) UnmarshalBinary(b []byte) error {
	var res PackageDocumentDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
