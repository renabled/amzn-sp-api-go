// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CollectionFormsHistoryRecord Active Account Details
//
// swagger:model CollectionFormsHistoryRecord
type CollectionFormsHistoryRecord struct {

	// carrier name
	CarrierName CarrierName `json:"carrierName,omitempty"`

	// collection form Id
	CollectionFormID CollectionFormID `json:"collectionFormId,omitempty"`

	// Creation Time for this account.
	CreationDate string `json:"creationDate,omitempty"`

	// generation status
	GenerationStatus GenerationStatus `json:"generationStatus,omitempty"`

	// ship from address
	ShipFromAddress *Address `json:"shipFromAddress,omitempty"`
}

// Validate validates this collection forms history record
func (m *CollectionFormsHistoryRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCollectionFormID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGenerationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionFormsHistoryRecord) validateCarrierName(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierName) { // not required
		return nil
	}

	if err := m.CarrierName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierName")
		}
		return err
	}

	return nil
}

func (m *CollectionFormsHistoryRecord) validateCollectionFormID(formats strfmt.Registry) error {
	if swag.IsZero(m.CollectionFormID) { // not required
		return nil
	}

	if err := m.CollectionFormID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("collectionFormId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("collectionFormId")
		}
		return err
	}

	return nil
}

func (m *CollectionFormsHistoryRecord) validateGenerationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.GenerationStatus) { // not required
		return nil
	}

	if err := m.GenerationStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("generationStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("generationStatus")
		}
		return err
	}

	return nil
}

func (m *CollectionFormsHistoryRecord) validateShipFromAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipFromAddress) { // not required
		return nil
	}

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this collection forms history record based on the context it is used
func (m *CollectionFormsHistoryRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCollectionFormID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGenerationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CollectionFormsHistoryRecord) contextValidateCarrierName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CarrierName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierName")
		}
		return err
	}

	return nil
}

func (m *CollectionFormsHistoryRecord) contextValidateCollectionFormID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CollectionFormID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("collectionFormId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("collectionFormId")
		}
		return err
	}

	return nil
}

func (m *CollectionFormsHistoryRecord) contextValidateGenerationStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GenerationStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("generationStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("generationStatus")
		}
		return err
	}

	return nil
}

func (m *CollectionFormsHistoryRecord) contextValidateShipFromAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CollectionFormsHistoryRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CollectionFormsHistoryRecord) UnmarshalBinary(b []byte) error {
	var res CollectionFormsHistoryRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
