// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IneligibleRate Detailed information for an ineligible shipping service offering.
//
// swagger:model IneligibleRate
type IneligibleRate struct {

	// carrier Id
	// Required: true
	CarrierID *CarrierID `json:"carrierId"`

	// carrier name
	// Required: true
	CarrierName *CarrierName `json:"carrierName"`

	// A list of reasons why a shipping service offering is ineligible.
	// Required: true
	IneligibilityReasons []*IneligibilityReason `json:"ineligibilityReasons"`

	// service Id
	// Required: true
	ServiceID *ServiceID `json:"serviceId"`

	// service name
	// Required: true
	ServiceName *ServiceName `json:"serviceName"`
}

// Validate validates this ineligible rate
func (m *IneligibleRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIneligibilityReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IneligibleRate) validateCarrierID(formats strfmt.Registry) error {

	if err := validate.Required("carrierId", "body", m.CarrierID); err != nil {
		return err
	}

	if err := validate.Required("carrierId", "body", m.CarrierID); err != nil {
		return err
	}

	if m.CarrierID != nil {
		if err := m.CarrierID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierId")
			}
			return err
		}
	}

	return nil
}

func (m *IneligibleRate) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("carrierName", "body", m.CarrierName); err != nil {
		return err
	}

	if err := validate.Required("carrierName", "body", m.CarrierName); err != nil {
		return err
	}

	if m.CarrierName != nil {
		if err := m.CarrierName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierName")
			}
			return err
		}
	}

	return nil
}

func (m *IneligibleRate) validateIneligibilityReasons(formats strfmt.Registry) error {

	if err := validate.Required("ineligibilityReasons", "body", m.IneligibilityReasons); err != nil {
		return err
	}

	for i := 0; i < len(m.IneligibilityReasons); i++ {
		if swag.IsZero(m.IneligibilityReasons[i]) { // not required
			continue
		}

		if m.IneligibilityReasons[i] != nil {
			if err := m.IneligibilityReasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IneligibleRate) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("serviceId", "body", m.ServiceID); err != nil {
		return err
	}

	if err := validate.Required("serviceId", "body", m.ServiceID); err != nil {
		return err
	}

	if m.ServiceID != nil {
		if err := m.ServiceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceId")
			}
			return err
		}
	}

	return nil
}

func (m *IneligibleRate) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	if m.ServiceName != nil {
		if err := m.ServiceName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceName")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this ineligible rate based on the context it is used
func (m *IneligibleRate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrierName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIneligibilityReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IneligibleRate) contextValidateCarrierID(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierID != nil {
		if err := m.CarrierID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierId")
			}
			return err
		}
	}

	return nil
}

func (m *IneligibleRate) contextValidateCarrierName(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierName != nil {
		if err := m.CarrierName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierName")
			}
			return err
		}
	}

	return nil
}

func (m *IneligibleRate) contextValidateIneligibilityReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IneligibilityReasons); i++ {

		if m.IneligibilityReasons[i] != nil {
			if err := m.IneligibilityReasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ineligibilityReasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IneligibleRate) contextValidateServiceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceID != nil {
		if err := m.ServiceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceId")
			}
			return err
		}
	}

	return nil
}

func (m *IneligibleRate) contextValidateServiceName(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceName != nil {
		if err := m.ServiceName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceName")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IneligibleRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IneligibleRate) UnmarshalBinary(b []byte) error {
	var res IneligibleRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
