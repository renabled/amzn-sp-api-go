// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetRatesResult The payload for the getRates operation.
//
// swagger:model GetRatesResult
type GetRatesResult struct {

	// ineligible rates
	IneligibleRates IneligibleRateList `json:"ineligibleRates,omitempty"`

	// rates
	// Required: true
	Rates RateList `json:"rates"`

	// request token
	// Required: true
	RequestToken *RequestToken `json:"requestToken"`
}

// Validate validates this get rates result
func (m *GetRatesResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIneligibleRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequestToken(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRatesResult) validateIneligibleRates(formats strfmt.Registry) error {
	if swag.IsZero(m.IneligibleRates) { // not required
		return nil
	}

	if err := m.IneligibleRates.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ineligibleRates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ineligibleRates")
		}
		return err
	}

	return nil
}

func (m *GetRatesResult) validateRates(formats strfmt.Registry) error {

	if err := validate.Required("rates", "body", m.Rates); err != nil {
		return err
	}

	if err := m.Rates.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rates")
		}
		return err
	}

	return nil
}

func (m *GetRatesResult) validateRequestToken(formats strfmt.Registry) error {

	if err := validate.Required("requestToken", "body", m.RequestToken); err != nil {
		return err
	}

	if err := validate.Required("requestToken", "body", m.RequestToken); err != nil {
		return err
	}

	if m.RequestToken != nil {
		if err := m.RequestToken.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requestToken")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get rates result based on the context it is used
func (m *GetRatesResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIneligibleRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequestToken(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetRatesResult) contextValidateIneligibleRates(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IneligibleRates.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ineligibleRates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ineligibleRates")
		}
		return err
	}

	return nil
}

func (m *GetRatesResult) contextValidateRates(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Rates.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rates")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rates")
		}
		return err
	}

	return nil
}

func (m *GetRatesResult) contextValidateRequestToken(ctx context.Context, formats strfmt.Registry) error {

	if m.RequestToken != nil {
		if err := m.RequestToken.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("requestToken")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("requestToken")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetRatesResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetRatesResult) UnmarshalBinary(b []byte) error {
	var res GetRatesResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
