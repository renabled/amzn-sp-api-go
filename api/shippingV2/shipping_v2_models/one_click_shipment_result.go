// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OneClickShipmentResult The payload for the OneClickShipment API.
//
// swagger:model OneClickShipmentResult
type OneClickShipmentResult struct {

	// carrier
	// Required: true
	Carrier *Carrier `json:"carrier"`

	// package document details
	// Required: true
	PackageDocumentDetails PackageDocumentDetailList `json:"packageDocumentDetails"`

	// promise
	// Required: true
	Promise *Promise `json:"promise"`

	// service
	// Required: true
	Service *Service `json:"service"`

	// shipment Id
	// Required: true
	ShipmentID *ShipmentID `json:"shipmentId"`

	// total charge
	// Required: true
	TotalCharge *Currency `json:"totalCharge"`
}

// Validate validates this one click shipment result
func (m *OneClickShipmentResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDocumentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCharge(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneClickShipmentResult) validateCarrier(formats strfmt.Registry) error {

	if err := validate.Required("carrier", "body", m.Carrier); err != nil {
		return err
	}

	if m.Carrier != nil {
		if err := m.Carrier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrier")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) validatePackageDocumentDetails(formats strfmt.Registry) error {

	if err := validate.Required("packageDocumentDetails", "body", m.PackageDocumentDetails); err != nil {
		return err
	}

	if err := m.PackageDocumentDetails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageDocumentDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageDocumentDetails")
		}
		return err
	}

	return nil
}

func (m *OneClickShipmentResult) validatePromise(formats strfmt.Registry) error {

	if err := validate.Required("promise", "body", m.Promise); err != nil {
		return err
	}

	if m.Promise != nil {
		if err := m.Promise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	if m.Service != nil {
		if err := m.Service.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if m.ShipmentID != nil {
		if err := m.ShipmentID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentId")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) validateTotalCharge(formats strfmt.Registry) error {

	if err := validate.Required("totalCharge", "body", m.TotalCharge); err != nil {
		return err
	}

	if m.TotalCharge != nil {
		if err := m.TotalCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this one click shipment result based on the context it is used
func (m *OneClickShipmentResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDocumentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneClickShipmentResult) contextValidateCarrier(ctx context.Context, formats strfmt.Registry) error {

	if m.Carrier != nil {
		if err := m.Carrier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrier")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) contextValidatePackageDocumentDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageDocumentDetails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageDocumentDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageDocumentDetails")
		}
		return err
	}

	return nil
}

func (m *OneClickShipmentResult) contextValidatePromise(ctx context.Context, formats strfmt.Registry) error {

	if m.Promise != nil {
		if err := m.Promise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) contextValidateService(ctx context.Context, formats strfmt.Registry) error {

	if m.Service != nil {
		if err := m.Service.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("service")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("service")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentID != nil {
		if err := m.ShipmentID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentId")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentResult) contextValidateTotalCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalCharge != nil {
		if err := m.TotalCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OneClickShipmentResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OneClickShipmentResult) UnmarshalBinary(b []byte) error {
	var res OneClickShipmentResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
