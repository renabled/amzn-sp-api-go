// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChannelDetails Shipment source channel related information.
//
// swagger:model ChannelDetails
type ChannelDetails struct {

	// amazon order details
	AmazonOrderDetails *AmazonOrderDetails `json:"amazonOrderDetails,omitempty"`

	// amazon shipment details
	AmazonShipmentDetails *AmazonShipmentDetails `json:"amazonShipmentDetails,omitempty"`

	// channel type
	// Required: true
	ChannelType *ChannelType `json:"channelType"`
}

// Validate validates this channel details
func (m *ChannelDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmazonShipmentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelDetails) validateAmazonOrderDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonOrderDetails) { // not required
		return nil
	}

	if m.AmazonOrderDetails != nil {
		if err := m.AmazonOrderDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelDetails) validateAmazonShipmentDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonShipmentDetails) { // not required
		return nil
	}

	if m.AmazonShipmentDetails != nil {
		if err := m.AmazonShipmentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonShipmentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonShipmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelDetails) validateChannelType(formats strfmt.Registry) error {

	if err := validate.Required("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	if err := validate.Required("channelType", "body", m.ChannelType); err != nil {
		return err
	}

	if m.ChannelType != nil {
		if err := m.ChannelType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this channel details based on the context it is used
func (m *ChannelDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonOrderDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmazonShipmentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChannelType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChannelDetails) contextValidateAmazonOrderDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonOrderDetails != nil {
		if err := m.AmazonOrderDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelDetails) contextValidateAmazonShipmentDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonShipmentDetails != nil {
		if err := m.AmazonShipmentDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonShipmentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonShipmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ChannelDetails) contextValidateChannelType(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelType != nil {
		if err := m.ChannelType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChannelDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChannelDetails) UnmarshalBinary(b []byte) error {
	var res ChannelDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
