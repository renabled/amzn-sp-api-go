// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InputType Type of Input.
//
// swagger:model InputType
type InputType string

func NewInputType(value InputType) *InputType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InputType.
func (m InputType) Pointer() *InputType {
	return &m
}

const (

	// InputTypeTEXTBOX captures enum value "TEXTBOX"
	InputTypeTEXTBOX InputType = "TEXTBOX"

	// InputTypePASSWORD captures enum value "PASSWORD"
	InputTypePASSWORD InputType = "PASSWORD"
)

// for schema
var inputTypeEnum []interface{}

func init() {
	var res []InputType
	if err := json.Unmarshal([]byte(`["TEXTBOX","PASSWORD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inputTypeEnum = append(inputTypeEnum, v)
	}
}

func (m InputType) validateInputTypeEnum(path, location string, value InputType) error {
	if err := validate.EnumCase(path, location, value, inputTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this input type
func (m InputType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInputTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this input type based on context it is used
func (m InputType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
