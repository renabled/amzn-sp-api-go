// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetShipmentDocumentsResult The payload for the getShipmentDocuments operation.
//
// swagger:model GetShipmentDocumentsResult
type GetShipmentDocumentsResult struct {

	// package document detail
	// Required: true
	PackageDocumentDetail *PackageDocumentDetail `json:"packageDocumentDetail"`

	// shipment Id
	// Required: true
	ShipmentID *ShipmentID `json:"shipmentId"`
}

// Validate validates this get shipment documents result
func (m *GetShipmentDocumentsResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageDocumentDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetShipmentDocumentsResult) validatePackageDocumentDetail(formats strfmt.Registry) error {

	if err := validate.Required("packageDocumentDetail", "body", m.PackageDocumentDetail); err != nil {
		return err
	}

	if m.PackageDocumentDetail != nil {
		if err := m.PackageDocumentDetail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDocumentDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDocumentDetail")
			}
			return err
		}
	}

	return nil
}

func (m *GetShipmentDocumentsResult) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if m.ShipmentID != nil {
		if err := m.ShipmentID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get shipment documents result based on the context it is used
func (m *GetShipmentDocumentsResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageDocumentDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetShipmentDocumentsResult) contextValidatePackageDocumentDetail(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageDocumentDetail != nil {
		if err := m.PackageDocumentDetail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDocumentDetail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDocumentDetail")
			}
			return err
		}
	}

	return nil
}

func (m *GetShipmentDocumentsResult) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentID != nil {
		if err := m.ShipmentID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetShipmentDocumentsResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetShipmentDocumentsResult) UnmarshalBinary(b []byte) error {
	var res GetShipmentDocumentsResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
