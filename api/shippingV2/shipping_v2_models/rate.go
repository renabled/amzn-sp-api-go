// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rate The details of a shipping service offering.
//
// swagger:model Rate
type Rate struct {

	// available value added service groups
	AvailableValueAddedServiceGroups AvailableValueAddedServiceGroupList `json:"availableValueAddedServiceGroups,omitempty"`

	// benefits
	Benefits *Benefits `json:"benefits,omitempty"`

	// billed weight
	BilledWeight *Weight `json:"billedWeight,omitempty"`

	// carrier Id
	// Required: true
	CarrierID *CarrierID `json:"carrierId"`

	// carrier name
	// Required: true
	CarrierName *CarrierName `json:"carrierName"`

	// payment type
	PaymentType PaymentType `json:"paymentType,omitempty"`

	// promise
	// Required: true
	Promise *Promise `json:"promise"`

	// rate Id
	// Required: true
	RateID *RateID `json:"rateId"`

	// rate item list
	RateItemList RateItemList `json:"rateItemList,omitempty"`

	// When true, indicates that additional inputs are required to purchase this shipment service. You must then call the getAdditionalInputs operation to return the JSON schema to use when providing the additional inputs to the purchaseShipment operation.
	// Required: true
	RequiresAdditionalInputs *bool `json:"requiresAdditionalInputs"`

	// service Id
	// Required: true
	ServiceID *ServiceID `json:"serviceId"`

	// service name
	// Required: true
	ServiceName *ServiceName `json:"serviceName"`

	// supported document specifications
	// Required: true
	SupportedDocumentSpecifications SupportedDocumentSpecificationList `json:"supportedDocumentSpecifications"`

	// total charge
	// Required: true
	TotalCharge *Currency `json:"totalCharge"`
}

// Validate validates this rate
func (m *Rate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableValueAddedServiceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBenefits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBilledWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateItemList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiresAdditionalInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedDocumentSpecifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCharge(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rate) validateAvailableValueAddedServiceGroups(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableValueAddedServiceGroups) { // not required
		return nil
	}

	if err := m.AvailableValueAddedServiceGroups.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("availableValueAddedServiceGroups")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("availableValueAddedServiceGroups")
		}
		return err
	}

	return nil
}

func (m *Rate) validateBenefits(formats strfmt.Registry) error {
	if swag.IsZero(m.Benefits) { // not required
		return nil
	}

	if m.Benefits != nil {
		if err := m.Benefits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("benefits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("benefits")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateBilledWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.BilledWeight) { // not required
		return nil
	}

	if m.BilledWeight != nil {
		if err := m.BilledWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billedWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billedWeight")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateCarrierID(formats strfmt.Registry) error {

	if err := validate.Required("carrierId", "body", m.CarrierID); err != nil {
		return err
	}

	if err := validate.Required("carrierId", "body", m.CarrierID); err != nil {
		return err
	}

	if m.CarrierID != nil {
		if err := m.CarrierID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierId")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("carrierName", "body", m.CarrierName); err != nil {
		return err
	}

	if err := validate.Required("carrierName", "body", m.CarrierName); err != nil {
		return err
	}

	if m.CarrierName != nil {
		if err := m.CarrierName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierName")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validatePaymentType(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentType) { // not required
		return nil
	}

	if err := m.PaymentType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentType")
		}
		return err
	}

	return nil
}

func (m *Rate) validatePromise(formats strfmt.Registry) error {

	if err := validate.Required("promise", "body", m.Promise); err != nil {
		return err
	}

	if m.Promise != nil {
		if err := m.Promise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateRateID(formats strfmt.Registry) error {

	if err := validate.Required("rateId", "body", m.RateID); err != nil {
		return err
	}

	if err := validate.Required("rateId", "body", m.RateID); err != nil {
		return err
	}

	if m.RateID != nil {
		if err := m.RateID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateId")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateRateItemList(formats strfmt.Registry) error {
	if swag.IsZero(m.RateItemList) { // not required
		return nil
	}

	if err := m.RateItemList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rateItemList")
		}
		return err
	}

	return nil
}

func (m *Rate) validateRequiresAdditionalInputs(formats strfmt.Registry) error {

	if err := validate.Required("requiresAdditionalInputs", "body", m.RequiresAdditionalInputs); err != nil {
		return err
	}

	return nil
}

func (m *Rate) validateServiceID(formats strfmt.Registry) error {

	if err := validate.Required("serviceId", "body", m.ServiceID); err != nil {
		return err
	}

	if err := validate.Required("serviceId", "body", m.ServiceID); err != nil {
		return err
	}

	if m.ServiceID != nil {
		if err := m.ServiceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceId")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	if m.ServiceName != nil {
		if err := m.ServiceName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceName")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateSupportedDocumentSpecifications(formats strfmt.Registry) error {

	if err := validate.Required("supportedDocumentSpecifications", "body", m.SupportedDocumentSpecifications); err != nil {
		return err
	}

	if err := m.SupportedDocumentSpecifications.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supportedDocumentSpecifications")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supportedDocumentSpecifications")
		}
		return err
	}

	return nil
}

func (m *Rate) validateTotalCharge(formats strfmt.Registry) error {

	if err := validate.Required("totalCharge", "body", m.TotalCharge); err != nil {
		return err
	}

	if m.TotalCharge != nil {
		if err := m.TotalCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rate based on the context it is used
func (m *Rate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableValueAddedServiceGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBenefits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBilledWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrierID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrierName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateItemList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedDocumentSpecifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rate) contextValidateAvailableValueAddedServiceGroups(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableValueAddedServiceGroups.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("availableValueAddedServiceGroups")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("availableValueAddedServiceGroups")
		}
		return err
	}

	return nil
}

func (m *Rate) contextValidateBenefits(ctx context.Context, formats strfmt.Registry) error {

	if m.Benefits != nil {
		if err := m.Benefits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("benefits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("benefits")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateBilledWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.BilledWeight != nil {
		if err := m.BilledWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billedWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billedWeight")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateCarrierID(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierID != nil {
		if err := m.CarrierID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierId")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateCarrierName(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierName != nil {
		if err := m.CarrierName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierName")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidatePaymentType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PaymentType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentType")
		}
		return err
	}

	return nil
}

func (m *Rate) contextValidatePromise(ctx context.Context, formats strfmt.Registry) error {

	if m.Promise != nil {
		if err := m.Promise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateRateID(ctx context.Context, formats strfmt.Registry) error {

	if m.RateID != nil {
		if err := m.RateID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateId")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateRateItemList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RateItemList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rateItemList")
		}
		return err
	}

	return nil
}

func (m *Rate) contextValidateServiceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceID != nil {
		if err := m.ServiceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceId")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateServiceName(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceName != nil {
		if err := m.ServiceName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceName")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateSupportedDocumentSpecifications(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SupportedDocumentSpecifications.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supportedDocumentSpecifications")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supportedDocumentSpecifications")
		}
		return err
	}

	return nil
}

func (m *Rate) contextValidateTotalCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalCharge != nil {
		if err := m.TotalCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rate) UnmarshalBinary(b []byte) error {
	var res Rate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
