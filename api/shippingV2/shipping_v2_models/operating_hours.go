// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OperatingHours The hours in which the access point shall remain operational
//
// swagger:model OperatingHours
type OperatingHours struct {

	// closing time
	ClosingTime *TimeOfDay `json:"closingTime,omitempty"`

	// mid day closures
	MidDayClosures []*TimeOfDay `json:"midDayClosures"`

	// opening time
	OpeningTime *TimeOfDay `json:"openingTime,omitempty"`
}

// Validate validates this operating hours
func (m *OperatingHours) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClosingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMidDayClosures(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpeningTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperatingHours) validateClosingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ClosingTime) { // not required
		return nil
	}

	if m.ClosingTime != nil {
		if err := m.ClosingTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closingTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closingTime")
			}
			return err
		}
	}

	return nil
}

func (m *OperatingHours) validateMidDayClosures(formats strfmt.Registry) error {
	if swag.IsZero(m.MidDayClosures) { // not required
		return nil
	}

	for i := 0; i < len(m.MidDayClosures); i++ {
		if swag.IsZero(m.MidDayClosures[i]) { // not required
			continue
		}

		if m.MidDayClosures[i] != nil {
			if err := m.MidDayClosures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("midDayClosures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("midDayClosures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperatingHours) validateOpeningTime(formats strfmt.Registry) error {
	if swag.IsZero(m.OpeningTime) { // not required
		return nil
	}

	if m.OpeningTime != nil {
		if err := m.OpeningTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openingTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openingTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this operating hours based on the context it is used
func (m *OperatingHours) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClosingTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMidDayClosures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOpeningTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperatingHours) contextValidateClosingTime(ctx context.Context, formats strfmt.Registry) error {

	if m.ClosingTime != nil {
		if err := m.ClosingTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("closingTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("closingTime")
			}
			return err
		}
	}

	return nil
}

func (m *OperatingHours) contextValidateMidDayClosures(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MidDayClosures); i++ {

		if m.MidDayClosures[i] != nil {
			if err := m.MidDayClosures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("midDayClosures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("midDayClosures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OperatingHours) contextValidateOpeningTime(ctx context.Context, formats strfmt.Registry) error {

	if m.OpeningTime != nil {
		if err := m.OpeningTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("openingTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("openingTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperatingHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperatingHours) UnmarshalBinary(b []byte) error {
	var res OperatingHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
