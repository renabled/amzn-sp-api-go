// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// EventCode The tracking event type.
//
// swagger:model EventCode
type EventCode string

func NewEventCode(value EventCode) *EventCode {
	return &value
}

// Pointer returns a pointer to a freshly-allocated EventCode.
func (m EventCode) Pointer() *EventCode {
	return &m
}

const (

	// EventCodeReadyForReceive captures enum value "ReadyForReceive"
	EventCodeReadyForReceive EventCode = "ReadyForReceive"

	// EventCodePickupDone captures enum value "PickupDone"
	EventCodePickupDone EventCode = "PickupDone"

	// EventCodeDelivered captures enum value "Delivered"
	EventCodeDelivered EventCode = "Delivered"

	// EventCodeDeparted captures enum value "Departed"
	EventCodeDeparted EventCode = "Departed"

	// EventCodeDeliveryAttempted captures enum value "DeliveryAttempted"
	EventCodeDeliveryAttempted EventCode = "DeliveryAttempted"

	// EventCodeLost captures enum value "Lost"
	EventCodeLost EventCode = "Lost"

	// EventCodeOutForDelivery captures enum value "OutForDelivery"
	EventCodeOutForDelivery EventCode = "OutForDelivery"

	// EventCodeArrivedAtCarrierFacility captures enum value "ArrivedAtCarrierFacility"
	EventCodeArrivedAtCarrierFacility EventCode = "ArrivedAtCarrierFacility"

	// EventCodeRejected captures enum value "Rejected"
	EventCodeRejected EventCode = "Rejected"

	// EventCodeUndeliverable captures enum value "Undeliverable"
	EventCodeUndeliverable EventCode = "Undeliverable"

	// EventCodePickupCancelled captures enum value "PickupCancelled"
	EventCodePickupCancelled EventCode = "PickupCancelled"
)

// for schema
var eventCodeEnum []interface{}

func init() {
	var res []EventCode
	if err := json.Unmarshal([]byte(`["ReadyForReceive","PickupDone","Delivered","Departed","DeliveryAttempted","Lost","OutForDelivery","ArrivedAtCarrierFacility","Rejected","Undeliverable","PickupCancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventCodeEnum = append(eventCodeEnum, v)
	}
}

func (m EventCode) validateEventCodeEnum(path, location string, value EventCode) error {
	if err := validate.EnumCase(path, location, value, eventCodeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this event code
func (m EventCode) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateEventCodeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this event code based on context it is used
func (m EventCode) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
