// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Dimensions A set of measurements for a three-dimensional object.
//
// swagger:model Dimensions
type Dimensions struct {

	// The height of the package.
	// Required: true
	Height *float64 `json:"height"`

	// The length of the package.
	// Required: true
	Length *float64 `json:"length"`

	// The unit of measurement.
	// Required: true
	// Enum: [INCH CENTIMETER]
	Unit *string `json:"unit"`

	// The width of the package.
	// Required: true
	Width *float64 `json:"width"`
}

// Validate validates this dimensions
func (m *Dimensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Dimensions) validateHeight(formats strfmt.Registry) error {

	if err := validate.Required("height", "body", m.Height); err != nil {
		return err
	}

	return nil
}

func (m *Dimensions) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("length", "body", m.Length); err != nil {
		return err
	}

	return nil
}

var dimensionsTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INCH","CENTIMETER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dimensionsTypeUnitPropEnum = append(dimensionsTypeUnitPropEnum, v)
	}
}

const (

	// DimensionsUnitINCH captures enum value "INCH"
	DimensionsUnitINCH string = "INCH"

	// DimensionsUnitCENTIMETER captures enum value "CENTIMETER"
	DimensionsUnitCENTIMETER string = "CENTIMETER"
)

// prop value enum
func (m *Dimensions) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, dimensionsTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Dimensions) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *Dimensions) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("width", "body", m.Width); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this dimensions based on context it is used
func (m *Dimensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Dimensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Dimensions) UnmarshalBinary(b []byte) error {
	var res Dimensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
