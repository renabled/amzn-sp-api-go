// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item An item in a package.
//
// swagger:model Item
type Item struct {

	// dangerous goods details
	DangerousGoodsDetails *DangerousGoodsDetails `json:"dangerousGoodsDetails,omitempty"`

	// The product description of the item.
	Description string `json:"description,omitempty"`

	// direct fulfillment item identifiers
	DirectFulfillmentItemIdentifiers *DirectFulfillmentItemIdentifiers `json:"directFulfillmentItemIdentifiers,omitempty"`

	// invoice details
	InvoiceDetails *InvoiceDetails `json:"invoiceDetails,omitempty"`

	// When true, the item qualifies as hazardous materials (hazmat). Defaults to false.
	IsHazmat bool `json:"isHazmat,omitempty"`

	// A unique identifier for an item provided by the client.
	ItemIdentifier string `json:"itemIdentifier,omitempty"`

	// item value
	ItemValue *Currency `json:"itemValue,omitempty"`

	// liquid volume
	LiquidVolume *LiquidVolume `json:"liquidVolume,omitempty"`

	// The product type of the item.
	ProductType string `json:"productType,omitempty"`

	// The number of units. This value is required.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// A list of unique serial numbers in an Amazon package that can be used to guarantee non-fraudulent items. The number of serial numbers in the list must be less than or equal to the quantity of items being shipped. Only applicable when channel source is Amazon.
	SerialNumbers []string `json:"serialNumbers"`

	// weight
	Weight *Weight `json:"weight,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDangerousGoodsDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectFulfillmentItemIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiquidVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateDangerousGoodsDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DangerousGoodsDetails) { // not required
		return nil
	}

	if m.DangerousGoodsDetails != nil {
		if err := m.DangerousGoodsDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dangerousGoodsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dangerousGoodsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateDirectFulfillmentItemIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.DirectFulfillmentItemIdentifiers) { // not required
		return nil
	}

	if m.DirectFulfillmentItemIdentifiers != nil {
		if err := m.DirectFulfillmentItemIdentifiers.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directFulfillmentItemIdentifiers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directFulfillmentItemIdentifiers")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateInvoiceDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.InvoiceDetails) { // not required
		return nil
	}

	if m.InvoiceDetails != nil {
		if err := m.InvoiceDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoiceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateItemValue(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemValue) { // not required
		return nil
	}

	if m.ItemValue != nil {
		if err := m.ItemValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemValue")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateLiquidVolume(formats strfmt.Registry) error {
	if swag.IsZero(m.LiquidVolume) { // not required
		return nil
	}

	if m.LiquidVolume != nil {
		if err := m.LiquidVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("liquidVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("liquidVolume")
			}
			return err
		}
	}

	return nil
}

func (m *Item) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Weight) { // not required
		return nil
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item based on the context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDangerousGoodsDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDirectFulfillmentItemIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvoiceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLiquidVolume(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) contextValidateDangerousGoodsDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.DangerousGoodsDetails != nil {
		if err := m.DangerousGoodsDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dangerousGoodsDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dangerousGoodsDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateDirectFulfillmentItemIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	if m.DirectFulfillmentItemIdentifiers != nil {
		if err := m.DirectFulfillmentItemIdentifiers.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("directFulfillmentItemIdentifiers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("directFulfillmentItemIdentifiers")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateInvoiceDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.InvoiceDetails != nil {
		if err := m.InvoiceDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoiceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateItemValue(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemValue != nil {
		if err := m.ItemValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemValue")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateLiquidVolume(ctx context.Context, formats strfmt.Registry) error {

	if m.LiquidVolume != nil {
		if err := m.LiquidVolume.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("liquidVolume")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("liquidVolume")
			}
			return err
		}
	}

	return nil
}

func (m *Item) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
