// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnmanifestedCarrierInformation UnmanifestedCarrierInformation like carrierId CarrierName and Location
//
// swagger:model UnmanifestedCarrierInformation
type UnmanifestedCarrierInformation struct {

	// carrier Id
	CarrierID CarrierID `json:"carrierId,omitempty"`

	// carrier name
	CarrierName CarrierName `json:"carrierName,omitempty"`

	// unmanifested shipment location list
	UnmanifestedShipmentLocationList UnmanifestedShipmentLocationList `json:"unmanifestedShipmentLocationList,omitempty"`
}

// Validate validates this unmanifested carrier information
func (m *UnmanifestedCarrierInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnmanifestedShipmentLocationList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnmanifestedCarrierInformation) validateCarrierID(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierID) { // not required
		return nil
	}

	if err := m.CarrierID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierId")
		}
		return err
	}

	return nil
}

func (m *UnmanifestedCarrierInformation) validateCarrierName(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierName) { // not required
		return nil
	}

	if err := m.CarrierName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierName")
		}
		return err
	}

	return nil
}

func (m *UnmanifestedCarrierInformation) validateUnmanifestedShipmentLocationList(formats strfmt.Registry) error {
	if swag.IsZero(m.UnmanifestedShipmentLocationList) { // not required
		return nil
	}

	if err := m.UnmanifestedShipmentLocationList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unmanifestedShipmentLocationList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unmanifestedShipmentLocationList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this unmanifested carrier information based on the context it is used
func (m *UnmanifestedCarrierInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrierName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnmanifestedShipmentLocationList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UnmanifestedCarrierInformation) contextValidateCarrierID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CarrierID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierId")
		}
		return err
	}

	return nil
}

func (m *UnmanifestedCarrierInformation) contextValidateCarrierName(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CarrierName.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierName")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierName")
		}
		return err
	}

	return nil
}

func (m *UnmanifestedCarrierInformation) contextValidateUnmanifestedShipmentLocationList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UnmanifestedShipmentLocationList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("unmanifestedShipmentLocationList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("unmanifestedShipmentLocationList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UnmanifestedCarrierInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnmanifestedCarrierInformation) UnmarshalBinary(b []byte) error {
	var res UnmanifestedCarrierInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
