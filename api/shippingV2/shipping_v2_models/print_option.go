// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrintOption The format options available for a label.
//
// swagger:model PrintOption
type PrintOption struct {

	// A list of the supported DPI options for a document.
	SupportedDPIs []Dpi `json:"supportedDPIs"`

	// A list of the supported documented details.
	// Required: true
	SupportedDocumentDetails []*SupportedDocumentDetail `json:"supportedDocumentDetails"`

	// A list of the supported needFileJoining boolean values for a document.
	// Required: true
	SupportedFileJoiningOptions []NeedFileJoining `json:"supportedFileJoiningOptions"`

	// A list of the supported page layout options for a document.
	// Required: true
	SupportedPageLayouts []PageLayout `json:"supportedPageLayouts"`
}

// Validate validates this print option
func (m *PrintOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupportedDPIs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedDocumentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedFileJoiningOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedPageLayouts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrintOption) validateSupportedDPIs(formats strfmt.Registry) error {
	if swag.IsZero(m.SupportedDPIs) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedDPIs); i++ {

		if err := m.SupportedDPIs[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedDPIs" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedDPIs" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PrintOption) validateSupportedDocumentDetails(formats strfmt.Registry) error {

	if err := validate.Required("supportedDocumentDetails", "body", m.SupportedDocumentDetails); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedDocumentDetails); i++ {
		if swag.IsZero(m.SupportedDocumentDetails[i]) { // not required
			continue
		}

		if m.SupportedDocumentDetails[i] != nil {
			if err := m.SupportedDocumentDetails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedDocumentDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("supportedDocumentDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrintOption) validateSupportedFileJoiningOptions(formats strfmt.Registry) error {

	if err := validate.Required("supportedFileJoiningOptions", "body", m.SupportedFileJoiningOptions); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedFileJoiningOptions); i++ {

		if err := m.SupportedFileJoiningOptions[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedFileJoiningOptions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedFileJoiningOptions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PrintOption) validateSupportedPageLayouts(formats strfmt.Registry) error {

	if err := validate.Required("supportedPageLayouts", "body", m.SupportedPageLayouts); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedPageLayouts); i++ {

		if err := m.SupportedPageLayouts[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedPageLayouts" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedPageLayouts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this print option based on the context it is used
func (m *PrintOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupportedDPIs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedDocumentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedFileJoiningOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedPageLayouts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrintOption) contextValidateSupportedDPIs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedDPIs); i++ {

		if err := m.SupportedDPIs[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedDPIs" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedDPIs" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PrintOption) contextValidateSupportedDocumentDetails(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedDocumentDetails); i++ {

		if m.SupportedDocumentDetails[i] != nil {
			if err := m.SupportedDocumentDetails[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedDocumentDetails" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("supportedDocumentDetails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PrintOption) contextValidateSupportedFileJoiningOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedFileJoiningOptions); i++ {

		if err := m.SupportedFileJoiningOptions[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedFileJoiningOptions" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedFileJoiningOptions" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PrintOption) contextValidateSupportedPageLayouts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedPageLayouts); i++ {

		if err := m.SupportedPageLayouts[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supportedPageLayouts" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supportedPageLayouts" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrintOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrintOption) UnmarshalBinary(b []byte) error {
	var res PrintOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
