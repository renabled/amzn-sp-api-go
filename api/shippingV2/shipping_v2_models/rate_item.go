// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RateItem Rate Item for shipping (base cost, transaction fee, confirmation, insurance, etc.) Data source definition:
//
// swagger:model RateItem
type RateItem struct {

	// rate item charge
	RateItemCharge *Currency `json:"rateItemCharge,omitempty"`

	// rate item ID
	RateItemID RateItemID `json:"rateItemID,omitempty"`

	// Used for the localization.
	RateItemNameLocalization string `json:"rateItemNameLocalization,omitempty"`

	// rate item type
	RateItemType RateItemType `json:"rateItemType,omitempty"`
}

// Validate validates this rate item
func (m *RateItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRateItemCharge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateItemID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRateItemType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateItem) validateRateItemCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.RateItemCharge) { // not required
		return nil
	}

	if m.RateItemCharge != nil {
		if err := m.RateItemCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateItemCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateItemCharge")
			}
			return err
		}
	}

	return nil
}

func (m *RateItem) validateRateItemID(formats strfmt.Registry) error {
	if swag.IsZero(m.RateItemID) { // not required
		return nil
	}

	if err := m.RateItemID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateItemID")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rateItemID")
		}
		return err
	}

	return nil
}

func (m *RateItem) validateRateItemType(formats strfmt.Registry) error {
	if swag.IsZero(m.RateItemType) { // not required
		return nil
	}

	if err := m.RateItemType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateItemType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rateItemType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this rate item based on the context it is used
func (m *RateItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRateItemCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateItemID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRateItemType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RateItem) contextValidateRateItemCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.RateItemCharge != nil {
		if err := m.RateItemCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rateItemCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rateItemCharge")
			}
			return err
		}
	}

	return nil
}

func (m *RateItem) contextValidateRateItemID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RateItemID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateItemID")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rateItemID")
		}
		return err
	}

	return nil
}

func (m *RateItem) contextValidateRateItemType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RateItemType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rateItemType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rateItemType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RateItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RateItem) UnmarshalBinary(b []byte) error {
	var res RateItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
