// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChargeComponent The type and amount of a charge applied on a package.
//
// swagger:model ChargeComponent
type ChargeComponent struct {

	// amount
	Amount *Currency `json:"amount,omitempty"`

	// The type of charge.
	// Enum: [TAX DISCOUNT]
	ChargeType string `json:"chargeType,omitempty"`
}

// Validate validates this charge component
func (m *ChargeComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeComponent) validateAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.Amount) { // not required
		return nil
	}

	if m.Amount != nil {
		if err := m.Amount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

var chargeComponentTypeChargeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TAX","DISCOUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		chargeComponentTypeChargeTypePropEnum = append(chargeComponentTypeChargeTypePropEnum, v)
	}
}

const (

	// ChargeComponentChargeTypeTAX captures enum value "TAX"
	ChargeComponentChargeTypeTAX string = "TAX"

	// ChargeComponentChargeTypeDISCOUNT captures enum value "DISCOUNT"
	ChargeComponentChargeTypeDISCOUNT string = "DISCOUNT"
)

// prop value enum
func (m *ChargeComponent) validateChargeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, chargeComponentTypeChargeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ChargeComponent) validateChargeType(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateChargeTypeEnum("chargeType", "body", m.ChargeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this charge component based on the context it is used
func (m *ChargeComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeComponent) contextValidateAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.Amount != nil {
		if err := m.Amount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargeComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargeComponent) UnmarshalBinary(b []byte) error {
	var res ChargeComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
