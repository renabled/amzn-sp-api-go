// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CarrierAccountInput Info About CarrierAccountInput
//
// swagger:model CarrierAccountInput
type CarrierAccountInput struct {

	// descriptionLocalizationKey value .
	DescriptionLocalizationKey string `json:"descriptionLocalizationKey,omitempty"`

	// groupName value .
	GroupName string `json:"groupName,omitempty"`

	// input type
	InputType InputType `json:"inputType,omitempty"`

	// is value is Confidential .
	IsConfidential bool `json:"isConfidential,omitempty"`

	// is value is hidden .
	IsHidden bool `json:"isHidden,omitempty"`

	// mandatory or not  value .
	IsMandatory bool `json:"isMandatory,omitempty"`

	// name value .
	Name string `json:"name,omitempty"`

	// validation metadata
	ValidationMetadata ValidationMetadataList `json:"validationMetadata,omitempty"`
}

// Validate validates this carrier account input
func (m *CarrierAccountInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInputType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidationMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CarrierAccountInput) validateInputType(formats strfmt.Registry) error {
	if swag.IsZero(m.InputType) { // not required
		return nil
	}

	if err := m.InputType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inputType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inputType")
		}
		return err
	}

	return nil
}

func (m *CarrierAccountInput) validateValidationMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ValidationMetadata) { // not required
		return nil
	}

	if err := m.ValidationMetadata.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("validationMetadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("validationMetadata")
		}
		return err
	}

	return nil
}

// ContextValidate validate this carrier account input based on the context it is used
func (m *CarrierAccountInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInputType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValidationMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CarrierAccountInput) contextValidateInputType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InputType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("inputType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("inputType")
		}
		return err
	}

	return nil
}

func (m *CarrierAccountInput) contextValidateValidationMetadata(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ValidationMetadata.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("validationMetadata")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("validationMetadata")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CarrierAccountInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CarrierAccountInput) UnmarshalBinary(b []byte) error {
	var res CarrierAccountInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
