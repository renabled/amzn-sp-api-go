// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LinkCarrierAccountResponse The Response  for the LinkCarrierAccount operation.
//
// swagger:model LinkCarrierAccountResponse
type LinkCarrierAccountResponse struct {

	// registration status
	RegistrationStatus AccountStatus `json:"registrationStatus,omitempty"`
}

// Validate validates this link carrier account response
func (m *LinkCarrierAccountResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegistrationStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkCarrierAccountResponse) validateRegistrationStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RegistrationStatus) { // not required
		return nil
	}

	if err := m.RegistrationStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registrationStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registrationStatus")
		}
		return err
	}

	return nil
}

// ContextValidate validate this link carrier account response based on the context it is used
func (m *LinkCarrierAccountResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegistrationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkCarrierAccountResponse) contextValidateRegistrationStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RegistrationStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("registrationStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("registrationStatus")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinkCarrierAccountResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkCarrierAccountResponse) UnmarshalBinary(b []byte) error {
	var res LinkCarrierAccountResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
