// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DocumentFormat The file format of the document.
//
// swagger:model DocumentFormat
type DocumentFormat string

func NewDocumentFormat(value DocumentFormat) *DocumentFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DocumentFormat.
func (m DocumentFormat) Pointer() *DocumentFormat {
	return &m
}

const (

	// DocumentFormatPDF captures enum value "PDF"
	DocumentFormatPDF DocumentFormat = "PDF"

	// DocumentFormatPNG captures enum value "PNG"
	DocumentFormatPNG DocumentFormat = "PNG"

	// DocumentFormatZPL captures enum value "ZPL"
	DocumentFormatZPL DocumentFormat = "ZPL"
)

// for schema
var documentFormatEnum []interface{}

func init() {
	var res []DocumentFormat
	if err := json.Unmarshal([]byte(`["PDF","PNG","ZPL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		documentFormatEnum = append(documentFormatEnum, v)
	}
}

func (m DocumentFormat) validateDocumentFormatEnum(path, location string, value DocumentFormat) error {
	if err := validate.EnumCase(path, location, value, documentFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this document format
func (m DocumentFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDocumentFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this document format based on context it is used
func (m DocumentFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
