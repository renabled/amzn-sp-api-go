// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OneClickShipmentRequest The request schema for the OneClickShipment operation. When the channelType is not Amazon, shipTo is required and when channelType is Amazon shipTo is ignored.
//
// swagger:model OneClickShipmentRequest
type OneClickShipmentRequest struct {

	// channel details
	// Required: true
	ChannelDetails *ChannelDetails `json:"channelDetails"`

	// destination access point details
	DestinationAccessPointDetails *AccessPointDetails `json:"destinationAccessPointDetails,omitempty"`

	// label specifications
	// Required: true
	LabelSpecifications *RequestedDocumentSpecification `json:"labelSpecifications"`

	// packages
	// Required: true
	Packages PackageList `json:"packages"`

	// The return to address.
	ReturnTo *Address `json:"returnTo,omitempty"`

	// service selection
	// Required: true
	ServiceSelection *ServiceSelection `json:"serviceSelection"`

	// The ship date and time (the requested pickup). This defaults to the current date and time.
	// Format: date-time
	ShipDate strfmt.DateTime `json:"shipDate,omitempty"`

	// The ship from address.
	// Required: true
	ShipFrom *Address `json:"shipFrom"`

	// The ship to address.
	ShipTo *Address `json:"shipTo,omitempty"`

	// Optional field for shipper instruction.
	ShipperInstruction *ShipperInstruction `json:"shipperInstruction,omitempty"`

	// tax details
	TaxDetails TaxDetailList `json:"taxDetails,omitempty"`

	// value added services details
	ValueAddedServicesDetails OneClickShipmentValueAddedServiceDetails `json:"valueAddedServicesDetails,omitempty"`
}

// Validate validates this one click shipment request
func (m *OneClickShipmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDestinationAccessPointDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelSpecifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceSelection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipperInstruction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueAddedServicesDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneClickShipmentRequest) validateChannelDetails(formats strfmt.Registry) error {

	if err := validate.Required("channelDetails", "body", m.ChannelDetails); err != nil {
		return err
	}

	if m.ChannelDetails != nil {
		if err := m.ChannelDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateDestinationAccessPointDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.DestinationAccessPointDetails) { // not required
		return nil
	}

	if m.DestinationAccessPointDetails != nil {
		if err := m.DestinationAccessPointDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAccessPointDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAccessPointDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateLabelSpecifications(formats strfmt.Registry) error {

	if err := validate.Required("labelSpecifications", "body", m.LabelSpecifications); err != nil {
		return err
	}

	if m.LabelSpecifications != nil {
		if err := m.LabelSpecifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecifications")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validatePackages(formats strfmt.Registry) error {

	if err := validate.Required("packages", "body", m.Packages); err != nil {
		return err
	}

	if err := m.Packages.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packages")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packages")
		}
		return err
	}

	return nil
}

func (m *OneClickShipmentRequest) validateReturnTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnTo) { // not required
		return nil
	}

	if m.ReturnTo != nil {
		if err := m.ReturnTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnTo")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateServiceSelection(formats strfmt.Registry) error {

	if err := validate.Required("serviceSelection", "body", m.ServiceSelection); err != nil {
		return err
	}

	if m.ServiceSelection != nil {
		if err := m.ServiceSelection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSelection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceSelection")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateShipDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipDate) { // not required
		return nil
	}

	if err := validate.FormatOf("shipDate", "body", "date-time", m.ShipDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OneClickShipmentRequest) validateShipFrom(formats strfmt.Registry) error {

	if err := validate.Required("shipFrom", "body", m.ShipFrom); err != nil {
		return err
	}

	if m.ShipFrom != nil {
		if err := m.ShipFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFrom")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipTo) { // not required
		return nil
	}

	if m.ShipTo != nil {
		if err := m.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateShipperInstruction(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipperInstruction) { // not required
		return nil
	}

	if m.ShipperInstruction != nil {
		if err := m.ShipperInstruction.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipperInstruction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipperInstruction")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) validateTaxDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxDetails) { // not required
		return nil
	}

	if err := m.TaxDetails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxDetails")
		}
		return err
	}

	return nil
}

func (m *OneClickShipmentRequest) validateValueAddedServicesDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueAddedServicesDetails) { // not required
		return nil
	}

	if err := m.ValueAddedServicesDetails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("valueAddedServicesDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("valueAddedServicesDetails")
		}
		return err
	}

	return nil
}

// ContextValidate validate this one click shipment request based on the context it is used
func (m *OneClickShipmentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDestinationAccessPointDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelSpecifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceSelection(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipperInstruction(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValueAddedServicesDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OneClickShipmentRequest) contextValidateChannelDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelDetails != nil {
		if err := m.ChannelDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateDestinationAccessPointDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.DestinationAccessPointDetails != nil {
		if err := m.DestinationAccessPointDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("destinationAccessPointDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("destinationAccessPointDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateLabelSpecifications(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelSpecifications != nil {
		if err := m.LabelSpecifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecifications")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Packages.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packages")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packages")
		}
		return err
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateReturnTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnTo != nil {
		if err := m.ReturnTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnTo")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateServiceSelection(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceSelection != nil {
		if err := m.ServiceSelection.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceSelection")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceSelection")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateShipFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFrom != nil {
		if err := m.ShipFrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFrom")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipTo != nil {
		if err := m.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateShipperInstruction(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipperInstruction != nil {
		if err := m.ShipperInstruction.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipperInstruction")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipperInstruction")
			}
			return err
		}
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateTaxDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TaxDetails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("taxDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("taxDetails")
		}
		return err
	}

	return nil
}

func (m *OneClickShipmentRequest) contextValidateValueAddedServicesDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ValueAddedServicesDetails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("valueAddedServicesDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("valueAddedServicesDetails")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OneClickShipmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OneClickShipmentRequest) UnmarshalBinary(b []byte) error {
	var res OneClickShipmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
