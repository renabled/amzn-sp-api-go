// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LinkCarrierAccountRequest The request schema for verify and add the merchant's account with a certain carrier.
//
// swagger:model LinkCarrierAccountRequest
type LinkCarrierAccountRequest struct {

	// carrier account attributes
	// Required: true
	CarrierAccountAttributes CarrierAccountAttributes `json:"carrierAccountAttributes"`

	// carrier account type
	// Required: true
	CarrierAccountType *CarrierAccountType `json:"carrierAccountType"`

	// client reference details
	ClientReferenceDetails ClientReferenceDetails `json:"clientReferenceDetails,omitempty"`

	// encrypted carrier account attributes
	EncryptedCarrierAccountAttributes CarrierAccountAttributes `json:"encryptedCarrierAccountAttributes,omitempty"`
}

// Validate validates this link carrier account request
func (m *LinkCarrierAccountRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierAccountAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientReferenceDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryptedCarrierAccountAttributes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkCarrierAccountRequest) validateCarrierAccountAttributes(formats strfmt.Registry) error {

	if err := validate.Required("carrierAccountAttributes", "body", m.CarrierAccountAttributes); err != nil {
		return err
	}

	if err := m.CarrierAccountAttributes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierAccountAttributes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierAccountAttributes")
		}
		return err
	}

	return nil
}

func (m *LinkCarrierAccountRequest) validateCarrierAccountType(formats strfmt.Registry) error {

	if err := validate.Required("carrierAccountType", "body", m.CarrierAccountType); err != nil {
		return err
	}

	if err := validate.Required("carrierAccountType", "body", m.CarrierAccountType); err != nil {
		return err
	}

	if m.CarrierAccountType != nil {
		if err := m.CarrierAccountType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierAccountType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierAccountType")
			}
			return err
		}
	}

	return nil
}

func (m *LinkCarrierAccountRequest) validateClientReferenceDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ClientReferenceDetails) { // not required
		return nil
	}

	if err := m.ClientReferenceDetails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clientReferenceDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clientReferenceDetails")
		}
		return err
	}

	return nil
}

func (m *LinkCarrierAccountRequest) validateEncryptedCarrierAccountAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.EncryptedCarrierAccountAttributes) { // not required
		return nil
	}

	if err := m.EncryptedCarrierAccountAttributes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("encryptedCarrierAccountAttributes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("encryptedCarrierAccountAttributes")
		}
		return err
	}

	return nil
}

// ContextValidate validate this link carrier account request based on the context it is used
func (m *LinkCarrierAccountRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierAccountAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrierAccountType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClientReferenceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEncryptedCarrierAccountAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LinkCarrierAccountRequest) contextValidateCarrierAccountAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CarrierAccountAttributes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("carrierAccountAttributes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("carrierAccountAttributes")
		}
		return err
	}

	return nil
}

func (m *LinkCarrierAccountRequest) contextValidateCarrierAccountType(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierAccountType != nil {
		if err := m.CarrierAccountType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierAccountType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierAccountType")
			}
			return err
		}
	}

	return nil
}

func (m *LinkCarrierAccountRequest) contextValidateClientReferenceDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ClientReferenceDetails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("clientReferenceDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("clientReferenceDetails")
		}
		return err
	}

	return nil
}

func (m *LinkCarrierAccountRequest) contextValidateEncryptedCarrierAccountAttributes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EncryptedCarrierAccountAttributes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("encryptedCarrierAccountAttributes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("encryptedCarrierAccountAttributes")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LinkCarrierAccountRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LinkCarrierAccountRequest) UnmarshalBinary(b []byte) error {
	var res LinkCarrierAccountRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
