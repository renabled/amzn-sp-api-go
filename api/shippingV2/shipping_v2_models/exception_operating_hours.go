// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ExceptionOperatingHours Defines exceptions to standard operating hours for certain date ranges.
//
// swagger:model ExceptionOperatingHours
type ExceptionOperatingHours struct {

	// date range
	DateRange *DateRange `json:"dateRange,omitempty"`

	// operating hours
	OperatingHours *OperatingHours `json:"operatingHours,omitempty"`
}

// Validate validates this exception operating hours
func (m *ExceptionOperatingHours) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDateRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingHours(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExceptionOperatingHours) validateDateRange(formats strfmt.Registry) error {
	if swag.IsZero(m.DateRange) { // not required
		return nil
	}

	if m.DateRange != nil {
		if err := m.DateRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateRange")
			}
			return err
		}
	}

	return nil
}

func (m *ExceptionOperatingHours) validateOperatingHours(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatingHours) { // not required
		return nil
	}

	if m.OperatingHours != nil {
		if err := m.OperatingHours.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operatingHours")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operatingHours")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this exception operating hours based on the context it is used
func (m *ExceptionOperatingHours) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDateRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperatingHours(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExceptionOperatingHours) contextValidateDateRange(ctx context.Context, formats strfmt.Registry) error {

	if m.DateRange != nil {
		if err := m.DateRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dateRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dateRange")
			}
			return err
		}
	}

	return nil
}

func (m *ExceptionOperatingHours) contextValidateOperatingHours(ctx context.Context, formats strfmt.Registry) error {

	if m.OperatingHours != nil {
		if err := m.OperatingHours.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operatingHours")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operatingHours")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExceptionOperatingHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExceptionOperatingHours) UnmarshalBinary(b []byte) error {
	var res ExceptionOperatingHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
