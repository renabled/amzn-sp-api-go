// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DirectPurchaseRequest The request schema for the directPurchaseShipment operation. When the channel type is Amazon, the shipTo address is not required and will be ignored.
//
// swagger:model DirectPurchaseRequest
type DirectPurchaseRequest struct {

	// channel details
	// Required: true
	ChannelDetails *ChannelDetails `json:"channelDetails"`

	// The document (label) specifications requested. The default label returned is PNG DPI 203 4x6 if no label specification is provided. Requesting an invalid file format results in a failure.
	LabelSpecifications *RequestedDocumentSpecification `json:"labelSpecifications,omitempty"`

	// packages
	Packages PackageList `json:"packages,omitempty"`

	// The address where the package will be returned if it cannot be delivered.
	ReturnTo *Address `json:"returnTo,omitempty"`

	// The address where the package will be picked up.
	ShipFrom *Address `json:"shipFrom,omitempty"`

	// The address where the shipment will be delivered. For vendor orders, shipTo information is pulled directly from the Amazon order.
	ShipTo *Address `json:"shipTo,omitempty"`
}

// Validate validates this direct purchase request
func (m *DirectPurchaseRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChannelDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelSpecifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnTo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectPurchaseRequest) validateChannelDetails(formats strfmt.Registry) error {

	if err := validate.Required("channelDetails", "body", m.ChannelDetails); err != nil {
		return err
	}

	if m.ChannelDetails != nil {
		if err := m.ChannelDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelDetails")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) validateLabelSpecifications(formats strfmt.Registry) error {
	if swag.IsZero(m.LabelSpecifications) { // not required
		return nil
	}

	if m.LabelSpecifications != nil {
		if err := m.LabelSpecifications.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecifications")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) validatePackages(formats strfmt.Registry) error {
	if swag.IsZero(m.Packages) { // not required
		return nil
	}

	if err := m.Packages.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packages")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packages")
		}
		return err
	}

	return nil
}

func (m *DirectPurchaseRequest) validateReturnTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnTo) { // not required
		return nil
	}

	if m.ReturnTo != nil {
		if err := m.ReturnTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnTo")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) validateShipFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipFrom) { // not required
		return nil
	}

	if m.ShipFrom != nil {
		if err := m.ShipFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFrom")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) validateShipTo(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipTo) { // not required
		return nil
	}

	if m.ShipTo != nil {
		if err := m.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this direct purchase request based on the context it is used
func (m *DirectPurchaseRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChannelDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelSpecifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectPurchaseRequest) contextValidateChannelDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ChannelDetails != nil {
		if err := m.ChannelDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("channelDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("channelDetails")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) contextValidateLabelSpecifications(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelSpecifications != nil {
		if err := m.LabelSpecifications.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecifications")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecifications")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) contextValidatePackages(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Packages.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packages")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packages")
		}
		return err
	}

	return nil
}

func (m *DirectPurchaseRequest) contextValidateReturnTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnTo != nil {
		if err := m.ReturnTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnTo")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) contextValidateShipFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFrom != nil {
		if err := m.ShipFrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFrom")
			}
			return err
		}
	}

	return nil
}

func (m *DirectPurchaseRequest) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipTo != nil {
		if err := m.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectPurchaseRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectPurchaseRequest) UnmarshalBinary(b []byte) error {
	var res DirectPurchaseRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
