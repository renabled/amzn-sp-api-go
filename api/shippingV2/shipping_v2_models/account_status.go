// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountStatus Account Status.
//
// swagger:model AccountStatus
type AccountStatus string

func NewAccountStatus(value AccountStatus) *AccountStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AccountStatus.
func (m AccountStatus) Pointer() *AccountStatus {
	return &m
}

const (

	// AccountStatusACTIVE captures enum value "ACTIVE"
	AccountStatusACTIVE AccountStatus = "ACTIVE"

	// AccountStatusINACTIVE captures enum value "INACTIVE"
	AccountStatusINACTIVE AccountStatus = "INACTIVE"

	// AccountStatusPENDING captures enum value "PENDING"
	AccountStatusPENDING AccountStatus = "PENDING"

	// AccountStatusSUSPENDED captures enum value "SUSPENDED"
	AccountStatusSUSPENDED AccountStatus = "SUSPENDED"
)

// for schema
var accountStatusEnum []interface{}

func init() {
	var res []AccountStatus
	if err := json.Unmarshal([]byte(`["ACTIVE","INACTIVE","PENDING","SUSPENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountStatusEnum = append(accountStatusEnum, v)
	}
}

func (m AccountStatus) validateAccountStatusEnum(path, location string, value AccountStatus) error {
	if err := validate.EnumCase(path, location, value, accountStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account status
func (m AccountStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account status based on context it is used
func (m AccountStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
