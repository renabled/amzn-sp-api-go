// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AccountType Shipper Account Type.
//
// swagger:model AccountType
type AccountType string

func NewAccountType(value AccountType) *AccountType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AccountType.
func (m AccountType) Pointer() *AccountType {
	return &m
}

const (

	// AccountTypeSHIPPERACCOUNT captures enum value "SHIPPER_ACCOUNT"
	AccountTypeSHIPPERACCOUNT AccountType = "SHIPPER_ACCOUNT"

	// AccountTypeSHIPPERACCOUNTWITHINVOICE captures enum value "SHIPPER_ACCOUNT_WITH_INVOICE"
	AccountTypeSHIPPERACCOUNTWITHINVOICE AccountType = "SHIPPER_ACCOUNT_WITH_INVOICE"

	// AccountTypeAMAZONACCOUNT captures enum value "AMAZON_ACCOUNT"
	AccountTypeAMAZONACCOUNT AccountType = "AMAZON_ACCOUNT"
)

// for schema
var accountTypeEnum []interface{}

func init() {
	var res []AccountType
	if err := json.Unmarshal([]byte(`["SHIPPER_ACCOUNT","SHIPPER_ACCOUNT_WITH_INVOICE","AMAZON_ACCOUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		accountTypeEnum = append(accountTypeEnum, v)
	}
}

func (m AccountType) validateAccountTypeEnum(path, location string, value AccountType) error {
	if err := validate.EnumCase(path, location, value, accountTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this account type
func (m AccountType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAccountTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this account type based on context it is used
func (m AccountType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
