// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ChannelType The shipment source channel type.
//
// swagger:model ChannelType
type ChannelType string

func NewChannelType(value ChannelType) *ChannelType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ChannelType.
func (m ChannelType) Pointer() *ChannelType {
	return &m
}

const (

	// ChannelTypeAMAZON captures enum value "AMAZON"
	ChannelTypeAMAZON ChannelType = "AMAZON"

	// ChannelTypeEXTERNAL captures enum value "EXTERNAL"
	ChannelTypeEXTERNAL ChannelType = "EXTERNAL"
)

// for schema
var channelTypeEnum []interface{}

func init() {
	var res []ChannelType
	if err := json.Unmarshal([]byte(`["AMAZON","EXTERNAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		channelTypeEnum = append(channelTypeEnum, v)
	}
}

func (m ChannelType) validateChannelTypeEnum(path, location string, value ChannelType) error {
	if err := validate.EnumCase(path, location, value, channelTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this channel type
func (m ChannelType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateChannelTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this channel type based on context it is used
func (m ChannelType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
