// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TaxType Indicates the type of tax.
//
// swagger:model TaxType
type TaxType string

func NewTaxType(value TaxType) *TaxType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TaxType.
func (m TaxType) Pointer() *TaxType {
	return &m
}

const (

	// TaxTypeGST captures enum value "GST"
	TaxTypeGST TaxType = "GST"
)

// for schema
var taxTypeEnum []interface{}

func init() {
	var res []TaxType
	if err := json.Unmarshal([]byte(`["GST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taxTypeEnum = append(taxTypeEnum, v)
	}
}

func (m TaxType) validateTaxTypeEnum(path, location string, value TaxType) error {
	if err := validate.EnumCase(path, location, value, taxTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this tax type
func (m TaxType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTaxTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this tax type based on context it is used
func (m TaxType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
