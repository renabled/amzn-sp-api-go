// Code generated by go-swagger; DO NOT EDIT.

package shipping_v2_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ValueAddedServiceDetails A collection of supported value-added services.
//
// swagger:model ValueAddedServiceDetails
type ValueAddedServiceDetails struct {

	// collect on delivery
	CollectOnDelivery *CollectOnDelivery `json:"collectOnDelivery,omitempty"`
}

// Validate validates this value added service details
func (m *ValueAddedServiceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCollectOnDelivery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValueAddedServiceDetails) validateCollectOnDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.CollectOnDelivery) { // not required
		return nil
	}

	if m.CollectOnDelivery != nil {
		if err := m.CollectOnDelivery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collectOnDelivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("collectOnDelivery")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this value added service details based on the context it is used
func (m *ValueAddedServiceDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCollectOnDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ValueAddedServiceDetails) contextValidateCollectOnDelivery(ctx context.Context, formats strfmt.Registry) error {

	if m.CollectOnDelivery != nil {
		if err := m.CollectOnDelivery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("collectOnDelivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("collectOnDelivery")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ValueAddedServiceDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ValueAddedServiceDetails) UnmarshalBinary(b []byte) error {
	var res ValueAddedServiceDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
