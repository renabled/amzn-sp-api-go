// Code generated by go-swagger; DO NOT EDIT.

package finances_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PaymentsContext Additional information related to payments-related transactions.
// Example: {"paymentDate":"2020-07-14T03:35:13.214Z","paymentMethod":"BANK","paymentReference":"XXXXX123","paymentType":"Debit Card"}
//
// swagger:model PaymentsContext
type PaymentsContext struct {

	// The date of the payment.
	// Format: date-time
	PaymentDate Date `json:"paymentDate,omitempty"`

	// The method of payment.
	PaymentMethod string `json:"paymentMethod,omitempty"`

	// The reference number of the payment.
	PaymentReference string `json:"paymentReference,omitempty"`

	// The type of payment.
	PaymentType string `json:"paymentType,omitempty"`
}

// Validate validates this payments context
func (m *PaymentsContext) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaymentDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentsContext) validatePaymentDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentDate) { // not required
		return nil
	}

	if err := m.PaymentDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this payments context based on the context it is used
func (m *PaymentsContext) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePaymentDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PaymentsContext) contextValidatePaymentDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PaymentDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("paymentDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("paymentDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PaymentsContext) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PaymentsContext) UnmarshalBinary(b []byte) error {
	var res PaymentsContext
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
