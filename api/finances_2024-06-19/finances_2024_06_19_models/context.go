// Code generated by go-swagger; DO NOT EDIT.

package finances_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Context Additional Information about the item.
//
// swagger:model Context
type Context struct {

	// context type
	// Required: true
	ContextType *string `json:"contextType"`

	AmazonPayContext

	ProductContext

	PaymentsContext

	DeferredContext

	TimeRangeContext
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *Context) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		ContextType *string `json:"contextType"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.ContextType = dataAO0.ContextType

	// AO1
	var aO1 AmazonPayContext
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.AmazonPayContext = aO1

	// AO2
	var aO2 ProductContext
	if err := swag.ReadJSON(raw, &aO2); err != nil {
		return err
	}
	m.ProductContext = aO2

	// AO3
	var aO3 PaymentsContext
	if err := swag.ReadJSON(raw, &aO3); err != nil {
		return err
	}
	m.PaymentsContext = aO3

	// AO4
	var aO4 DeferredContext
	if err := swag.ReadJSON(raw, &aO4); err != nil {
		return err
	}
	m.DeferredContext = aO4

	// AO5
	var aO5 TimeRangeContext
	if err := swag.ReadJSON(raw, &aO5); err != nil {
		return err
	}
	m.TimeRangeContext = aO5

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m Context) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 6)

	var dataAO0 struct {
		ContextType *string `json:"contextType"`
	}

	dataAO0.ContextType = m.ContextType

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.AmazonPayContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)

	aO2, err := swag.WriteJSON(m.ProductContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO2)

	aO3, err := swag.WriteJSON(m.PaymentsContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO3)

	aO4, err := swag.WriteJSON(m.DeferredContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO4)

	aO5, err := swag.WriteJSON(m.TimeRangeContext)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO5)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this context
func (m *Context) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContextType(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with AmazonPayContext
	if err := m.AmazonPayContext.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ProductContext
	if err := m.ProductContext.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PaymentsContext
	if err := m.PaymentsContext.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DeferredContext
	if err := m.DeferredContext.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TimeRangeContext
	if err := m.TimeRangeContext.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Context) validateContextType(formats strfmt.Registry) error {

	if err := validate.Required("contextType", "body", m.ContextType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this context based on the context it is used
func (m *Context) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AmazonPayContext
	if err := m.AmazonPayContext.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with ProductContext
	if err := m.ProductContext.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with PaymentsContext
	if err := m.PaymentsContext.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with DeferredContext
	if err := m.DeferredContext.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with TimeRangeContext
	if err := m.TimeRangeContext.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *Context) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Context) UnmarshalBinary(b []byte) error {
	var res Context
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
