// Code generated by go-swagger; DO NOT EDIT.

package finances_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Transaction All the information related to a transaction.
// Example: {"breakdowns":{"breakdowns":[{"breakdownAmount":{"currencyAmount":10,"currencyCode":"USD"},"breakdownType":"Sales","breakdowns":[{"breakdownAmount":{"currencyAmount":10,"currencyCode":"USD"},"breakdownType":"Product Charges","breakdowns":[]}]}]},"contexts":[{"channel":"MFN","contextType":"AmazonPayContext","orderType":"Order Type","storeName":"Store 1"}],"description":"Order Payment","items":[{"breakdowns":[{"breakdownAmount":{"currencyAmount":10,"currencyCode":"USD"},"breakdownType":"Product Charges","breakdowns":[{"breakdownAmount":{"currencyAmount":10,"currencyCode":"USD"},"breakdownType":"Principle","breakdowns":[]}]}],"contexts":[{"asin":"B07FGXZQZ1","contextType":"ProductContext","fulfillmentNetwork":"MFN","quantityShipped":1,"sku":"sku-12"}],"description":"Item title","relatedIdentifiers":[{"itemRelatedIdentifierName":"ORDER_ADJUSTMENT_ITEM_ID","itemRelatedIdentifierValue":"81297625-121-27551"}],"totalAmount":{"currencyAmount":10,"currencyCode":"USD"}}],"marketplaceDetails":{"marketplaceId":"ATVPDKIKX0DER","marketplaceName":"Amazon.com"},"postedDate":"2020-07-14T03:35:13.214Z","relatedIdentifiers":[{"relatedIdentifierName":"ORDER_ID","relatedIdentifierValue":"8129762527551"}],"sellingPartnerMetadata":{"accountType":"PAYABLE","marketplaceId":"ATVPDKIKX0DER","sellingPartnerId":"XXXXXXXXXXXXXX"},"totalAmount":{"currencyAmount":10,"currencyCode":"USD"},"transactionId":"b1qD0oAliFkLiqRyGbmeT0DoS2Z2kHzi7TZ92z-vARI","transactionStatus":"Released","transactionType":"Shipment"}
//
// swagger:model Transaction
type Transaction struct {

	// A list of breakdowns that provide details on how the total amount is calculated for the transaction.
	Breakdowns Breakdowns `json:"breakdowns,omitempty"`

	// Additional Information about the transaction.
	Contexts Contexts `json:"contexts,omitempty"`

	// Describes the reasons for the transaction.
	//
	// **Example:** 'Order Payment', 'Refund Order'
	Description string `json:"description,omitempty"`

	// Additional information about the items in the transaction.
	Items Items `json:"items,omitempty"`

	// Information about the marketplace where the transaction occurred.
	MarketplaceDetails *MarketplaceDetails `json:"marketplaceDetails,omitempty"`

	// The date and time when the transaction was posted.
	// Format: date-time
	PostedDate Date `json:"postedDate,omitempty"`

	// Identifiers related to the transaction, such as order and shipment IDs.
	RelatedIdentifiers RelatedIdentifiers `json:"relatedIdentifiers,omitempty"`

	// Metadata that describes the seller.
	SellingPartnerMetadata *SellingPartnerMetadata `json:"sellingPartnerMetadata,omitempty"`

	// The total amount of money in the transaction.
	TotalAmount *Currency `json:"totalAmount,omitempty"`

	// The unique identifier of the transaction.
	TransactionID string `json:"transactionId,omitempty"`

	// The status of the transaction.
	//
	// **Possible values:**
	//
	// * `Deferred`
	// * `Released`
	TransactionStatus string `json:"transactionStatus,omitempty"`

	// The type of transaction.
	//
	// **Possible value:** `Shipment`
	TransactionType string `json:"transactionType,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakdowns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingPartnerMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validateBreakdowns(formats strfmt.Registry) error {
	if swag.IsZero(m.Breakdowns) { // not required
		return nil
	}

	if err := m.Breakdowns.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("breakdowns")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("breakdowns")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateContexts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contexts) { // not required
		return nil
	}

	if err := m.Contexts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contexts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contexts")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateItems(formats strfmt.Registry) error {
	if swag.IsZero(m.Items) { // not required
		return nil
	}

	if err := m.Items.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateMarketplaceDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketplaceDetails) { // not required
		return nil
	}

	if m.MarketplaceDetails != nil {
		if err := m.MarketplaceDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("postedDate")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateRelatedIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedIdentifiers) { // not required
		return nil
	}

	if err := m.RelatedIdentifiers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relatedIdentifiers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("relatedIdentifiers")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateSellingPartnerMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.SellingPartnerMetadata) { // not required
		return nil
	}

	if m.SellingPartnerMetadata != nil {
		if err := m.SellingPartnerMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingPartnerMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingPartnerMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalAmount) { // not required
		return nil
	}

	if m.TotalAmount != nil {
		if err := m.TotalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this transaction based on the context it is used
func (m *Transaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakdowns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContexts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingPartnerMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) contextValidateBreakdowns(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Breakdowns.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("breakdowns")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("breakdowns")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateContexts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Contexts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contexts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contexts")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Items.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("items")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("items")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateMarketplaceDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceDetails != nil {
		if err := m.MarketplaceDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceDetails")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("postedDate")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateRelatedIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RelatedIdentifiers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relatedIdentifiers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("relatedIdentifiers")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateSellingPartnerMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingPartnerMetadata != nil {
		if err := m.SellingPartnerMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingPartnerMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingPartnerMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTotalAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalAmount != nil {
		if err := m.TotalAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
