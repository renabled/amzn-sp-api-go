// Code generated by go-swagger; DO NOT EDIT.

package finances_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RelatedIdentifier Related business identifier of the transaction.
//
// swagger:model RelatedIdentifier
type RelatedIdentifier struct {

	// An enumerated set of related business identifier names.
	// Enum: [ORDER_ID SHIPMENT_ID EVENT_GROUP_ID REFUND_ID INVOICE_ID DISBURSEMENT_ID TRANSFER_ID DEFERRED_TRANSACTION_ID]
	RelatedIdentifierName string `json:"relatedIdentifierName,omitempty"`

	// Corresponding value of `RelatedIdentifierName`.
	RelatedIdentifierValue string `json:"relatedIdentifierValue,omitempty"`
}

// Validate validates this related identifier
func (m *RelatedIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRelatedIdentifierName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var relatedIdentifierTypeRelatedIdentifierNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ORDER_ID","SHIPMENT_ID","EVENT_GROUP_ID","REFUND_ID","INVOICE_ID","DISBURSEMENT_ID","TRANSFER_ID","DEFERRED_TRANSACTION_ID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		relatedIdentifierTypeRelatedIdentifierNamePropEnum = append(relatedIdentifierTypeRelatedIdentifierNamePropEnum, v)
	}
}

const (

	// RelatedIdentifierRelatedIdentifierNameORDERID captures enum value "ORDER_ID"
	RelatedIdentifierRelatedIdentifierNameORDERID string = "ORDER_ID"

	// RelatedIdentifierRelatedIdentifierNameSHIPMENTID captures enum value "SHIPMENT_ID"
	RelatedIdentifierRelatedIdentifierNameSHIPMENTID string = "SHIPMENT_ID"

	// RelatedIdentifierRelatedIdentifierNameEVENTGROUPID captures enum value "EVENT_GROUP_ID"
	RelatedIdentifierRelatedIdentifierNameEVENTGROUPID string = "EVENT_GROUP_ID"

	// RelatedIdentifierRelatedIdentifierNameREFUNDID captures enum value "REFUND_ID"
	RelatedIdentifierRelatedIdentifierNameREFUNDID string = "REFUND_ID"

	// RelatedIdentifierRelatedIdentifierNameINVOICEID captures enum value "INVOICE_ID"
	RelatedIdentifierRelatedIdentifierNameINVOICEID string = "INVOICE_ID"

	// RelatedIdentifierRelatedIdentifierNameDISBURSEMENTID captures enum value "DISBURSEMENT_ID"
	RelatedIdentifierRelatedIdentifierNameDISBURSEMENTID string = "DISBURSEMENT_ID"

	// RelatedIdentifierRelatedIdentifierNameTRANSFERID captures enum value "TRANSFER_ID"
	RelatedIdentifierRelatedIdentifierNameTRANSFERID string = "TRANSFER_ID"

	// RelatedIdentifierRelatedIdentifierNameDEFERREDTRANSACTIONID captures enum value "DEFERRED_TRANSACTION_ID"
	RelatedIdentifierRelatedIdentifierNameDEFERREDTRANSACTIONID string = "DEFERRED_TRANSACTION_ID"
)

// prop value enum
func (m *RelatedIdentifier) validateRelatedIdentifierNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, relatedIdentifierTypeRelatedIdentifierNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RelatedIdentifier) validateRelatedIdentifierName(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedIdentifierName) { // not required
		return nil
	}

	// value enum
	if err := m.validateRelatedIdentifierNameEnum("relatedIdentifierName", "body", m.RelatedIdentifierName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this related identifier based on context it is used
func (m *RelatedIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RelatedIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RelatedIdentifier) UnmarshalBinary(b []byte) error {
	var res RelatedIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
