// Code generated by go-swagger; DO NOT EDIT.

package finances_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Breakdown Details about the movement of money in the financial transaction. Breakdowns are further categorized into breakdown types, breakdown amounts, and further breakdowns.
//
// swagger:model Breakdown
type Breakdown struct {

	// The monetary amount of the charge.
	BreakdownAmount *Currency `json:"breakdownAmount,omitempty"`

	// The type of charge.
	BreakdownType string `json:"breakdownType,omitempty"`

	// Further breakdowns of `BreakdownType`.
	Breakdowns *Breakdown `json:"breakdowns,omitempty"`
}

// Validate validates this breakdown
func (m *Breakdown) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakdownAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBreakdowns(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Breakdown) validateBreakdownAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.BreakdownAmount) { // not required
		return nil
	}

	if m.BreakdownAmount != nil {
		if err := m.BreakdownAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breakdownAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breakdownAmount")
			}
			return err
		}
	}

	return nil
}

func (m *Breakdown) validateBreakdowns(formats strfmt.Registry) error {
	if swag.IsZero(m.Breakdowns) { // not required
		return nil
	}

	if m.Breakdowns != nil {
		if err := m.Breakdowns.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breakdowns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breakdowns")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this breakdown based on the context it is used
func (m *Breakdown) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakdownAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBreakdowns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Breakdown) contextValidateBreakdownAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.BreakdownAmount != nil {
		if err := m.BreakdownAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breakdownAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breakdownAmount")
			}
			return err
		}
	}

	return nil
}

func (m *Breakdown) contextValidateBreakdowns(ctx context.Context, formats strfmt.Registry) error {

	if m.Breakdowns != nil {
		if err := m.Breakdowns.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("breakdowns")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("breakdowns")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Breakdown) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Breakdown) UnmarshalBinary(b []byte) error {
	var res Breakdown
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
