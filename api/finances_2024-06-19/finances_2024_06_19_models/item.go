// Code generated by go-swagger; DO NOT EDIT.

package finances_2024_06_19_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Item Additional information about the items in a transaction.
//
// swagger:model Item
type Item struct {

	// A list of breakdowns that provide details on how the total amount is calculated for the transaction.
	Breakdowns Breakdowns `json:"breakdowns,omitempty"`

	// Additional Information about the item.
	Contexts Contexts `json:"contexts,omitempty"`

	// A description of the items in a transaction.
	Description string `json:"description,omitempty"`

	// Related business identifiers of the item.
	RelatedIdentifiers ItemRelatedIdentifiers `json:"relatedIdentifiers,omitempty"`

	// The total monetary amount of the item.
	TotalAmount *Currency `json:"totalAmount,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBreakdowns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContexts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateBreakdowns(formats strfmt.Registry) error {
	if swag.IsZero(m.Breakdowns) { // not required
		return nil
	}

	if err := m.Breakdowns.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("breakdowns")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("breakdowns")
		}
		return err
	}

	return nil
}

func (m *Item) validateContexts(formats strfmt.Registry) error {
	if swag.IsZero(m.Contexts) { // not required
		return nil
	}

	if err := m.Contexts.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contexts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contexts")
		}
		return err
	}

	return nil
}

func (m *Item) validateRelatedIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedIdentifiers) { // not required
		return nil
	}

	if err := m.RelatedIdentifiers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relatedIdentifiers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("relatedIdentifiers")
		}
		return err
	}

	return nil
}

func (m *Item) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalAmount) { // not required
		return nil
	}

	if m.TotalAmount != nil {
		if err := m.TotalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item based on the context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBreakdowns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContexts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) contextValidateBreakdowns(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Breakdowns.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("breakdowns")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("breakdowns")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateContexts(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Contexts.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contexts")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contexts")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateRelatedIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RelatedIdentifiers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("relatedIdentifiers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("relatedIdentifiers")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateTotalAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalAmount != nil {
		if err := m.TotalAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
