// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewListTransactionsParams creates a new ListTransactionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListTransactionsParams() *ListTransactionsParams {
	return &ListTransactionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListTransactionsParamsWithTimeout creates a new ListTransactionsParams object
// with the ability to set a timeout on a request.
func NewListTransactionsParamsWithTimeout(timeout time.Duration) *ListTransactionsParams {
	return &ListTransactionsParams{
		timeout: timeout,
	}
}

// NewListTransactionsParamsWithContext creates a new ListTransactionsParams object
// with the ability to set a context for a request.
func NewListTransactionsParamsWithContext(ctx context.Context) *ListTransactionsParams {
	return &ListTransactionsParams{
		Context: ctx,
	}
}

// NewListTransactionsParamsWithHTTPClient creates a new ListTransactionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListTransactionsParamsWithHTTPClient(client *http.Client) *ListTransactionsParams {
	return &ListTransactionsParams{
		HTTPClient: client,
	}
}

/*
ListTransactionsParams contains all the parameters to send to the API endpoint

	for the list transactions operation.

	Typically these are written to a http.Request.
*/
type ListTransactionsParams struct {

	/* MarketplaceID.

	   The ID of the marketplace from which you want to retrieve transactions.
	*/
	MarketplaceID *string

	/* NextToken.

	   The response includes `nextToken` when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.
	*/
	NextToken *string

	/* PostedAfter.

	   The response includes financial events posted after (or on) this date. This date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format. The date-time must be more than two minutes before the time of the request.

	   Format: date-time
	*/
	PostedAfter strfmt.DateTime

	/* PostedBefore.

	     The response includes financial events posted before (but not on) this date. This date must be in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.

	The date-time must be later than `PostedAfter` and more than two minutes before the request was submitted. If `PostedAfter` and `PostedBefore` are more than 180 days apart, the response is empty.

	**Default:** Two minutes before the time of the request.

	     Format: date-time
	*/
	PostedBefore *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTransactionsParams) WithDefaults() *ListTransactionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list transactions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListTransactionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list transactions params
func (o *ListTransactionsParams) WithTimeout(timeout time.Duration) *ListTransactionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list transactions params
func (o *ListTransactionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list transactions params
func (o *ListTransactionsParams) WithContext(ctx context.Context) *ListTransactionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list transactions params
func (o *ListTransactionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list transactions params
func (o *ListTransactionsParams) WithHTTPClient(client *http.Client) *ListTransactionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list transactions params
func (o *ListTransactionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMarketplaceID adds the marketplaceID to the list transactions params
func (o *ListTransactionsParams) WithMarketplaceID(marketplaceID *string) *ListTransactionsParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the list transactions params
func (o *ListTransactionsParams) SetMarketplaceID(marketplaceID *string) {
	o.MarketplaceID = marketplaceID
}

// WithNextToken adds the nextToken to the list transactions params
func (o *ListTransactionsParams) WithNextToken(nextToken *string) *ListTransactionsParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the list transactions params
func (o *ListTransactionsParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithPostedAfter adds the postedAfter to the list transactions params
func (o *ListTransactionsParams) WithPostedAfter(postedAfter strfmt.DateTime) *ListTransactionsParams {
	o.SetPostedAfter(postedAfter)
	return o
}

// SetPostedAfter adds the postedAfter to the list transactions params
func (o *ListTransactionsParams) SetPostedAfter(postedAfter strfmt.DateTime) {
	o.PostedAfter = postedAfter
}

// WithPostedBefore adds the postedBefore to the list transactions params
func (o *ListTransactionsParams) WithPostedBefore(postedBefore *strfmt.DateTime) *ListTransactionsParams {
	o.SetPostedBefore(postedBefore)
	return o
}

// SetPostedBefore adds the postedBefore to the list transactions params
func (o *ListTransactionsParams) SetPostedBefore(postedBefore *strfmt.DateTime) {
	o.PostedBefore = postedBefore
}

// WriteToRequest writes these params to a swagger request
func (o *ListTransactionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MarketplaceID != nil {

		// query param marketplaceId
		var qrMarketplaceID string

		if o.MarketplaceID != nil {
			qrMarketplaceID = *o.MarketplaceID
		}
		qMarketplaceID := qrMarketplaceID
		if qMarketplaceID != "" {

			if err := r.SetQueryParam("marketplaceId", qMarketplaceID); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param nextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("nextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	// query param postedAfter
	qrPostedAfter := o.PostedAfter
	qPostedAfter := qrPostedAfter.String()
	if qPostedAfter != "" {

		if err := r.SetQueryParam("postedAfter", qPostedAfter); err != nil {
			return err
		}
	}

	if o.PostedBefore != nil {

		// query param postedBefore
		var qrPostedBefore strfmt.DateTime

		if o.PostedBefore != nil {
			qrPostedBefore = *o.PostedBefore
		}
		qPostedBefore := qrPostedBefore.String()
		if qPostedBefore != "" {

			if err := r.SetQueryParam("postedBefore", qPostedBefore); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
