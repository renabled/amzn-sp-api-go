// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipping_labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/vendorDirectFulfillmentShipping_2021-12-28/vendor_direct_fulfillment_shipping_2021_12_28_models"
)

// CreateShippingLabelsReader is a Reader for the CreateShippingLabels structure.
type CreateShippingLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateShippingLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateShippingLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateShippingLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateShippingLabelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateShippingLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateShippingLabelsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateShippingLabelsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateShippingLabelsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateShippingLabelsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateShippingLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateShippingLabelsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateShippingLabelsOK creates a CreateShippingLabelsOK with default headers values
func NewCreateShippingLabelsOK() *CreateShippingLabelsOK {
	return &CreateShippingLabelsOK{}
}

/*
CreateShippingLabelsOK describes a response with status code 200, with default header values.

Success.
*/
type CreateShippingLabelsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ShippingLabel
}

// IsSuccess returns true when this create shipping labels o k response has a 2xx status code
func (o *CreateShippingLabelsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create shipping labels o k response has a 3xx status code
func (o *CreateShippingLabelsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels o k response has a 4xx status code
func (o *CreateShippingLabelsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create shipping labels o k response has a 5xx status code
func (o *CreateShippingLabelsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels o k response a status code equal to that given
func (o *CreateShippingLabelsOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateShippingLabelsOK) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsOK  %+v", 200, o.Payload)
}

func (o *CreateShippingLabelsOK) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsOK  %+v", 200, o.Payload)
}

func (o *CreateShippingLabelsOK) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ShippingLabel {
	return o.Payload
}

func (o *CreateShippingLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ShippingLabel)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsBadRequest creates a CreateShippingLabelsBadRequest with default headers values
func NewCreateShippingLabelsBadRequest() *CreateShippingLabelsBadRequest {
	return &CreateShippingLabelsBadRequest{}
}

/*
CreateShippingLabelsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateShippingLabelsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels bad request response has a 2xx status code
func (o *CreateShippingLabelsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels bad request response has a 3xx status code
func (o *CreateShippingLabelsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels bad request response has a 4xx status code
func (o *CreateShippingLabelsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels bad request response has a 5xx status code
func (o *CreateShippingLabelsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels bad request response a status code equal to that given
func (o *CreateShippingLabelsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateShippingLabelsBadRequest) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateShippingLabelsBadRequest) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *CreateShippingLabelsBadRequest) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsForbidden creates a CreateShippingLabelsForbidden with default headers values
func NewCreateShippingLabelsForbidden() *CreateShippingLabelsForbidden {
	return &CreateShippingLabelsForbidden{}
}

/*
CreateShippingLabelsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateShippingLabelsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels forbidden response has a 2xx status code
func (o *CreateShippingLabelsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels forbidden response has a 3xx status code
func (o *CreateShippingLabelsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels forbidden response has a 4xx status code
func (o *CreateShippingLabelsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels forbidden response has a 5xx status code
func (o *CreateShippingLabelsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels forbidden response a status code equal to that given
func (o *CreateShippingLabelsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateShippingLabelsForbidden) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsForbidden  %+v", 403, o.Payload)
}

func (o *CreateShippingLabelsForbidden) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsForbidden  %+v", 403, o.Payload)
}

func (o *CreateShippingLabelsForbidden) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsNotFound creates a CreateShippingLabelsNotFound with default headers values
func NewCreateShippingLabelsNotFound() *CreateShippingLabelsNotFound {
	return &CreateShippingLabelsNotFound{}
}

/*
CreateShippingLabelsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateShippingLabelsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels not found response has a 2xx status code
func (o *CreateShippingLabelsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels not found response has a 3xx status code
func (o *CreateShippingLabelsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels not found response has a 4xx status code
func (o *CreateShippingLabelsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels not found response has a 5xx status code
func (o *CreateShippingLabelsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels not found response a status code equal to that given
func (o *CreateShippingLabelsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateShippingLabelsNotFound) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsNotFound  %+v", 404, o.Payload)
}

func (o *CreateShippingLabelsNotFound) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsNotFound  %+v", 404, o.Payload)
}

func (o *CreateShippingLabelsNotFound) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsConflict creates a CreateShippingLabelsConflict with default headers values
func NewCreateShippingLabelsConflict() *CreateShippingLabelsConflict {
	return &CreateShippingLabelsConflict{}
}

/*
CreateShippingLabelsConflict describes a response with status code 409, with default header values.

The request conflicts with the current state of the resource (shipment).
*/
type CreateShippingLabelsConflict struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels conflict response has a 2xx status code
func (o *CreateShippingLabelsConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels conflict response has a 3xx status code
func (o *CreateShippingLabelsConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels conflict response has a 4xx status code
func (o *CreateShippingLabelsConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels conflict response has a 5xx status code
func (o *CreateShippingLabelsConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels conflict response a status code equal to that given
func (o *CreateShippingLabelsConflict) IsCode(code int) bool {
	return code == 409
}

func (o *CreateShippingLabelsConflict) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsConflict  %+v", 409, o.Payload)
}

func (o *CreateShippingLabelsConflict) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsConflict  %+v", 409, o.Payload)
}

func (o *CreateShippingLabelsConflict) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsRequestEntityTooLarge creates a CreateShippingLabelsRequestEntityTooLarge with default headers values
func NewCreateShippingLabelsRequestEntityTooLarge() *CreateShippingLabelsRequestEntityTooLarge {
	return &CreateShippingLabelsRequestEntityTooLarge{}
}

/*
CreateShippingLabelsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateShippingLabelsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels request entity too large response has a 2xx status code
func (o *CreateShippingLabelsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels request entity too large response has a 3xx status code
func (o *CreateShippingLabelsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels request entity too large response has a 4xx status code
func (o *CreateShippingLabelsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels request entity too large response has a 5xx status code
func (o *CreateShippingLabelsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels request entity too large response a status code equal to that given
func (o *CreateShippingLabelsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateShippingLabelsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateShippingLabelsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateShippingLabelsRequestEntityTooLarge) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsUnsupportedMediaType creates a CreateShippingLabelsUnsupportedMediaType with default headers values
func NewCreateShippingLabelsUnsupportedMediaType() *CreateShippingLabelsUnsupportedMediaType {
	return &CreateShippingLabelsUnsupportedMediaType{}
}

/*
CreateShippingLabelsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateShippingLabelsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels unsupported media type response has a 2xx status code
func (o *CreateShippingLabelsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels unsupported media type response has a 3xx status code
func (o *CreateShippingLabelsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels unsupported media type response has a 4xx status code
func (o *CreateShippingLabelsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels unsupported media type response has a 5xx status code
func (o *CreateShippingLabelsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels unsupported media type response a status code equal to that given
func (o *CreateShippingLabelsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateShippingLabelsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateShippingLabelsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateShippingLabelsUnsupportedMediaType) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsTooManyRequests creates a CreateShippingLabelsTooManyRequests with default headers values
func NewCreateShippingLabelsTooManyRequests() *CreateShippingLabelsTooManyRequests {
	return &CreateShippingLabelsTooManyRequests{}
}

/*
CreateShippingLabelsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateShippingLabelsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels too many requests response has a 2xx status code
func (o *CreateShippingLabelsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels too many requests response has a 3xx status code
func (o *CreateShippingLabelsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels too many requests response has a 4xx status code
func (o *CreateShippingLabelsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipping labels too many requests response has a 5xx status code
func (o *CreateShippingLabelsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipping labels too many requests response a status code equal to that given
func (o *CreateShippingLabelsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateShippingLabelsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateShippingLabelsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateShippingLabelsTooManyRequests) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsInternalServerError creates a CreateShippingLabelsInternalServerError with default headers values
func NewCreateShippingLabelsInternalServerError() *CreateShippingLabelsInternalServerError {
	return &CreateShippingLabelsInternalServerError{}
}

/*
CreateShippingLabelsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateShippingLabelsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels internal server error response has a 2xx status code
func (o *CreateShippingLabelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels internal server error response has a 3xx status code
func (o *CreateShippingLabelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels internal server error response has a 4xx status code
func (o *CreateShippingLabelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create shipping labels internal server error response has a 5xx status code
func (o *CreateShippingLabelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create shipping labels internal server error response a status code equal to that given
func (o *CreateShippingLabelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateShippingLabelsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateShippingLabelsInternalServerError) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateShippingLabelsInternalServerError) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShippingLabelsServiceUnavailable creates a CreateShippingLabelsServiceUnavailable with default headers values
func NewCreateShippingLabelsServiceUnavailable() *CreateShippingLabelsServiceUnavailable {
	return &CreateShippingLabelsServiceUnavailable{}
}

/*
CreateShippingLabelsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateShippingLabelsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this create shipping labels service unavailable response has a 2xx status code
func (o *CreateShippingLabelsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipping labels service unavailable response has a 3xx status code
func (o *CreateShippingLabelsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipping labels service unavailable response has a 4xx status code
func (o *CreateShippingLabelsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create shipping labels service unavailable response has a 5xx status code
func (o *CreateShippingLabelsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create shipping labels service unavailable response a status code equal to that given
func (o *CreateShippingLabelsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateShippingLabelsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateShippingLabelsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/2021-12-28/shippingLabels/{purchaseOrderNumber}][%d] createShippingLabelsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateShippingLabelsServiceUnavailable) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *CreateShippingLabelsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
