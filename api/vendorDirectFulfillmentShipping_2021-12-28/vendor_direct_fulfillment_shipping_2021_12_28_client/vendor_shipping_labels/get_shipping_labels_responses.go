// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipping_labels

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/vendorDirectFulfillmentShipping_2021-12-28/vendor_direct_fulfillment_shipping_2021_12_28_models"
)

// GetShippingLabelsReader is a Reader for the GetShippingLabels structure.
type GetShippingLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShippingLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShippingLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShippingLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShippingLabelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShippingLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetShippingLabelsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShippingLabelsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShippingLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShippingLabelsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShippingLabelsOK creates a GetShippingLabelsOK with default headers values
func NewGetShippingLabelsOK() *GetShippingLabelsOK {
	return &GetShippingLabelsOK{}
}

/*
GetShippingLabelsOK describes a response with status code 200, with default header values.

Success.
*/
type GetShippingLabelsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ShippingLabelList
}

// IsSuccess returns true when this get shipping labels o k response has a 2xx status code
func (o *GetShippingLabelsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get shipping labels o k response has a 3xx status code
func (o *GetShippingLabelsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels o k response has a 4xx status code
func (o *GetShippingLabelsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipping labels o k response has a 5xx status code
func (o *GetShippingLabelsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipping labels o k response a status code equal to that given
func (o *GetShippingLabelsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetShippingLabelsOK) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsOK  %+v", 200, o.Payload)
}

func (o *GetShippingLabelsOK) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsOK  %+v", 200, o.Payload)
}

func (o *GetShippingLabelsOK) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ShippingLabelList {
	return o.Payload
}

func (o *GetShippingLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ShippingLabelList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsBadRequest creates a GetShippingLabelsBadRequest with default headers values
func NewGetShippingLabelsBadRequest() *GetShippingLabelsBadRequest {
	return &GetShippingLabelsBadRequest{}
}

/*
GetShippingLabelsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShippingLabelsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels bad request response has a 2xx status code
func (o *GetShippingLabelsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels bad request response has a 3xx status code
func (o *GetShippingLabelsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels bad request response has a 4xx status code
func (o *GetShippingLabelsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipping labels bad request response has a 5xx status code
func (o *GetShippingLabelsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipping labels bad request response a status code equal to that given
func (o *GetShippingLabelsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetShippingLabelsBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *GetShippingLabelsBadRequest) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsBadRequest  %+v", 400, o.Payload)
}

func (o *GetShippingLabelsBadRequest) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsForbidden creates a GetShippingLabelsForbidden with default headers values
func NewGetShippingLabelsForbidden() *GetShippingLabelsForbidden {
	return &GetShippingLabelsForbidden{}
}

/*
GetShippingLabelsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetShippingLabelsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels forbidden response has a 2xx status code
func (o *GetShippingLabelsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels forbidden response has a 3xx status code
func (o *GetShippingLabelsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels forbidden response has a 4xx status code
func (o *GetShippingLabelsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipping labels forbidden response has a 5xx status code
func (o *GetShippingLabelsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipping labels forbidden response a status code equal to that given
func (o *GetShippingLabelsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetShippingLabelsForbidden) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsForbidden  %+v", 403, o.Payload)
}

func (o *GetShippingLabelsForbidden) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsForbidden  %+v", 403, o.Payload)
}

func (o *GetShippingLabelsForbidden) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsNotFound creates a GetShippingLabelsNotFound with default headers values
func NewGetShippingLabelsNotFound() *GetShippingLabelsNotFound {
	return &GetShippingLabelsNotFound{}
}

/*
GetShippingLabelsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetShippingLabelsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels not found response has a 2xx status code
func (o *GetShippingLabelsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels not found response has a 3xx status code
func (o *GetShippingLabelsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels not found response has a 4xx status code
func (o *GetShippingLabelsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipping labels not found response has a 5xx status code
func (o *GetShippingLabelsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipping labels not found response a status code equal to that given
func (o *GetShippingLabelsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetShippingLabelsNotFound) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsNotFound  %+v", 404, o.Payload)
}

func (o *GetShippingLabelsNotFound) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsNotFound  %+v", 404, o.Payload)
}

func (o *GetShippingLabelsNotFound) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsUnsupportedMediaType creates a GetShippingLabelsUnsupportedMediaType with default headers values
func NewGetShippingLabelsUnsupportedMediaType() *GetShippingLabelsUnsupportedMediaType {
	return &GetShippingLabelsUnsupportedMediaType{}
}

/*
GetShippingLabelsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetShippingLabelsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels unsupported media type response has a 2xx status code
func (o *GetShippingLabelsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels unsupported media type response has a 3xx status code
func (o *GetShippingLabelsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels unsupported media type response has a 4xx status code
func (o *GetShippingLabelsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipping labels unsupported media type response has a 5xx status code
func (o *GetShippingLabelsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipping labels unsupported media type response a status code equal to that given
func (o *GetShippingLabelsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetShippingLabelsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShippingLabelsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShippingLabelsUnsupportedMediaType) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsTooManyRequests creates a GetShippingLabelsTooManyRequests with default headers values
func NewGetShippingLabelsTooManyRequests() *GetShippingLabelsTooManyRequests {
	return &GetShippingLabelsTooManyRequests{}
}

/*
GetShippingLabelsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShippingLabelsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels too many requests response has a 2xx status code
func (o *GetShippingLabelsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels too many requests response has a 3xx status code
func (o *GetShippingLabelsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels too many requests response has a 4xx status code
func (o *GetShippingLabelsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipping labels too many requests response has a 5xx status code
func (o *GetShippingLabelsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipping labels too many requests response a status code equal to that given
func (o *GetShippingLabelsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetShippingLabelsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShippingLabelsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShippingLabelsTooManyRequests) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsInternalServerError creates a GetShippingLabelsInternalServerError with default headers values
func NewGetShippingLabelsInternalServerError() *GetShippingLabelsInternalServerError {
	return &GetShippingLabelsInternalServerError{}
}

/*
GetShippingLabelsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetShippingLabelsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels internal server error response has a 2xx status code
func (o *GetShippingLabelsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels internal server error response has a 3xx status code
func (o *GetShippingLabelsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels internal server error response has a 4xx status code
func (o *GetShippingLabelsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipping labels internal server error response has a 5xx status code
func (o *GetShippingLabelsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipping labels internal server error response a status code equal to that given
func (o *GetShippingLabelsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetShippingLabelsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShippingLabelsInternalServerError) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShippingLabelsInternalServerError) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShippingLabelsServiceUnavailable creates a GetShippingLabelsServiceUnavailable with default headers values
func NewGetShippingLabelsServiceUnavailable() *GetShippingLabelsServiceUnavailable {
	return &GetShippingLabelsServiceUnavailable{}
}

/*
GetShippingLabelsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShippingLabelsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get shipping labels service unavailable response has a 2xx status code
func (o *GetShippingLabelsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipping labels service unavailable response has a 3xx status code
func (o *GetShippingLabelsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipping labels service unavailable response has a 4xx status code
func (o *GetShippingLabelsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipping labels service unavailable response has a 5xx status code
func (o *GetShippingLabelsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipping labels service unavailable response a status code equal to that given
func (o *GetShippingLabelsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetShippingLabelsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShippingLabelsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/shipping/2021-12-28/shippingLabels][%d] getShippingLabelsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShippingLabelsServiceUnavailable) GetPayload() *vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetShippingLabelsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
