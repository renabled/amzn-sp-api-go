// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_shipping_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentStatusUpdate Represents a shipment status update.
//
// swagger:model ShipmentStatusUpdate
type ShipmentStatusUpdate struct {

	// Purchase order number of the shipment for which to update the shipment status.
	// Required: true
	// Pattern: ^[a-zA-Z0-9]+$
	PurchaseOrderNumber *string `json:"purchaseOrderNumber"`

	// ID of the selling party or vendor.
	// Required: true
	SellingParty *PartyIdentification `json:"sellingParty"`

	// Warehouse code of vendor.
	// Required: true
	ShipFromParty *PartyIdentification `json:"shipFromParty"`

	// Provide the details about the status of the shipment at that particular point of time.
	// Required: true
	StatusUpdateDetails *StatusUpdateDetails `json:"statusUpdateDetails"`
}

// Validate validates this shipment status update
func (m *ShipmentStatusUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePurchaseOrderNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusUpdateDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentStatusUpdate) validatePurchaseOrderNumber(formats strfmt.Registry) error {

	if err := validate.Required("purchaseOrderNumber", "body", m.PurchaseOrderNumber); err != nil {
		return err
	}

	if err := validate.Pattern("purchaseOrderNumber", "body", *m.PurchaseOrderNumber, `^[a-zA-Z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentStatusUpdate) validateSellingParty(formats strfmt.Registry) error {

	if err := validate.Required("sellingParty", "body", m.SellingParty); err != nil {
		return err
	}

	if m.SellingParty != nil {
		if err := m.SellingParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentStatusUpdate) validateShipFromParty(formats strfmt.Registry) error {

	if err := validate.Required("shipFromParty", "body", m.ShipFromParty); err != nil {
		return err
	}

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentStatusUpdate) validateStatusUpdateDetails(formats strfmt.Registry) error {

	if err := validate.Required("statusUpdateDetails", "body", m.StatusUpdateDetails); err != nil {
		return err
	}

	if m.StatusUpdateDetails != nil {
		if err := m.StatusUpdateDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusUpdateDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusUpdateDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment status update based on the context it is used
func (m *ShipmentStatusUpdate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSellingParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusUpdateDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentStatusUpdate) contextValidateSellingParty(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingParty != nil {
		if err := m.SellingParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentStatusUpdate) contextValidateShipFromParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentStatusUpdate) contextValidateStatusUpdateDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusUpdateDetails != nil {
		if err := m.StatusUpdateDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusUpdateDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusUpdateDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentStatusUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentStatusUpdate) UnmarshalBinary(b []byte) error {
	var res ShipmentStatusUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
