// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_shipping_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentDetails Details about a shipment.
//
// swagger:model ShipmentDetails
type ShipmentDetails struct {

	// Date on which the shipment is expected to reach the buyer's warehouse. It needs to be an estimate based on the average transit time between the ship-from location and the destination. The exact appointment time will be provided by buyer and is potentially not known when creating the shipment confirmation.
	// Format: date-time
	EstimatedDeliveryDate strfmt.DateTime `json:"estimatedDeliveryDate,omitempty"`

	// Provide the priority of the shipment.
	IsPriorityShipment bool `json:"isPriorityShipment,omitempty"`

	// Indicate the shipment status.
	// Required: true
	// Enum: [SHIPPED FLOOR_DENIAL]
	ShipmentStatus *string `json:"shipmentStatus"`

	// This field indicates the date of the departure of the shipment from vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the Shipment Confirmation should not be in the future.
	// Required: true
	// Format: date-time
	ShippedDate *strfmt.DateTime `json:"shippedDate"`

	// The vendor order number is a unique identifier generated by a vendor for their reference.
	VendorOrderNumber string `json:"vendorOrderNumber,omitempty"`
}

// Validate validates this shipment details
func (m *ShipmentDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEstimatedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentDetails) validateEstimatedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("estimatedDeliveryDate", "body", "date-time", m.EstimatedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var shipmentDetailsTypeShipmentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHIPPED","FLOOR_DENIAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentDetailsTypeShipmentStatusPropEnum = append(shipmentDetailsTypeShipmentStatusPropEnum, v)
	}
}

const (

	// ShipmentDetailsShipmentStatusSHIPPED captures enum value "SHIPPED"
	ShipmentDetailsShipmentStatusSHIPPED string = "SHIPPED"

	// ShipmentDetailsShipmentStatusFLOORDENIAL captures enum value "FLOOR_DENIAL"
	ShipmentDetailsShipmentStatusFLOORDENIAL string = "FLOOR_DENIAL"
)

// prop value enum
func (m *ShipmentDetails) validateShipmentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shipmentDetailsTypeShipmentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShipmentDetails) validateShipmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateShipmentStatusEnum("shipmentStatus", "body", *m.ShipmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDetails) validateShippedDate(formats strfmt.Registry) error {

	if err := validate.Required("shippedDate", "body", m.ShippedDate); err != nil {
		return err
	}

	if err := validate.FormatOf("shippedDate", "body", "date-time", m.ShippedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shipment details based on context it is used
func (m *ShipmentDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentDetails) UnmarshalBinary(b []byte) error {
	var res ShipmentDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
