// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_shipping_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentSchedule Details about the estimated delivery window.
//
// swagger:model ShipmentSchedule
type ShipmentSchedule struct {

	// This field indicates the date and time at the end of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
	// Format: date-time
	ApptWindowEndDateTime strfmt.DateTime `json:"apptWindowEndDateTime,omitempty"`

	// This field indicates the date and time at the start of the appointment window scheduled to deliver the shipment. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
	// Format: date-time
	ApptWindowStartDateTime strfmt.DateTime `json:"apptWindowStartDateTime,omitempty"`

	// Date on which the shipment is expected to reach the customer delivery location. This field is expected to be in ISO-8601 date/time format, with UTC time zone or UTC offset. For example, 2020-07-16T23:00:00Z or 2020-07-16T23:00:00+01:00.
	// Format: date-time
	EstimatedDeliveryDateTime strfmt.DateTime `json:"estimatedDeliveryDateTime,omitempty"`
}

// Validate validates this shipment schedule
func (m *ShipmentSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApptWindowEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApptWindowStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedDeliveryDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentSchedule) validateApptWindowEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ApptWindowEndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("apptWindowEndDateTime", "body", "date-time", m.ApptWindowEndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentSchedule) validateApptWindowStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ApptWindowStartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("apptWindowStartDateTime", "body", "date-time", m.ApptWindowStartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentSchedule) validateEstimatedDeliveryDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedDeliveryDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("estimatedDeliveryDateTime", "body", "date-time", m.EstimatedDeliveryDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this shipment schedule based on context it is used
func (m *ShipmentSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentSchedule) UnmarshalBinary(b []byte) error {
	var res ShipmentSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
