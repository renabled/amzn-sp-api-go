// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_shipping_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShippingLabel shipping label
//
// swagger:model ShippingLabel
type ShippingLabel struct {

	// Provides the details of the packages in this shipment.
	// Required: true
	LabelData []*LabelData `json:"labelData"`

	// Format of the label.
	// Required: true
	// Enum: [PNG ZPL]
	LabelFormat *string `json:"labelFormat"`

	// This field will contain the Purchase Order Number for this order.
	// Required: true
	// Pattern: ^[a-zA-Z0-9]+$
	PurchaseOrderNumber *string `json:"purchaseOrderNumber"`

	// ID of the selling party or vendor.
	// Required: true
	SellingParty *PartyIdentification `json:"sellingParty"`

	// Warehouse code of vendor.
	// Required: true
	ShipFromParty *PartyIdentification `json:"shipFromParty"`
}

// Validate validates this shipping label
func (m *ShippingLabel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseOrderNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromParty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingLabel) validateLabelData(formats strfmt.Registry) error {

	if err := validate.Required("labelData", "body", m.LabelData); err != nil {
		return err
	}

	for i := 0; i < len(m.LabelData); i++ {
		if swag.IsZero(m.LabelData[i]) { // not required
			continue
		}

		if m.LabelData[i] != nil {
			if err := m.LabelData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var shippingLabelTypeLabelFormatPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PNG","ZPL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shippingLabelTypeLabelFormatPropEnum = append(shippingLabelTypeLabelFormatPropEnum, v)
	}
}

const (

	// ShippingLabelLabelFormatPNG captures enum value "PNG"
	ShippingLabelLabelFormatPNG string = "PNG"

	// ShippingLabelLabelFormatZPL captures enum value "ZPL"
	ShippingLabelLabelFormatZPL string = "ZPL"
)

// prop value enum
func (m *ShippingLabel) validateLabelFormatEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, shippingLabelTypeLabelFormatPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ShippingLabel) validateLabelFormat(formats strfmt.Registry) error {

	if err := validate.Required("labelFormat", "body", m.LabelFormat); err != nil {
		return err
	}

	// value enum
	if err := m.validateLabelFormatEnum("labelFormat", "body", *m.LabelFormat); err != nil {
		return err
	}

	return nil
}

func (m *ShippingLabel) validatePurchaseOrderNumber(formats strfmt.Registry) error {

	if err := validate.Required("purchaseOrderNumber", "body", m.PurchaseOrderNumber); err != nil {
		return err
	}

	if err := validate.Pattern("purchaseOrderNumber", "body", *m.PurchaseOrderNumber, `^[a-zA-Z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *ShippingLabel) validateSellingParty(formats strfmt.Registry) error {

	if err := validate.Required("sellingParty", "body", m.SellingParty); err != nil {
		return err
	}

	if m.SellingParty != nil {
		if err := m.SellingParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingLabel) validateShipFromParty(formats strfmt.Registry) error {

	if err := validate.Required("shipFromParty", "body", m.ShipFromParty); err != nil {
		return err
	}

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipping label based on the context it is used
func (m *ShippingLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingLabel) contextValidateLabelData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LabelData); i++ {

		if m.LabelData[i] != nil {
			if err := m.LabelData[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("labelData" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("labelData" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShippingLabel) contextValidateSellingParty(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingParty != nil {
		if err := m.SellingParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingLabel) contextValidateShipFromParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingLabel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingLabel) UnmarshalBinary(b []byte) error {
	var res ShippingLabel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
