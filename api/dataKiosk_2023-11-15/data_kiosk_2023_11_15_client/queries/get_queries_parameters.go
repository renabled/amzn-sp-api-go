// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetQueriesParams creates a new GetQueriesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetQueriesParams() *GetQueriesParams {
	return &GetQueriesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetQueriesParamsWithTimeout creates a new GetQueriesParams object
// with the ability to set a timeout on a request.
func NewGetQueriesParamsWithTimeout(timeout time.Duration) *GetQueriesParams {
	return &GetQueriesParams{
		timeout: timeout,
	}
}

// NewGetQueriesParamsWithContext creates a new GetQueriesParams object
// with the ability to set a context for a request.
func NewGetQueriesParamsWithContext(ctx context.Context) *GetQueriesParams {
	return &GetQueriesParams{
		Context: ctx,
	}
}

// NewGetQueriesParamsWithHTTPClient creates a new GetQueriesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetQueriesParamsWithHTTPClient(client *http.Client) *GetQueriesParams {
	return &GetQueriesParams{
		HTTPClient: client,
	}
}

/*
GetQueriesParams contains all the parameters to send to the API endpoint

	for the get queries operation.

	Typically these are written to a http.Request.
*/
type GetQueriesParams struct {

	/* CreatedSince.

	   The earliest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is 90 days ago.

	   Format: date-time
	*/
	CreatedSince *strfmt.DateTime

	/* CreatedUntil.

	   The latest query creation date and time for queries to include in the response, in ISO 8601 date time format. The default is the time of the `getQueries` request.

	   Format: date-time
	*/
	CreatedUntil *strfmt.DateTime

	/* PageSize.

	   The maximum number of queries to return in a single call.

	   Default: 10
	*/
	PageSize *int64

	/* PaginationToken.

	   A token to fetch a certain page of results when there are multiple pages of results available. The value of this token is fetched from the `pagination.nextToken` field returned in the `GetQueriesResponse` object. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of `pageSize` which can be modified between calls to `getQueries`. In the absence of this token value, `getQueries` returns the first page of results.
	*/
	PaginationToken *string

	/* ProcessingStatuses.

	   A list of processing statuses used to filter queries.
	*/
	ProcessingStatuses []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get queries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQueriesParams) WithDefaults() *GetQueriesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get queries params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetQueriesParams) SetDefaults() {
	var (
		pageSizeDefault = int64(10)
	)

	val := GetQueriesParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get queries params
func (o *GetQueriesParams) WithTimeout(timeout time.Duration) *GetQueriesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get queries params
func (o *GetQueriesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get queries params
func (o *GetQueriesParams) WithContext(ctx context.Context) *GetQueriesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get queries params
func (o *GetQueriesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get queries params
func (o *GetQueriesParams) WithHTTPClient(client *http.Client) *GetQueriesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get queries params
func (o *GetQueriesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreatedSince adds the createdSince to the get queries params
func (o *GetQueriesParams) WithCreatedSince(createdSince *strfmt.DateTime) *GetQueriesParams {
	o.SetCreatedSince(createdSince)
	return o
}

// SetCreatedSince adds the createdSince to the get queries params
func (o *GetQueriesParams) SetCreatedSince(createdSince *strfmt.DateTime) {
	o.CreatedSince = createdSince
}

// WithCreatedUntil adds the createdUntil to the get queries params
func (o *GetQueriesParams) WithCreatedUntil(createdUntil *strfmt.DateTime) *GetQueriesParams {
	o.SetCreatedUntil(createdUntil)
	return o
}

// SetCreatedUntil adds the createdUntil to the get queries params
func (o *GetQueriesParams) SetCreatedUntil(createdUntil *strfmt.DateTime) {
	o.CreatedUntil = createdUntil
}

// WithPageSize adds the pageSize to the get queries params
func (o *GetQueriesParams) WithPageSize(pageSize *int64) *GetQueriesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get queries params
func (o *GetQueriesParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPaginationToken adds the paginationToken to the get queries params
func (o *GetQueriesParams) WithPaginationToken(paginationToken *string) *GetQueriesParams {
	o.SetPaginationToken(paginationToken)
	return o
}

// SetPaginationToken adds the paginationToken to the get queries params
func (o *GetQueriesParams) SetPaginationToken(paginationToken *string) {
	o.PaginationToken = paginationToken
}

// WithProcessingStatuses adds the processingStatuses to the get queries params
func (o *GetQueriesParams) WithProcessingStatuses(processingStatuses []string) *GetQueriesParams {
	o.SetProcessingStatuses(processingStatuses)
	return o
}

// SetProcessingStatuses adds the processingStatuses to the get queries params
func (o *GetQueriesParams) SetProcessingStatuses(processingStatuses []string) {
	o.ProcessingStatuses = processingStatuses
}

// WriteToRequest writes these params to a swagger request
func (o *GetQueriesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreatedSince != nil {

		// query param createdSince
		var qrCreatedSince strfmt.DateTime

		if o.CreatedSince != nil {
			qrCreatedSince = *o.CreatedSince
		}
		qCreatedSince := qrCreatedSince.String()
		if qCreatedSince != "" {

			if err := r.SetQueryParam("createdSince", qCreatedSince); err != nil {
				return err
			}
		}
	}

	if o.CreatedUntil != nil {

		// query param createdUntil
		var qrCreatedUntil strfmt.DateTime

		if o.CreatedUntil != nil {
			qrCreatedUntil = *o.CreatedUntil
		}
		qCreatedUntil := qrCreatedUntil.String()
		if qCreatedUntil != "" {

			if err := r.SetQueryParam("createdUntil", qCreatedUntil); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PaginationToken != nil {

		// query param paginationToken
		var qrPaginationToken string

		if o.PaginationToken != nil {
			qrPaginationToken = *o.PaginationToken
		}
		qPaginationToken := qrPaginationToken
		if qPaginationToken != "" {

			if err := r.SetQueryParam("paginationToken", qPaginationToken); err != nil {
				return err
			}
		}
	}

	if o.ProcessingStatuses != nil {

		// binding items for processingStatuses
		joinedProcessingStatuses := o.bindParamProcessingStatuses(reg)

		// query array param processingStatuses
		if err := r.SetQueryParam("processingStatuses", joinedProcessingStatuses...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetQueries binds the parameter processingStatuses
func (o *GetQueriesParams) bindParamProcessingStatuses(formats strfmt.Registry) []string {
	processingStatusesIR := o.ProcessingStatuses

	var processingStatusesIC []string
	for _, processingStatusesIIR := range processingStatusesIR { // explode []string

		processingStatusesIIV := processingStatusesIIR // string as string
		processingStatusesIC = append(processingStatusesIC, processingStatusesIIV)
	}

	// items.CollectionFormat: ""
	processingStatusesIS := swag.JoinByFormat(processingStatusesIC, "")

	return processingStatusesIS
}
