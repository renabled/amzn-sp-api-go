// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/dataKiosk_2023-11-15/data_kiosk_2023_11_15_models"
)

// GetQueriesReader is a Reader for the GetQueries structure.
type GetQueriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQueriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQueriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetQueriesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetQueriesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetQueriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetQueriesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetQueriesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetQueriesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetQueriesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetQueriesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetQueriesOK creates a GetQueriesOK with default headers values
func NewGetQueriesOK() *GetQueriesOK {
	return &GetQueriesOK{}
}

/*
GetQueriesOK describes a response with status code 200, with default header values.

Success.
*/
type GetQueriesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.GetQueriesResponse
}

// IsSuccess returns true when this get queries o k response has a 2xx status code
func (o *GetQueriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get queries o k response has a 3xx status code
func (o *GetQueriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries o k response has a 4xx status code
func (o *GetQueriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get queries o k response has a 5xx status code
func (o *GetQueriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries o k response a status code equal to that given
func (o *GetQueriesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetQueriesOK) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesOK  %+v", 200, o.Payload)
}

func (o *GetQueriesOK) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesOK  %+v", 200, o.Payload)
}

func (o *GetQueriesOK) GetPayload() *data_kiosk_2023_11_15_models.GetQueriesResponse {
	return o.Payload
}

func (o *GetQueriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.GetQueriesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesBadRequest creates a GetQueriesBadRequest with default headers values
func NewGetQueriesBadRequest() *GetQueriesBadRequest {
	return &GetQueriesBadRequest{}
}

/*
GetQueriesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetQueriesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries bad request response has a 2xx status code
func (o *GetQueriesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries bad request response has a 3xx status code
func (o *GetQueriesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries bad request response has a 4xx status code
func (o *GetQueriesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get queries bad request response has a 5xx status code
func (o *GetQueriesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries bad request response a status code equal to that given
func (o *GetQueriesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetQueriesBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *GetQueriesBadRequest) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesBadRequest  %+v", 400, o.Payload)
}

func (o *GetQueriesBadRequest) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesUnauthorized creates a GetQueriesUnauthorized with default headers values
func NewGetQueriesUnauthorized() *GetQueriesUnauthorized {
	return &GetQueriesUnauthorized{}
}

/*
GetQueriesUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetQueriesUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries unauthorized response has a 2xx status code
func (o *GetQueriesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries unauthorized response has a 3xx status code
func (o *GetQueriesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries unauthorized response has a 4xx status code
func (o *GetQueriesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get queries unauthorized response has a 5xx status code
func (o *GetQueriesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries unauthorized response a status code equal to that given
func (o *GetQueriesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetQueriesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQueriesUnauthorized) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetQueriesUnauthorized) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesForbidden creates a GetQueriesForbidden with default headers values
func NewGetQueriesForbidden() *GetQueriesForbidden {
	return &GetQueriesForbidden{}
}

/*
GetQueriesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetQueriesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries forbidden response has a 2xx status code
func (o *GetQueriesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries forbidden response has a 3xx status code
func (o *GetQueriesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries forbidden response has a 4xx status code
func (o *GetQueriesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get queries forbidden response has a 5xx status code
func (o *GetQueriesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries forbidden response a status code equal to that given
func (o *GetQueriesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetQueriesForbidden) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesForbidden  %+v", 403, o.Payload)
}

func (o *GetQueriesForbidden) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesForbidden  %+v", 403, o.Payload)
}

func (o *GetQueriesForbidden) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesNotFound creates a GetQueriesNotFound with default headers values
func NewGetQueriesNotFound() *GetQueriesNotFound {
	return &GetQueriesNotFound{}
}

/*
GetQueriesNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetQueriesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries not found response has a 2xx status code
func (o *GetQueriesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries not found response has a 3xx status code
func (o *GetQueriesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries not found response has a 4xx status code
func (o *GetQueriesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get queries not found response has a 5xx status code
func (o *GetQueriesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries not found response a status code equal to that given
func (o *GetQueriesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetQueriesNotFound) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesNotFound  %+v", 404, o.Payload)
}

func (o *GetQueriesNotFound) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesNotFound  %+v", 404, o.Payload)
}

func (o *GetQueriesNotFound) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesUnsupportedMediaType creates a GetQueriesUnsupportedMediaType with default headers values
func NewGetQueriesUnsupportedMediaType() *GetQueriesUnsupportedMediaType {
	return &GetQueriesUnsupportedMediaType{}
}

/*
GetQueriesUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type GetQueriesUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries unsupported media type response has a 2xx status code
func (o *GetQueriesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries unsupported media type response has a 3xx status code
func (o *GetQueriesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries unsupported media type response has a 4xx status code
func (o *GetQueriesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get queries unsupported media type response has a 5xx status code
func (o *GetQueriesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries unsupported media type response a status code equal to that given
func (o *GetQueriesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetQueriesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetQueriesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetQueriesUnsupportedMediaType) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesTooManyRequests creates a GetQueriesTooManyRequests with default headers values
func NewGetQueriesTooManyRequests() *GetQueriesTooManyRequests {
	return &GetQueriesTooManyRequests{}
}

/*
GetQueriesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetQueriesTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries too many requests response has a 2xx status code
func (o *GetQueriesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries too many requests response has a 3xx status code
func (o *GetQueriesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries too many requests response has a 4xx status code
func (o *GetQueriesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get queries too many requests response has a 5xx status code
func (o *GetQueriesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get queries too many requests response a status code equal to that given
func (o *GetQueriesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetQueriesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetQueriesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetQueriesTooManyRequests) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesInternalServerError creates a GetQueriesInternalServerError with default headers values
func NewGetQueriesInternalServerError() *GetQueriesInternalServerError {
	return &GetQueriesInternalServerError{}
}

/*
GetQueriesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetQueriesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries internal server error response has a 2xx status code
func (o *GetQueriesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries internal server error response has a 3xx status code
func (o *GetQueriesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries internal server error response has a 4xx status code
func (o *GetQueriesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get queries internal server error response has a 5xx status code
func (o *GetQueriesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get queries internal server error response a status code equal to that given
func (o *GetQueriesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetQueriesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetQueriesInternalServerError) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetQueriesInternalServerError) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueriesServiceUnavailable creates a GetQueriesServiceUnavailable with default headers values
func NewGetQueriesServiceUnavailable() *GetQueriesServiceUnavailable {
	return &GetQueriesServiceUnavailable{}
}

/*
GetQueriesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetQueriesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get queries service unavailable response has a 2xx status code
func (o *GetQueriesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get queries service unavailable response has a 3xx status code
func (o *GetQueriesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get queries service unavailable response has a 4xx status code
func (o *GetQueriesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get queries service unavailable response has a 5xx status code
func (o *GetQueriesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get queries service unavailable response a status code equal to that given
func (o *GetQueriesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetQueriesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetQueriesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries][%d] getQueriesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetQueriesServiceUnavailable) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueriesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
