// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/dataKiosk_2023-11-15/data_kiosk_2023_11_15_models"
)

// GetDocumentReader is a Reader for the GetDocument structure.
type GetDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetDocumentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDocumentOK creates a GetDocumentOK with default headers values
func NewGetDocumentOK() *GetDocumentOK {
	return &GetDocumentOK{}
}

/*
GetDocumentOK describes a response with status code 200, with default header values.

Success.
*/
type GetDocumentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.GetDocumentResponse
}

// IsSuccess returns true when this get document o k response has a 2xx status code
func (o *GetDocumentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get document o k response has a 3xx status code
func (o *GetDocumentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document o k response has a 4xx status code
func (o *GetDocumentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get document o k response has a 5xx status code
func (o *GetDocumentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get document o k response a status code equal to that given
func (o *GetDocumentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetDocumentOK) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentOK  %+v", 200, o.Payload)
}

func (o *GetDocumentOK) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentOK  %+v", 200, o.Payload)
}

func (o *GetDocumentOK) GetPayload() *data_kiosk_2023_11_15_models.GetDocumentResponse {
	return o.Payload
}

func (o *GetDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.GetDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentBadRequest creates a GetDocumentBadRequest with default headers values
func NewGetDocumentBadRequest() *GetDocumentBadRequest {
	return &GetDocumentBadRequest{}
}

/*
GetDocumentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetDocumentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document bad request response has a 2xx status code
func (o *GetDocumentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document bad request response has a 3xx status code
func (o *GetDocumentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document bad request response has a 4xx status code
func (o *GetDocumentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get document bad request response has a 5xx status code
func (o *GetDocumentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get document bad request response a status code equal to that given
func (o *GetDocumentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetDocumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetDocumentBadRequest) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetDocumentBadRequest) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentForbidden creates a GetDocumentForbidden with default headers values
func NewGetDocumentForbidden() *GetDocumentForbidden {
	return &GetDocumentForbidden{}
}

/*
GetDocumentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetDocumentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document forbidden response has a 2xx status code
func (o *GetDocumentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document forbidden response has a 3xx status code
func (o *GetDocumentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document forbidden response has a 4xx status code
func (o *GetDocumentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get document forbidden response has a 5xx status code
func (o *GetDocumentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get document forbidden response a status code equal to that given
func (o *GetDocumentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GetDocumentForbidden) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GetDocumentForbidden) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentNotFound creates a GetDocumentNotFound with default headers values
func NewGetDocumentNotFound() *GetDocumentNotFound {
	return &GetDocumentNotFound{}
}

/*
GetDocumentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetDocumentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document not found response has a 2xx status code
func (o *GetDocumentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document not found response has a 3xx status code
func (o *GetDocumentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document not found response has a 4xx status code
func (o *GetDocumentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get document not found response has a 5xx status code
func (o *GetDocumentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get document not found response a status code equal to that given
func (o *GetDocumentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GetDocumentNotFound) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GetDocumentNotFound) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentRequestEntityTooLarge creates a GetDocumentRequestEntityTooLarge with default headers values
func NewGetDocumentRequestEntityTooLarge() *GetDocumentRequestEntityTooLarge {
	return &GetDocumentRequestEntityTooLarge{}
}

/*
GetDocumentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetDocumentRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document request entity too large response has a 2xx status code
func (o *GetDocumentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document request entity too large response has a 3xx status code
func (o *GetDocumentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document request entity too large response has a 4xx status code
func (o *GetDocumentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get document request entity too large response has a 5xx status code
func (o *GetDocumentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get document request entity too large response a status code equal to that given
func (o *GetDocumentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetDocumentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDocumentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDocumentRequestEntityTooLarge) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentUnsupportedMediaType creates a GetDocumentUnsupportedMediaType with default headers values
func NewGetDocumentUnsupportedMediaType() *GetDocumentUnsupportedMediaType {
	return &GetDocumentUnsupportedMediaType{}
}

/*
GetDocumentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetDocumentUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document unsupported media type response has a 2xx status code
func (o *GetDocumentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document unsupported media type response has a 3xx status code
func (o *GetDocumentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document unsupported media type response has a 4xx status code
func (o *GetDocumentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get document unsupported media type response has a 5xx status code
func (o *GetDocumentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get document unsupported media type response a status code equal to that given
func (o *GetDocumentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDocumentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDocumentUnsupportedMediaType) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentTooManyRequests creates a GetDocumentTooManyRequests with default headers values
func NewGetDocumentTooManyRequests() *GetDocumentTooManyRequests {
	return &GetDocumentTooManyRequests{}
}

/*
GetDocumentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetDocumentTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document too many requests response has a 2xx status code
func (o *GetDocumentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document too many requests response has a 3xx status code
func (o *GetDocumentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document too many requests response has a 4xx status code
func (o *GetDocumentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get document too many requests response has a 5xx status code
func (o *GetDocumentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get document too many requests response a status code equal to that given
func (o *GetDocumentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDocumentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDocumentTooManyRequests) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentInternalServerError creates a GetDocumentInternalServerError with default headers values
func NewGetDocumentInternalServerError() *GetDocumentInternalServerError {
	return &GetDocumentInternalServerError{}
}

/*
GetDocumentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetDocumentInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document internal server error response has a 2xx status code
func (o *GetDocumentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document internal server error response has a 3xx status code
func (o *GetDocumentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document internal server error response has a 4xx status code
func (o *GetDocumentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get document internal server error response has a 5xx status code
func (o *GetDocumentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get document internal server error response a status code equal to that given
func (o *GetDocumentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDocumentInternalServerError) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDocumentInternalServerError) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDocumentServiceUnavailable creates a GetDocumentServiceUnavailable with default headers values
func NewGetDocumentServiceUnavailable() *GetDocumentServiceUnavailable {
	return &GetDocumentServiceUnavailable{}
}

/*
GetDocumentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetDocumentServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get document service unavailable response has a 2xx status code
func (o *GetDocumentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get document service unavailable response has a 3xx status code
func (o *GetDocumentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get document service unavailable response has a 4xx status code
func (o *GetDocumentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get document service unavailable response has a 5xx status code
func (o *GetDocumentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get document service unavailable response a status code equal to that given
func (o *GetDocumentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDocumentServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/documents/{documentId}][%d] getDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDocumentServiceUnavailable) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
