// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/dataKiosk_2023-11-15/data_kiosk_2023_11_15_models"
)

// CancelQueryReader is a Reader for the CancelQuery structure.
type CancelQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCancelQueryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCancelQueryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCancelQueryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelQueryNoContent creates a CancelQueryNoContent with default headers values
func NewCancelQueryNoContent() *CancelQueryNoContent {
	return &CancelQueryNoContent{}
}

/*
CancelQueryNoContent describes a response with status code 204, with default header values.

Success.
*/
type CancelQueryNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this cancel query no content response has a 2xx status code
func (o *CancelQueryNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel query no content response has a 3xx status code
func (o *CancelQueryNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query no content response has a 4xx status code
func (o *CancelQueryNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel query no content response has a 5xx status code
func (o *CancelQueryNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query no content response a status code equal to that given
func (o *CancelQueryNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *CancelQueryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryNoContent ", 204)
}

func (o *CancelQueryNoContent) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryNoContent ", 204)
}

func (o *CancelQueryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewCancelQueryBadRequest creates a CancelQueryBadRequest with default headers values
func NewCancelQueryBadRequest() *CancelQueryBadRequest {
	return &CancelQueryBadRequest{}
}

/*
CancelQueryBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelQueryBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query bad request response has a 2xx status code
func (o *CancelQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query bad request response has a 3xx status code
func (o *CancelQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query bad request response has a 4xx status code
func (o *CancelQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel query bad request response has a 5xx status code
func (o *CancelQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query bad request response a status code equal to that given
func (o *CancelQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CancelQueryBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryBadRequest  %+v", 400, o.Payload)
}

func (o *CancelQueryBadRequest) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryBadRequest  %+v", 400, o.Payload)
}

func (o *CancelQueryBadRequest) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryForbidden creates a CancelQueryForbidden with default headers values
func NewCancelQueryForbidden() *CancelQueryForbidden {
	return &CancelQueryForbidden{}
}

/*
CancelQueryForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CancelQueryForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query forbidden response has a 2xx status code
func (o *CancelQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query forbidden response has a 3xx status code
func (o *CancelQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query forbidden response has a 4xx status code
func (o *CancelQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel query forbidden response has a 5xx status code
func (o *CancelQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query forbidden response a status code equal to that given
func (o *CancelQueryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CancelQueryForbidden) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryForbidden  %+v", 403, o.Payload)
}

func (o *CancelQueryForbidden) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryForbidden  %+v", 403, o.Payload)
}

func (o *CancelQueryForbidden) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryNotFound creates a CancelQueryNotFound with default headers values
func NewCancelQueryNotFound() *CancelQueryNotFound {
	return &CancelQueryNotFound{}
}

/*
CancelQueryNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CancelQueryNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query not found response has a 2xx status code
func (o *CancelQueryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query not found response has a 3xx status code
func (o *CancelQueryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query not found response has a 4xx status code
func (o *CancelQueryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel query not found response has a 5xx status code
func (o *CancelQueryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query not found response a status code equal to that given
func (o *CancelQueryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CancelQueryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryNotFound  %+v", 404, o.Payload)
}

func (o *CancelQueryNotFound) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryNotFound  %+v", 404, o.Payload)
}

func (o *CancelQueryNotFound) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryRequestEntityTooLarge creates a CancelQueryRequestEntityTooLarge with default headers values
func NewCancelQueryRequestEntityTooLarge() *CancelQueryRequestEntityTooLarge {
	return &CancelQueryRequestEntityTooLarge{}
}

/*
CancelQueryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CancelQueryRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query request entity too large response has a 2xx status code
func (o *CancelQueryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query request entity too large response has a 3xx status code
func (o *CancelQueryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query request entity too large response has a 4xx status code
func (o *CancelQueryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel query request entity too large response has a 5xx status code
func (o *CancelQueryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query request entity too large response a status code equal to that given
func (o *CancelQueryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CancelQueryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CancelQueryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CancelQueryRequestEntityTooLarge) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryUnsupportedMediaType creates a CancelQueryUnsupportedMediaType with default headers values
func NewCancelQueryUnsupportedMediaType() *CancelQueryUnsupportedMediaType {
	return &CancelQueryUnsupportedMediaType{}
}

/*
CancelQueryUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CancelQueryUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query unsupported media type response has a 2xx status code
func (o *CancelQueryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query unsupported media type response has a 3xx status code
func (o *CancelQueryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query unsupported media type response has a 4xx status code
func (o *CancelQueryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel query unsupported media type response has a 5xx status code
func (o *CancelQueryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query unsupported media type response a status code equal to that given
func (o *CancelQueryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CancelQueryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CancelQueryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CancelQueryUnsupportedMediaType) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryTooManyRequests creates a CancelQueryTooManyRequests with default headers values
func NewCancelQueryTooManyRequests() *CancelQueryTooManyRequests {
	return &CancelQueryTooManyRequests{}
}

/*
CancelQueryTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelQueryTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query too many requests response has a 2xx status code
func (o *CancelQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query too many requests response has a 3xx status code
func (o *CancelQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query too many requests response has a 4xx status code
func (o *CancelQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel query too many requests response has a 5xx status code
func (o *CancelQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel query too many requests response a status code equal to that given
func (o *CancelQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CancelQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelQueryTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelQueryTooManyRequests) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryInternalServerError creates a CancelQueryInternalServerError with default headers values
func NewCancelQueryInternalServerError() *CancelQueryInternalServerError {
	return &CancelQueryInternalServerError{}
}

/*
CancelQueryInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CancelQueryInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query internal server error response has a 2xx status code
func (o *CancelQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query internal server error response has a 3xx status code
func (o *CancelQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query internal server error response has a 4xx status code
func (o *CancelQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel query internal server error response has a 5xx status code
func (o *CancelQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel query internal server error response a status code equal to that given
func (o *CancelQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CancelQueryInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelQueryInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelQueryInternalServerError) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelQueryServiceUnavailable creates a CancelQueryServiceUnavailable with default headers values
func NewCancelQueryServiceUnavailable() *CancelQueryServiceUnavailable {
	return &CancelQueryServiceUnavailable{}
}

/*
CancelQueryServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelQueryServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this cancel query service unavailable response has a 2xx status code
func (o *CancelQueryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel query service unavailable response has a 3xx status code
func (o *CancelQueryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel query service unavailable response has a 4xx status code
func (o *CancelQueryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel query service unavailable response has a 5xx status code
func (o *CancelQueryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel query service unavailable response a status code equal to that given
func (o *CancelQueryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CancelQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelQueryServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /dataKiosk/2023-11-15/queries/{queryId}][%d] cancelQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelQueryServiceUnavailable) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *CancelQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
