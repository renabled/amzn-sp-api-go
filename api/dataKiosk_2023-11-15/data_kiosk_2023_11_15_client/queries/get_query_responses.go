// Code generated by go-swagger; DO NOT EDIT.

package queries

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/dataKiosk_2023-11-15/data_kiosk_2023_11_15_models"
)

// GetQueryReader is a Reader for the GetQuery structure.
type GetQueryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetQueryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetQueryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetQueryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetQueryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetQueryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetQueryRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetQueryUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetQueryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetQueryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetQueryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetQueryOK creates a GetQueryOK with default headers values
func NewGetQueryOK() *GetQueryOK {
	return &GetQueryOK{}
}

/*
GetQueryOK describes a response with status code 200, with default header values.

Success.
*/
type GetQueryOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.Query
}

// IsSuccess returns true when this get query o k response has a 2xx status code
func (o *GetQueryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get query o k response has a 3xx status code
func (o *GetQueryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query o k response has a 4xx status code
func (o *GetQueryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get query o k response has a 5xx status code
func (o *GetQueryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get query o k response a status code equal to that given
func (o *GetQueryOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetQueryOK) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryOK  %+v", 200, o.Payload)
}

func (o *GetQueryOK) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryOK  %+v", 200, o.Payload)
}

func (o *GetQueryOK) GetPayload() *data_kiosk_2023_11_15_models.Query {
	return o.Payload
}

func (o *GetQueryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.Query)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryBadRequest creates a GetQueryBadRequest with default headers values
func NewGetQueryBadRequest() *GetQueryBadRequest {
	return &GetQueryBadRequest{}
}

/*
GetQueryBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetQueryBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query bad request response has a 2xx status code
func (o *GetQueryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query bad request response has a 3xx status code
func (o *GetQueryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query bad request response has a 4xx status code
func (o *GetQueryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query bad request response has a 5xx status code
func (o *GetQueryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get query bad request response a status code equal to that given
func (o *GetQueryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetQueryBadRequest) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryBadRequest  %+v", 400, o.Payload)
}

func (o *GetQueryBadRequest) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryBadRequest  %+v", 400, o.Payload)
}

func (o *GetQueryBadRequest) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryForbidden creates a GetQueryForbidden with default headers values
func NewGetQueryForbidden() *GetQueryForbidden {
	return &GetQueryForbidden{}
}

/*
GetQueryForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetQueryForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query forbidden response has a 2xx status code
func (o *GetQueryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query forbidden response has a 3xx status code
func (o *GetQueryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query forbidden response has a 4xx status code
func (o *GetQueryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query forbidden response has a 5xx status code
func (o *GetQueryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get query forbidden response a status code equal to that given
func (o *GetQueryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetQueryForbidden) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryForbidden  %+v", 403, o.Payload)
}

func (o *GetQueryForbidden) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryForbidden  %+v", 403, o.Payload)
}

func (o *GetQueryForbidden) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryNotFound creates a GetQueryNotFound with default headers values
func NewGetQueryNotFound() *GetQueryNotFound {
	return &GetQueryNotFound{}
}

/*
GetQueryNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetQueryNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query not found response has a 2xx status code
func (o *GetQueryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query not found response has a 3xx status code
func (o *GetQueryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query not found response has a 4xx status code
func (o *GetQueryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query not found response has a 5xx status code
func (o *GetQueryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get query not found response a status code equal to that given
func (o *GetQueryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetQueryNotFound) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryNotFound  %+v", 404, o.Payload)
}

func (o *GetQueryNotFound) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryNotFound  %+v", 404, o.Payload)
}

func (o *GetQueryNotFound) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryRequestEntityTooLarge creates a GetQueryRequestEntityTooLarge with default headers values
func NewGetQueryRequestEntityTooLarge() *GetQueryRequestEntityTooLarge {
	return &GetQueryRequestEntityTooLarge{}
}

/*
GetQueryRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetQueryRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query request entity too large response has a 2xx status code
func (o *GetQueryRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query request entity too large response has a 3xx status code
func (o *GetQueryRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query request entity too large response has a 4xx status code
func (o *GetQueryRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query request entity too large response has a 5xx status code
func (o *GetQueryRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get query request entity too large response a status code equal to that given
func (o *GetQueryRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetQueryRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetQueryRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetQueryRequestEntityTooLarge) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryUnsupportedMediaType creates a GetQueryUnsupportedMediaType with default headers values
func NewGetQueryUnsupportedMediaType() *GetQueryUnsupportedMediaType {
	return &GetQueryUnsupportedMediaType{}
}

/*
GetQueryUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetQueryUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query unsupported media type response has a 2xx status code
func (o *GetQueryUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query unsupported media type response has a 3xx status code
func (o *GetQueryUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query unsupported media type response has a 4xx status code
func (o *GetQueryUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query unsupported media type response has a 5xx status code
func (o *GetQueryUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get query unsupported media type response a status code equal to that given
func (o *GetQueryUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetQueryUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetQueryUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetQueryUnsupportedMediaType) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryTooManyRequests creates a GetQueryTooManyRequests with default headers values
func NewGetQueryTooManyRequests() *GetQueryTooManyRequests {
	return &GetQueryTooManyRequests{}
}

/*
GetQueryTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetQueryTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query too many requests response has a 2xx status code
func (o *GetQueryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query too many requests response has a 3xx status code
func (o *GetQueryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query too many requests response has a 4xx status code
func (o *GetQueryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get query too many requests response has a 5xx status code
func (o *GetQueryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get query too many requests response a status code equal to that given
func (o *GetQueryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetQueryTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetQueryTooManyRequests) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetQueryTooManyRequests) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryInternalServerError creates a GetQueryInternalServerError with default headers values
func NewGetQueryInternalServerError() *GetQueryInternalServerError {
	return &GetQueryInternalServerError{}
}

/*
GetQueryInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetQueryInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query internal server error response has a 2xx status code
func (o *GetQueryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query internal server error response has a 3xx status code
func (o *GetQueryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query internal server error response has a 4xx status code
func (o *GetQueryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get query internal server error response has a 5xx status code
func (o *GetQueryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get query internal server error response a status code equal to that given
func (o *GetQueryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetQueryInternalServerError) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetQueryInternalServerError) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetQueryInternalServerError) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetQueryServiceUnavailable creates a GetQueryServiceUnavailable with default headers values
func NewGetQueryServiceUnavailable() *GetQueryServiceUnavailable {
	return &GetQueryServiceUnavailable{}
}

/*
GetQueryServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetQueryServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *data_kiosk_2023_11_15_models.ErrorList
}

// IsSuccess returns true when this get query service unavailable response has a 2xx status code
func (o *GetQueryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get query service unavailable response has a 3xx status code
func (o *GetQueryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get query service unavailable response has a 4xx status code
func (o *GetQueryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get query service unavailable response has a 5xx status code
func (o *GetQueryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get query service unavailable response a status code equal to that given
func (o *GetQueryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetQueryServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetQueryServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /dataKiosk/2023-11-15/queries/{queryId}][%d] getQueryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetQueryServiceUnavailable) GetPayload() *data_kiosk_2023_11_15_models.ErrorList {
	return o.Payload
}

func (o *GetQueryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(data_kiosk_2023_11_15_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
