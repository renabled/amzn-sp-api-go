// Code generated by go-swagger; DO NOT EDIT.

package data_kiosk_2023_11_15_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateQuerySpecification Information required to create the query.
//
// swagger:model CreateQuerySpecification
type CreateQuerySpecification struct {

	// A token to fetch a certain page of query results when there are multiple pages of query results available. The value of this token must be fetched from the `pagination.nextToken` field of the `Query` object, and the `query` field for this object must also be set to the `query` field of the same `Query` object. A `Query` object can be retrieved from either the `getQueries` or `getQuery` operation. In the absence of this token value, the first page of query results will be requested.
	PaginationToken string `json:"paginationToken,omitempty"`

	// The GraphQL query to submit. A query must be at most 8000 characters after unnecessary whitespace is removed.
	// Required: true
	Query *string `json:"query"`
}

// Validate validates this create query specification
func (m *CreateQuerySpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuery(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateQuerySpecification) validateQuery(formats strfmt.Registry) error {

	if err := validate.Required("query", "body", m.Query); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create query specification based on context it is used
func (m *CreateQuerySpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateQuerySpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateQuerySpecification) UnmarshalBinary(b []byte) error {
	var res CreateQuerySpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
