// Code generated by go-swagger; DO NOT EDIT.

package data_kiosk_2023_11_15_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetDocumentResponse The response for the `getDocument` operation.
//
// swagger:model GetDocumentResponse
type GetDocumentResponse struct {

	// The identifier for the Data Kiosk document. This identifier is unique only in combination with a selling partner account ID.
	// Required: true
	DocumentID *string `json:"documentId"`

	// A presigned URL that can be used to retrieve the Data Kiosk document. This URL expires after 5 minutes. If the Data Kiosk document is compressed, the `Content-Encoding` header will indicate the compression algorithm.
	//
	// **Note:** Most HTTP clients are capable of automatically decompressing downloaded files based on the `Content-Encoding` header.
	// Required: true
	DocumentURL *string `json:"documentUrl"`
}

// Validate validates this get document response
func (m *GetDocumentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDocumentURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetDocumentResponse) validateDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("documentId", "body", m.DocumentID); err != nil {
		return err
	}

	return nil
}

func (m *GetDocumentResponse) validateDocumentURL(formats strfmt.Registry) error {

	if err := validate.Required("documentUrl", "body", m.DocumentURL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get document response based on context it is used
func (m *GetDocumentResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetDocumentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetDocumentResponse) UnmarshalBinary(b []byte) error {
	var res GetDocumentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
