// Code generated by go-swagger; DO NOT EDIT.

package data_kiosk_2023_11_15_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetQueriesResponse The response for the `getQueries` operation.
//
// swagger:model GetQueriesResponse
type GetQueriesResponse struct {

	// pagination
	Pagination *GetQueriesResponsePagination `json:"pagination,omitempty"`

	// The Data Kiosk queries.
	// Required: true
	Queries QueryList `json:"queries"`
}

// Validate validates this get queries response
func (m *GetQueriesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQueries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetQueriesResponse) validatePagination(formats strfmt.Registry) error {
	if swag.IsZero(m.Pagination) { // not required
		return nil
	}

	if m.Pagination != nil {
		if err := m.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *GetQueriesResponse) validateQueries(formats strfmt.Registry) error {

	if err := validate.Required("queries", "body", m.Queries); err != nil {
		return err
	}

	if err := m.Queries.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queries")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("queries")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get queries response based on the context it is used
func (m *GetQueriesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQueries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetQueriesResponse) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if m.Pagination != nil {
		if err := m.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pagination")
			}
			return err
		}
	}

	return nil
}

func (m *GetQueriesResponse) contextValidateQueries(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Queries.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("queries")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("queries")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetQueriesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetQueriesResponse) UnmarshalBinary(b []byte) error {
	var res GetQueriesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetQueriesResponsePagination When a request has results that are not included in this response, pagination occurs. This means the results are divided into pages. To retrieve the next page, you must pass the `nextToken` as the `paginationToken` query parameter in the subsequent `getQueries` request. All other parameters must be provided with the same values that were provided with the request that generated this token, with the exception of `pageSize` which can be modified between calls to `getQueries`. When there are no more pages to fetch, the `nextToken` field will be absent.
//
// swagger:model GetQueriesResponsePagination
type GetQueriesResponsePagination struct {

	// A token that can be used to fetch the next page of results.
	NextToken string `json:"nextToken,omitempty"`
}

// Validate validates this get queries response pagination
func (m *GetQueriesResponsePagination) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get queries response pagination based on context it is used
func (m *GetQueriesResponsePagination) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetQueriesResponsePagination) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetQueriesResponsePagination) UnmarshalBinary(b []byte) error {
	var res GetQueriesResponsePagination
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
