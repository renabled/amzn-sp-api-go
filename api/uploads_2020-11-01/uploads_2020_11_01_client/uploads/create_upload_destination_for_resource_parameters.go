// Code generated by go-swagger; DO NOT EDIT.

package uploads

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateUploadDestinationForResourceParams creates a new CreateUploadDestinationForResourceParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCreateUploadDestinationForResourceParams() *CreateUploadDestinationForResourceParams {
	return &CreateUploadDestinationForResourceParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCreateUploadDestinationForResourceParamsWithTimeout creates a new CreateUploadDestinationForResourceParams object
// with the ability to set a timeout on a request.
func NewCreateUploadDestinationForResourceParamsWithTimeout(timeout time.Duration) *CreateUploadDestinationForResourceParams {
	return &CreateUploadDestinationForResourceParams{
		timeout: timeout,
	}
}

// NewCreateUploadDestinationForResourceParamsWithContext creates a new CreateUploadDestinationForResourceParams object
// with the ability to set a context for a request.
func NewCreateUploadDestinationForResourceParamsWithContext(ctx context.Context) *CreateUploadDestinationForResourceParams {
	return &CreateUploadDestinationForResourceParams{
		Context: ctx,
	}
}

// NewCreateUploadDestinationForResourceParamsWithHTTPClient creates a new CreateUploadDestinationForResourceParams object
// with the ability to set a custom HTTPClient for a request.
func NewCreateUploadDestinationForResourceParamsWithHTTPClient(client *http.Client) *CreateUploadDestinationForResourceParams {
	return &CreateUploadDestinationForResourceParams{
		HTTPClient: client,
	}
}

/* CreateUploadDestinationForResourceParams contains all the parameters to send to the API endpoint
   for the create upload destination for resource operation.

   Typically these are written to a http.Request.
*/
type CreateUploadDestinationForResourceParams struct {

	/* ContentMD5.

	   An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit.
	*/
	ContentMD5 string

	/* ContentType.

	   The content type of the file to be uploaded.
	*/
	ContentType *string

	/* MarketplaceIds.

	   A list of marketplace identifiers. This specifies the marketplaces where the upload will be available. Only one marketplace can be specified.
	*/
	MarketplaceIds []string

	/* Resource.

	   The resource for the upload destination that you are creating. For example, if you are creating an upload destination for the createLegalDisclosure operation of the Messaging API, the `{resource}` would be `/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure`, and the entire path would be `/uploads/2020-11-01/uploadDestinations/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure`. If you are creating an upload destination for an Aplus content document, the `{resource}` would be `aplus/2020-11-01/contentDocuments` and the path would be `/uploads/v1/uploadDestinations/aplus/2020-11-01/contentDocuments`.
	*/
	Resource string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the create upload destination for resource params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUploadDestinationForResourceParams) WithDefaults() *CreateUploadDestinationForResourceParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the create upload destination for resource params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CreateUploadDestinationForResourceParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithTimeout(timeout time.Duration) *CreateUploadDestinationForResourceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithContext(ctx context.Context) *CreateUploadDestinationForResourceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithHTTPClient(client *http.Client) *CreateUploadDestinationForResourceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentMD5 adds the contentMD5 to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithContentMD5(contentMD5 string) *CreateUploadDestinationForResourceParams {
	o.SetContentMD5(contentMD5)
	return o
}

// SetContentMD5 adds the contentMD5 to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetContentMD5(contentMD5 string) {
	o.ContentMD5 = contentMD5
}

// WithContentType adds the contentType to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithContentType(contentType *string) *CreateUploadDestinationForResourceParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithMarketplaceIds adds the marketplaceIds to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithMarketplaceIds(marketplaceIds []string) *CreateUploadDestinationForResourceParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithResource adds the resource to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) WithResource(resource string) *CreateUploadDestinationForResourceParams {
	o.SetResource(resource)
	return o
}

// SetResource adds the resource to the create upload destination for resource params
func (o *CreateUploadDestinationForResourceParams) SetResource(resource string) {
	o.Resource = resource
}

// WriteToRequest writes these params to a swagger request
func (o *CreateUploadDestinationForResourceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param contentMD5
	qrContentMD5 := o.ContentMD5
	qContentMD5 := qrContentMD5
	if qContentMD5 != "" {

		if err := r.SetQueryParam("contentMD5", qContentMD5); err != nil {
			return err
		}
	}

	if o.ContentType != nil {

		// query param contentType
		var qrContentType string

		if o.ContentType != nil {
			qrContentType = *o.ContentType
		}
		qContentType := qrContentType
		if qContentType != "" {

			if err := r.SetQueryParam("contentType", qContentType); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	// path param resource
	if err := r.SetPathParam("resource", o.Resource); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamCreateUploadDestinationForResource binds the parameter marketplaceIds
func (o *CreateUploadDestinationForResourceParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: ""
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "")

	return marketplaceIdsIS
}
