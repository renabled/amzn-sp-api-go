// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdhocDisbursementEvent An event related to an Adhoc Disbursement.
//
// swagger:model AdhocDisbursementEvent
type AdhocDisbursementEvent struct {

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// The amount of the transaction.
	TransactionAmount *Currency `json:"TransactionAmount,omitempty"`

	// The identifier for the transaction.
	TransactionID string `json:"TransactionId,omitempty"`

	// The type of transaction. For example, "Disbursed to Amazon Gift Card balance".
	TransactionType string `json:"TransactionType,omitempty"`
}

// Validate validates this adhoc disbursement event
func (m *AdhocDisbursementEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdhocDisbursementEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *AdhocDisbursementEvent) validateTransactionAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionAmount) { // not required
		return nil
	}

	if m.TransactionAmount != nil {
		if err := m.TransactionAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransactionAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransactionAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this adhoc disbursement event based on the context it is used
func (m *AdhocDisbursementEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdhocDisbursementEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *AdhocDisbursementEvent) contextValidateTransactionAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TransactionAmount != nil {
		if err := m.TransactionAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransactionAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransactionAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdhocDisbursementEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdhocDisbursementEvent) UnmarshalBinary(b []byte) error {
	var res AdhocDisbursementEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
