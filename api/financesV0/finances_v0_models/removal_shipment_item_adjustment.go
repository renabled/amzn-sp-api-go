// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemovalShipmentItemAdjustment Item-level information for a removal shipment item adjustment.
//
// swagger:model RemovalShipmentItemAdjustment
type RemovalShipmentItemAdjustment struct {

	// Adjusted quantity of `RemovalShipmentItemAdjustment` items.
	AdjustedQuantity int32 `json:"AdjustedQuantity,omitempty"`

	// The Amazon fulfillment network SKU for the item.
	FulfillmentNetworkSKU string `json:"FulfillmentNetworkSKU,omitempty"`

	// An identifier for an item in a removal shipment.
	RemovalShipmentItemID string `json:"RemovalShipmentItemId,omitempty"`

	// The total amount adjusted for disputed items.
	RevenueAdjustment *Currency `json:"RevenueAdjustment,omitempty"`

	// Adjustment on the tax collected amount on the adjusted revenue.
	TaxAmountAdjustment *Currency `json:"TaxAmountAdjustment,omitempty"`

	// The tax collection model that is applied to the item.
	//
	// Possible values:
	//
	// * `MarketplaceFacilitator`: Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
	// * `Standard`: Tax is paid to the seller and not remitted to the taxing authority by Amazon.
	TaxCollectionModel string `json:"TaxCollectionModel,omitempty"`

	// Adjustment of the tax that is withheld and remitted to the taxing authority by Amazon on behalf of the seller. If `TaxCollectionModel` = `MarketplaceFacilitator`, then `TaxWithheld` = `TaxAmount` (except when the `TaxWithheld` amount is a negative number). Otherwise, `TaxWithheld` = `0`.
	TaxWithheldAdjustment *Currency `json:"TaxWithheldAdjustment,omitempty"`
}

// Validate validates this removal shipment item adjustment
func (m *RemovalShipmentItemAdjustment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRevenueAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxAmountAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxWithheldAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemovalShipmentItemAdjustment) validateRevenueAdjustment(formats strfmt.Registry) error {
	if swag.IsZero(m.RevenueAdjustment) { // not required
		return nil
	}

	if m.RevenueAdjustment != nil {
		if err := m.RevenueAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RevenueAdjustment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RevenueAdjustment")
			}
			return err
		}
	}

	return nil
}

func (m *RemovalShipmentItemAdjustment) validateTaxAmountAdjustment(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxAmountAdjustment) { // not required
		return nil
	}

	if m.TaxAmountAdjustment != nil {
		if err := m.TaxAmountAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxAmountAdjustment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxAmountAdjustment")
			}
			return err
		}
	}

	return nil
}

func (m *RemovalShipmentItemAdjustment) validateTaxWithheldAdjustment(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxWithheldAdjustment) { // not required
		return nil
	}

	if m.TaxWithheldAdjustment != nil {
		if err := m.TaxWithheldAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxWithheldAdjustment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxWithheldAdjustment")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this removal shipment item adjustment based on the context it is used
func (m *RemovalShipmentItemAdjustment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRevenueAdjustment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxAmountAdjustment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxWithheldAdjustment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemovalShipmentItemAdjustment) contextValidateRevenueAdjustment(ctx context.Context, formats strfmt.Registry) error {

	if m.RevenueAdjustment != nil {
		if err := m.RevenueAdjustment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RevenueAdjustment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RevenueAdjustment")
			}
			return err
		}
	}

	return nil
}

func (m *RemovalShipmentItemAdjustment) contextValidateTaxAmountAdjustment(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxAmountAdjustment != nil {
		if err := m.TaxAmountAdjustment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxAmountAdjustment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxAmountAdjustment")
			}
			return err
		}
	}

	return nil
}

func (m *RemovalShipmentItemAdjustment) contextValidateTaxWithheldAdjustment(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxWithheldAdjustment != nil {
		if err := m.TaxWithheldAdjustment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxWithheldAdjustment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxWithheldAdjustment")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemovalShipmentItemAdjustment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemovalShipmentItemAdjustment) UnmarshalBinary(b []byte) error {
	var res RemovalShipmentItemAdjustment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
