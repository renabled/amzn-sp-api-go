// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DebtRecoveryEvent A debt payment or debt adjustment.
//
// swagger:model DebtRecoveryEvent
type DebtRecoveryEvent struct {

	// charge instrument list
	ChargeInstrumentList ChargeInstrumentList `json:"ChargeInstrumentList,omitempty"`

	// debt recovery item list
	DebtRecoveryItemList DebtRecoveryItemList `json:"DebtRecoveryItemList,omitempty"`

	// The debt recovery type.
	//
	// Possible values:
	//
	// * `DebtPayment`
	// * `DebtPaymentFailure`
	// * `DebtAdjustment`
	DebtRecoveryType string `json:"DebtRecoveryType,omitempty"`

	// The amount returned for overpayment.
	OverPaymentCredit *Currency `json:"OverPaymentCredit,omitempty"`

	// The amount applied for recovery.
	RecoveryAmount *Currency `json:"RecoveryAmount,omitempty"`
}

// Validate validates this debt recovery event
func (m *DebtRecoveryEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeInstrumentList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtRecoveryItemList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverPaymentCredit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtRecoveryEvent) validateChargeInstrumentList(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeInstrumentList) { // not required
		return nil
	}

	if err := m.ChargeInstrumentList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ChargeInstrumentList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ChargeInstrumentList")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryEvent) validateDebtRecoveryItemList(formats strfmt.Registry) error {
	if swag.IsZero(m.DebtRecoveryItemList) { // not required
		return nil
	}

	if err := m.DebtRecoveryItemList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DebtRecoveryItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("DebtRecoveryItemList")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryEvent) validateOverPaymentCredit(formats strfmt.Registry) error {
	if swag.IsZero(m.OverPaymentCredit) { // not required
		return nil
	}

	if m.OverPaymentCredit != nil {
		if err := m.OverPaymentCredit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OverPaymentCredit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OverPaymentCredit")
			}
			return err
		}
	}

	return nil
}

func (m *DebtRecoveryEvent) validateRecoveryAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryAmount) { // not required
		return nil
	}

	if m.RecoveryAmount != nil {
		if err := m.RecoveryAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RecoveryAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RecoveryAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this debt recovery event based on the context it is used
func (m *DebtRecoveryEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChargeInstrumentList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebtRecoveryItemList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverPaymentCredit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtRecoveryEvent) contextValidateChargeInstrumentList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ChargeInstrumentList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ChargeInstrumentList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ChargeInstrumentList")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryEvent) contextValidateDebtRecoveryItemList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DebtRecoveryItemList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DebtRecoveryItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("DebtRecoveryItemList")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryEvent) contextValidateOverPaymentCredit(ctx context.Context, formats strfmt.Registry) error {

	if m.OverPaymentCredit != nil {
		if err := m.OverPaymentCredit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OverPaymentCredit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OverPaymentCredit")
			}
			return err
		}
	}

	return nil
}

func (m *DebtRecoveryEvent) contextValidateRecoveryAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryAmount != nil {
		if err := m.RecoveryAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RecoveryAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RecoveryAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebtRecoveryEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebtRecoveryEvent) UnmarshalBinary(b []byte) error {
	var res DebtRecoveryEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
