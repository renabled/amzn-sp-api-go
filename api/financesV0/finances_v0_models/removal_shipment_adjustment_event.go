// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemovalShipmentAdjustmentEvent A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered).
//
// swagger:model RemovalShipmentAdjustmentEvent
type RemovalShipmentAdjustmentEvent struct {

	// The unique identifier for the adjustment event.
	AdjustmentEventID string `json:"AdjustmentEventId,omitempty"`

	// The merchant removal orderId.
	MerchantOrderID string `json:"MerchantOrderId,omitempty"`

	// The orderId for shipping inventory.
	OrderID string `json:"OrderId,omitempty"`

	// The date when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// A comma-delimited list of `RemovalShipmentItemAdjustment` details for FBA inventory.
	RemovalShipmentItemAdjustmentList []*RemovalShipmentItemAdjustment `json:"RemovalShipmentItemAdjustmentList"`

	// The type of removal order.
	//
	// Possible values:
	//
	// * `WHOLESALE_LIQUIDATION`.
	TransactionType string `json:"TransactionType,omitempty"`
}

// Validate validates this removal shipment adjustment event
func (m *RemovalShipmentAdjustmentEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalShipmentItemAdjustmentList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemovalShipmentAdjustmentEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RemovalShipmentAdjustmentEvent) validateRemovalShipmentItemAdjustmentList(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalShipmentItemAdjustmentList) { // not required
		return nil
	}

	for i := 0; i < len(m.RemovalShipmentItemAdjustmentList); i++ {
		if swag.IsZero(m.RemovalShipmentItemAdjustmentList[i]) { // not required
			continue
		}

		if m.RemovalShipmentItemAdjustmentList[i] != nil {
			if err := m.RemovalShipmentItemAdjustmentList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RemovalShipmentItemAdjustmentList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RemovalShipmentItemAdjustmentList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this removal shipment adjustment event based on the context it is used
func (m *RemovalShipmentAdjustmentEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemovalShipmentItemAdjustmentList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemovalShipmentAdjustmentEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RemovalShipmentAdjustmentEvent) contextValidateRemovalShipmentItemAdjustmentList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RemovalShipmentItemAdjustmentList); i++ {

		if m.RemovalShipmentItemAdjustmentList[i] != nil {
			if err := m.RemovalShipmentItemAdjustmentList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("RemovalShipmentItemAdjustmentList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("RemovalShipmentItemAdjustmentList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemovalShipmentAdjustmentEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemovalShipmentAdjustmentEvent) UnmarshalBinary(b []byte) error {
	var res RemovalShipmentAdjustmentEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
