// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListTransactionsPayload The payload for the listTransactions operation.
//
// swagger:model ListTransactionsPayload
type ListTransactionsPayload struct {

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken string `json:"NextToken,omitempty"`

	// transactions
	Transactions Transactions `json:"Transactions,omitempty"`
}

// Validate validates this list transactions payload
func (m *ListTransactionsPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTransactionsPayload) validateTransactions(formats strfmt.Registry) error {
	if swag.IsZero(m.Transactions) { // not required
		return nil
	}

	if err := m.Transactions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Transactions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Transactions")
		}
		return err
	}

	return nil
}

// ContextValidate validate this list transactions payload based on the context it is used
func (m *ListTransactionsPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransactions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListTransactionsPayload) contextValidateTransactions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Transactions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Transactions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Transactions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListTransactionsPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListTransactionsPayload) UnmarshalBinary(b []byte) error {
	var res ListTransactionsPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
