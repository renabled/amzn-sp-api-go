// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Promotion A promotion applied to an item.
//
// swagger:model Promotion
type Promotion struct {

	// The amount of promotional discount applied to the item.
	PromotionAmount *Currency `json:"PromotionAmount,omitempty"`

	// The seller-specified identifier for the promotion.
	PromotionID string `json:"PromotionId,omitempty"`

	// The type of promotion.
	PromotionType string `json:"PromotionType,omitempty"`
}

// Validate validates this promotion
func (m *Promotion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePromotionAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Promotion) validatePromotionAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.PromotionAmount) { // not required
		return nil
	}

	if m.PromotionAmount != nil {
		if err := m.PromotionAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PromotionAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PromotionAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this promotion based on the context it is used
func (m *Promotion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePromotionAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Promotion) contextValidatePromotionAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.PromotionAmount != nil {
		if err := m.PromotionAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PromotionAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PromotionAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Promotion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Promotion) UnmarshalBinary(b []byte) error {
	var res Promotion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
