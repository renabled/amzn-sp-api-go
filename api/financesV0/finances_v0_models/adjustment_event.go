// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AdjustmentEvent An adjustment to the seller's account.
//
// swagger:model AdjustmentEvent
type AdjustmentEvent struct {

	// The amount adjusted as part of this event.
	AdjustmentAmount *Currency `json:"AdjustmentAmount,omitempty"`

	// A list of information about adjustments to an account.
	AdjustmentItemList AdjustmentItemList `json:"AdjustmentItemList,omitempty"`

	// The type of adjustment.
	//
	// Possible values:
	//
	// * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.
	//
	// * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.
	//
	// * PostageBilling - The amount paid by a seller for shipping labels.
	//
	// * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.
	//
	// * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.
	//
	// * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.
	//
	// * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.
	//
	// * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
	AdjustmentType string `json:"AdjustmentType,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`
}

// Validate validates this adjustment event
func (m *AdjustmentEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdjustmentItemList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdjustmentEvent) validateAdjustmentAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.AdjustmentAmount) { // not required
		return nil
	}

	if m.AdjustmentAmount != nil {
		if err := m.AdjustmentAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdjustmentAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AdjustmentAmount")
			}
			return err
		}
	}

	return nil
}

func (m *AdjustmentEvent) validateAdjustmentItemList(formats strfmt.Registry) error {
	if swag.IsZero(m.AdjustmentItemList) { // not required
		return nil
	}

	if err := m.AdjustmentItemList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AdjustmentItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AdjustmentItemList")
		}
		return err
	}

	return nil
}

func (m *AdjustmentEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this adjustment event based on the context it is used
func (m *AdjustmentEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdjustmentAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdjustmentItemList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdjustmentEvent) contextValidateAdjustmentAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.AdjustmentAmount != nil {
		if err := m.AdjustmentAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdjustmentAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AdjustmentAmount")
			}
			return err
		}
	}

	return nil
}

func (m *AdjustmentEvent) contextValidateAdjustmentItemList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AdjustmentItemList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AdjustmentItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AdjustmentItemList")
		}
		return err
	}

	return nil
}

func (m *AdjustmentEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdjustmentEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdjustmentEvent) UnmarshalBinary(b []byte) error {
	var res AdjustmentEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
