// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FailedAdhocDisbursementEvent Failed ad hoc disbursement event list.
//
// swagger:model FailedAdhocDisbursementEvent
type FailedAdhocDisbursementEvent struct {

	// The disbursement identifier.
	DisbursementID string `json:"DisbursementId,omitempty"`

	// The type of fund transfer.
	//
	// Example "Refund"
	FundsTransfersType string `json:"FundsTransfersType,omitempty"`

	// The type of payment for disbursement.
	//
	// Example `CREDIT_CARD`
	PaymentDisbursementType string `json:"PaymentDisbursementType,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// The status of the failed `AdhocDisbursement`.
	//
	// Example `HARD_DECLINED`
	Status string `json:"Status,omitempty"`

	// The amount of the Adhoc Disbursement.
	TransferAmount *Currency `json:"TransferAmount,omitempty"`

	// The transfer identifier.
	TransferID string `json:"TransferId,omitempty"`
}

// Validate validates this failed adhoc disbursement event
func (m *FailedAdhocDisbursementEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransferAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailedAdhocDisbursementEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *FailedAdhocDisbursementEvent) validateTransferAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TransferAmount) { // not required
		return nil
	}

	if m.TransferAmount != nil {
		if err := m.TransferAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransferAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransferAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this failed adhoc disbursement event based on the context it is used
func (m *FailedAdhocDisbursementEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransferAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FailedAdhocDisbursementEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *FailedAdhocDisbursementEvent) contextValidateTransferAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TransferAmount != nil {
		if err := m.TransferAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransferAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransferAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FailedAdhocDisbursementEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FailedAdhocDisbursementEvent) UnmarshalBinary(b []byte) error {
	var res FailedAdhocDisbursementEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
