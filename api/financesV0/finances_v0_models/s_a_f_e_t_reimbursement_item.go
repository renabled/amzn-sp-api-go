// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SAFETReimbursementItem An item from a SAFE-T claim reimbursement.
//
// swagger:model SAFETReimbursementItem
type SAFETReimbursementItem struct {

	// A list of charges associated with the item.
	ItemChargeList ChargeComponentList `json:"itemChargeList,omitempty"`

	// The description of the item as shown on the product detail page on the retail website.
	ProductDescription string `json:"productDescription,omitempty"`

	// The number of units of the item being reimbursed.
	Quantity string `json:"quantity,omitempty"`
}

// Validate validates this s a f e t reimbursement item
func (m *SAFETReimbursementItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemChargeList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SAFETReimbursementItem) validateItemChargeList(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemChargeList) { // not required
		return nil
	}

	if err := m.ItemChargeList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemChargeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("itemChargeList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this s a f e t reimbursement item based on the context it is used
func (m *SAFETReimbursementItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemChargeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SAFETReimbursementItem) contextValidateItemChargeList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ItemChargeList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("itemChargeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("itemChargeList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SAFETReimbursementItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SAFETReimbursementItem) UnmarshalBinary(b []byte) error {
	var res SAFETReimbursementItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
