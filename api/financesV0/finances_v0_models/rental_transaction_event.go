// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RentalTransactionEvent An event related to a rental transaction.
//
// swagger:model RentalTransactionEvent
type RentalTransactionEvent struct {

	// An Amazon-defined identifier for an order.
	AmazonOrderID string `json:"AmazonOrderId,omitempty"`

	// The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
	ExtensionLength int32 `json:"ExtensionLength,omitempty"`

	// The name of the marketplace.
	MarketplaceName string `json:"MarketplaceName,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// A list of charges associated with the rental event.
	RentalChargeList ChargeComponentList `json:"RentalChargeList,omitempty"`

	// The type of rental event.
	//
	// Possible values:
	//
	// * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.
	//
	// * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.
	//
	// * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.
	//
	// * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.
	//
	// * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.
	//
	// * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.
	//
	// * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
	RentalEventType string `json:"RentalEventType,omitempty"`

	// A list of fees associated with the rental event.
	RentalFeeList FeeComponentList `json:"RentalFeeList,omitempty"`

	// The amount of money the customer originally paid to rent the item. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events.
	RentalInitialValue *Currency `json:"RentalInitialValue,omitempty"`

	// The amount of money Amazon sends the seller to compensate for a lost item or a failed charge. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events.
	RentalReimbursement *Currency `json:"RentalReimbursement,omitempty"`

	// A list of taxes withheld information for a rental item.
	RentalTaxWithheldList TaxWithheldComponentList `json:"RentalTaxWithheldList,omitempty"`
}

// Validate validates this rental transaction event
func (m *RentalTransactionEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalChargeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalFeeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalInitialValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalReimbursement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalTaxWithheldList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RentalTransactionEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RentalTransactionEvent) validateRentalChargeList(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalChargeList) { // not required
		return nil
	}

	if err := m.RentalChargeList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalChargeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalChargeList")
		}
		return err
	}

	return nil
}

func (m *RentalTransactionEvent) validateRentalFeeList(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalFeeList) { // not required
		return nil
	}

	if err := m.RentalFeeList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalFeeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalFeeList")
		}
		return err
	}

	return nil
}

func (m *RentalTransactionEvent) validateRentalInitialValue(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalInitialValue) { // not required
		return nil
	}

	if m.RentalInitialValue != nil {
		if err := m.RentalInitialValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RentalInitialValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RentalInitialValue")
			}
			return err
		}
	}

	return nil
}

func (m *RentalTransactionEvent) validateRentalReimbursement(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalReimbursement) { // not required
		return nil
	}

	if m.RentalReimbursement != nil {
		if err := m.RentalReimbursement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RentalReimbursement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RentalReimbursement")
			}
			return err
		}
	}

	return nil
}

func (m *RentalTransactionEvent) validateRentalTaxWithheldList(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalTaxWithheldList) { // not required
		return nil
	}

	if err := m.RentalTaxWithheldList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalTaxWithheldList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalTaxWithheldList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this rental transaction event based on the context it is used
func (m *RentalTransactionEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalChargeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalFeeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalInitialValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalReimbursement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalTaxWithheldList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RentalTransactionEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RentalTransactionEvent) contextValidateRentalChargeList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RentalChargeList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalChargeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalChargeList")
		}
		return err
	}

	return nil
}

func (m *RentalTransactionEvent) contextValidateRentalFeeList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RentalFeeList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalFeeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalFeeList")
		}
		return err
	}

	return nil
}

func (m *RentalTransactionEvent) contextValidateRentalInitialValue(ctx context.Context, formats strfmt.Registry) error {

	if m.RentalInitialValue != nil {
		if err := m.RentalInitialValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RentalInitialValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RentalInitialValue")
			}
			return err
		}
	}

	return nil
}

func (m *RentalTransactionEvent) contextValidateRentalReimbursement(ctx context.Context, formats strfmt.Registry) error {

	if m.RentalReimbursement != nil {
		if err := m.RentalReimbursement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RentalReimbursement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RentalReimbursement")
			}
			return err
		}
	}

	return nil
}

func (m *RentalTransactionEvent) contextValidateRentalTaxWithheldList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RentalTaxWithheldList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalTaxWithheldList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalTaxWithheldList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RentalTransactionEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RentalTransactionEvent) UnmarshalBinary(b []byte) error {
	var res RentalTransactionEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
