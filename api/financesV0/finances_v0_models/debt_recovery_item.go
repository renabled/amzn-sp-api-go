// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DebtRecoveryItem An item of a debt payment or debt adjustment.
//
// swagger:model DebtRecoveryItem
type DebtRecoveryItem struct {

	// The start date and time of the financial event group that contains the debt. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
	// Format: date-time
	GroupBeginDate Date `json:"GroupBeginDate,omitempty"`

	// The end date and time of the financial event group that contains the debt. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
	// Format: date-time
	GroupEndDate Date `json:"GroupEndDate,omitempty"`

	// The original debt amount.
	OriginalAmount *Currency `json:"OriginalAmount,omitempty"`

	// The amount applied for the recovery item.
	RecoveryAmount *Currency `json:"RecoveryAmount,omitempty"`
}

// Validate validates this debt recovery item
func (m *DebtRecoveryItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupBeginDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOriginalAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtRecoveryItem) validateGroupBeginDate(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupBeginDate) { // not required
		return nil
	}

	if err := m.GroupBeginDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GroupBeginDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GroupBeginDate")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryItem) validateGroupEndDate(formats strfmt.Registry) error {
	if swag.IsZero(m.GroupEndDate) { // not required
		return nil
	}

	if err := m.GroupEndDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GroupEndDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GroupEndDate")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryItem) validateOriginalAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.OriginalAmount) { // not required
		return nil
	}

	if m.OriginalAmount != nil {
		if err := m.OriginalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OriginalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OriginalAmount")
			}
			return err
		}
	}

	return nil
}

func (m *DebtRecoveryItem) validateRecoveryAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.RecoveryAmount) { // not required
		return nil
	}

	if m.RecoveryAmount != nil {
		if err := m.RecoveryAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RecoveryAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RecoveryAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this debt recovery item based on the context it is used
func (m *DebtRecoveryItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGroupBeginDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGroupEndDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOriginalAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRecoveryAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebtRecoveryItem) contextValidateGroupBeginDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GroupBeginDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GroupBeginDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GroupBeginDate")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryItem) contextValidateGroupEndDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GroupEndDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GroupEndDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GroupEndDate")
		}
		return err
	}

	return nil
}

func (m *DebtRecoveryItem) contextValidateOriginalAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.OriginalAmount != nil {
		if err := m.OriginalAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OriginalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OriginalAmount")
			}
			return err
		}
	}

	return nil
}

func (m *DebtRecoveryItem) contextValidateRecoveryAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.RecoveryAmount != nil {
		if err := m.RecoveryAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RecoveryAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RecoveryAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebtRecoveryItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebtRecoveryItem) UnmarshalBinary(b []byte) error {
	var res DebtRecoveryItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
