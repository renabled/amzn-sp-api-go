// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ImagingServicesFeeEvent A fee event related to Amazon Imaging services.
//
// swagger:model ImagingServicesFeeEvent
type ImagingServicesFeeEvent struct {

	// The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.
	ASIN string `json:"ASIN,omitempty"`

	// A list of fees associated with the event.
	FeeList FeeComponentList `json:"FeeList,omitempty"`

	// The identifier for the imaging services request.
	ImagingRequestBillingItemID string `json:"ImagingRequestBillingItemID,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`
}

// Validate validates this imaging services fee event
func (m *ImagingServicesFeeEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImagingServicesFeeEvent) validateFeeList(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeList) { // not required
		return nil
	}

	if err := m.FeeList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FeeList")
		}
		return err
	}

	return nil
}

func (m *ImagingServicesFeeEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this imaging services fee event based on the context it is used
func (m *ImagingServicesFeeEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImagingServicesFeeEvent) contextValidateFeeList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FeeList")
		}
		return err
	}

	return nil
}

func (m *ImagingServicesFeeEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImagingServicesFeeEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImagingServicesFeeEvent) UnmarshalBinary(b []byte) error {
	var res ImagingServicesFeeEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
