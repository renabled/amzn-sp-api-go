// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FinancialEvents All the information that is related to a financial event.
//
// swagger:model FinancialEvents
type FinancialEvents struct {

	// adhoc disbursement event list
	AdhocDisbursementEventList AdhocDisbursementEventList `json:"AdhocDisbursementEventList,omitempty"`

	// adjustment event list
	AdjustmentEventList AdjustmentEventList `json:"AdjustmentEventList,omitempty"`

	// affordability expense event list
	AffordabilityExpenseEventList AffordabilityExpenseEventList `json:"AffordabilityExpenseEventList,omitempty"`

	// affordability expense reversal event list
	AffordabilityExpenseReversalEventList AffordabilityExpenseEventList `json:"AffordabilityExpenseReversalEventList,omitempty"`

	// capacity reservation billing event list
	CapacityReservationBillingEventList CapacityReservationBillingEventList `json:"CapacityReservationBillingEventList,omitempty"`

	// charge refund event list
	ChargeRefundEventList ChargeRefundEventList `json:"ChargeRefundEventList,omitempty"`

	// A list of chargeback events.
	ChargebackEventList ShipmentEventList `json:"ChargebackEventList,omitempty"`

	// coupon payment event list
	CouponPaymentEventList CouponPaymentEventList `json:"CouponPaymentEventList,omitempty"`

	// debt recovery event list
	DebtRecoveryEventList DebtRecoveryEventList `json:"DebtRecoveryEventList,omitempty"`

	// f b a liquidation event list
	FBALiquidationEventList FBALiquidationEventList `json:"FBALiquidationEventList,omitempty"`

	// failed adhoc disbursement event list
	FailedAdhocDisbursementEventList FailedAdhocDisbursementEventList `json:"FailedAdhocDisbursementEventList,omitempty"`

	// A list of guarantee claim events.
	GuaranteeClaimEventList ShipmentEventList `json:"GuaranteeClaimEventList,omitempty"`

	// imaging services fee event list
	ImagingServicesFeeEventList ImagingServicesFeeEventList `json:"ImagingServicesFeeEventList,omitempty"`

	// loan servicing event list
	LoanServicingEventList LoanServicingEventList `json:"LoanServicingEventList,omitempty"`

	// network commingling transaction event list
	NetworkComminglingTransactionEventList NetworkComminglingTransactionEventList `json:"NetworkComminglingTransactionEventList,omitempty"`

	// pay with amazon event list
	PayWithAmazonEventList PayWithAmazonEventList `json:"PayWithAmazonEventList,omitempty"`

	// product ads payment event list
	ProductAdsPaymentEventList ProductAdsPaymentEventList `json:"ProductAdsPaymentEventList,omitempty"`

	// A list of refund events.
	RefundEventList ShipmentEventList `json:"RefundEventList,omitempty"`

	// removal shipment adjustment event list
	RemovalShipmentAdjustmentEventList RemovalShipmentAdjustmentEventList `json:"RemovalShipmentAdjustmentEventList,omitempty"`

	// removal shipment event list
	RemovalShipmentEventList RemovalShipmentEventList `json:"RemovalShipmentEventList,omitempty"`

	// rental transaction event list
	RentalTransactionEventList RentalTransactionEventList `json:"RentalTransactionEventList,omitempty"`

	// retrocharge event list
	RetrochargeEventList RetrochargeEventList `json:"RetrochargeEventList,omitempty"`

	// s a f e t reimbursement event list
	SAFETReimbursementEventList SAFETReimbursementEventList `json:"SAFETReimbursementEventList,omitempty"`

	// seller deal payment event list
	SellerDealPaymentEventList SellerDealPaymentEventList `json:"SellerDealPaymentEventList,omitempty"`

	// seller review enrollment payment event list
	SellerReviewEnrollmentPaymentEventList SellerReviewEnrollmentPaymentEventList `json:"SellerReviewEnrollmentPaymentEventList,omitempty"`

	// service fee event list
	ServiceFeeEventList ServiceFeeEventList `json:"ServiceFeeEventList,omitempty"`

	// service provider credit event list
	ServiceProviderCreditEventList SolutionProviderCreditEventList `json:"ServiceProviderCreditEventList,omitempty"`

	// A list of shipment events.
	ShipmentEventList ShipmentEventList `json:"ShipmentEventList,omitempty"`

	// A list of Shipment Settle events.
	ShipmentSettleEventList ShipmentSettleEventList `json:"ShipmentSettleEventList,omitempty"`

	// t d s reimbursement event list
	TDSReimbursementEventList TDSReimbursementEventList `json:"TDSReimbursementEventList,omitempty"`

	// tax withholding event list
	TaxWithholdingEventList TaxWithholdingEventList `json:"TaxWithholdingEventList,omitempty"`

	// trial shipment event list
	TrialShipmentEventList TrialShipmentEventList `json:"TrialShipmentEventList,omitempty"`

	// value added service charge event list
	ValueAddedServiceChargeEventList ValueAddedServiceChargeEventList `json:"ValueAddedServiceChargeEventList,omitempty"`
}

// Validate validates this financial events
func (m *FinancialEvents) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdhocDisbursementEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdjustmentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordabilityExpenseEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAffordabilityExpenseReversalEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCapacityReservationBillingEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargeRefundEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChargebackEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouponPaymentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDebtRecoveryEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFBALiquidationEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFailedAdhocDisbursementEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuaranteeClaimEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImagingServicesFeeEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoanServicingEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkComminglingTransactionEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayWithAmazonEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductAdsPaymentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefundEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalShipmentAdjustmentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalShipmentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRentalTransactionEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetrochargeEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSAFETReimbursementEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerDealPaymentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerReviewEnrollmentPaymentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceFeeEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceProviderCreditEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentSettleEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTDSReimbursementEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxWithholdingEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrialShipmentEventList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueAddedServiceChargeEventList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FinancialEvents) validateAdhocDisbursementEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.AdhocDisbursementEventList) { // not required
		return nil
	}

	if err := m.AdhocDisbursementEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AdhocDisbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AdhocDisbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateAdjustmentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.AdjustmentEventList) { // not required
		return nil
	}

	if err := m.AdjustmentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AdjustmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AdjustmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateAffordabilityExpenseEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.AffordabilityExpenseEventList) { // not required
		return nil
	}

	if err := m.AffordabilityExpenseEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AffordabilityExpenseEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AffordabilityExpenseEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateAffordabilityExpenseReversalEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.AffordabilityExpenseReversalEventList) { // not required
		return nil
	}

	if err := m.AffordabilityExpenseReversalEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AffordabilityExpenseReversalEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AffordabilityExpenseReversalEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateCapacityReservationBillingEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.CapacityReservationBillingEventList) { // not required
		return nil
	}

	if err := m.CapacityReservationBillingEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CapacityReservationBillingEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CapacityReservationBillingEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateChargeRefundEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeRefundEventList) { // not required
		return nil
	}

	if err := m.ChargeRefundEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ChargeRefundEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ChargeRefundEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateChargebackEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargebackEventList) { // not required
		return nil
	}

	if err := m.ChargebackEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ChargebackEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ChargebackEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateCouponPaymentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.CouponPaymentEventList) { // not required
		return nil
	}

	if err := m.CouponPaymentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CouponPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CouponPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateDebtRecoveryEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.DebtRecoveryEventList) { // not required
		return nil
	}

	if err := m.DebtRecoveryEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DebtRecoveryEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("DebtRecoveryEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateFBALiquidationEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.FBALiquidationEventList) { // not required
		return nil
	}

	if err := m.FBALiquidationEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FBALiquidationEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FBALiquidationEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateFailedAdhocDisbursementEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.FailedAdhocDisbursementEventList) { // not required
		return nil
	}

	if err := m.FailedAdhocDisbursementEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FailedAdhocDisbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FailedAdhocDisbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateGuaranteeClaimEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.GuaranteeClaimEventList) { // not required
		return nil
	}

	if err := m.GuaranteeClaimEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GuaranteeClaimEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GuaranteeClaimEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateImagingServicesFeeEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ImagingServicesFeeEventList) { // not required
		return nil
	}

	if err := m.ImagingServicesFeeEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ImagingServicesFeeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ImagingServicesFeeEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateLoanServicingEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.LoanServicingEventList) { // not required
		return nil
	}

	if err := m.LoanServicingEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LoanServicingEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LoanServicingEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateNetworkComminglingTransactionEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkComminglingTransactionEventList) { // not required
		return nil
	}

	if err := m.NetworkComminglingTransactionEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NetworkComminglingTransactionEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("NetworkComminglingTransactionEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validatePayWithAmazonEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.PayWithAmazonEventList) { // not required
		return nil
	}

	if err := m.PayWithAmazonEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PayWithAmazonEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PayWithAmazonEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateProductAdsPaymentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ProductAdsPaymentEventList) { // not required
		return nil
	}

	if err := m.ProductAdsPaymentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ProductAdsPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ProductAdsPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateRefundEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.RefundEventList) { // not required
		return nil
	}

	if err := m.RefundEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RefundEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RefundEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateRemovalShipmentAdjustmentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalShipmentAdjustmentEventList) { // not required
		return nil
	}

	if err := m.RemovalShipmentAdjustmentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RemovalShipmentAdjustmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RemovalShipmentAdjustmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateRemovalShipmentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalShipmentEventList) { // not required
		return nil
	}

	if err := m.RemovalShipmentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RemovalShipmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RemovalShipmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateRentalTransactionEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.RentalTransactionEventList) { // not required
		return nil
	}

	if err := m.RentalTransactionEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalTransactionEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalTransactionEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateRetrochargeEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.RetrochargeEventList) { // not required
		return nil
	}

	if err := m.RetrochargeEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RetrochargeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RetrochargeEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateSAFETReimbursementEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.SAFETReimbursementEventList) { // not required
		return nil
	}

	if err := m.SAFETReimbursementEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SAFETReimbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SAFETReimbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateSellerDealPaymentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerDealPaymentEventList) { // not required
		return nil
	}

	if err := m.SellerDealPaymentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerDealPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerDealPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateSellerReviewEnrollmentPaymentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerReviewEnrollmentPaymentEventList) { // not required
		return nil
	}

	if err := m.SellerReviewEnrollmentPaymentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerReviewEnrollmentPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerReviewEnrollmentPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateServiceFeeEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceFeeEventList) { // not required
		return nil
	}

	if err := m.ServiceFeeEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ServiceFeeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ServiceFeeEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateServiceProviderCreditEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceProviderCreditEventList) { // not required
		return nil
	}

	if err := m.ServiceProviderCreditEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ServiceProviderCreditEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ServiceProviderCreditEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateShipmentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentEventList) { // not required
		return nil
	}

	if err := m.ShipmentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateShipmentSettleEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentSettleEventList) { // not required
		return nil
	}

	if err := m.ShipmentSettleEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentSettleEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentSettleEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateTDSReimbursementEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.TDSReimbursementEventList) { // not required
		return nil
	}

	if err := m.TDSReimbursementEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TDSReimbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TDSReimbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateTaxWithholdingEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxWithholdingEventList) { // not required
		return nil
	}

	if err := m.TaxWithholdingEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TaxWithholdingEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TaxWithholdingEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateTrialShipmentEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.TrialShipmentEventList) { // not required
		return nil
	}

	if err := m.TrialShipmentEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TrialShipmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TrialShipmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) validateValueAddedServiceChargeEventList(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueAddedServiceChargeEventList) { // not required
		return nil
	}

	if err := m.ValueAddedServiceChargeEventList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ValueAddedServiceChargeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ValueAddedServiceChargeEventList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this financial events based on the context it is used
func (m *FinancialEvents) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdhocDisbursementEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdjustmentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffordabilityExpenseEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAffordabilityExpenseReversalEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCapacityReservationBillingEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChargeRefundEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateChargebackEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouponPaymentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDebtRecoveryEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFBALiquidationEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFailedAdhocDisbursementEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGuaranteeClaimEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImagingServicesFeeEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLoanServicingEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetworkComminglingTransactionEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayWithAmazonEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductAdsPaymentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefundEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemovalShipmentAdjustmentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemovalShipmentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRentalTransactionEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetrochargeEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSAFETReimbursementEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerDealPaymentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerReviewEnrollmentPaymentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceFeeEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceProviderCreditEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentSettleEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTDSReimbursementEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxWithholdingEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrialShipmentEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateValueAddedServiceChargeEventList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FinancialEvents) contextValidateAdhocDisbursementEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AdhocDisbursementEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AdhocDisbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AdhocDisbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateAdjustmentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AdjustmentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AdjustmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AdjustmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateAffordabilityExpenseEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AffordabilityExpenseEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AffordabilityExpenseEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AffordabilityExpenseEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateAffordabilityExpenseReversalEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AffordabilityExpenseReversalEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AffordabilityExpenseReversalEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AffordabilityExpenseReversalEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateCapacityReservationBillingEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CapacityReservationBillingEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CapacityReservationBillingEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CapacityReservationBillingEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateChargeRefundEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ChargeRefundEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ChargeRefundEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ChargeRefundEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateChargebackEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ChargebackEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ChargebackEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ChargebackEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateCouponPaymentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CouponPaymentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CouponPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CouponPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateDebtRecoveryEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DebtRecoveryEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DebtRecoveryEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("DebtRecoveryEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateFBALiquidationEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FBALiquidationEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FBALiquidationEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FBALiquidationEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateFailedAdhocDisbursementEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FailedAdhocDisbursementEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FailedAdhocDisbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FailedAdhocDisbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateGuaranteeClaimEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.GuaranteeClaimEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("GuaranteeClaimEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("GuaranteeClaimEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateImagingServicesFeeEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ImagingServicesFeeEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ImagingServicesFeeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ImagingServicesFeeEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateLoanServicingEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LoanServicingEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LoanServicingEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LoanServicingEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateNetworkComminglingTransactionEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.NetworkComminglingTransactionEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("NetworkComminglingTransactionEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("NetworkComminglingTransactionEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidatePayWithAmazonEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PayWithAmazonEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PayWithAmazonEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PayWithAmazonEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateProductAdsPaymentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProductAdsPaymentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ProductAdsPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ProductAdsPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateRefundEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RefundEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RefundEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RefundEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateRemovalShipmentAdjustmentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RemovalShipmentAdjustmentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RemovalShipmentAdjustmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RemovalShipmentAdjustmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateRemovalShipmentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RemovalShipmentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RemovalShipmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RemovalShipmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateRentalTransactionEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RentalTransactionEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RentalTransactionEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RentalTransactionEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateRetrochargeEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RetrochargeEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RetrochargeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RetrochargeEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateSAFETReimbursementEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SAFETReimbursementEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SAFETReimbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SAFETReimbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateSellerDealPaymentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SellerDealPaymentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerDealPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerDealPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateSellerReviewEnrollmentPaymentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SellerReviewEnrollmentPaymentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerReviewEnrollmentPaymentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerReviewEnrollmentPaymentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateServiceFeeEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceFeeEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ServiceFeeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ServiceFeeEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateServiceProviderCreditEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceProviderCreditEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ServiceProviderCreditEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ServiceProviderCreditEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateShipmentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipmentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateShipmentSettleEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipmentSettleEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentSettleEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentSettleEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateTDSReimbursementEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TDSReimbursementEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TDSReimbursementEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TDSReimbursementEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateTaxWithholdingEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TaxWithholdingEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TaxWithholdingEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TaxWithholdingEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateTrialShipmentEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TrialShipmentEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TrialShipmentEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TrialShipmentEventList")
		}
		return err
	}

	return nil
}

func (m *FinancialEvents) contextValidateValueAddedServiceChargeEventList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ValueAddedServiceChargeEventList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ValueAddedServiceChargeEventList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ValueAddedServiceChargeEventList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FinancialEvents) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FinancialEvents) UnmarshalBinary(b []byte) error {
	var res FinancialEvents
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
