// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SellerDealPaymentEvent An event linked to the payment of a fee related to the specified deal.
//
// swagger:model SellerDealPaymentEvent
type SellerDealPaymentEvent struct {

	// The internal description of the deal.
	DealDescription string `json:"dealDescription,omitempty"`

	// The unique identifier of the deal.
	DealID string `json:"dealId,omitempty"`

	// The type of event: `SellerDealComplete`.
	EventType string `json:"eventType,omitempty"`

	// The monetary amount of the fee.
	FeeAmount *Currency `json:"feeAmount,omitempty"`

	// The type of fee: `RunLightningDealFee`.
	FeeType string `json:"feeType,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"postedDate,omitempty"`

	// The monetary amount of the tax applied.
	TaxAmount *Currency `json:"taxAmount,omitempty"`

	// The total monetary amount paid.
	TotalAmount *Currency `json:"totalAmount,omitempty"`
}

// Validate validates this seller deal payment event
func (m *SellerDealPaymentEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SellerDealPaymentEvent) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if m.FeeAmount != nil {
		if err := m.FeeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *SellerDealPaymentEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("postedDate")
		}
		return err
	}

	return nil
}

func (m *SellerDealPaymentEvent) validateTaxAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxAmount) { // not required
		return nil
	}

	if m.TaxAmount != nil {
		if err := m.TaxAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *SellerDealPaymentEvent) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalAmount) { // not required
		return nil
	}

	if m.TotalAmount != nil {
		if err := m.TotalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this seller deal payment event based on the context it is used
func (m *SellerDealPaymentEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SellerDealPaymentEvent) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeAmount != nil {
		if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("feeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("feeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *SellerDealPaymentEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("postedDate")
		}
		return err
	}

	return nil
}

func (m *SellerDealPaymentEvent) contextValidateTaxAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxAmount != nil {
		if err := m.TaxAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *SellerDealPaymentEvent) contextValidateTotalAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalAmount != nil {
		if err := m.TotalAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SellerDealPaymentEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SellerDealPaymentEvent) UnmarshalBinary(b []byte) error {
	var res SellerDealPaymentEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
