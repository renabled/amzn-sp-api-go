// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SolutionProviderCreditEvent A credit given to a solution provider.
//
// swagger:model SolutionProviderCreditEvent
type SolutionProviderCreditEvent struct {

	// The two-letter country code of the country associated with the marketplace where the order was placed.
	MarketplaceCountryCode string `json:"MarketplaceCountryCode,omitempty"`

	// The identifier of the marketplace where the order was placed.
	MarketplaceID string `json:"MarketplaceId,omitempty"`

	// The Amazon-defined identifier of the solution provider.
	ProviderID string `json:"ProviderId,omitempty"`

	// The store name where the payment event occurred.
	ProviderStoreName string `json:"ProviderStoreName,omitempty"`

	// The transaction type.
	ProviderTransactionType string `json:"ProviderTransactionType,omitempty"`

	// The Amazon-defined identifier of the seller.
	SellerID string `json:"SellerId,omitempty"`

	// A seller-defined identifier for an order.
	SellerOrderID string `json:"SellerOrderId,omitempty"`

	// The store name where the payment event occurred.
	SellerStoreName string `json:"SellerStoreName,omitempty"`

	// The amount of the credit.
	TransactionAmount *Currency `json:"TransactionAmount,omitempty"`

	// The date and time that the credit transaction was created, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) date-time format.
	// Format: date-time
	TransactionCreationDate Date `json:"TransactionCreationDate,omitempty"`
}

// Validate validates this solution provider credit event
func (m *SolutionProviderCreditEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTransactionAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolutionProviderCreditEvent) validateTransactionAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionAmount) { // not required
		return nil
	}

	if m.TransactionAmount != nil {
		if err := m.TransactionAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransactionAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransactionAmount")
			}
			return err
		}
	}

	return nil
}

func (m *SolutionProviderCreditEvent) validateTransactionCreationDate(formats strfmt.Registry) error {
	if swag.IsZero(m.TransactionCreationDate) { // not required
		return nil
	}

	if err := m.TransactionCreationDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionCreationDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TransactionCreationDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this solution provider credit event based on the context it is used
func (m *SolutionProviderCreditEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTransactionAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTransactionCreationDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SolutionProviderCreditEvent) contextValidateTransactionAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TransactionAmount != nil {
		if err := m.TransactionAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TransactionAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TransactionAmount")
			}
			return err
		}
	}

	return nil
}

func (m *SolutionProviderCreditEvent) contextValidateTransactionCreationDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TransactionCreationDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TransactionCreationDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TransactionCreationDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SolutionProviderCreditEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SolutionProviderCreditEvent) UnmarshalBinary(b []byte) error {
	var res SolutionProviderCreditEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
