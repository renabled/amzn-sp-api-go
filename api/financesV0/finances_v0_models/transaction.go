// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Transaction Contains all information related to the transaction.
//
// swagger:model Transaction
type Transaction struct {

	// The date and time when the transaction was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// Related business identifiers of the transaction.
	RelatedIdentifiers RelatedIdentifiers `json:"RelatedIdentifiers,omitempty"`

	// Metadata describing the seller.
	SellingPartnerMetadata *SellingPartnerMetadata `json:"SellingPartnerMetadata,omitempty"`

	// Total amount of transaction.
	TotalAmount *Currency `json:"TotalAmount,omitempty"`

	// The type of transaction.
	//
	// Possible values:
	//
	// * Shipment
	TransactionType string `json:"TransactionType,omitempty"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelatedIdentifiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingPartnerMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateRelatedIdentifiers(formats strfmt.Registry) error {
	if swag.IsZero(m.RelatedIdentifiers) { // not required
		return nil
	}

	if err := m.RelatedIdentifiers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RelatedIdentifiers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RelatedIdentifiers")
		}
		return err
	}

	return nil
}

func (m *Transaction) validateSellingPartnerMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.SellingPartnerMetadata) { // not required
		return nil
	}

	if m.SellingPartnerMetadata != nil {
		if err := m.SellingPartnerMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SellingPartnerMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SellingPartnerMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTotalAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalAmount) { // not required
		return nil
	}

	if m.TotalAmount != nil {
		if err := m.TotalAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this transaction based on the context it is used
func (m *Transaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelatedIdentifiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingPartnerMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateRelatedIdentifiers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RelatedIdentifiers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RelatedIdentifiers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RelatedIdentifiers")
		}
		return err
	}

	return nil
}

func (m *Transaction) contextValidateSellingPartnerMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingPartnerMetadata != nil {
		if err := m.SellingPartnerMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SellingPartnerMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("SellingPartnerMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) contextValidateTotalAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalAmount != nil {
		if err := m.TotalAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
