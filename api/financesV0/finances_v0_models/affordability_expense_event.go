// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AffordabilityExpenseEvent An expense related to an affordability promotion.
//
// swagger:model AffordabilityExpenseEvent
type AffordabilityExpenseEvent struct {

	// An Amazon-defined identifier for an order.
	AmazonOrderID string `json:"AmazonOrderId,omitempty"`

	// The amount charged for clicks incurred under the Sponsored Products program.
	BaseExpense *Currency `json:"BaseExpense,omitempty"`

	// The Amazon-defined marketplace identifier.
	MarketplaceID string `json:"MarketplaceId,omitempty"`

	// The date and time when the financial event was created.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// Central Goods and Service Tax, charged and collected by the central government.
	// Required: true
	TaxTypeCGST *Currency `json:"TaxTypeCGST"`

	// Integrated Goods and Service Tax, charged and collected by the central government.
	// Required: true
	TaxTypeIGST *Currency `json:"TaxTypeIGST"`

	// State Goods and Service Tax, charged and collected by the state government.
	// Required: true
	TaxTypeSGST *Currency `json:"TaxTypeSGST"`

	// The total amount charged to the seller. `TotalExpense` = `BaseExpense` + `TaxTypeIGST` + `TaxTypeCGST` + `TaxTypeSGST`.
	TotalExpense *Currency `json:"TotalExpense,omitempty"`

	// The type of transaction.
	//
	// Possible values:
	//
	// * `Charge`: an affordability promotion expense.
	// * `Refund`: an affordability promotion expense reversal.
	TransactionType string `json:"TransactionType,omitempty"`
}

// Validate validates this affordability expense event
func (m *AffordabilityExpenseEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseExpense(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxTypeCGST(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxTypeIGST(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxTypeSGST(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalExpense(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffordabilityExpenseEvent) validateBaseExpense(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseExpense) { // not required
		return nil
	}

	if m.BaseExpense != nil {
		if err := m.BaseExpense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BaseExpense")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BaseExpense")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *AffordabilityExpenseEvent) validateTaxTypeCGST(formats strfmt.Registry) error {

	if err := validate.Required("TaxTypeCGST", "body", m.TaxTypeCGST); err != nil {
		return err
	}

	if m.TaxTypeCGST != nil {
		if err := m.TaxTypeCGST.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxTypeCGST")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxTypeCGST")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) validateTaxTypeIGST(formats strfmt.Registry) error {

	if err := validate.Required("TaxTypeIGST", "body", m.TaxTypeIGST); err != nil {
		return err
	}

	if m.TaxTypeIGST != nil {
		if err := m.TaxTypeIGST.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxTypeIGST")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxTypeIGST")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) validateTaxTypeSGST(formats strfmt.Registry) error {

	if err := validate.Required("TaxTypeSGST", "body", m.TaxTypeSGST); err != nil {
		return err
	}

	if m.TaxTypeSGST != nil {
		if err := m.TaxTypeSGST.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxTypeSGST")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxTypeSGST")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) validateTotalExpense(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalExpense) { // not required
		return nil
	}

	if m.TotalExpense != nil {
		if err := m.TotalExpense.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalExpense")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalExpense")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this affordability expense event based on the context it is used
func (m *AffordabilityExpenseEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseExpense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxTypeCGST(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxTypeIGST(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxTypeSGST(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalExpense(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AffordabilityExpenseEvent) contextValidateBaseExpense(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseExpense != nil {
		if err := m.BaseExpense.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BaseExpense")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BaseExpense")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *AffordabilityExpenseEvent) contextValidateTaxTypeCGST(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxTypeCGST != nil {
		if err := m.TaxTypeCGST.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxTypeCGST")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxTypeCGST")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) contextValidateTaxTypeIGST(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxTypeIGST != nil {
		if err := m.TaxTypeIGST.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxTypeIGST")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxTypeIGST")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) contextValidateTaxTypeSGST(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxTypeSGST != nil {
		if err := m.TaxTypeSGST.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxTypeSGST")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxTypeSGST")
			}
			return err
		}
	}

	return nil
}

func (m *AffordabilityExpenseEvent) contextValidateTotalExpense(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalExpense != nil {
		if err := m.TotalExpense.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalExpense")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalExpense")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AffordabilityExpenseEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AffordabilityExpenseEvent) UnmarshalBinary(b []byte) error {
	var res AffordabilityExpenseEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
