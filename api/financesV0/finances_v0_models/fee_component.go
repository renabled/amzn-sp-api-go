// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FeeComponent A fee associated with the event.
//
// swagger:model FeeComponent
type FeeComponent struct {

	// The amount of the fee.
	FeeAmount *Currency `json:"FeeAmount,omitempty"`

	// The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central.
	FeeType string `json:"FeeType,omitempty"`
}

// Validate validates this fee component
func (m *FeeComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeeComponent) validateFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeAmount) { // not required
		return nil
	}

	if m.FeeAmount != nil {
		if err := m.FeeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeeAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fee component based on the context it is used
func (m *FeeComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeeComponent) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeAmount != nil {
		if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeeAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeeComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeeComponent) UnmarshalBinary(b []byte) error {
	var res FeeComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
