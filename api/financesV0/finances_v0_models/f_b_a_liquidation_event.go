// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FBALiquidationEvent A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace.
//
// swagger:model FBALiquidationEvent
type FBALiquidationEvent struct {

	// The fee charged to the seller by Amazon for liquidating the seller's FBA inventory.
	LiquidationFeeAmount *Currency `json:"LiquidationFeeAmount,omitempty"`

	// The amount paid by the liquidator for the seller's inventory. The seller receives this amount minus LiquidationFeeAmount.
	LiquidationProceedsAmount *Currency `json:"LiquidationProceedsAmount,omitempty"`

	// The identifier for the original removal order.
	OriginalRemovalOrderID string `json:"OriginalRemovalOrderId,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`
}

// Validate validates this f b a liquidation event
func (m *FBALiquidationEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLiquidationFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLiquidationProceedsAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FBALiquidationEvent) validateLiquidationFeeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.LiquidationFeeAmount) { // not required
		return nil
	}

	if m.LiquidationFeeAmount != nil {
		if err := m.LiquidationFeeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LiquidationFeeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LiquidationFeeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *FBALiquidationEvent) validateLiquidationProceedsAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.LiquidationProceedsAmount) { // not required
		return nil
	}

	if m.LiquidationProceedsAmount != nil {
		if err := m.LiquidationProceedsAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LiquidationProceedsAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LiquidationProceedsAmount")
			}
			return err
		}
	}

	return nil
}

func (m *FBALiquidationEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

// ContextValidate validate this f b a liquidation event based on the context it is used
func (m *FBALiquidationEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLiquidationFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLiquidationProceedsAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FBALiquidationEvent) contextValidateLiquidationFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.LiquidationFeeAmount != nil {
		if err := m.LiquidationFeeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LiquidationFeeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LiquidationFeeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *FBALiquidationEvent) contextValidateLiquidationProceedsAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.LiquidationProceedsAmount != nil {
		if err := m.LiquidationProceedsAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LiquidationProceedsAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("LiquidationProceedsAmount")
			}
			return err
		}
	}

	return nil
}

func (m *FBALiquidationEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FBALiquidationEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FBALiquidationEvent) UnmarshalBinary(b []byte) error {
	var res FBALiquidationEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
