// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ChargeComponent A charge on the seller's account.
//
// Possible values:
//
// * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
//
// * Tax - The tax collected by the seller on the Principal.
//
// * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
//
// * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
//
// * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
//
// * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
//
// * Discount - The promotional discount for an order item.
//
// * TaxDiscount - The tax amount deducted for promotional rebates.
//
// * CODItemCharge - The COD charge for an order item.
//
// * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
//
// * CODOrderCharge - The COD charge for an order.
//
// * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
//
// * CODShippingCharge - Shipping charges for a COD order.
//
// * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
//
// * ShippingCharge - The shipping charge.
//
// * ShippingTax - The tax collected by the seller on a ShippingCharge.
//
// * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
//
// * Giftwrap - The gift wrap charge.
//
// * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
//
// * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
//
// * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
//
// * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
//
// * GenericDeduction - A generic bad debt deduction.
//
// * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
//
// * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
//
// * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
//
// * SAFE-TReimbursement - The SAFE-T claim amount for the item.
//
// * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
//
// * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
//
// * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
//
// * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST).
//
// swagger:model ChargeComponent
type ChargeComponent struct {

	// The amount of the charge.
	ChargeAmount *Currency `json:"ChargeAmount,omitempty"`

	// The type of charge.
	ChargeType string `json:"ChargeType,omitempty"`
}

// Validate validates this charge component
func (m *ChargeComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChargeAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeComponent) validateChargeAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.ChargeAmount) { // not required
		return nil
	}

	if m.ChargeAmount != nil {
		if err := m.ChargeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ChargeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ChargeAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this charge component based on the context it is used
func (m *ChargeComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChargeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChargeComponent) contextValidateChargeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.ChargeAmount != nil {
		if err := m.ChargeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ChargeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ChargeAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChargeComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChargeComponent) UnmarshalBinary(b []byte) error {
	var res ChargeComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
