// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemovalShipmentEvent A removal shipment event for a removal order.
//
// swagger:model RemovalShipmentEvent
type RemovalShipmentEvent struct {

	// The merchant removal `orderId`.
	MerchantOrderID string `json:"MerchantOrderId,omitempty"`

	// The identifier for the removal shipment order.
	OrderID string `json:"OrderId,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// A list of removal shipment items.
	RemovalShipmentItemList RemovalShipmentItemList `json:"RemovalShipmentItemList,omitempty"`

	// The name of the store where the event occurred.
	StoreName string `json:"StoreName,omitempty"`

	// The type of removal order.
	//
	// Possible values:
	//
	// * `WHOLESALE_LIQUIDATION`
	TransactionType string `json:"TransactionType,omitempty"`
}

// Validate validates this removal shipment event
func (m *RemovalShipmentEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemovalShipmentItemList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemovalShipmentEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RemovalShipmentEvent) validateRemovalShipmentItemList(formats strfmt.Registry) error {
	if swag.IsZero(m.RemovalShipmentItemList) { // not required
		return nil
	}

	if err := m.RemovalShipmentItemList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RemovalShipmentItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RemovalShipmentItemList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this removal shipment event based on the context it is used
func (m *RemovalShipmentEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemovalShipmentItemList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemovalShipmentEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RemovalShipmentEvent) contextValidateRemovalShipmentItemList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RemovalShipmentItemList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RemovalShipmentItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RemovalShipmentItemList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemovalShipmentEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemovalShipmentEvent) UnmarshalBinary(b []byte) error {
	var res RemovalShipmentEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
