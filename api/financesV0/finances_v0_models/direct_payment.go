// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DirectPayment A payment made directly to a seller.
//
// swagger:model DirectPayment
type DirectPayment struct {

	// The amount of the direct payment.
	DirectPaymentAmount *Currency `json:"DirectPaymentAmount,omitempty"`

	// The type of payment.
	//
	// Possible values:
	//
	// * StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.
	//
	// * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.
	//
	// * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.
	//
	// * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.
	//
	// * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.
	//
	// * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
	DirectPaymentType string `json:"DirectPaymentType,omitempty"`
}

// Validate validates this direct payment
func (m *DirectPayment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirectPaymentAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectPayment) validateDirectPaymentAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.DirectPaymentAmount) { // not required
		return nil
	}

	if m.DirectPaymentAmount != nil {
		if err := m.DirectPaymentAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DirectPaymentAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DirectPaymentAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this direct payment based on the context it is used
func (m *DirectPayment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDirectPaymentAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectPayment) contextValidateDirectPaymentAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.DirectPaymentAmount != nil {
		if err := m.DirectPaymentAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DirectPaymentAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("DirectPaymentAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectPayment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectPayment) UnmarshalBinary(b []byte) error {
	var res DirectPayment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
