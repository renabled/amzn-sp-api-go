// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NetworkComminglingTransactionEvent A network commingling transaction event.
//
// swagger:model NetworkComminglingTransactionEvent
type NetworkComminglingTransactionEvent struct {

	// The Amazon Standard Identification Number (ASIN) of the swapped item.
	ASIN string `json:"ASIN,omitempty"`

	// The marketplace in which the event took place.
	MarketplaceID string `json:"MarketplaceId,omitempty"`

	// The identifier for the network item swap.
	NetCoTransactionID string `json:"NetCoTransactionID,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// The reason for the network item swap.
	SwapReason string `json:"SwapReason,omitempty"`

	// The tax on the network item swap paid by the seller.
	TaxAmount *Currency `json:"TaxAmount,omitempty"`

	// The price of the swapped item minus TaxAmount.
	TaxExclusiveAmount *Currency `json:"TaxExclusiveAmount,omitempty"`

	// The type of network item swap.
	//
	// Possible values:
	//
	// * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.
	//
	// * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
	TransactionType string `json:"TransactionType,omitempty"`
}

// Validate validates this network commingling transaction event
func (m *NetworkComminglingTransactionEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxExclusiveAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkComminglingTransactionEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *NetworkComminglingTransactionEvent) validateTaxAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxAmount) { // not required
		return nil
	}

	if m.TaxAmount != nil {
		if err := m.TaxAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkComminglingTransactionEvent) validateTaxExclusiveAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxExclusiveAmount) { // not required
		return nil
	}

	if m.TaxExclusiveAmount != nil {
		if err := m.TaxExclusiveAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxExclusiveAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxExclusiveAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this network commingling transaction event based on the context it is used
func (m *NetworkComminglingTransactionEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxExclusiveAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkComminglingTransactionEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *NetworkComminglingTransactionEvent) contextValidateTaxAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxAmount != nil {
		if err := m.TaxAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxAmount")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkComminglingTransactionEvent) contextValidateTaxExclusiveAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxExclusiveAmount != nil {
		if err := m.TaxExclusiveAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxExclusiveAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxExclusiveAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkComminglingTransactionEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkComminglingTransactionEvent) UnmarshalBinary(b []byte) error {
	var res NetworkComminglingTransactionEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
