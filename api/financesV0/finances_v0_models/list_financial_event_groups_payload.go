// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListFinancialEventGroupsPayload The payload for the `listFinancialEventGroups` operation.
//
// swagger:model ListFinancialEventGroupsPayload
type ListFinancialEventGroupsPayload struct {

	// financial event group list
	FinancialEventGroupList FinancialEventGroupList `json:"FinancialEventGroupList,omitempty"`

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken string `json:"NextToken,omitempty"`
}

// Validate validates this list financial event groups payload
func (m *ListFinancialEventGroupsPayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFinancialEventGroupList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListFinancialEventGroupsPayload) validateFinancialEventGroupList(formats strfmt.Registry) error {
	if swag.IsZero(m.FinancialEventGroupList) { // not required
		return nil
	}

	if err := m.FinancialEventGroupList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FinancialEventGroupList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FinancialEventGroupList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this list financial event groups payload based on the context it is used
func (m *ListFinancialEventGroupsPayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFinancialEventGroupList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListFinancialEventGroupsPayload) contextValidateFinancialEventGroupList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FinancialEventGroupList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FinancialEventGroupList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FinancialEventGroupList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListFinancialEventGroupsPayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListFinancialEventGroupsPayload) UnmarshalBinary(b []byte) error {
	var res ListFinancialEventGroupsPayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
