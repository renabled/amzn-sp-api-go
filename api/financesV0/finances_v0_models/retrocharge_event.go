// Code generated by go-swagger; DO NOT EDIT.

package finances_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RetrochargeEvent A retrocharge or retrocharge reversal.
//
// swagger:model RetrochargeEvent
type RetrochargeEvent struct {

	// An Amazon-defined identifier for an order.
	AmazonOrderID string `json:"AmazonOrderId,omitempty"`

	// The base tax associated with the retrocharge event.
	BaseTax *Currency `json:"BaseTax,omitempty"`

	// The name of the marketplace where the retrocharge event occurred.
	MarketplaceName string `json:"MarketplaceName,omitempty"`

	// The date and time when the financial event was posted.
	// Format: date-time
	PostedDate Date `json:"PostedDate,omitempty"`

	// The type of event.
	//
	// Possible values:
	//
	// * Retrocharge
	//
	// * RetrochargeReversal
	RetrochargeEventType string `json:"RetrochargeEventType,omitempty"`

	// A list of information about taxes withheld.
	RetrochargeTaxWithheldList TaxWithheldComponentList `json:"RetrochargeTaxWithheldList,omitempty"`

	// The shipping tax associated with the retrocharge event.
	ShippingTax *Currency `json:"ShippingTax,omitempty"`
}

// Validate validates this retrocharge event
func (m *RetrochargeEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseTax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetrochargeTaxWithheldList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingTax(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrochargeEvent) validateBaseTax(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseTax) { // not required
		return nil
	}

	if m.BaseTax != nil {
		if err := m.BaseTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BaseTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BaseTax")
			}
			return err
		}
	}

	return nil
}

func (m *RetrochargeEvent) validatePostedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PostedDate) { // not required
		return nil
	}

	if err := m.PostedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RetrochargeEvent) validateRetrochargeTaxWithheldList(formats strfmt.Registry) error {
	if swag.IsZero(m.RetrochargeTaxWithheldList) { // not required
		return nil
	}

	if err := m.RetrochargeTaxWithheldList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RetrochargeTaxWithheldList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RetrochargeTaxWithheldList")
		}
		return err
	}

	return nil
}

func (m *RetrochargeEvent) validateShippingTax(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingTax) { // not required
		return nil
	}

	if m.ShippingTax != nil {
		if err := m.ShippingTax.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingTax")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this retrocharge event based on the context it is used
func (m *RetrochargeEvent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBaseTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetrochargeTaxWithheldList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingTax(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrochargeEvent) contextValidateBaseTax(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseTax != nil {
		if err := m.BaseTax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BaseTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BaseTax")
			}
			return err
		}
	}

	return nil
}

func (m *RetrochargeEvent) contextValidatePostedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PostedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PostedDate")
		}
		return err
	}

	return nil
}

func (m *RetrochargeEvent) contextValidateRetrochargeTaxWithheldList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RetrochargeTaxWithheldList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RetrochargeTaxWithheldList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RetrochargeTaxWithheldList")
		}
		return err
	}

	return nil
}

func (m *RetrochargeEvent) contextValidateShippingTax(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingTax != nil {
		if err := m.ShippingTax.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingTax")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingTax")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrochargeEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrochargeEvent) UnmarshalBinary(b []byte) error {
	var res RetrochargeEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
