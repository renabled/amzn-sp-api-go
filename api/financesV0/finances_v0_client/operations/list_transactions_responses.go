// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/financesV0/finances_v0_models"
)

// ListTransactionsReader is a Reader for the ListTransactions structure.
type ListTransactionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTransactionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTransactionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListTransactionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListTransactionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListTransactionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListTransactionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListTransactionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListTransactionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListTransactionsOK creates a ListTransactionsOK with default headers values
func NewListTransactionsOK() *ListTransactionsOK {
	return &ListTransactionsOK{}
}

/*
ListTransactionsOK describes a response with status code 200, with default header values.

Success.
*/
type ListTransactionsOK struct {
	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions o k response has a 2xx status code
func (o *ListTransactionsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list transactions o k response has a 3xx status code
func (o *ListTransactionsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions o k response has a 4xx status code
func (o *ListTransactionsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list transactions o k response has a 5xx status code
func (o *ListTransactionsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list transactions o k response a status code equal to that given
func (o *ListTransactionsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListTransactionsOK) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsOK  %+v", 200, o.Payload)
}

func (o *ListTransactionsOK) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsOK  %+v", 200, o.Payload)
}

func (o *ListTransactionsOK) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsBadRequest creates a ListTransactionsBadRequest with default headers values
func NewListTransactionsBadRequest() *ListTransactionsBadRequest {
	return &ListTransactionsBadRequest{}
}

/*
ListTransactionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListTransactionsBadRequest struct {
	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions bad request response has a 2xx status code
func (o *ListTransactionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list transactions bad request response has a 3xx status code
func (o *ListTransactionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions bad request response has a 4xx status code
func (o *ListTransactionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list transactions bad request response has a 5xx status code
func (o *ListTransactionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list transactions bad request response a status code equal to that given
func (o *ListTransactionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListTransactionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListTransactionsBadRequest) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListTransactionsBadRequest) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsForbidden creates a ListTransactionsForbidden with default headers values
func NewListTransactionsForbidden() *ListTransactionsForbidden {
	return &ListTransactionsForbidden{}
}

/*
ListTransactionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListTransactionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions forbidden response has a 2xx status code
func (o *ListTransactionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list transactions forbidden response has a 3xx status code
func (o *ListTransactionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions forbidden response has a 4xx status code
func (o *ListTransactionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list transactions forbidden response has a 5xx status code
func (o *ListTransactionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list transactions forbidden response a status code equal to that given
func (o *ListTransactionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListTransactionsForbidden) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsForbidden  %+v", 403, o.Payload)
}

func (o *ListTransactionsForbidden) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsForbidden  %+v", 403, o.Payload)
}

func (o *ListTransactionsForbidden) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsNotFound creates a ListTransactionsNotFound with default headers values
func NewListTransactionsNotFound() *ListTransactionsNotFound {
	return &ListTransactionsNotFound{}
}

/*
ListTransactionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListTransactionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions not found response has a 2xx status code
func (o *ListTransactionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list transactions not found response has a 3xx status code
func (o *ListTransactionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions not found response has a 4xx status code
func (o *ListTransactionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list transactions not found response has a 5xx status code
func (o *ListTransactionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list transactions not found response a status code equal to that given
func (o *ListTransactionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListTransactionsNotFound) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *ListTransactionsNotFound) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsNotFound  %+v", 404, o.Payload)
}

func (o *ListTransactionsNotFound) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsTooManyRequests creates a ListTransactionsTooManyRequests with default headers values
func NewListTransactionsTooManyRequests() *ListTransactionsTooManyRequests {
	return &ListTransactionsTooManyRequests{}
}

/*
ListTransactionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListTransactionsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions too many requests response has a 2xx status code
func (o *ListTransactionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list transactions too many requests response has a 3xx status code
func (o *ListTransactionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions too many requests response has a 4xx status code
func (o *ListTransactionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list transactions too many requests response has a 5xx status code
func (o *ListTransactionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list transactions too many requests response a status code equal to that given
func (o *ListTransactionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListTransactionsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListTransactionsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListTransactionsTooManyRequests) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsInternalServerError creates a ListTransactionsInternalServerError with default headers values
func NewListTransactionsInternalServerError() *ListTransactionsInternalServerError {
	return &ListTransactionsInternalServerError{}
}

/*
ListTransactionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListTransactionsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions internal server error response has a 2xx status code
func (o *ListTransactionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list transactions internal server error response has a 3xx status code
func (o *ListTransactionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions internal server error response has a 4xx status code
func (o *ListTransactionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list transactions internal server error response has a 5xx status code
func (o *ListTransactionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list transactions internal server error response a status code equal to that given
func (o *ListTransactionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListTransactionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTransactionsInternalServerError) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTransactionsInternalServerError) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTransactionsServiceUnavailable creates a ListTransactionsServiceUnavailable with default headers values
func NewListTransactionsServiceUnavailable() *ListTransactionsServiceUnavailable {
	return &ListTransactionsServiceUnavailable{}
}

/*
ListTransactionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListTransactionsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListTransactionsResponse
}

// IsSuccess returns true when this list transactions service unavailable response has a 2xx status code
func (o *ListTransactionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list transactions service unavailable response has a 3xx status code
func (o *ListTransactionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list transactions service unavailable response has a 4xx status code
func (o *ListTransactionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list transactions service unavailable response has a 5xx status code
func (o *ListTransactionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list transactions service unavailable response a status code equal to that given
func (o *ListTransactionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListTransactionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListTransactionsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /finances/v0/transactions][%d] listTransactionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListTransactionsServiceUnavailable) GetPayload() *finances_v0_models.ListTransactionsResponse {
	return o.Payload
}

func (o *ListTransactionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListTransactionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
