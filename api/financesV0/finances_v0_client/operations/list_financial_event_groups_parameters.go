// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListFinancialEventGroupsParams creates a new ListFinancialEventGroupsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListFinancialEventGroupsParams() *ListFinancialEventGroupsParams {
	return &ListFinancialEventGroupsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListFinancialEventGroupsParamsWithTimeout creates a new ListFinancialEventGroupsParams object
// with the ability to set a timeout on a request.
func NewListFinancialEventGroupsParamsWithTimeout(timeout time.Duration) *ListFinancialEventGroupsParams {
	return &ListFinancialEventGroupsParams{
		timeout: timeout,
	}
}

// NewListFinancialEventGroupsParamsWithContext creates a new ListFinancialEventGroupsParams object
// with the ability to set a context for a request.
func NewListFinancialEventGroupsParamsWithContext(ctx context.Context) *ListFinancialEventGroupsParams {
	return &ListFinancialEventGroupsParams{
		Context: ctx,
	}
}

// NewListFinancialEventGroupsParamsWithHTTPClient creates a new ListFinancialEventGroupsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListFinancialEventGroupsParamsWithHTTPClient(client *http.Client) *ListFinancialEventGroupsParams {
	return &ListFinancialEventGroupsParams{
		HTTPClient: client,
	}
}

/*
ListFinancialEventGroupsParams contains all the parameters to send to the API endpoint

	for the list financial event groups operation.

	Typically these are written to a http.Request.
*/
type ListFinancialEventGroupsParams struct {

	/* FinancialEventGroupStartedAfter.

	   A date that selects financial event groups that opened after (or at) a specified date and time, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. The date-time must be more than two minutes before you submit the request.

	   Format: date-time
	*/
	FinancialEventGroupStartedAfter *strfmt.DateTime

	/* FinancialEventGroupStartedBefore.

	   A date that selects financial event groups that opened before (but not at) a specified date and time, in [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) format. The date-time must be after `FinancialEventGroupStartedAfter` and more than two minutes before the time of request. If `FinancialEventGroupStartedAfter` and `FinancialEventGroupStartedBefore` are more than 180 days apart, no financial event groups are returned.

	   Format: date-time
	*/
	FinancialEventGroupStartedBefore *strfmt.DateTime

	/* MaxResultsPerPage.

	   The maximum number of results per page. If the response exceeds the maximum number of transactions or 10 MB, the response is `InvalidInput`.

	   Format: int32
	   Default: 10
	*/
	MaxResultsPerPage *int32

	/* NextToken.

	   The response includes `nextToken` when the number of results exceeds the specified `pageSize` value. To get the next page of results, call the operation with this token and include the same arguments as the call that produced the token. To get a complete list, call this operation until `nextToken` is null. Note that this operation can return empty pages.
	*/
	NextToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list financial event groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListFinancialEventGroupsParams) WithDefaults() *ListFinancialEventGroupsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list financial event groups params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListFinancialEventGroupsParams) SetDefaults() {
	var (
		maxResultsPerPageDefault = int32(10)
	)

	val := ListFinancialEventGroupsParams{
		MaxResultsPerPage: &maxResultsPerPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithTimeout(timeout time.Duration) *ListFinancialEventGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithContext(ctx context.Context) *ListFinancialEventGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithHTTPClient(client *http.Client) *ListFinancialEventGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFinancialEventGroupStartedAfter adds the financialEventGroupStartedAfter to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithFinancialEventGroupStartedAfter(financialEventGroupStartedAfter *strfmt.DateTime) *ListFinancialEventGroupsParams {
	o.SetFinancialEventGroupStartedAfter(financialEventGroupStartedAfter)
	return o
}

// SetFinancialEventGroupStartedAfter adds the financialEventGroupStartedAfter to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetFinancialEventGroupStartedAfter(financialEventGroupStartedAfter *strfmt.DateTime) {
	o.FinancialEventGroupStartedAfter = financialEventGroupStartedAfter
}

// WithFinancialEventGroupStartedBefore adds the financialEventGroupStartedBefore to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithFinancialEventGroupStartedBefore(financialEventGroupStartedBefore *strfmt.DateTime) *ListFinancialEventGroupsParams {
	o.SetFinancialEventGroupStartedBefore(financialEventGroupStartedBefore)
	return o
}

// SetFinancialEventGroupStartedBefore adds the financialEventGroupStartedBefore to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetFinancialEventGroupStartedBefore(financialEventGroupStartedBefore *strfmt.DateTime) {
	o.FinancialEventGroupStartedBefore = financialEventGroupStartedBefore
}

// WithMaxResultsPerPage adds the maxResultsPerPage to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithMaxResultsPerPage(maxResultsPerPage *int32) *ListFinancialEventGroupsParams {
	o.SetMaxResultsPerPage(maxResultsPerPage)
	return o
}

// SetMaxResultsPerPage adds the maxResultsPerPage to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetMaxResultsPerPage(maxResultsPerPage *int32) {
	o.MaxResultsPerPage = maxResultsPerPage
}

// WithNextToken adds the nextToken to the list financial event groups params
func (o *ListFinancialEventGroupsParams) WithNextToken(nextToken *string) *ListFinancialEventGroupsParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the list financial event groups params
func (o *ListFinancialEventGroupsParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WriteToRequest writes these params to a swagger request
func (o *ListFinancialEventGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FinancialEventGroupStartedAfter != nil {

		// query param FinancialEventGroupStartedAfter
		var qrFinancialEventGroupStartedAfter strfmt.DateTime

		if o.FinancialEventGroupStartedAfter != nil {
			qrFinancialEventGroupStartedAfter = *o.FinancialEventGroupStartedAfter
		}
		qFinancialEventGroupStartedAfter := qrFinancialEventGroupStartedAfter.String()
		if qFinancialEventGroupStartedAfter != "" {

			if err := r.SetQueryParam("FinancialEventGroupStartedAfter", qFinancialEventGroupStartedAfter); err != nil {
				return err
			}
		}
	}

	if o.FinancialEventGroupStartedBefore != nil {

		// query param FinancialEventGroupStartedBefore
		var qrFinancialEventGroupStartedBefore strfmt.DateTime

		if o.FinancialEventGroupStartedBefore != nil {
			qrFinancialEventGroupStartedBefore = *o.FinancialEventGroupStartedBefore
		}
		qFinancialEventGroupStartedBefore := qrFinancialEventGroupStartedBefore.String()
		if qFinancialEventGroupStartedBefore != "" {

			if err := r.SetQueryParam("FinancialEventGroupStartedBefore", qFinancialEventGroupStartedBefore); err != nil {
				return err
			}
		}
	}

	if o.MaxResultsPerPage != nil {

		// query param MaxResultsPerPage
		var qrMaxResultsPerPage int32

		if o.MaxResultsPerPage != nil {
			qrMaxResultsPerPage = *o.MaxResultsPerPage
		}
		qMaxResultsPerPage := swag.FormatInt32(qrMaxResultsPerPage)
		if qMaxResultsPerPage != "" {

			if err := r.SetQueryParam("MaxResultsPerPage", qMaxResultsPerPage); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param NextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("NextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
