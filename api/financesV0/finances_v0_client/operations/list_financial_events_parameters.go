// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListFinancialEventsParams creates a new ListFinancialEventsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListFinancialEventsParams() *ListFinancialEventsParams {
	return &ListFinancialEventsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListFinancialEventsParamsWithTimeout creates a new ListFinancialEventsParams object
// with the ability to set a timeout on a request.
func NewListFinancialEventsParamsWithTimeout(timeout time.Duration) *ListFinancialEventsParams {
	return &ListFinancialEventsParams{
		timeout: timeout,
	}
}

// NewListFinancialEventsParamsWithContext creates a new ListFinancialEventsParams object
// with the ability to set a context for a request.
func NewListFinancialEventsParamsWithContext(ctx context.Context) *ListFinancialEventsParams {
	return &ListFinancialEventsParams{
		Context: ctx,
	}
}

// NewListFinancialEventsParamsWithHTTPClient creates a new ListFinancialEventsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListFinancialEventsParamsWithHTTPClient(client *http.Client) *ListFinancialEventsParams {
	return &ListFinancialEventsParams{
		HTTPClient: client,
	}
}

/*
ListFinancialEventsParams contains all the parameters to send to the API endpoint

	for the list financial events operation.

	Typically these are written to a http.Request.
*/
type ListFinancialEventsParams struct {

	/* MaxResultsPerPage.

	   The maximum number of results to return per page.

	   Format: int32
	   Default: 100
	*/
	MaxResultsPerPage *int32

	/* NextToken.

	   A string token returned in the response of your previous request.
	*/
	NextToken *string

	/* PostedAfter.

	   A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format.

	   Format: date-time
	*/
	PostedAfter *strfmt.DateTime

	/* PostedBefore.

	   A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes.

	   Format: date-time
	*/
	PostedBefore *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list financial events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListFinancialEventsParams) WithDefaults() *ListFinancialEventsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list financial events params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListFinancialEventsParams) SetDefaults() {
	var (
		maxResultsPerPageDefault = int32(100)
	)

	val := ListFinancialEventsParams{
		MaxResultsPerPage: &maxResultsPerPageDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list financial events params
func (o *ListFinancialEventsParams) WithTimeout(timeout time.Duration) *ListFinancialEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list financial events params
func (o *ListFinancialEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list financial events params
func (o *ListFinancialEventsParams) WithContext(ctx context.Context) *ListFinancialEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list financial events params
func (o *ListFinancialEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list financial events params
func (o *ListFinancialEventsParams) WithHTTPClient(client *http.Client) *ListFinancialEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list financial events params
func (o *ListFinancialEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMaxResultsPerPage adds the maxResultsPerPage to the list financial events params
func (o *ListFinancialEventsParams) WithMaxResultsPerPage(maxResultsPerPage *int32) *ListFinancialEventsParams {
	o.SetMaxResultsPerPage(maxResultsPerPage)
	return o
}

// SetMaxResultsPerPage adds the maxResultsPerPage to the list financial events params
func (o *ListFinancialEventsParams) SetMaxResultsPerPage(maxResultsPerPage *int32) {
	o.MaxResultsPerPage = maxResultsPerPage
}

// WithNextToken adds the nextToken to the list financial events params
func (o *ListFinancialEventsParams) WithNextToken(nextToken *string) *ListFinancialEventsParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the list financial events params
func (o *ListFinancialEventsParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithPostedAfter adds the postedAfter to the list financial events params
func (o *ListFinancialEventsParams) WithPostedAfter(postedAfter *strfmt.DateTime) *ListFinancialEventsParams {
	o.SetPostedAfter(postedAfter)
	return o
}

// SetPostedAfter adds the postedAfter to the list financial events params
func (o *ListFinancialEventsParams) SetPostedAfter(postedAfter *strfmt.DateTime) {
	o.PostedAfter = postedAfter
}

// WithPostedBefore adds the postedBefore to the list financial events params
func (o *ListFinancialEventsParams) WithPostedBefore(postedBefore *strfmt.DateTime) *ListFinancialEventsParams {
	o.SetPostedBefore(postedBefore)
	return o
}

// SetPostedBefore adds the postedBefore to the list financial events params
func (o *ListFinancialEventsParams) SetPostedBefore(postedBefore *strfmt.DateTime) {
	o.PostedBefore = postedBefore
}

// WriteToRequest writes these params to a swagger request
func (o *ListFinancialEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MaxResultsPerPage != nil {

		// query param MaxResultsPerPage
		var qrMaxResultsPerPage int32

		if o.MaxResultsPerPage != nil {
			qrMaxResultsPerPage = *o.MaxResultsPerPage
		}
		qMaxResultsPerPage := swag.FormatInt32(qrMaxResultsPerPage)
		if qMaxResultsPerPage != "" {

			if err := r.SetQueryParam("MaxResultsPerPage", qMaxResultsPerPage); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param NextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("NextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.PostedAfter != nil {

		// query param PostedAfter
		var qrPostedAfter strfmt.DateTime

		if o.PostedAfter != nil {
			qrPostedAfter = *o.PostedAfter
		}
		qPostedAfter := qrPostedAfter.String()
		if qPostedAfter != "" {

			if err := r.SetQueryParam("PostedAfter", qPostedAfter); err != nil {
				return err
			}
		}
	}

	if o.PostedBefore != nil {

		// query param PostedBefore
		var qrPostedBefore strfmt.DateTime

		if o.PostedBefore != nil {
			qrPostedBefore = *o.PostedBefore
		}
		qPostedBefore := qrPostedBefore.String()
		if qPostedBefore != "" {

			if err := r.SetQueryParam("PostedBefore", qPostedBefore); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
