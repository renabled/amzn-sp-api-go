// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/financesV0/finances_v0_models"
)

// ListFinancialEventsByGroupIDReader is a Reader for the ListFinancialEventsByGroupID structure.
type ListFinancialEventsByGroupIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFinancialEventsByGroupIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListFinancialEventsByGroupIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListFinancialEventsByGroupIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListFinancialEventsByGroupIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListFinancialEventsByGroupIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListFinancialEventsByGroupIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListFinancialEventsByGroupIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListFinancialEventsByGroupIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListFinancialEventsByGroupIDOK creates a ListFinancialEventsByGroupIDOK with default headers values
func NewListFinancialEventsByGroupIDOK() *ListFinancialEventsByGroupIDOK {
	return &ListFinancialEventsByGroupIDOK{}
}

/*
ListFinancialEventsByGroupIDOK describes a response with status code 200, with default header values.

Success.
*/
type ListFinancialEventsByGroupIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id o k response has a 2xx status code
func (o *ListFinancialEventsByGroupIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list financial events by group Id o k response has a 3xx status code
func (o *ListFinancialEventsByGroupIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id o k response has a 4xx status code
func (o *ListFinancialEventsByGroupIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list financial events by group Id o k response has a 5xx status code
func (o *ListFinancialEventsByGroupIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list financial events by group Id o k response a status code equal to that given
func (o *ListFinancialEventsByGroupIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListFinancialEventsByGroupIDOK) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdOK  %+v", 200, o.Payload)
}

func (o *ListFinancialEventsByGroupIDOK) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdOK  %+v", 200, o.Payload)
}

func (o *ListFinancialEventsByGroupIDOK) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFinancialEventsByGroupIDBadRequest creates a ListFinancialEventsByGroupIDBadRequest with default headers values
func NewListFinancialEventsByGroupIDBadRequest() *ListFinancialEventsByGroupIDBadRequest {
	return &ListFinancialEventsByGroupIDBadRequest{}
}

/*
ListFinancialEventsByGroupIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListFinancialEventsByGroupIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id bad request response has a 2xx status code
func (o *ListFinancialEventsByGroupIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list financial events by group Id bad request response has a 3xx status code
func (o *ListFinancialEventsByGroupIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id bad request response has a 4xx status code
func (o *ListFinancialEventsByGroupIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list financial events by group Id bad request response has a 5xx status code
func (o *ListFinancialEventsByGroupIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list financial events by group Id bad request response a status code equal to that given
func (o *ListFinancialEventsByGroupIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListFinancialEventsByGroupIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdBadRequest  %+v", 400, o.Payload)
}

func (o *ListFinancialEventsByGroupIDBadRequest) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdBadRequest  %+v", 400, o.Payload)
}

func (o *ListFinancialEventsByGroupIDBadRequest) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFinancialEventsByGroupIDForbidden creates a ListFinancialEventsByGroupIDForbidden with default headers values
func NewListFinancialEventsByGroupIDForbidden() *ListFinancialEventsByGroupIDForbidden {
	return &ListFinancialEventsByGroupIDForbidden{}
}

/*
ListFinancialEventsByGroupIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListFinancialEventsByGroupIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id forbidden response has a 2xx status code
func (o *ListFinancialEventsByGroupIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list financial events by group Id forbidden response has a 3xx status code
func (o *ListFinancialEventsByGroupIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id forbidden response has a 4xx status code
func (o *ListFinancialEventsByGroupIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list financial events by group Id forbidden response has a 5xx status code
func (o *ListFinancialEventsByGroupIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list financial events by group Id forbidden response a status code equal to that given
func (o *ListFinancialEventsByGroupIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListFinancialEventsByGroupIDForbidden) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdForbidden  %+v", 403, o.Payload)
}

func (o *ListFinancialEventsByGroupIDForbidden) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdForbidden  %+v", 403, o.Payload)
}

func (o *ListFinancialEventsByGroupIDForbidden) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFinancialEventsByGroupIDNotFound creates a ListFinancialEventsByGroupIDNotFound with default headers values
func NewListFinancialEventsByGroupIDNotFound() *ListFinancialEventsByGroupIDNotFound {
	return &ListFinancialEventsByGroupIDNotFound{}
}

/*
ListFinancialEventsByGroupIDNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListFinancialEventsByGroupIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id not found response has a 2xx status code
func (o *ListFinancialEventsByGroupIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list financial events by group Id not found response has a 3xx status code
func (o *ListFinancialEventsByGroupIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id not found response has a 4xx status code
func (o *ListFinancialEventsByGroupIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list financial events by group Id not found response has a 5xx status code
func (o *ListFinancialEventsByGroupIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list financial events by group Id not found response a status code equal to that given
func (o *ListFinancialEventsByGroupIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListFinancialEventsByGroupIDNotFound) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdNotFound  %+v", 404, o.Payload)
}

func (o *ListFinancialEventsByGroupIDNotFound) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdNotFound  %+v", 404, o.Payload)
}

func (o *ListFinancialEventsByGroupIDNotFound) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFinancialEventsByGroupIDTooManyRequests creates a ListFinancialEventsByGroupIDTooManyRequests with default headers values
func NewListFinancialEventsByGroupIDTooManyRequests() *ListFinancialEventsByGroupIDTooManyRequests {
	return &ListFinancialEventsByGroupIDTooManyRequests{}
}

/*
ListFinancialEventsByGroupIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListFinancialEventsByGroupIDTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id too many requests response has a 2xx status code
func (o *ListFinancialEventsByGroupIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list financial events by group Id too many requests response has a 3xx status code
func (o *ListFinancialEventsByGroupIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id too many requests response has a 4xx status code
func (o *ListFinancialEventsByGroupIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list financial events by group Id too many requests response has a 5xx status code
func (o *ListFinancialEventsByGroupIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list financial events by group Id too many requests response a status code equal to that given
func (o *ListFinancialEventsByGroupIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListFinancialEventsByGroupIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListFinancialEventsByGroupIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListFinancialEventsByGroupIDTooManyRequests) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFinancialEventsByGroupIDInternalServerError creates a ListFinancialEventsByGroupIDInternalServerError with default headers values
func NewListFinancialEventsByGroupIDInternalServerError() *ListFinancialEventsByGroupIDInternalServerError {
	return &ListFinancialEventsByGroupIDInternalServerError{}
}

/*
ListFinancialEventsByGroupIDInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListFinancialEventsByGroupIDInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id internal server error response has a 2xx status code
func (o *ListFinancialEventsByGroupIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list financial events by group Id internal server error response has a 3xx status code
func (o *ListFinancialEventsByGroupIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id internal server error response has a 4xx status code
func (o *ListFinancialEventsByGroupIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list financial events by group Id internal server error response has a 5xx status code
func (o *ListFinancialEventsByGroupIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list financial events by group Id internal server error response a status code equal to that given
func (o *ListFinancialEventsByGroupIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListFinancialEventsByGroupIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdInternalServerError  %+v", 500, o.Payload)
}

func (o *ListFinancialEventsByGroupIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdInternalServerError  %+v", 500, o.Payload)
}

func (o *ListFinancialEventsByGroupIDInternalServerError) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFinancialEventsByGroupIDServiceUnavailable creates a ListFinancialEventsByGroupIDServiceUnavailable with default headers values
func NewListFinancialEventsByGroupIDServiceUnavailable() *ListFinancialEventsByGroupIDServiceUnavailable {
	return &ListFinancialEventsByGroupIDServiceUnavailable{}
}

/*
ListFinancialEventsByGroupIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListFinancialEventsByGroupIDServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *finances_v0_models.ListFinancialEventsResponse
}

// IsSuccess returns true when this list financial events by group Id service unavailable response has a 2xx status code
func (o *ListFinancialEventsByGroupIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list financial events by group Id service unavailable response has a 3xx status code
func (o *ListFinancialEventsByGroupIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list financial events by group Id service unavailable response has a 4xx status code
func (o *ListFinancialEventsByGroupIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list financial events by group Id service unavailable response has a 5xx status code
func (o *ListFinancialEventsByGroupIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list financial events by group Id service unavailable response a status code equal to that given
func (o *ListFinancialEventsByGroupIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListFinancialEventsByGroupIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListFinancialEventsByGroupIDServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /finances/v0/financialEventGroups/{eventGroupId}/financialEvents][%d] listFinancialEventsByGroupIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListFinancialEventsByGroupIDServiceUnavailable) GetPayload() *finances_v0_models.ListFinancialEventsResponse {
	return o.Payload
}

func (o *ListFinancialEventsByGroupIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(finances_v0_models.ListFinancialEventsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
