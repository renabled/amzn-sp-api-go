// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// PostContentDocumentAsinRelationsReader is a Reader for the PostContentDocumentAsinRelations structure.
type PostContentDocumentAsinRelationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostContentDocumentAsinRelationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostContentDocumentAsinRelationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostContentDocumentAsinRelationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostContentDocumentAsinRelationsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostContentDocumentAsinRelationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostContentDocumentAsinRelationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostContentDocumentAsinRelationsGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostContentDocumentAsinRelationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostContentDocumentAsinRelationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostContentDocumentAsinRelationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostContentDocumentAsinRelationsOK creates a PostContentDocumentAsinRelationsOK with default headers values
func NewPostContentDocumentAsinRelationsOK() *PostContentDocumentAsinRelationsOK {
	return &PostContentDocumentAsinRelationsOK{}
}

/*
PostContentDocumentAsinRelationsOK describes a response with status code 200, with default header values.

Success.
*/
type PostContentDocumentAsinRelationsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.PostContentDocumentAsinRelationsResponse
}

// IsSuccess returns true when this post content document asin relations o k response has a 2xx status code
func (o *PostContentDocumentAsinRelationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post content document asin relations o k response has a 3xx status code
func (o *PostContentDocumentAsinRelationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations o k response has a 4xx status code
func (o *PostContentDocumentAsinRelationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post content document asin relations o k response has a 5xx status code
func (o *PostContentDocumentAsinRelationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations o k response a status code equal to that given
func (o *PostContentDocumentAsinRelationsOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostContentDocumentAsinRelationsOK) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsOK  %+v", 200, o.Payload)
}

func (o *PostContentDocumentAsinRelationsOK) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsOK  %+v", 200, o.Payload)
}

func (o *PostContentDocumentAsinRelationsOK) GetPayload() *aplus_content_2020_11_01_models.PostContentDocumentAsinRelationsResponse {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.PostContentDocumentAsinRelationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsBadRequest creates a PostContentDocumentAsinRelationsBadRequest with default headers values
func NewPostContentDocumentAsinRelationsBadRequest() *PostContentDocumentAsinRelationsBadRequest {
	return &PostContentDocumentAsinRelationsBadRequest{}
}

/*
PostContentDocumentAsinRelationsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PostContentDocumentAsinRelationsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations bad request response has a 2xx status code
func (o *PostContentDocumentAsinRelationsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations bad request response has a 3xx status code
func (o *PostContentDocumentAsinRelationsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations bad request response has a 4xx status code
func (o *PostContentDocumentAsinRelationsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document asin relations bad request response has a 5xx status code
func (o *PostContentDocumentAsinRelationsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations bad request response a status code equal to that given
func (o *PostContentDocumentAsinRelationsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostContentDocumentAsinRelationsBadRequest) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsBadRequest  %+v", 400, o.Payload)
}

func (o *PostContentDocumentAsinRelationsBadRequest) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsBadRequest  %+v", 400, o.Payload)
}

func (o *PostContentDocumentAsinRelationsBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsUnauthorized creates a PostContentDocumentAsinRelationsUnauthorized with default headers values
func NewPostContentDocumentAsinRelationsUnauthorized() *PostContentDocumentAsinRelationsUnauthorized {
	return &PostContentDocumentAsinRelationsUnauthorized{}
}

/*
PostContentDocumentAsinRelationsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type PostContentDocumentAsinRelationsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations unauthorized response has a 2xx status code
func (o *PostContentDocumentAsinRelationsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations unauthorized response has a 3xx status code
func (o *PostContentDocumentAsinRelationsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations unauthorized response has a 4xx status code
func (o *PostContentDocumentAsinRelationsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document asin relations unauthorized response has a 5xx status code
func (o *PostContentDocumentAsinRelationsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations unauthorized response a status code equal to that given
func (o *PostContentDocumentAsinRelationsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostContentDocumentAsinRelationsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostContentDocumentAsinRelationsUnauthorized) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsUnauthorized  %+v", 401, o.Payload)
}

func (o *PostContentDocumentAsinRelationsUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsForbidden creates a PostContentDocumentAsinRelationsForbidden with default headers values
func NewPostContentDocumentAsinRelationsForbidden() *PostContentDocumentAsinRelationsForbidden {
	return &PostContentDocumentAsinRelationsForbidden{}
}

/*
PostContentDocumentAsinRelationsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type PostContentDocumentAsinRelationsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations forbidden response has a 2xx status code
func (o *PostContentDocumentAsinRelationsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations forbidden response has a 3xx status code
func (o *PostContentDocumentAsinRelationsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations forbidden response has a 4xx status code
func (o *PostContentDocumentAsinRelationsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document asin relations forbidden response has a 5xx status code
func (o *PostContentDocumentAsinRelationsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations forbidden response a status code equal to that given
func (o *PostContentDocumentAsinRelationsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostContentDocumentAsinRelationsForbidden) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsForbidden  %+v", 403, o.Payload)
}

func (o *PostContentDocumentAsinRelationsForbidden) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsForbidden  %+v", 403, o.Payload)
}

func (o *PostContentDocumentAsinRelationsForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsNotFound creates a PostContentDocumentAsinRelationsNotFound with default headers values
func NewPostContentDocumentAsinRelationsNotFound() *PostContentDocumentAsinRelationsNotFound {
	return &PostContentDocumentAsinRelationsNotFound{}
}

/*
PostContentDocumentAsinRelationsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type PostContentDocumentAsinRelationsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations not found response has a 2xx status code
func (o *PostContentDocumentAsinRelationsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations not found response has a 3xx status code
func (o *PostContentDocumentAsinRelationsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations not found response has a 4xx status code
func (o *PostContentDocumentAsinRelationsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document asin relations not found response has a 5xx status code
func (o *PostContentDocumentAsinRelationsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations not found response a status code equal to that given
func (o *PostContentDocumentAsinRelationsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostContentDocumentAsinRelationsNotFound) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsNotFound  %+v", 404, o.Payload)
}

func (o *PostContentDocumentAsinRelationsNotFound) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsNotFound  %+v", 404, o.Payload)
}

func (o *PostContentDocumentAsinRelationsNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsGone creates a PostContentDocumentAsinRelationsGone with default headers values
func NewPostContentDocumentAsinRelationsGone() *PostContentDocumentAsinRelationsGone {
	return &PostContentDocumentAsinRelationsGone{}
}

/*
PostContentDocumentAsinRelationsGone describes a response with status code 410, with default header values.

The specified resource no longer exists.
*/
type PostContentDocumentAsinRelationsGone struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations gone response has a 2xx status code
func (o *PostContentDocumentAsinRelationsGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations gone response has a 3xx status code
func (o *PostContentDocumentAsinRelationsGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations gone response has a 4xx status code
func (o *PostContentDocumentAsinRelationsGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document asin relations gone response has a 5xx status code
func (o *PostContentDocumentAsinRelationsGone) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations gone response a status code equal to that given
func (o *PostContentDocumentAsinRelationsGone) IsCode(code int) bool {
	return code == 410
}

func (o *PostContentDocumentAsinRelationsGone) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsGone  %+v", 410, o.Payload)
}

func (o *PostContentDocumentAsinRelationsGone) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsGone  %+v", 410, o.Payload)
}

func (o *PostContentDocumentAsinRelationsGone) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsTooManyRequests creates a PostContentDocumentAsinRelationsTooManyRequests with default headers values
func NewPostContentDocumentAsinRelationsTooManyRequests() *PostContentDocumentAsinRelationsTooManyRequests {
	return &PostContentDocumentAsinRelationsTooManyRequests{}
}

/*
PostContentDocumentAsinRelationsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PostContentDocumentAsinRelationsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations too many requests response has a 2xx status code
func (o *PostContentDocumentAsinRelationsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations too many requests response has a 3xx status code
func (o *PostContentDocumentAsinRelationsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations too many requests response has a 4xx status code
func (o *PostContentDocumentAsinRelationsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document asin relations too many requests response has a 5xx status code
func (o *PostContentDocumentAsinRelationsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document asin relations too many requests response a status code equal to that given
func (o *PostContentDocumentAsinRelationsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostContentDocumentAsinRelationsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostContentDocumentAsinRelationsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostContentDocumentAsinRelationsTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsInternalServerError creates a PostContentDocumentAsinRelationsInternalServerError with default headers values
func NewPostContentDocumentAsinRelationsInternalServerError() *PostContentDocumentAsinRelationsInternalServerError {
	return &PostContentDocumentAsinRelationsInternalServerError{}
}

/*
PostContentDocumentAsinRelationsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type PostContentDocumentAsinRelationsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations internal server error response has a 2xx status code
func (o *PostContentDocumentAsinRelationsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations internal server error response has a 3xx status code
func (o *PostContentDocumentAsinRelationsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations internal server error response has a 4xx status code
func (o *PostContentDocumentAsinRelationsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post content document asin relations internal server error response has a 5xx status code
func (o *PostContentDocumentAsinRelationsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post content document asin relations internal server error response a status code equal to that given
func (o *PostContentDocumentAsinRelationsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostContentDocumentAsinRelationsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostContentDocumentAsinRelationsInternalServerError) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsInternalServerError  %+v", 500, o.Payload)
}

func (o *PostContentDocumentAsinRelationsInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentAsinRelationsServiceUnavailable creates a PostContentDocumentAsinRelationsServiceUnavailable with default headers values
func NewPostContentDocumentAsinRelationsServiceUnavailable() *PostContentDocumentAsinRelationsServiceUnavailable {
	return &PostContentDocumentAsinRelationsServiceUnavailable{}
}

/*
PostContentDocumentAsinRelationsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PostContentDocumentAsinRelationsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document asin relations service unavailable response has a 2xx status code
func (o *PostContentDocumentAsinRelationsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document asin relations service unavailable response has a 3xx status code
func (o *PostContentDocumentAsinRelationsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document asin relations service unavailable response has a 4xx status code
func (o *PostContentDocumentAsinRelationsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post content document asin relations service unavailable response has a 5xx status code
func (o *PostContentDocumentAsinRelationsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post content document asin relations service unavailable response a status code equal to that given
func (o *PostContentDocumentAsinRelationsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostContentDocumentAsinRelationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostContentDocumentAsinRelationsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins][%d] postContentDocumentAsinRelationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostContentDocumentAsinRelationsServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentAsinRelationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
