// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// CreateContentDocumentReader is a Reader for the CreateContentDocument structure.
type CreateContentDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateContentDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateContentDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateContentDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateContentDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateContentDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateContentDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateContentDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateContentDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateContentDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateContentDocumentOK creates a CreateContentDocumentOK with default headers values
func NewCreateContentDocumentOK() *CreateContentDocumentOK {
	return &CreateContentDocumentOK{}
}

/*
CreateContentDocumentOK describes a response with status code 200, with default header values.

Success.
*/
type CreateContentDocumentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.PostContentDocumentResponse
}

// IsSuccess returns true when this create content document o k response has a 2xx status code
func (o *CreateContentDocumentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create content document o k response has a 3xx status code
func (o *CreateContentDocumentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document o k response has a 4xx status code
func (o *CreateContentDocumentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create content document o k response has a 5xx status code
func (o *CreateContentDocumentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create content document o k response a status code equal to that given
func (o *CreateContentDocumentOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateContentDocumentOK) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentOK  %+v", 200, o.Payload)
}

func (o *CreateContentDocumentOK) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentOK  %+v", 200, o.Payload)
}

func (o *CreateContentDocumentOK) GetPayload() *aplus_content_2020_11_01_models.PostContentDocumentResponse {
	return o.Payload
}

func (o *CreateContentDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.PostContentDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentBadRequest creates a CreateContentDocumentBadRequest with default headers values
func NewCreateContentDocumentBadRequest() *CreateContentDocumentBadRequest {
	return &CreateContentDocumentBadRequest{}
}

/*
CreateContentDocumentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateContentDocumentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document bad request response has a 2xx status code
func (o *CreateContentDocumentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document bad request response has a 3xx status code
func (o *CreateContentDocumentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document bad request response has a 4xx status code
func (o *CreateContentDocumentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content document bad request response has a 5xx status code
func (o *CreateContentDocumentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create content document bad request response a status code equal to that given
func (o *CreateContentDocumentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateContentDocumentBadRequest) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateContentDocumentBadRequest) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateContentDocumentBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentUnauthorized creates a CreateContentDocumentUnauthorized with default headers values
func NewCreateContentDocumentUnauthorized() *CreateContentDocumentUnauthorized {
	return &CreateContentDocumentUnauthorized{}
}

/*
CreateContentDocumentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateContentDocumentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document unauthorized response has a 2xx status code
func (o *CreateContentDocumentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document unauthorized response has a 3xx status code
func (o *CreateContentDocumentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document unauthorized response has a 4xx status code
func (o *CreateContentDocumentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content document unauthorized response has a 5xx status code
func (o *CreateContentDocumentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create content document unauthorized response a status code equal to that given
func (o *CreateContentDocumentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateContentDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateContentDocumentUnauthorized) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateContentDocumentUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentForbidden creates a CreateContentDocumentForbidden with default headers values
func NewCreateContentDocumentForbidden() *CreateContentDocumentForbidden {
	return &CreateContentDocumentForbidden{}
}

/*
CreateContentDocumentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateContentDocumentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document forbidden response has a 2xx status code
func (o *CreateContentDocumentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document forbidden response has a 3xx status code
func (o *CreateContentDocumentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document forbidden response has a 4xx status code
func (o *CreateContentDocumentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content document forbidden response has a 5xx status code
func (o *CreateContentDocumentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create content document forbidden response a status code equal to that given
func (o *CreateContentDocumentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateContentDocumentForbidden) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentForbidden  %+v", 403, o.Payload)
}

func (o *CreateContentDocumentForbidden) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentForbidden  %+v", 403, o.Payload)
}

func (o *CreateContentDocumentForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentNotFound creates a CreateContentDocumentNotFound with default headers values
func NewCreateContentDocumentNotFound() *CreateContentDocumentNotFound {
	return &CreateContentDocumentNotFound{}
}

/*
CreateContentDocumentNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateContentDocumentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document not found response has a 2xx status code
func (o *CreateContentDocumentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document not found response has a 3xx status code
func (o *CreateContentDocumentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document not found response has a 4xx status code
func (o *CreateContentDocumentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content document not found response has a 5xx status code
func (o *CreateContentDocumentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create content document not found response a status code equal to that given
func (o *CreateContentDocumentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateContentDocumentNotFound) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentNotFound  %+v", 404, o.Payload)
}

func (o *CreateContentDocumentNotFound) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentNotFound  %+v", 404, o.Payload)
}

func (o *CreateContentDocumentNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentTooManyRequests creates a CreateContentDocumentTooManyRequests with default headers values
func NewCreateContentDocumentTooManyRequests() *CreateContentDocumentTooManyRequests {
	return &CreateContentDocumentTooManyRequests{}
}

/*
CreateContentDocumentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateContentDocumentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document too many requests response has a 2xx status code
func (o *CreateContentDocumentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document too many requests response has a 3xx status code
func (o *CreateContentDocumentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document too many requests response has a 4xx status code
func (o *CreateContentDocumentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create content document too many requests response has a 5xx status code
func (o *CreateContentDocumentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create content document too many requests response a status code equal to that given
func (o *CreateContentDocumentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateContentDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateContentDocumentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateContentDocumentTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentInternalServerError creates a CreateContentDocumentInternalServerError with default headers values
func NewCreateContentDocumentInternalServerError() *CreateContentDocumentInternalServerError {
	return &CreateContentDocumentInternalServerError{}
}

/*
CreateContentDocumentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateContentDocumentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document internal server error response has a 2xx status code
func (o *CreateContentDocumentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document internal server error response has a 3xx status code
func (o *CreateContentDocumentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document internal server error response has a 4xx status code
func (o *CreateContentDocumentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create content document internal server error response has a 5xx status code
func (o *CreateContentDocumentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create content document internal server error response a status code equal to that given
func (o *CreateContentDocumentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateContentDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateContentDocumentInternalServerError) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateContentDocumentInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateContentDocumentServiceUnavailable creates a CreateContentDocumentServiceUnavailable with default headers values
func NewCreateContentDocumentServiceUnavailable() *CreateContentDocumentServiceUnavailable {
	return &CreateContentDocumentServiceUnavailable{}
}

/*
CreateContentDocumentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateContentDocumentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this create content document service unavailable response has a 2xx status code
func (o *CreateContentDocumentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create content document service unavailable response has a 3xx status code
func (o *CreateContentDocumentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create content document service unavailable response has a 4xx status code
func (o *CreateContentDocumentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create content document service unavailable response has a 5xx status code
func (o *CreateContentDocumentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create content document service unavailable response a status code equal to that given
func (o *CreateContentDocumentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateContentDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateContentDocumentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments][%d] createContentDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateContentDocumentServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *CreateContentDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
