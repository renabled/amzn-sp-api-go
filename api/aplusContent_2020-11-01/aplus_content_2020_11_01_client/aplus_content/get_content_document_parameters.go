// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetContentDocumentParams creates a new GetContentDocumentParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetContentDocumentParams() *GetContentDocumentParams {
	return &GetContentDocumentParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetContentDocumentParamsWithTimeout creates a new GetContentDocumentParams object
// with the ability to set a timeout on a request.
func NewGetContentDocumentParamsWithTimeout(timeout time.Duration) *GetContentDocumentParams {
	return &GetContentDocumentParams{
		timeout: timeout,
	}
}

// NewGetContentDocumentParamsWithContext creates a new GetContentDocumentParams object
// with the ability to set a context for a request.
func NewGetContentDocumentParamsWithContext(ctx context.Context) *GetContentDocumentParams {
	return &GetContentDocumentParams{
		Context: ctx,
	}
}

// NewGetContentDocumentParamsWithHTTPClient creates a new GetContentDocumentParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetContentDocumentParamsWithHTTPClient(client *http.Client) *GetContentDocumentParams {
	return &GetContentDocumentParams{
		HTTPClient: client,
	}
}

/* GetContentDocumentParams contains all the parameters to send to the API endpoint
   for the get content document operation.

   Typically these are written to a http.Request.
*/
type GetContentDocumentParams struct {

	/* ContentReferenceKey.

	   The unique reference key for the A+ Content document. A content reference key cannot form a permalink and may change in the future. A content reference key is not guaranteed to match any A+ Content identifier.
	*/
	ContentReferenceKey string

	/* IncludedDataSet.

	   The set of A+ Content data types to include in the response.
	*/
	IncludedDataSet []string

	/* MarketplaceID.

	   The identifier for the marketplace where the A+ Content is published.
	*/
	MarketplaceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get content document params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContentDocumentParams) WithDefaults() *GetContentDocumentParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get content document params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetContentDocumentParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get content document params
func (o *GetContentDocumentParams) WithTimeout(timeout time.Duration) *GetContentDocumentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get content document params
func (o *GetContentDocumentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get content document params
func (o *GetContentDocumentParams) WithContext(ctx context.Context) *GetContentDocumentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get content document params
func (o *GetContentDocumentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get content document params
func (o *GetContentDocumentParams) WithHTTPClient(client *http.Client) *GetContentDocumentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get content document params
func (o *GetContentDocumentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentReferenceKey adds the contentReferenceKey to the get content document params
func (o *GetContentDocumentParams) WithContentReferenceKey(contentReferenceKey string) *GetContentDocumentParams {
	o.SetContentReferenceKey(contentReferenceKey)
	return o
}

// SetContentReferenceKey adds the contentReferenceKey to the get content document params
func (o *GetContentDocumentParams) SetContentReferenceKey(contentReferenceKey string) {
	o.ContentReferenceKey = contentReferenceKey
}

// WithIncludedDataSet adds the includedDataSet to the get content document params
func (o *GetContentDocumentParams) WithIncludedDataSet(includedDataSet []string) *GetContentDocumentParams {
	o.SetIncludedDataSet(includedDataSet)
	return o
}

// SetIncludedDataSet adds the includedDataSet to the get content document params
func (o *GetContentDocumentParams) SetIncludedDataSet(includedDataSet []string) {
	o.IncludedDataSet = includedDataSet
}

// WithMarketplaceID adds the marketplaceID to the get content document params
func (o *GetContentDocumentParams) WithMarketplaceID(marketplaceID string) *GetContentDocumentParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the get content document params
func (o *GetContentDocumentParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetContentDocumentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param contentReferenceKey
	if err := r.SetPathParam("contentReferenceKey", o.ContentReferenceKey); err != nil {
		return err
	}

	if o.IncludedDataSet != nil {

		// binding items for includedDataSet
		joinedIncludedDataSet := o.bindParamIncludedDataSet(reg)

		// query array param includedDataSet
		if err := r.SetQueryParam("includedDataSet", joinedIncludedDataSet...); err != nil {
			return err
		}
	}

	// query param marketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("marketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetContentDocument binds the parameter includedDataSet
func (o *GetContentDocumentParams) bindParamIncludedDataSet(formats strfmt.Registry) []string {
	includedDataSetIR := o.IncludedDataSet

	var includedDataSetIC []string
	for _, includedDataSetIIR := range includedDataSetIR { // explode []string

		includedDataSetIIV := includedDataSetIIR // string as string
		includedDataSetIC = append(includedDataSetIC, includedDataSetIIV)
	}

	// items.CollectionFormat: "csv"
	includedDataSetIS := swag.JoinByFormat(includedDataSetIC, "csv")

	return includedDataSetIS
}
