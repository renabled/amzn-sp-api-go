// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// GetContentDocumentReader is a Reader for the GetContentDocument structure.
type GetContentDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetContentDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetContentDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetContentDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetContentDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetContentDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetContentDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewGetContentDocumentGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetContentDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetContentDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetContentDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetContentDocumentOK creates a GetContentDocumentOK with default headers values
func NewGetContentDocumentOK() *GetContentDocumentOK {
	return &GetContentDocumentOK{}
}

/* GetContentDocumentOK describes a response with status code 200, with default header values.

Success.
*/
type GetContentDocumentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.GetContentDocumentResponse
}

func (o *GetContentDocumentOK) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentOK  %+v", 200, o.Payload)
}
func (o *GetContentDocumentOK) GetPayload() *aplus_content_2020_11_01_models.GetContentDocumentResponse {
	return o.Payload
}

func (o *GetContentDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.GetContentDocumentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentBadRequest creates a GetContentDocumentBadRequest with default headers values
func NewGetContentDocumentBadRequest() *GetContentDocumentBadRequest {
	return &GetContentDocumentBadRequest{}
}

/* GetContentDocumentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetContentDocumentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentBadRequest  %+v", 400, o.Payload)
}
func (o *GetContentDocumentBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentUnauthorized creates a GetContentDocumentUnauthorized with default headers values
func NewGetContentDocumentUnauthorized() *GetContentDocumentUnauthorized {
	return &GetContentDocumentUnauthorized{}
}

/* GetContentDocumentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetContentDocumentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentUnauthorized  %+v", 401, o.Payload)
}
func (o *GetContentDocumentUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentForbidden creates a GetContentDocumentForbidden with default headers values
func NewGetContentDocumentForbidden() *GetContentDocumentForbidden {
	return &GetContentDocumentForbidden{}
}

/* GetContentDocumentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetContentDocumentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentForbidden  %+v", 403, o.Payload)
}
func (o *GetContentDocumentForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentNotFound creates a GetContentDocumentNotFound with default headers values
func NewGetContentDocumentNotFound() *GetContentDocumentNotFound {
	return &GetContentDocumentNotFound{}
}

/* GetContentDocumentNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetContentDocumentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentNotFound  %+v", 404, o.Payload)
}
func (o *GetContentDocumentNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentGone creates a GetContentDocumentGone with default headers values
func NewGetContentDocumentGone() *GetContentDocumentGone {
	return &GetContentDocumentGone{}
}

/* GetContentDocumentGone describes a response with status code 410, with default header values.

The specified resource no longer exists.
*/
type GetContentDocumentGone struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentGone) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentGone  %+v", 410, o.Payload)
}
func (o *GetContentDocumentGone) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentTooManyRequests creates a GetContentDocumentTooManyRequests with default headers values
func NewGetContentDocumentTooManyRequests() *GetContentDocumentTooManyRequests {
	return &GetContentDocumentTooManyRequests{}
}

/* GetContentDocumentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetContentDocumentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetContentDocumentTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentInternalServerError creates a GetContentDocumentInternalServerError with default headers values
func NewGetContentDocumentInternalServerError() *GetContentDocumentInternalServerError {
	return &GetContentDocumentInternalServerError{}
}

/* GetContentDocumentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetContentDocumentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentInternalServerError  %+v", 500, o.Payload)
}
func (o *GetContentDocumentInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetContentDocumentServiceUnavailable creates a GetContentDocumentServiceUnavailable with default headers values
func NewGetContentDocumentServiceUnavailable() *GetContentDocumentServiceUnavailable {
	return &GetContentDocumentServiceUnavailable{}
}

/* GetContentDocumentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetContentDocumentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *GetContentDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments/{contentReferenceKey}][%d] getContentDocumentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetContentDocumentServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *GetContentDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
