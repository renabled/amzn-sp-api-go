// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// PostContentDocumentSuspendSubmissionReader is a Reader for the PostContentDocumentSuspendSubmission structure.
type PostContentDocumentSuspendSubmissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostContentDocumentSuspendSubmissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostContentDocumentSuspendSubmissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostContentDocumentSuspendSubmissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostContentDocumentSuspendSubmissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostContentDocumentSuspendSubmissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostContentDocumentSuspendSubmissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostContentDocumentSuspendSubmissionGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostContentDocumentSuspendSubmissionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostContentDocumentSuspendSubmissionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostContentDocumentSuspendSubmissionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostContentDocumentSuspendSubmissionOK creates a PostContentDocumentSuspendSubmissionOK with default headers values
func NewPostContentDocumentSuspendSubmissionOK() *PostContentDocumentSuspendSubmissionOK {
	return &PostContentDocumentSuspendSubmissionOK{}
}

/*
PostContentDocumentSuspendSubmissionOK describes a response with status code 200, with default header values.

Success.
*/
type PostContentDocumentSuspendSubmissionOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.PostContentDocumentSuspendSubmissionResponse
}

// IsSuccess returns true when this post content document suspend submission o k response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this post content document suspend submission o k response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission o k response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this post content document suspend submission o k response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission o k response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionOK) IsCode(code int) bool {
	return code == 200
}

func (o *PostContentDocumentSuspendSubmissionOK) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionOK  %+v", 200, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionOK) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionOK  %+v", 200, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionOK) GetPayload() *aplus_content_2020_11_01_models.PostContentDocumentSuspendSubmissionResponse {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.PostContentDocumentSuspendSubmissionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionBadRequest creates a PostContentDocumentSuspendSubmissionBadRequest with default headers values
func NewPostContentDocumentSuspendSubmissionBadRequest() *PostContentDocumentSuspendSubmissionBadRequest {
	return &PostContentDocumentSuspendSubmissionBadRequest{}
}

/*
PostContentDocumentSuspendSubmissionBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PostContentDocumentSuspendSubmissionBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission bad request response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission bad request response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission bad request response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document suspend submission bad request response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission bad request response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PostContentDocumentSuspendSubmissionBadRequest) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionBadRequest  %+v", 400, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionBadRequest) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionBadRequest  %+v", 400, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionUnauthorized creates a PostContentDocumentSuspendSubmissionUnauthorized with default headers values
func NewPostContentDocumentSuspendSubmissionUnauthorized() *PostContentDocumentSuspendSubmissionUnauthorized {
	return &PostContentDocumentSuspendSubmissionUnauthorized{}
}

/*
PostContentDocumentSuspendSubmissionUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type PostContentDocumentSuspendSubmissionUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission unauthorized response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission unauthorized response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission unauthorized response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document suspend submission unauthorized response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission unauthorized response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PostContentDocumentSuspendSubmissionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionUnauthorized  %+v", 401, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionUnauthorized) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionUnauthorized  %+v", 401, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionForbidden creates a PostContentDocumentSuspendSubmissionForbidden with default headers values
func NewPostContentDocumentSuspendSubmissionForbidden() *PostContentDocumentSuspendSubmissionForbidden {
	return &PostContentDocumentSuspendSubmissionForbidden{}
}

/*
PostContentDocumentSuspendSubmissionForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type PostContentDocumentSuspendSubmissionForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission forbidden response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission forbidden response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission forbidden response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document suspend submission forbidden response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission forbidden response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PostContentDocumentSuspendSubmissionForbidden) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionForbidden  %+v", 403, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionForbidden) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionForbidden  %+v", 403, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionNotFound creates a PostContentDocumentSuspendSubmissionNotFound with default headers values
func NewPostContentDocumentSuspendSubmissionNotFound() *PostContentDocumentSuspendSubmissionNotFound {
	return &PostContentDocumentSuspendSubmissionNotFound{}
}

/*
PostContentDocumentSuspendSubmissionNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type PostContentDocumentSuspendSubmissionNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission not found response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission not found response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission not found response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document suspend submission not found response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission not found response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PostContentDocumentSuspendSubmissionNotFound) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionNotFound  %+v", 404, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionNotFound) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionNotFound  %+v", 404, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionGone creates a PostContentDocumentSuspendSubmissionGone with default headers values
func NewPostContentDocumentSuspendSubmissionGone() *PostContentDocumentSuspendSubmissionGone {
	return &PostContentDocumentSuspendSubmissionGone{}
}

/*
PostContentDocumentSuspendSubmissionGone describes a response with status code 410, with default header values.

The specified resource no longer exists.
*/
type PostContentDocumentSuspendSubmissionGone struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission gone response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission gone response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission gone response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document suspend submission gone response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionGone) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission gone response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionGone) IsCode(code int) bool {
	return code == 410
}

func (o *PostContentDocumentSuspendSubmissionGone) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionGone  %+v", 410, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionGone) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionGone  %+v", 410, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionGone) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionTooManyRequests creates a PostContentDocumentSuspendSubmissionTooManyRequests with default headers values
func NewPostContentDocumentSuspendSubmissionTooManyRequests() *PostContentDocumentSuspendSubmissionTooManyRequests {
	return &PostContentDocumentSuspendSubmissionTooManyRequests{}
}

/*
PostContentDocumentSuspendSubmissionTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PostContentDocumentSuspendSubmissionTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission too many requests response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission too many requests response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission too many requests response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this post content document suspend submission too many requests response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this post content document suspend submission too many requests response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PostContentDocumentSuspendSubmissionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionTooManyRequests) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionTooManyRequests  %+v", 429, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionInternalServerError creates a PostContentDocumentSuspendSubmissionInternalServerError with default headers values
func NewPostContentDocumentSuspendSubmissionInternalServerError() *PostContentDocumentSuspendSubmissionInternalServerError {
	return &PostContentDocumentSuspendSubmissionInternalServerError{}
}

/*
PostContentDocumentSuspendSubmissionInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type PostContentDocumentSuspendSubmissionInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission internal server error response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission internal server error response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission internal server error response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this post content document suspend submission internal server error response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this post content document suspend submission internal server error response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PostContentDocumentSuspendSubmissionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionInternalServerError  %+v", 500, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionInternalServerError) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionInternalServerError  %+v", 500, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentSuspendSubmissionServiceUnavailable creates a PostContentDocumentSuspendSubmissionServiceUnavailable with default headers values
func NewPostContentDocumentSuspendSubmissionServiceUnavailable() *PostContentDocumentSuspendSubmissionServiceUnavailable {
	return &PostContentDocumentSuspendSubmissionServiceUnavailable{}
}

/*
PostContentDocumentSuspendSubmissionServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PostContentDocumentSuspendSubmissionServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this post content document suspend submission service unavailable response has a 2xx status code
func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this post content document suspend submission service unavailable response has a 3xx status code
func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this post content document suspend submission service unavailable response has a 4xx status code
func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this post content document suspend submission service unavailable response has a 5xx status code
func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this post content document suspend submission service unavailable response a status code equal to that given
func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions][%d] postContentDocumentSuspendSubmissionServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentSuspendSubmissionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
