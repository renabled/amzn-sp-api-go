// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// SearchContentPublishRecordsReader is a Reader for the SearchContentPublishRecords structure.
type SearchContentPublishRecordsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchContentPublishRecordsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchContentPublishRecordsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchContentPublishRecordsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchContentPublishRecordsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchContentPublishRecordsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchContentPublishRecordsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchContentPublishRecordsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchContentPublishRecordsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSearchContentPublishRecordsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchContentPublishRecordsOK creates a SearchContentPublishRecordsOK with default headers values
func NewSearchContentPublishRecordsOK() *SearchContentPublishRecordsOK {
	return &SearchContentPublishRecordsOK{}
}

/*
SearchContentPublishRecordsOK describes a response with status code 200, with default header values.

Success.
*/
type SearchContentPublishRecordsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.SearchContentPublishRecordsResponse
}

// IsSuccess returns true when this search content publish records o k response has a 2xx status code
func (o *SearchContentPublishRecordsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search content publish records o k response has a 3xx status code
func (o *SearchContentPublishRecordsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records o k response has a 4xx status code
func (o *SearchContentPublishRecordsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search content publish records o k response has a 5xx status code
func (o *SearchContentPublishRecordsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search content publish records o k response a status code equal to that given
func (o *SearchContentPublishRecordsOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchContentPublishRecordsOK) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsOK  %+v", 200, o.Payload)
}

func (o *SearchContentPublishRecordsOK) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsOK  %+v", 200, o.Payload)
}

func (o *SearchContentPublishRecordsOK) GetPayload() *aplus_content_2020_11_01_models.SearchContentPublishRecordsResponse {
	return o.Payload
}

func (o *SearchContentPublishRecordsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.SearchContentPublishRecordsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsBadRequest creates a SearchContentPublishRecordsBadRequest with default headers values
func NewSearchContentPublishRecordsBadRequest() *SearchContentPublishRecordsBadRequest {
	return &SearchContentPublishRecordsBadRequest{}
}

/*
SearchContentPublishRecordsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SearchContentPublishRecordsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records bad request response has a 2xx status code
func (o *SearchContentPublishRecordsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records bad request response has a 3xx status code
func (o *SearchContentPublishRecordsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records bad request response has a 4xx status code
func (o *SearchContentPublishRecordsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content publish records bad request response has a 5xx status code
func (o *SearchContentPublishRecordsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search content publish records bad request response a status code equal to that given
func (o *SearchContentPublishRecordsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchContentPublishRecordsBadRequest) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsBadRequest  %+v", 400, o.Payload)
}

func (o *SearchContentPublishRecordsBadRequest) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsBadRequest  %+v", 400, o.Payload)
}

func (o *SearchContentPublishRecordsBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsUnauthorized creates a SearchContentPublishRecordsUnauthorized with default headers values
func NewSearchContentPublishRecordsUnauthorized() *SearchContentPublishRecordsUnauthorized {
	return &SearchContentPublishRecordsUnauthorized{}
}

/*
SearchContentPublishRecordsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type SearchContentPublishRecordsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records unauthorized response has a 2xx status code
func (o *SearchContentPublishRecordsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records unauthorized response has a 3xx status code
func (o *SearchContentPublishRecordsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records unauthorized response has a 4xx status code
func (o *SearchContentPublishRecordsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content publish records unauthorized response has a 5xx status code
func (o *SearchContentPublishRecordsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search content publish records unauthorized response a status code equal to that given
func (o *SearchContentPublishRecordsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchContentPublishRecordsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchContentPublishRecordsUnauthorized) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchContentPublishRecordsUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsForbidden creates a SearchContentPublishRecordsForbidden with default headers values
func NewSearchContentPublishRecordsForbidden() *SearchContentPublishRecordsForbidden {
	return &SearchContentPublishRecordsForbidden{}
}

/*
SearchContentPublishRecordsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SearchContentPublishRecordsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records forbidden response has a 2xx status code
func (o *SearchContentPublishRecordsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records forbidden response has a 3xx status code
func (o *SearchContentPublishRecordsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records forbidden response has a 4xx status code
func (o *SearchContentPublishRecordsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content publish records forbidden response has a 5xx status code
func (o *SearchContentPublishRecordsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search content publish records forbidden response a status code equal to that given
func (o *SearchContentPublishRecordsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchContentPublishRecordsForbidden) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsForbidden  %+v", 403, o.Payload)
}

func (o *SearchContentPublishRecordsForbidden) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsForbidden  %+v", 403, o.Payload)
}

func (o *SearchContentPublishRecordsForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsNotFound creates a SearchContentPublishRecordsNotFound with default headers values
func NewSearchContentPublishRecordsNotFound() *SearchContentPublishRecordsNotFound {
	return &SearchContentPublishRecordsNotFound{}
}

/*
SearchContentPublishRecordsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type SearchContentPublishRecordsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records not found response has a 2xx status code
func (o *SearchContentPublishRecordsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records not found response has a 3xx status code
func (o *SearchContentPublishRecordsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records not found response has a 4xx status code
func (o *SearchContentPublishRecordsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content publish records not found response has a 5xx status code
func (o *SearchContentPublishRecordsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search content publish records not found response a status code equal to that given
func (o *SearchContentPublishRecordsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchContentPublishRecordsNotFound) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsNotFound  %+v", 404, o.Payload)
}

func (o *SearchContentPublishRecordsNotFound) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsNotFound  %+v", 404, o.Payload)
}

func (o *SearchContentPublishRecordsNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsTooManyRequests creates a SearchContentPublishRecordsTooManyRequests with default headers values
func NewSearchContentPublishRecordsTooManyRequests() *SearchContentPublishRecordsTooManyRequests {
	return &SearchContentPublishRecordsTooManyRequests{}
}

/*
SearchContentPublishRecordsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SearchContentPublishRecordsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records too many requests response has a 2xx status code
func (o *SearchContentPublishRecordsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records too many requests response has a 3xx status code
func (o *SearchContentPublishRecordsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records too many requests response has a 4xx status code
func (o *SearchContentPublishRecordsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content publish records too many requests response has a 5xx status code
func (o *SearchContentPublishRecordsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this search content publish records too many requests response a status code equal to that given
func (o *SearchContentPublishRecordsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SearchContentPublishRecordsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchContentPublishRecordsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchContentPublishRecordsTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsInternalServerError creates a SearchContentPublishRecordsInternalServerError with default headers values
func NewSearchContentPublishRecordsInternalServerError() *SearchContentPublishRecordsInternalServerError {
	return &SearchContentPublishRecordsInternalServerError{}
}

/*
SearchContentPublishRecordsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SearchContentPublishRecordsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records internal server error response has a 2xx status code
func (o *SearchContentPublishRecordsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records internal server error response has a 3xx status code
func (o *SearchContentPublishRecordsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records internal server error response has a 4xx status code
func (o *SearchContentPublishRecordsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search content publish records internal server error response has a 5xx status code
func (o *SearchContentPublishRecordsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search content publish records internal server error response a status code equal to that given
func (o *SearchContentPublishRecordsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchContentPublishRecordsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchContentPublishRecordsInternalServerError) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchContentPublishRecordsInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentPublishRecordsServiceUnavailable creates a SearchContentPublishRecordsServiceUnavailable with default headers values
func NewSearchContentPublishRecordsServiceUnavailable() *SearchContentPublishRecordsServiceUnavailable {
	return &SearchContentPublishRecordsServiceUnavailable{}
}

/*
SearchContentPublishRecordsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SearchContentPublishRecordsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content publish records service unavailable response has a 2xx status code
func (o *SearchContentPublishRecordsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content publish records service unavailable response has a 3xx status code
func (o *SearchContentPublishRecordsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content publish records service unavailable response has a 4xx status code
func (o *SearchContentPublishRecordsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this search content publish records service unavailable response has a 5xx status code
func (o *SearchContentPublishRecordsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this search content publish records service unavailable response a status code equal to that given
func (o *SearchContentPublishRecordsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SearchContentPublishRecordsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SearchContentPublishRecordsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentPublishRecords][%d] searchContentPublishRecordsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SearchContentPublishRecordsServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentPublishRecordsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
