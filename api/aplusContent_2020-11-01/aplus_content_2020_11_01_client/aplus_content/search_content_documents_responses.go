// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// SearchContentDocumentsReader is a Reader for the SearchContentDocuments structure.
type SearchContentDocumentsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchContentDocumentsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchContentDocumentsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchContentDocumentsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSearchContentDocumentsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchContentDocumentsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchContentDocumentsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewSearchContentDocumentsGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchContentDocumentsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchContentDocumentsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSearchContentDocumentsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchContentDocumentsOK creates a SearchContentDocumentsOK with default headers values
func NewSearchContentDocumentsOK() *SearchContentDocumentsOK {
	return &SearchContentDocumentsOK{}
}

/*
SearchContentDocumentsOK describes a response with status code 200, with default header values.

Success.
*/
type SearchContentDocumentsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.SearchContentDocumentsResponse
}

// IsSuccess returns true when this search content documents o k response has a 2xx status code
func (o *SearchContentDocumentsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search content documents o k response has a 3xx status code
func (o *SearchContentDocumentsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents o k response has a 4xx status code
func (o *SearchContentDocumentsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search content documents o k response has a 5xx status code
func (o *SearchContentDocumentsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents o k response a status code equal to that given
func (o *SearchContentDocumentsOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchContentDocumentsOK) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsOK  %+v", 200, o.Payload)
}

func (o *SearchContentDocumentsOK) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsOK  %+v", 200, o.Payload)
}

func (o *SearchContentDocumentsOK) GetPayload() *aplus_content_2020_11_01_models.SearchContentDocumentsResponse {
	return o.Payload
}

func (o *SearchContentDocumentsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.SearchContentDocumentsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsBadRequest creates a SearchContentDocumentsBadRequest with default headers values
func NewSearchContentDocumentsBadRequest() *SearchContentDocumentsBadRequest {
	return &SearchContentDocumentsBadRequest{}
}

/*
SearchContentDocumentsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SearchContentDocumentsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents bad request response has a 2xx status code
func (o *SearchContentDocumentsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents bad request response has a 3xx status code
func (o *SearchContentDocumentsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents bad request response has a 4xx status code
func (o *SearchContentDocumentsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content documents bad request response has a 5xx status code
func (o *SearchContentDocumentsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents bad request response a status code equal to that given
func (o *SearchContentDocumentsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchContentDocumentsBadRequest) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsBadRequest  %+v", 400, o.Payload)
}

func (o *SearchContentDocumentsBadRequest) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsBadRequest  %+v", 400, o.Payload)
}

func (o *SearchContentDocumentsBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsUnauthorized creates a SearchContentDocumentsUnauthorized with default headers values
func NewSearchContentDocumentsUnauthorized() *SearchContentDocumentsUnauthorized {
	return &SearchContentDocumentsUnauthorized{}
}

/*
SearchContentDocumentsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type SearchContentDocumentsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents unauthorized response has a 2xx status code
func (o *SearchContentDocumentsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents unauthorized response has a 3xx status code
func (o *SearchContentDocumentsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents unauthorized response has a 4xx status code
func (o *SearchContentDocumentsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content documents unauthorized response has a 5xx status code
func (o *SearchContentDocumentsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents unauthorized response a status code equal to that given
func (o *SearchContentDocumentsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SearchContentDocumentsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchContentDocumentsUnauthorized) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsUnauthorized  %+v", 401, o.Payload)
}

func (o *SearchContentDocumentsUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsForbidden creates a SearchContentDocumentsForbidden with default headers values
func NewSearchContentDocumentsForbidden() *SearchContentDocumentsForbidden {
	return &SearchContentDocumentsForbidden{}
}

/*
SearchContentDocumentsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SearchContentDocumentsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents forbidden response has a 2xx status code
func (o *SearchContentDocumentsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents forbidden response has a 3xx status code
func (o *SearchContentDocumentsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents forbidden response has a 4xx status code
func (o *SearchContentDocumentsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content documents forbidden response has a 5xx status code
func (o *SearchContentDocumentsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents forbidden response a status code equal to that given
func (o *SearchContentDocumentsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchContentDocumentsForbidden) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsForbidden  %+v", 403, o.Payload)
}

func (o *SearchContentDocumentsForbidden) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsForbidden  %+v", 403, o.Payload)
}

func (o *SearchContentDocumentsForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsNotFound creates a SearchContentDocumentsNotFound with default headers values
func NewSearchContentDocumentsNotFound() *SearchContentDocumentsNotFound {
	return &SearchContentDocumentsNotFound{}
}

/*
SearchContentDocumentsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type SearchContentDocumentsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents not found response has a 2xx status code
func (o *SearchContentDocumentsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents not found response has a 3xx status code
func (o *SearchContentDocumentsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents not found response has a 4xx status code
func (o *SearchContentDocumentsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content documents not found response has a 5xx status code
func (o *SearchContentDocumentsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents not found response a status code equal to that given
func (o *SearchContentDocumentsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchContentDocumentsNotFound) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsNotFound  %+v", 404, o.Payload)
}

func (o *SearchContentDocumentsNotFound) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsNotFound  %+v", 404, o.Payload)
}

func (o *SearchContentDocumentsNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsGone creates a SearchContentDocumentsGone with default headers values
func NewSearchContentDocumentsGone() *SearchContentDocumentsGone {
	return &SearchContentDocumentsGone{}
}

/*
SearchContentDocumentsGone describes a response with status code 410, with default header values.

The specified resource no longer exists.
*/
type SearchContentDocumentsGone struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents gone response has a 2xx status code
func (o *SearchContentDocumentsGone) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents gone response has a 3xx status code
func (o *SearchContentDocumentsGone) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents gone response has a 4xx status code
func (o *SearchContentDocumentsGone) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content documents gone response has a 5xx status code
func (o *SearchContentDocumentsGone) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents gone response a status code equal to that given
func (o *SearchContentDocumentsGone) IsCode(code int) bool {
	return code == 410
}

func (o *SearchContentDocumentsGone) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsGone  %+v", 410, o.Payload)
}

func (o *SearchContentDocumentsGone) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsGone  %+v", 410, o.Payload)
}

func (o *SearchContentDocumentsGone) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsTooManyRequests creates a SearchContentDocumentsTooManyRequests with default headers values
func NewSearchContentDocumentsTooManyRequests() *SearchContentDocumentsTooManyRequests {
	return &SearchContentDocumentsTooManyRequests{}
}

/*
SearchContentDocumentsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SearchContentDocumentsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents too many requests response has a 2xx status code
func (o *SearchContentDocumentsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents too many requests response has a 3xx status code
func (o *SearchContentDocumentsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents too many requests response has a 4xx status code
func (o *SearchContentDocumentsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this search content documents too many requests response has a 5xx status code
func (o *SearchContentDocumentsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this search content documents too many requests response a status code equal to that given
func (o *SearchContentDocumentsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SearchContentDocumentsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchContentDocumentsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchContentDocumentsTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsInternalServerError creates a SearchContentDocumentsInternalServerError with default headers values
func NewSearchContentDocumentsInternalServerError() *SearchContentDocumentsInternalServerError {
	return &SearchContentDocumentsInternalServerError{}
}

/*
SearchContentDocumentsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SearchContentDocumentsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents internal server error response has a 2xx status code
func (o *SearchContentDocumentsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents internal server error response has a 3xx status code
func (o *SearchContentDocumentsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents internal server error response has a 4xx status code
func (o *SearchContentDocumentsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search content documents internal server error response has a 5xx status code
func (o *SearchContentDocumentsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search content documents internal server error response a status code equal to that given
func (o *SearchContentDocumentsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchContentDocumentsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchContentDocumentsInternalServerError) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchContentDocumentsInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchContentDocumentsServiceUnavailable creates a SearchContentDocumentsServiceUnavailable with default headers values
func NewSearchContentDocumentsServiceUnavailable() *SearchContentDocumentsServiceUnavailable {
	return &SearchContentDocumentsServiceUnavailable{}
}

/*
SearchContentDocumentsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SearchContentDocumentsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

// IsSuccess returns true when this search content documents service unavailable response has a 2xx status code
func (o *SearchContentDocumentsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search content documents service unavailable response has a 3xx status code
func (o *SearchContentDocumentsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search content documents service unavailable response has a 4xx status code
func (o *SearchContentDocumentsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this search content documents service unavailable response has a 5xx status code
func (o *SearchContentDocumentsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this search content documents service unavailable response a status code equal to that given
func (o *SearchContentDocumentsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SearchContentDocumentsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SearchContentDocumentsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /aplus/2020-11-01/contentDocuments][%d] searchContentDocumentsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SearchContentDocumentsServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *SearchContentDocumentsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
