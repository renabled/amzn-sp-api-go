// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/aplusContent_2020-11-01/aplus_content_2020_11_01_models"
)

// PostContentDocumentApprovalSubmissionReader is a Reader for the PostContentDocumentApprovalSubmission structure.
type PostContentDocumentApprovalSubmissionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostContentDocumentApprovalSubmissionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPostContentDocumentApprovalSubmissionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPostContentDocumentApprovalSubmissionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPostContentDocumentApprovalSubmissionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPostContentDocumentApprovalSubmissionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPostContentDocumentApprovalSubmissionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 410:
		result := NewPostContentDocumentApprovalSubmissionGone()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPostContentDocumentApprovalSubmissionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPostContentDocumentApprovalSubmissionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPostContentDocumentApprovalSubmissionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPostContentDocumentApprovalSubmissionOK creates a PostContentDocumentApprovalSubmissionOK with default headers values
func NewPostContentDocumentApprovalSubmissionOK() *PostContentDocumentApprovalSubmissionOK {
	return &PostContentDocumentApprovalSubmissionOK{}
}

/* PostContentDocumentApprovalSubmissionOK describes a response with status code 200, with default header values.

Success.
*/
type PostContentDocumentApprovalSubmissionOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.PostContentDocumentApprovalSubmissionResponse
}

func (o *PostContentDocumentApprovalSubmissionOK) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionOK  %+v", 200, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionOK) GetPayload() *aplus_content_2020_11_01_models.PostContentDocumentApprovalSubmissionResponse {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.PostContentDocumentApprovalSubmissionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionBadRequest creates a PostContentDocumentApprovalSubmissionBadRequest with default headers values
func NewPostContentDocumentApprovalSubmissionBadRequest() *PostContentDocumentApprovalSubmissionBadRequest {
	return &PostContentDocumentApprovalSubmissionBadRequest{}
}

/* PostContentDocumentApprovalSubmissionBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PostContentDocumentApprovalSubmissionBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionBadRequest) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionBadRequest  %+v", 400, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionBadRequest) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionUnauthorized creates a PostContentDocumentApprovalSubmissionUnauthorized with default headers values
func NewPostContentDocumentApprovalSubmissionUnauthorized() *PostContentDocumentApprovalSubmissionUnauthorized {
	return &PostContentDocumentApprovalSubmissionUnauthorized{}
}

/* PostContentDocumentApprovalSubmissionUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type PostContentDocumentApprovalSubmissionUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionUnauthorized  %+v", 401, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionUnauthorized) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionForbidden creates a PostContentDocumentApprovalSubmissionForbidden with default headers values
func NewPostContentDocumentApprovalSubmissionForbidden() *PostContentDocumentApprovalSubmissionForbidden {
	return &PostContentDocumentApprovalSubmissionForbidden{}
}

/* PostContentDocumentApprovalSubmissionForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type PostContentDocumentApprovalSubmissionForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionForbidden) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionForbidden  %+v", 403, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionForbidden) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionNotFound creates a PostContentDocumentApprovalSubmissionNotFound with default headers values
func NewPostContentDocumentApprovalSubmissionNotFound() *PostContentDocumentApprovalSubmissionNotFound {
	return &PostContentDocumentApprovalSubmissionNotFound{}
}

/* PostContentDocumentApprovalSubmissionNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type PostContentDocumentApprovalSubmissionNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionNotFound) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionNotFound  %+v", 404, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionNotFound) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionGone creates a PostContentDocumentApprovalSubmissionGone with default headers values
func NewPostContentDocumentApprovalSubmissionGone() *PostContentDocumentApprovalSubmissionGone {
	return &PostContentDocumentApprovalSubmissionGone{}
}

/* PostContentDocumentApprovalSubmissionGone describes a response with status code 410, with default header values.

The specified resource no longer exists.
*/
type PostContentDocumentApprovalSubmissionGone struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionGone) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionGone  %+v", 410, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionGone) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionGone) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionTooManyRequests creates a PostContentDocumentApprovalSubmissionTooManyRequests with default headers values
func NewPostContentDocumentApprovalSubmissionTooManyRequests() *PostContentDocumentApprovalSubmissionTooManyRequests {
	return &PostContentDocumentApprovalSubmissionTooManyRequests{}
}

/* PostContentDocumentApprovalSubmissionTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PostContentDocumentApprovalSubmissionTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionTooManyRequests  %+v", 429, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionTooManyRequests) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionInternalServerError creates a PostContentDocumentApprovalSubmissionInternalServerError with default headers values
func NewPostContentDocumentApprovalSubmissionInternalServerError() *PostContentDocumentApprovalSubmissionInternalServerError {
	return &PostContentDocumentApprovalSubmissionInternalServerError{}
}

/* PostContentDocumentApprovalSubmissionInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type PostContentDocumentApprovalSubmissionInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionInternalServerError  %+v", 500, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionInternalServerError) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostContentDocumentApprovalSubmissionServiceUnavailable creates a PostContentDocumentApprovalSubmissionServiceUnavailable with default headers values
func NewPostContentDocumentApprovalSubmissionServiceUnavailable() *PostContentDocumentApprovalSubmissionServiceUnavailable {
	return &PostContentDocumentApprovalSubmissionServiceUnavailable{}
}

/* PostContentDocumentApprovalSubmissionServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PostContentDocumentApprovalSubmissionServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *aplus_content_2020_11_01_models.ErrorList
}

func (o *PostContentDocumentApprovalSubmissionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions][%d] postContentDocumentApprovalSubmissionServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PostContentDocumentApprovalSubmissionServiceUnavailable) GetPayload() *aplus_content_2020_11_01_models.ErrorList {
	return o.Payload
}

func (o *PostContentDocumentApprovalSubmissionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(aplus_content_2020_11_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
