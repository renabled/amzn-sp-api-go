// Code generated by go-swagger; DO NOT EDIT.

package aplus_content

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new aplus content API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for aplus content API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateContentDocument(params *CreateContentDocumentParams, opts ...ClientOption) (*CreateContentDocumentOK, error)

	GetContentDocument(params *GetContentDocumentParams, opts ...ClientOption) (*GetContentDocumentOK, error)

	ListContentDocumentAsinRelations(params *ListContentDocumentAsinRelationsParams, opts ...ClientOption) (*ListContentDocumentAsinRelationsOK, error)

	PostContentDocumentApprovalSubmission(params *PostContentDocumentApprovalSubmissionParams, opts ...ClientOption) (*PostContentDocumentApprovalSubmissionOK, error)

	PostContentDocumentAsinRelations(params *PostContentDocumentAsinRelationsParams, opts ...ClientOption) (*PostContentDocumentAsinRelationsOK, error)

	PostContentDocumentSuspendSubmission(params *PostContentDocumentSuspendSubmissionParams, opts ...ClientOption) (*PostContentDocumentSuspendSubmissionOK, error)

	SearchContentDocuments(params *SearchContentDocumentsParams, opts ...ClientOption) (*SearchContentDocumentsOK, error)

	SearchContentPublishRecords(params *SearchContentPublishRecordsParams, opts ...ClientOption) (*SearchContentPublishRecordsOK, error)

	UpdateContentDocument(params *UpdateContentDocumentParams, opts ...ClientOption) (*UpdateContentDocumentOK, error)

	ValidateContentDocumentAsinRelations(params *ValidateContentDocumentAsinRelationsParams, opts ...ClientOption) (*ValidateContentDocumentAsinRelationsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateContentDocument Creates a new A+ Content document.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) CreateContentDocument(params *CreateContentDocumentParams, opts ...ClientOption) (*CreateContentDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateContentDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createContentDocument",
		Method:             "POST",
		PathPattern:        "/aplus/2020-11-01/contentDocuments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateContentDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateContentDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createContentDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetContentDocument Returns an A+ Content document, if available.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetContentDocument(params *GetContentDocumentParams, opts ...ClientOption) (*GetContentDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetContentDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getContentDocument",
		Method:             "GET",
		PathPattern:        "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetContentDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetContentDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getContentDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListContentDocumentAsinRelations Returns a list of ASINs related to the specified A+ Content document, if available. If you do not include the asinSet parameter, the operation returns all ASINs related to the content document.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) ListContentDocumentAsinRelations(params *ListContentDocumentAsinRelationsParams, opts ...ClientOption) (*ListContentDocumentAsinRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListContentDocumentAsinRelationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listContentDocumentAsinRelations",
		Method:             "GET",
		PathPattern:        "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListContentDocumentAsinRelationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListContentDocumentAsinRelationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listContentDocumentAsinRelations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostContentDocumentApprovalSubmission Submits an A+ Content document for review, approval, and publishing.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) PostContentDocumentApprovalSubmission(params *PostContentDocumentApprovalSubmissionParams, opts ...ClientOption) (*PostContentDocumentApprovalSubmissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContentDocumentApprovalSubmissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postContentDocumentApprovalSubmission",
		Method:             "POST",
		PathPattern:        "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/approvalSubmissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentDocumentApprovalSubmissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostContentDocumentApprovalSubmissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postContentDocumentApprovalSubmission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostContentDocumentAsinRelations Replaces all ASINs related to the specified A+ Content document, if available. This may add or remove ASINs, depending on the current set of related ASINs. Removing an ASIN has the side effect of suspending the content document from that ASIN.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) PostContentDocumentAsinRelations(params *PostContentDocumentAsinRelationsParams, opts ...ClientOption) (*PostContentDocumentAsinRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContentDocumentAsinRelationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postContentDocumentAsinRelations",
		Method:             "POST",
		PathPattern:        "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/asins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentDocumentAsinRelationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostContentDocumentAsinRelationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postContentDocumentAsinRelations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostContentDocumentSuspendSubmission Submits a request to suspend visible A+ Content. This neither deletes the content document nor the ASIN relations.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) PostContentDocumentSuspendSubmission(params *PostContentDocumentSuspendSubmissionParams, opts ...ClientOption) (*PostContentDocumentSuspendSubmissionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostContentDocumentSuspendSubmissionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "postContentDocumentSuspendSubmission",
		Method:             "POST",
		PathPattern:        "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}/suspendSubmissions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostContentDocumentSuspendSubmissionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostContentDocumentSuspendSubmissionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for postContentDocumentSuspendSubmission: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchContentDocuments Returns a list of all A+ Content documents assigned to a selling partner. This operation returns only the metadata of the A+ Content documents. Call the getContentDocument operation to get the actual contents of the A+ Content documents.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) SearchContentDocuments(params *SearchContentDocumentsParams, opts ...ClientOption) (*SearchContentDocumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchContentDocumentsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchContentDocuments",
		Method:             "GET",
		PathPattern:        "/aplus/2020-11-01/contentDocuments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchContentDocumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchContentDocumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchContentDocuments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SearchContentPublishRecords Searches for A+ Content publishing records, if available.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) SearchContentPublishRecords(params *SearchContentPublishRecordsParams, opts ...ClientOption) (*SearchContentPublishRecordsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSearchContentPublishRecordsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "searchContentPublishRecords",
		Method:             "GET",
		PathPattern:        "/aplus/2020-11-01/contentPublishRecords",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SearchContentPublishRecordsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SearchContentPublishRecordsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for searchContentPublishRecords: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateContentDocument Updates an existing A+ Content document.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) UpdateContentDocument(params *UpdateContentDocumentParams, opts ...ClientOption) (*UpdateContentDocumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateContentDocumentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateContentDocument",
		Method:             "POST",
		PathPattern:        "/aplus/2020-11-01/contentDocuments/{contentReferenceKey}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateContentDocumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateContentDocumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateContentDocument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ValidateContentDocumentAsinRelations Checks if the A+ Content document is valid for use on a set of ASINs.

**Usage Plans:**

| Plan type | Rate (requests per second) | Burst |
| ---- | ---- | ---- |
|Default| 10 | 10 |
|Selling partner specific| Variable | Variable |

The x-amzn-RateLimit-Limit response header returns the usage plan rate limits that were applied to the requested operation. Rate limits for some selling partners will vary from the default rate and burst shown in the table above. For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) ValidateContentDocumentAsinRelations(params *ValidateContentDocumentAsinRelationsParams, opts ...ClientOption) (*ValidateContentDocumentAsinRelationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateContentDocumentAsinRelationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateContentDocumentAsinRelations",
		Method:             "POST",
		PathPattern:        "/aplus/2020-11-01/contentAsinValidations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateContentDocumentAsinRelationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateContentDocumentAsinRelationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for validateContentDocumentAsinRelations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
