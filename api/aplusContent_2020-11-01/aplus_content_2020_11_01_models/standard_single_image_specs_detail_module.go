// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandardSingleImageSpecsDetailModule A standard image with paragraphs and a bulleted list, and extra space for technical details.
//
// swagger:model StandardSingleImageSpecsDetailModule
type StandardSingleImageSpecsDetailModule struct {

	// description block1
	DescriptionBlock1 *StandardTextBlock `json:"descriptionBlock1,omitempty"`

	// description block2
	DescriptionBlock2 *StandardTextBlock `json:"descriptionBlock2,omitempty"`

	// description headline
	DescriptionHeadline *TextComponent `json:"descriptionHeadline,omitempty"`

	// headline
	Headline *TextComponent `json:"headline,omitempty"`

	// image
	Image *ImageComponent `json:"image,omitempty"`

	// specification headline
	SpecificationHeadline *TextComponent `json:"specificationHeadline,omitempty"`

	// specification list block
	SpecificationListBlock *StandardHeaderTextListBlock `json:"specificationListBlock,omitempty"`

	// specification text block
	SpecificationTextBlock *StandardTextBlock `json:"specificationTextBlock,omitempty"`
}

// Validate validates this standard single image specs detail module
func (m *StandardSingleImageSpecsDetailModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescriptionBlock1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionBlock2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecificationHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecificationListBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecificationTextBlock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateDescriptionBlock1(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionBlock1) { // not required
		return nil
	}

	if m.DescriptionBlock1 != nil {
		if err := m.DescriptionBlock1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionBlock1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionBlock1")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateDescriptionBlock2(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionBlock2) { // not required
		return nil
	}

	if m.DescriptionBlock2 != nil {
		if err := m.DescriptionBlock2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionBlock2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionBlock2")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateDescriptionHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionHeadline) { // not required
		return nil
	}

	if m.DescriptionHeadline != nil {
		if err := m.DescriptionHeadline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionHeadline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionHeadline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Headline) { // not required
		return nil
	}

	if m.Headline != nil {
		if err := m.Headline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateSpecificationHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecificationHeadline) { // not required
		return nil
	}

	if m.SpecificationHeadline != nil {
		if err := m.SpecificationHeadline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specificationHeadline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("specificationHeadline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateSpecificationListBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecificationListBlock) { // not required
		return nil
	}

	if m.SpecificationListBlock != nil {
		if err := m.SpecificationListBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specificationListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("specificationListBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) validateSpecificationTextBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.SpecificationTextBlock) { // not required
		return nil
	}

	if m.SpecificationTextBlock != nil {
		if err := m.SpecificationTextBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specificationTextBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("specificationTextBlock")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standard single image specs detail module based on the context it is used
func (m *StandardSingleImageSpecsDetailModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescriptionBlock1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionBlock2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecificationHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecificationListBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecificationTextBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateDescriptionBlock1(ctx context.Context, formats strfmt.Registry) error {

	if m.DescriptionBlock1 != nil {
		if err := m.DescriptionBlock1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionBlock1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionBlock1")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateDescriptionBlock2(ctx context.Context, formats strfmt.Registry) error {

	if m.DescriptionBlock2 != nil {
		if err := m.DescriptionBlock2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionBlock2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionBlock2")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateDescriptionHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.DescriptionHeadline != nil {
		if err := m.DescriptionHeadline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionHeadline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionHeadline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Headline != nil {
		if err := m.Headline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {
		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateSpecificationHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.SpecificationHeadline != nil {
		if err := m.SpecificationHeadline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specificationHeadline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("specificationHeadline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateSpecificationListBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.SpecificationListBlock != nil {
		if err := m.SpecificationListBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specificationListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("specificationListBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageSpecsDetailModule) contextValidateSpecificationTextBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.SpecificationTextBlock != nil {
		if err := m.SpecificationTextBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("specificationTextBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("specificationTextBlock")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardSingleImageSpecsDetailModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardSingleImageSpecsDetailModule) UnmarshalBinary(b []byte) error {
	var res StandardSingleImageSpecsDetailModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
