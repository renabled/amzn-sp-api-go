// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentRecord A content document with additional information for content management.
//
// swagger:model ContentRecord
type ContentRecord struct {

	// content document
	ContentDocument *ContentDocument `json:"contentDocument,omitempty"`

	// content metadata
	ContentMetadata *ContentMetadata `json:"contentMetadata,omitempty"`

	// content reference key
	// Required: true
	ContentReferenceKey *ContentReferenceKey `json:"contentReferenceKey"`
}

// Validate validates this content record
func (m *ContentRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentDocument(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentMetadata(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentReferenceKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentRecord) validateContentDocument(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentDocument) { // not required
		return nil
	}

	if m.ContentDocument != nil {
		if err := m.ContentDocument.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ContentRecord) validateContentMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentMetadata) { // not required
		return nil
	}

	if m.ContentMetadata != nil {
		if err := m.ContentMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *ContentRecord) validateContentReferenceKey(formats strfmt.Registry) error {

	if err := validate.Required("contentReferenceKey", "body", m.ContentReferenceKey); err != nil {
		return err
	}

	if err := validate.Required("contentReferenceKey", "body", m.ContentReferenceKey); err != nil {
		return err
	}

	if m.ContentReferenceKey != nil {
		if err := m.ContentReferenceKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentReferenceKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentReferenceKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this content record based on the context it is used
func (m *ContentRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContentDocument(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentReferenceKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentRecord) contextValidateContentDocument(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentDocument != nil {
		if err := m.ContentDocument.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentDocument")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentDocument")
			}
			return err
		}
	}

	return nil
}

func (m *ContentRecord) contextValidateContentMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentMetadata != nil {
		if err := m.ContentMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentMetadata")
			}
			return err
		}
	}

	return nil
}

func (m *ContentRecord) contextValidateContentReferenceKey(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentReferenceKey != nil {
		if err := m.ContentReferenceKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentReferenceKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentReferenceKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentRecord) UnmarshalBinary(b []byte) error {
	var res ContentRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
