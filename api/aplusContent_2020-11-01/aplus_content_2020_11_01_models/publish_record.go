// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublishRecord The full context for an A+ Content publishing event.
//
// swagger:model PublishRecord
type PublishRecord struct {

	// asin
	// Required: true
	Asin *Asin `json:"asin"`

	// content reference key
	// Required: true
	ContentReferenceKey *ContentReferenceKey `json:"contentReferenceKey"`

	// content sub type
	ContentSubType ContentSubType `json:"contentSubType,omitempty"`

	// content type
	// Required: true
	ContentType *ContentType `json:"contentType"`

	// locale
	// Required: true
	Locale *LanguageTag `json:"locale"`

	// marketplace Id
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`
}

// Validate validates this publish record
func (m *PublishRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentReferenceKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentSubType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishRecord) validateAsin(formats strfmt.Registry) error {

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if m.Asin != nil {
		if err := m.Asin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) validateContentReferenceKey(formats strfmt.Registry) error {

	if err := validate.Required("contentReferenceKey", "body", m.ContentReferenceKey); err != nil {
		return err
	}

	if err := validate.Required("contentReferenceKey", "body", m.ContentReferenceKey); err != nil {
		return err
	}

	if m.ContentReferenceKey != nil {
		if err := m.ContentReferenceKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentReferenceKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentReferenceKey")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) validateContentSubType(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentSubType) { // not required
		return nil
	}

	if err := m.ContentSubType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentSubType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentSubType")
		}
		return err
	}

	return nil
}

func (m *PublishRecord) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	if m.ContentType != nil {
		if err := m.ContentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentType")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	if m.Locale != nil {
		if err := m.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this publish record based on the context it is used
func (m *PublishRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentReferenceKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentSubType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublishRecord) contextValidateAsin(ctx context.Context, formats strfmt.Registry) error {

	if m.Asin != nil {
		if err := m.Asin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) contextValidateContentReferenceKey(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentReferenceKey != nil {
		if err := m.ContentReferenceKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentReferenceKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentReferenceKey")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) contextValidateContentSubType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ContentSubType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentSubType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentSubType")
		}
		return err
	}

	return nil
}

func (m *PublishRecord) contextValidateContentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentType != nil {
		if err := m.ContentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentType")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) contextValidateLocale(ctx context.Context, formats strfmt.Registry) error {

	if m.Locale != nil {
		if err := m.Locale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *PublishRecord) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublishRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublishRecord) UnmarshalBinary(b []byte) error {
	var res PublishRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
