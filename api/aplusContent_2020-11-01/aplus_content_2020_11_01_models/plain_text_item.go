// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PlainTextItem Plain positional text, used in collections of brief labels and descriptors.
//
// swagger:model PlainTextItem
type PlainTextItem struct {

	// The rank or index of this text item within the collection. Different items cannot occupy the same position within a single collection.
	// Required: true
	// Maximum: 100
	// Minimum: 1
	Position *int64 `json:"position"`

	// The actual plain text.
	// Required: true
	// Max Length: 250
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this plain text item
func (m *PlainTextItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlainTextItem) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	if err := validate.MinimumInt("position", "body", *m.Position, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("position", "body", *m.Position, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *PlainTextItem) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", *m.Value, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", *m.Value, 250); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this plain text item based on context it is used
func (m *PlainTextItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PlainTextItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlainTextItem) UnmarshalBinary(b []byte) error {
	var res PlainTextItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
