// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AsinBadge A flag that provides additional information about an ASIN. This is contextual and may change depending on the request that generated it.
//
// swagger:model AsinBadge
type AsinBadge string

func NewAsinBadge(value AsinBadge) *AsinBadge {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AsinBadge.
func (m AsinBadge) Pointer() *AsinBadge {
	return &m
}

const (

	// AsinBadgeBRANDNOTELIGIBLE captures enum value "BRAND_NOT_ELIGIBLE"
	AsinBadgeBRANDNOTELIGIBLE AsinBadge = "BRAND_NOT_ELIGIBLE"

	// AsinBadgeCATALOGNOTFOUND captures enum value "CATALOG_NOT_FOUND"
	AsinBadgeCATALOGNOTFOUND AsinBadge = "CATALOG_NOT_FOUND"

	// AsinBadgeCONTENTNOTPUBLISHED captures enum value "CONTENT_NOT_PUBLISHED"
	AsinBadgeCONTENTNOTPUBLISHED AsinBadge = "CONTENT_NOT_PUBLISHED"

	// AsinBadgeCONTENTPUBLISHED captures enum value "CONTENT_PUBLISHED"
	AsinBadgeCONTENTPUBLISHED AsinBadge = "CONTENT_PUBLISHED"
)

// for schema
var asinBadgeEnum []interface{}

func init() {
	var res []AsinBadge
	if err := json.Unmarshal([]byte(`["BRAND_NOT_ELIGIBLE","CATALOG_NOT_FOUND","CONTENT_NOT_PUBLISHED","CONTENT_PUBLISHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		asinBadgeEnum = append(asinBadgeEnum, v)
	}
}

func (m AsinBadge) validateAsinBadgeEnum(path, location string, value AsinBadge) error {
	if err := validate.EnumCase(path, location, value, asinBadgeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this asin badge
func (m AsinBadge) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAsinBadgeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this asin badge based on context it is used
func (m AsinBadge) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
