// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageComponent A reference to an image, hosted in the A+ Content media library.
//
// swagger:model ImageComponent
type ImageComponent struct {

	// The alternative text for the image.
	// Required: true
	// Max Length: 100
	// Min Length: 1
	AltText *string `json:"altText"`

	// image crop specification
	// Required: true
	ImageCropSpecification *ImageCropSpecification `json:"imageCropSpecification"`

	// This identifier is provided by the Selling Partner API for Uploads.
	// Required: true
	// Min Length: 1
	UploadDestinationID *string `json:"uploadDestinationId"`
}

// Validate validates this image component
func (m *ImageComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAltText(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageCropSpecification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadDestinationID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageComponent) validateAltText(formats strfmt.Registry) error {

	if err := validate.Required("altText", "body", m.AltText); err != nil {
		return err
	}

	if err := validate.MinLength("altText", "body", *m.AltText, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("altText", "body", *m.AltText, 100); err != nil {
		return err
	}

	return nil
}

func (m *ImageComponent) validateImageCropSpecification(formats strfmt.Registry) error {

	if err := validate.Required("imageCropSpecification", "body", m.ImageCropSpecification); err != nil {
		return err
	}

	if m.ImageCropSpecification != nil {
		if err := m.ImageCropSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageCropSpecification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageCropSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *ImageComponent) validateUploadDestinationID(formats strfmt.Registry) error {

	if err := validate.Required("uploadDestinationId", "body", m.UploadDestinationID); err != nil {
		return err
	}

	if err := validate.MinLength("uploadDestinationId", "body", *m.UploadDestinationID, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this image component based on the context it is used
func (m *ImageComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateImageCropSpecification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageComponent) contextValidateImageCropSpecification(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageCropSpecification != nil {
		if err := m.ImageCropSpecification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageCropSpecification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageCropSpecification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageComponent) UnmarshalBinary(b []byte) error {
	var res ImageComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
