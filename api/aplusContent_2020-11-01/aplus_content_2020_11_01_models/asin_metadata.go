// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AsinMetadata The A+ Content ASIN with additional metadata for content management. If you don't include the `includedDataSet` parameter in a call to the listContentDocumentAsinRelations operation, the related ASINs are returned without metadata.
//
// swagger:model AsinMetadata
type AsinMetadata struct {

	// asin
	// Required: true
	Asin *Asin `json:"asin"`

	// badge set
	BadgeSet AsinBadgeSet `json:"badgeSet,omitempty"`

	// content reference key set
	ContentReferenceKeySet ContentReferenceKeySet `json:"contentReferenceKeySet,omitempty"`

	// The default image for the ASIN in the Amazon catalog.
	// Min Length: 1
	ImageURL string `json:"imageUrl,omitempty"`

	// parent
	Parent Asin `json:"parent,omitempty"`

	// The title for the ASIN in the Amazon catalog.
	// Min Length: 1
	Title string `json:"title,omitempty"`
}

// Validate validates this asin metadata
func (m *AsinMetadata) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBadgeSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentReferenceKeySet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsinMetadata) validateAsin(formats strfmt.Registry) error {

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if m.Asin != nil {
		if err := m.Asin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *AsinMetadata) validateBadgeSet(formats strfmt.Registry) error {
	if swag.IsZero(m.BadgeSet) { // not required
		return nil
	}

	if err := m.BadgeSet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("badgeSet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("badgeSet")
		}
		return err
	}

	return nil
}

func (m *AsinMetadata) validateContentReferenceKeySet(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentReferenceKeySet) { // not required
		return nil
	}

	if err := m.ContentReferenceKeySet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentReferenceKeySet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentReferenceKeySet")
		}
		return err
	}

	return nil
}

func (m *AsinMetadata) validateImageURL(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageURL) { // not required
		return nil
	}

	if err := validate.MinLength("imageUrl", "body", m.ImageURL, 1); err != nil {
		return err
	}

	return nil
}

func (m *AsinMetadata) validateParent(formats strfmt.Registry) error {
	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	if err := m.Parent.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parent")
		}
		return err
	}

	return nil
}

func (m *AsinMetadata) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", m.Title, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this asin metadata based on the context it is used
func (m *AsinMetadata) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBadgeSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentReferenceKeySet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AsinMetadata) contextValidateAsin(ctx context.Context, formats strfmt.Registry) error {

	if m.Asin != nil {
		if err := m.Asin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *AsinMetadata) contextValidateBadgeSet(ctx context.Context, formats strfmt.Registry) error {

	if err := m.BadgeSet.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("badgeSet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("badgeSet")
		}
		return err
	}

	return nil
}

func (m *AsinMetadata) contextValidateContentReferenceKeySet(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ContentReferenceKeySet.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentReferenceKeySet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentReferenceKeySet")
		}
		return err
	}

	return nil
}

func (m *AsinMetadata) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Parent.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parent")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parent")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AsinMetadata) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AsinMetadata) UnmarshalBinary(b []byte) error {
	var res AsinMetadata
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
