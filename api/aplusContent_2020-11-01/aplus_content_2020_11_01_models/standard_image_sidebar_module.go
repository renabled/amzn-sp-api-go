// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandardImageSidebarModule Two images, two paragraphs, and two bulleted lists. One image is smaller and displayed in the sidebar.
//
// swagger:model StandardImageSidebarModule
type StandardImageSidebarModule struct {

	// description list block
	DescriptionListBlock *StandardTextListBlock `json:"descriptionListBlock,omitempty"`

	// description text block
	DescriptionTextBlock *StandardTextBlock `json:"descriptionTextBlock,omitempty"`

	// headline
	Headline *TextComponent `json:"headline,omitempty"`

	// image caption block
	ImageCaptionBlock *StandardImageCaptionBlock `json:"imageCaptionBlock,omitempty"`

	// sidebar image text block
	SidebarImageTextBlock *StandardImageTextBlock `json:"sidebarImageTextBlock,omitempty"`

	// sidebar list block
	SidebarListBlock *StandardTextListBlock `json:"sidebarListBlock,omitempty"`
}

// Validate validates this standard image sidebar module
func (m *StandardImageSidebarModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescriptionListBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescriptionTextBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageCaptionBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSidebarImageTextBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSidebarListBlock(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardImageSidebarModule) validateDescriptionListBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionListBlock) { // not required
		return nil
	}

	if m.DescriptionListBlock != nil {
		if err := m.DescriptionListBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionListBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) validateDescriptionTextBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.DescriptionTextBlock) { // not required
		return nil
	}

	if m.DescriptionTextBlock != nil {
		if err := m.DescriptionTextBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionTextBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionTextBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) validateHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Headline) { // not required
		return nil
	}

	if m.Headline != nil {
		if err := m.Headline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) validateImageCaptionBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.ImageCaptionBlock) { // not required
		return nil
	}

	if m.ImageCaptionBlock != nil {
		if err := m.ImageCaptionBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageCaptionBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageCaptionBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) validateSidebarImageTextBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.SidebarImageTextBlock) { // not required
		return nil
	}

	if m.SidebarImageTextBlock != nil {
		if err := m.SidebarImageTextBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sidebarImageTextBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sidebarImageTextBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) validateSidebarListBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.SidebarListBlock) { // not required
		return nil
	}

	if m.SidebarListBlock != nil {
		if err := m.SidebarListBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sidebarListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sidebarListBlock")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standard image sidebar module based on the context it is used
func (m *StandardImageSidebarModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDescriptionListBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDescriptionTextBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImageCaptionBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSidebarImageTextBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSidebarListBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardImageSidebarModule) contextValidateDescriptionListBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DescriptionListBlock != nil {
		if err := m.DescriptionListBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionListBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) contextValidateDescriptionTextBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.DescriptionTextBlock != nil {
		if err := m.DescriptionTextBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("descriptionTextBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("descriptionTextBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) contextValidateHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Headline != nil {
		if err := m.Headline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) contextValidateImageCaptionBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.ImageCaptionBlock != nil {
		if err := m.ImageCaptionBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("imageCaptionBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("imageCaptionBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) contextValidateSidebarImageTextBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.SidebarImageTextBlock != nil {
		if err := m.SidebarImageTextBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sidebarImageTextBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sidebarImageTextBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageSidebarModule) contextValidateSidebarListBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.SidebarListBlock != nil {
		if err := m.SidebarListBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sidebarListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sidebarListBlock")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardImageSidebarModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardImageSidebarModule) UnmarshalBinary(b []byte) error {
	var res StandardImageSidebarModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
