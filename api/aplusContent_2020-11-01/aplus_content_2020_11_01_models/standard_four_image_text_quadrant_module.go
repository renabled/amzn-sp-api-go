// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandardFourImageTextQuadrantModule Four standard images with text, presented on a grid of four quadrants.
//
// swagger:model StandardFourImageTextQuadrantModule
type StandardFourImageTextQuadrantModule struct {

	// block1
	// Required: true
	Block1 *StandardImageTextBlock `json:"block1"`

	// block2
	// Required: true
	Block2 *StandardImageTextBlock `json:"block2"`

	// block3
	// Required: true
	Block3 *StandardImageTextBlock `json:"block3"`

	// block4
	// Required: true
	Block4 *StandardImageTextBlock `json:"block4"`
}

// Validate validates this standard four image text quadrant module
func (m *StandardFourImageTextQuadrantModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlock2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlock3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlock4(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardFourImageTextQuadrantModule) validateBlock1(formats strfmt.Registry) error {

	if err := validate.Required("block1", "body", m.Block1); err != nil {
		return err
	}

	if m.Block1 != nil {
		if err := m.Block1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block1")
			}
			return err
		}
	}

	return nil
}

func (m *StandardFourImageTextQuadrantModule) validateBlock2(formats strfmt.Registry) error {

	if err := validate.Required("block2", "body", m.Block2); err != nil {
		return err
	}

	if m.Block2 != nil {
		if err := m.Block2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block2")
			}
			return err
		}
	}

	return nil
}

func (m *StandardFourImageTextQuadrantModule) validateBlock3(formats strfmt.Registry) error {

	if err := validate.Required("block3", "body", m.Block3); err != nil {
		return err
	}

	if m.Block3 != nil {
		if err := m.Block3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block3")
			}
			return err
		}
	}

	return nil
}

func (m *StandardFourImageTextQuadrantModule) validateBlock4(formats strfmt.Registry) error {

	if err := validate.Required("block4", "body", m.Block4); err != nil {
		return err
	}

	if m.Block4 != nil {
		if err := m.Block4.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block4")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standard four image text quadrant module based on the context it is used
func (m *StandardFourImageTextQuadrantModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlock1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlock2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlock3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBlock4(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardFourImageTextQuadrantModule) contextValidateBlock1(ctx context.Context, formats strfmt.Registry) error {

	if m.Block1 != nil {
		if err := m.Block1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block1")
			}
			return err
		}
	}

	return nil
}

func (m *StandardFourImageTextQuadrantModule) contextValidateBlock2(ctx context.Context, formats strfmt.Registry) error {

	if m.Block2 != nil {
		if err := m.Block2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block2")
			}
			return err
		}
	}

	return nil
}

func (m *StandardFourImageTextQuadrantModule) contextValidateBlock3(ctx context.Context, formats strfmt.Registry) error {

	if m.Block3 != nil {
		if err := m.Block3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block3")
			}
			return err
		}
	}

	return nil
}

func (m *StandardFourImageTextQuadrantModule) contextValidateBlock4(ctx context.Context, formats strfmt.Registry) error {

	if m.Block4 != nil {
		if err := m.Block4.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block4")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block4")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardFourImageTextQuadrantModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardFourImageTextQuadrantModule) UnmarshalBinary(b []byte) error {
	var res StandardFourImageTextQuadrantModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
