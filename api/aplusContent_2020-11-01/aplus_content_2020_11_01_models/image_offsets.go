// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageOffsets The top left corner of the cropped image, specified in the original image's coordinate space.
//
// swagger:model ImageOffsets
type ImageOffsets struct {

	// x
	// Required: true
	X *IntegerWithUnits `json:"x"`

	// y
	// Required: true
	Y *IntegerWithUnits `json:"y"`
}

// Validate validates this image offsets
func (m *ImageOffsets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageOffsets) validateX(formats strfmt.Registry) error {

	if err := validate.Required("x", "body", m.X); err != nil {
		return err
	}

	if m.X != nil {
		if err := m.X.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x")
			}
			return err
		}
	}

	return nil
}

func (m *ImageOffsets) validateY(formats strfmt.Registry) error {

	if err := validate.Required("y", "body", m.Y); err != nil {
		return err
	}

	if m.Y != nil {
		if err := m.Y.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("y")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("y")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this image offsets based on the context it is used
func (m *ImageOffsets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateX(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateY(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageOffsets) contextValidateX(ctx context.Context, formats strfmt.Registry) error {

	if m.X != nil {
		if err := m.X.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("x")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("x")
			}
			return err
		}
	}

	return nil
}

func (m *ImageOffsets) contextValidateY(ctx context.Context, formats strfmt.Registry) error {

	if m.Y != nil {
		if err := m.Y.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("y")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("y")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageOffsets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageOffsets) UnmarshalBinary(b []byte) error {
	var res ImageOffsets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
