// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContentStatus The submission status of the content document.
//
// swagger:model ContentStatus
type ContentStatus string

func NewContentStatus(value ContentStatus) *ContentStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContentStatus.
func (m ContentStatus) Pointer() *ContentStatus {
	return &m
}

const (

	// ContentStatusAPPROVED captures enum value "APPROVED"
	ContentStatusAPPROVED ContentStatus = "APPROVED"

	// ContentStatusDRAFT captures enum value "DRAFT"
	ContentStatusDRAFT ContentStatus = "DRAFT"

	// ContentStatusREJECTED captures enum value "REJECTED"
	ContentStatusREJECTED ContentStatus = "REJECTED"

	// ContentStatusSUBMITTED captures enum value "SUBMITTED"
	ContentStatusSUBMITTED ContentStatus = "SUBMITTED"
)

// for schema
var contentStatusEnum []interface{}

func init() {
	var res []ContentStatus
	if err := json.Unmarshal([]byte(`["APPROVED","DRAFT","REJECTED","SUBMITTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentStatusEnum = append(contentStatusEnum, v)
	}
}

func (m ContentStatus) validateContentStatusEnum(path, location string, value ContentStatus) error {
	if err := validate.EnumCase(path, location, value, contentStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this content status
func (m ContentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContentStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this content status based on context it is used
func (m ContentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
