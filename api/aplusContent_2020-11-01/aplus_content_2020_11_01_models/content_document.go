// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContentDocument The A+ Content document. This is the enhanced content that is published to product detail pages.
//
// swagger:model ContentDocument
type ContentDocument struct {

	// content module list
	// Required: true
	ContentModuleList ContentModuleList `json:"contentModuleList"`

	// content sub type
	ContentSubType ContentSubType `json:"contentSubType,omitempty"`

	// content type
	// Required: true
	ContentType *ContentType `json:"contentType"`

	// locale
	// Required: true
	Locale *LanguageTag `json:"locale"`

	// The A+ Content document name.
	// Required: true
	// Max Length: 100
	// Min Length: 1
	Name *string `json:"name"`
}

// Validate validates this content document
func (m *ContentDocument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContentModuleList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentSubType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentDocument) validateContentModuleList(formats strfmt.Registry) error {

	if err := validate.Required("contentModuleList", "body", m.ContentModuleList); err != nil {
		return err
	}

	if err := m.ContentModuleList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentModuleList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentModuleList")
		}
		return err
	}

	return nil
}

func (m *ContentDocument) validateContentSubType(formats strfmt.Registry) error {
	if swag.IsZero(m.ContentSubType) { // not required
		return nil
	}

	if err := m.ContentSubType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentSubType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentSubType")
		}
		return err
	}

	return nil
}

func (m *ContentDocument) validateContentType(formats strfmt.Registry) error {

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	if err := validate.Required("contentType", "body", m.ContentType); err != nil {
		return err
	}

	if m.ContentType != nil {
		if err := m.ContentType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentType")
			}
			return err
		}
	}

	return nil
}

func (m *ContentDocument) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	if m.Locale != nil {
		if err := m.Locale.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

func (m *ContentDocument) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 100); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this content document based on the context it is used
func (m *ContentDocument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContentModuleList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentSubType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContentType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocale(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContentDocument) contextValidateContentModuleList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ContentModuleList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentModuleList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentModuleList")
		}
		return err
	}

	return nil
}

func (m *ContentDocument) contextValidateContentSubType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ContentSubType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("contentSubType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("contentSubType")
		}
		return err
	}

	return nil
}

func (m *ContentDocument) contextValidateContentType(ctx context.Context, formats strfmt.Registry) error {

	if m.ContentType != nil {
		if err := m.ContentType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contentType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contentType")
			}
			return err
		}
	}

	return nil
}

func (m *ContentDocument) contextValidateLocale(ctx context.Context, formats strfmt.Registry) error {

	if m.Locale != nil {
		if err := m.Locale.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("locale")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("locale")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContentDocument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContentDocument) UnmarshalBinary(b []byte) error {
	var res ContentDocument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
