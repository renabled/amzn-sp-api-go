// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandardImageTextOverlayModule A standard background image with a floating text box.
//
// swagger:model StandardImageTextOverlayModule
type StandardImageTextOverlayModule struct {

	// block
	Block *StandardImageTextBlock `json:"block,omitempty"`

	// overlay color type
	// Required: true
	OverlayColorType *ColorType `json:"overlayColorType"`
}

// Validate validates this standard image text overlay module
func (m *StandardImageTextOverlayModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverlayColorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardImageTextOverlayModule) validateBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.Block) { // not required
		return nil
	}

	if m.Block != nil {
		if err := m.Block.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageTextOverlayModule) validateOverlayColorType(formats strfmt.Registry) error {

	if err := validate.Required("overlayColorType", "body", m.OverlayColorType); err != nil {
		return err
	}

	if err := validate.Required("overlayColorType", "body", m.OverlayColorType); err != nil {
		return err
	}

	if m.OverlayColorType != nil {
		if err := m.OverlayColorType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overlayColorType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overlayColorType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standard image text overlay module based on the context it is used
func (m *StandardImageTextOverlayModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOverlayColorType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardImageTextOverlayModule) contextValidateBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.Block != nil {
		if err := m.Block.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("block")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("block")
			}
			return err
		}
	}

	return nil
}

func (m *StandardImageTextOverlayModule) contextValidateOverlayColorType(ctx context.Context, formats strfmt.Registry) error {

	if m.OverlayColorType != nil {
		if err := m.OverlayColorType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overlayColorType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("overlayColorType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardImageTextOverlayModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardImageTextOverlayModule) UnmarshalBinary(b []byte) error {
	var res StandardImageTextOverlayModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
