// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContentModuleType The type of A+ Content module.
//
// swagger:model ContentModuleType
type ContentModuleType string

func NewContentModuleType(value ContentModuleType) *ContentModuleType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContentModuleType.
func (m ContentModuleType) Pointer() *ContentModuleType {
	return &m
}

const (

	// ContentModuleTypeSTANDARDCOMPANYLOGO captures enum value "STANDARD_COMPANY_LOGO"
	ContentModuleTypeSTANDARDCOMPANYLOGO ContentModuleType = "STANDARD_COMPANY_LOGO"

	// ContentModuleTypeSTANDARDCOMPARISONTABLE captures enum value "STANDARD_COMPARISON_TABLE"
	ContentModuleTypeSTANDARDCOMPARISONTABLE ContentModuleType = "STANDARD_COMPARISON_TABLE"

	// ContentModuleTypeSTANDARDFOURIMAGETEXT captures enum value "STANDARD_FOUR_IMAGE_TEXT"
	ContentModuleTypeSTANDARDFOURIMAGETEXT ContentModuleType = "STANDARD_FOUR_IMAGE_TEXT"

	// ContentModuleTypeSTANDARDFOURIMAGETEXTQUADRANT captures enum value "STANDARD_FOUR_IMAGE_TEXT_QUADRANT"
	ContentModuleTypeSTANDARDFOURIMAGETEXTQUADRANT ContentModuleType = "STANDARD_FOUR_IMAGE_TEXT_QUADRANT"

	// ContentModuleTypeSTANDARDHEADERIMAGETEXT captures enum value "STANDARD_HEADER_IMAGE_TEXT"
	ContentModuleTypeSTANDARDHEADERIMAGETEXT ContentModuleType = "STANDARD_HEADER_IMAGE_TEXT"

	// ContentModuleTypeSTANDARDIMAGESIDEBAR captures enum value "STANDARD_IMAGE_SIDEBAR"
	ContentModuleTypeSTANDARDIMAGESIDEBAR ContentModuleType = "STANDARD_IMAGE_SIDEBAR"

	// ContentModuleTypeSTANDARDIMAGETEXTOVERLAY captures enum value "STANDARD_IMAGE_TEXT_OVERLAY"
	ContentModuleTypeSTANDARDIMAGETEXTOVERLAY ContentModuleType = "STANDARD_IMAGE_TEXT_OVERLAY"

	// ContentModuleTypeSTANDARDMULTIPLEIMAGETEXT captures enum value "STANDARD_MULTIPLE_IMAGE_TEXT"
	ContentModuleTypeSTANDARDMULTIPLEIMAGETEXT ContentModuleType = "STANDARD_MULTIPLE_IMAGE_TEXT"

	// ContentModuleTypeSTANDARDPRODUCTDESCRIPTION captures enum value "STANDARD_PRODUCT_DESCRIPTION"
	ContentModuleTypeSTANDARDPRODUCTDESCRIPTION ContentModuleType = "STANDARD_PRODUCT_DESCRIPTION"

	// ContentModuleTypeSTANDARDSINGLEIMAGEHIGHLIGHTS captures enum value "STANDARD_SINGLE_IMAGE_HIGHLIGHTS"
	ContentModuleTypeSTANDARDSINGLEIMAGEHIGHLIGHTS ContentModuleType = "STANDARD_SINGLE_IMAGE_HIGHLIGHTS"

	// ContentModuleTypeSTANDARDSINGLEIMAGESPECSDETAIL captures enum value "STANDARD_SINGLE_IMAGE_SPECS_DETAIL"
	ContentModuleTypeSTANDARDSINGLEIMAGESPECSDETAIL ContentModuleType = "STANDARD_SINGLE_IMAGE_SPECS_DETAIL"

	// ContentModuleTypeSTANDARDSINGLESIDEIMAGE captures enum value "STANDARD_SINGLE_SIDE_IMAGE"
	ContentModuleTypeSTANDARDSINGLESIDEIMAGE ContentModuleType = "STANDARD_SINGLE_SIDE_IMAGE"

	// ContentModuleTypeSTANDARDTECHSPECS captures enum value "STANDARD_TECH_SPECS"
	ContentModuleTypeSTANDARDTECHSPECS ContentModuleType = "STANDARD_TECH_SPECS"

	// ContentModuleTypeSTANDARDTEXT captures enum value "STANDARD_TEXT"
	ContentModuleTypeSTANDARDTEXT ContentModuleType = "STANDARD_TEXT"

	// ContentModuleTypeSTANDARDTHREEIMAGETEXT captures enum value "STANDARD_THREE_IMAGE_TEXT"
	ContentModuleTypeSTANDARDTHREEIMAGETEXT ContentModuleType = "STANDARD_THREE_IMAGE_TEXT"
)

// for schema
var contentModuleTypeEnum []interface{}

func init() {
	var res []ContentModuleType
	if err := json.Unmarshal([]byte(`["STANDARD_COMPANY_LOGO","STANDARD_COMPARISON_TABLE","STANDARD_FOUR_IMAGE_TEXT","STANDARD_FOUR_IMAGE_TEXT_QUADRANT","STANDARD_HEADER_IMAGE_TEXT","STANDARD_IMAGE_SIDEBAR","STANDARD_IMAGE_TEXT_OVERLAY","STANDARD_MULTIPLE_IMAGE_TEXT","STANDARD_PRODUCT_DESCRIPTION","STANDARD_SINGLE_IMAGE_HIGHLIGHTS","STANDARD_SINGLE_IMAGE_SPECS_DETAIL","STANDARD_SINGLE_SIDE_IMAGE","STANDARD_TECH_SPECS","STANDARD_TEXT","STANDARD_THREE_IMAGE_TEXT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentModuleTypeEnum = append(contentModuleTypeEnum, v)
	}
}

func (m ContentModuleType) validateContentModuleTypeEnum(path, location string, value ContentModuleType) error {
	if err := validate.EnumCase(path, location, value, contentModuleTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this content module type
func (m ContentModuleType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContentModuleTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this content module type based on context it is used
func (m ContentModuleType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
