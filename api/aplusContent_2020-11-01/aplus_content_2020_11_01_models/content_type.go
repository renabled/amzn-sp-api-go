// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ContentType The A+ Content document type.
//
// swagger:model ContentType
type ContentType string

func NewContentType(value ContentType) *ContentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ContentType.
func (m ContentType) Pointer() *ContentType {
	return &m
}

const (

	// ContentTypeEBC captures enum value "EBC"
	ContentTypeEBC ContentType = "EBC"

	// ContentTypeEMC captures enum value "EMC"
	ContentTypeEMC ContentType = "EMC"
)

// for schema
var contentTypeEnum []interface{}

func init() {
	var res []ContentType
	if err := json.Unmarshal([]byte(`["EBC","EMC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		contentTypeEnum = append(contentTypeEnum, v)
	}
}

func (m ContentType) validateContentTypeEnum(path, location string, value ContentType) error {
	if err := validate.EnumCase(path, location, value, contentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this content type
func (m ContentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateContentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this content type based on context it is used
func (m ContentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
