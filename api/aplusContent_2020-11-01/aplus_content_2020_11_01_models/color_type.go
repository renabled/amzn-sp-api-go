// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ColorType The relative color scheme of content.
//
// swagger:model ColorType
type ColorType string

func NewColorType(value ColorType) *ColorType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ColorType.
func (m ColorType) Pointer() *ColorType {
	return &m
}

const (

	// ColorTypeDARK captures enum value "DARK"
	ColorTypeDARK ColorType = "DARK"

	// ColorTypeLIGHT captures enum value "LIGHT"
	ColorTypeLIGHT ColorType = "LIGHT"
)

// for schema
var colorTypeEnum []interface{}

func init() {
	var res []ColorType
	if err := json.Unmarshal([]byte(`["DARK","LIGHT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		colorTypeEnum = append(colorTypeEnum, v)
	}
}

func (m ColorType) validateColorTypeEnum(path, location string, value ColorType) error {
	if err := validate.EnumCase(path, location, value, colorTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this color type
func (m ColorType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateColorTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this color type based on context it is used
func (m ColorType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
