// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Decorator A decorator applied to a content string value in order to create rich text.
//
// swagger:model Decorator
type Decorator struct {

	// The relative intensity or variation of this decorator. Decorators such as bullet-points, for example, can have multiple indentation depths.
	// Maximum: 100
	// Minimum: 0
	Depth *int64 `json:"depth,omitempty"`

	// The number of content characters to alter with this decorator. Decorators such as line breaks can have zero length and fit between characters.
	// Maximum: 10000
	// Minimum: 0
	Length *int64 `json:"length,omitempty"`

	// The starting character of this decorator within the content string. Use zero for the first character.
	// Maximum: 10000
	// Minimum: 0
	Offset *int64 `json:"offset,omitempty"`

	// type
	Type DecoratorType `json:"type,omitempty"`
}

// Validate validates this decorator
func (m *Decorator) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Decorator) validateDepth(formats strfmt.Registry) error {
	if swag.IsZero(m.Depth) { // not required
		return nil
	}

	if err := validate.MinimumInt("depth", "body", *m.Depth, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("depth", "body", *m.Depth, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *Decorator) validateLength(formats strfmt.Registry) error {
	if swag.IsZero(m.Length) { // not required
		return nil
	}

	if err := validate.MinimumInt("length", "body", *m.Length, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("length", "body", *m.Length, 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *Decorator) validateOffset(formats strfmt.Registry) error {
	if swag.IsZero(m.Offset) { // not required
		return nil
	}

	if err := validate.MinimumInt("offset", "body", *m.Offset, 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("offset", "body", *m.Offset, 10000, false); err != nil {
		return err
	}

	return nil
}

func (m *Decorator) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// ContextValidate validate this decorator based on the context it is used
func (m *Decorator) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Decorator) contextValidateType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Type.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Decorator) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Decorator) UnmarshalBinary(b []byte) error {
	var res Decorator
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
