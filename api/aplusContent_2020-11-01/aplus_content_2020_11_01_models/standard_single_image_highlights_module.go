// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// StandardSingleImageHighlightsModule A standard image with several paragraphs and a bulleted list.
//
// swagger:model StandardSingleImageHighlightsModule
type StandardSingleImageHighlightsModule struct {

	// bulleted list block
	BulletedListBlock *StandardHeaderTextListBlock `json:"bulletedListBlock,omitempty"`

	// headline
	Headline *TextComponent `json:"headline,omitempty"`

	// image
	Image *ImageComponent `json:"image,omitempty"`

	// text block1
	TextBlock1 *StandardTextBlock `json:"textBlock1,omitempty"`

	// text block2
	TextBlock2 *StandardTextBlock `json:"textBlock2,omitempty"`

	// text block3
	TextBlock3 *StandardTextBlock `json:"textBlock3,omitempty"`
}

// Validate validates this standard single image highlights module
func (m *StandardSingleImageHighlightsModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBulletedListBlock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextBlock1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextBlock2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTextBlock3(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardSingleImageHighlightsModule) validateBulletedListBlock(formats strfmt.Registry) error {
	if swag.IsZero(m.BulletedListBlock) { // not required
		return nil
	}

	if m.BulletedListBlock != nil {
		if err := m.BulletedListBlock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bulletedListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bulletedListBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) validateHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Headline) { // not required
		return nil
	}

	if m.Headline != nil {
		if err := m.Headline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) validateTextBlock1(formats strfmt.Registry) error {
	if swag.IsZero(m.TextBlock1) { // not required
		return nil
	}

	if m.TextBlock1 != nil {
		if err := m.TextBlock1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textBlock1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("textBlock1")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) validateTextBlock2(formats strfmt.Registry) error {
	if swag.IsZero(m.TextBlock2) { // not required
		return nil
	}

	if m.TextBlock2 != nil {
		if err := m.TextBlock2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textBlock2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("textBlock2")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) validateTextBlock3(formats strfmt.Registry) error {
	if swag.IsZero(m.TextBlock3) { // not required
		return nil
	}

	if m.TextBlock3 != nil {
		if err := m.TextBlock3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textBlock3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("textBlock3")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this standard single image highlights module based on the context it is used
func (m *StandardSingleImageHighlightsModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBulletedListBlock(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTextBlock1(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTextBlock2(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTextBlock3(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardSingleImageHighlightsModule) contextValidateBulletedListBlock(ctx context.Context, formats strfmt.Registry) error {

	if m.BulletedListBlock != nil {
		if err := m.BulletedListBlock.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bulletedListBlock")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bulletedListBlock")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) contextValidateHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Headline != nil {
		if err := m.Headline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {
		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) contextValidateTextBlock1(ctx context.Context, formats strfmt.Registry) error {

	if m.TextBlock1 != nil {
		if err := m.TextBlock1.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textBlock1")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("textBlock1")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) contextValidateTextBlock2(ctx context.Context, formats strfmt.Registry) error {

	if m.TextBlock2 != nil {
		if err := m.TextBlock2.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textBlock2")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("textBlock2")
			}
			return err
		}
	}

	return nil
}

func (m *StandardSingleImageHighlightsModule) contextValidateTextBlock3(ctx context.Context, formats strfmt.Registry) error {

	if m.TextBlock3 != nil {
		if err := m.TextBlock3.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("textBlock3")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("textBlock3")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardSingleImageHighlightsModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardSingleImageHighlightsModule) UnmarshalBinary(b []byte) error {
	var res StandardSingleImageHighlightsModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
