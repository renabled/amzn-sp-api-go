// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandardComparisonProductBlock The A+ Content standard comparison product block.
//
// swagger:model StandardComparisonProductBlock
type StandardComparisonProductBlock struct {

	// asin
	Asin Asin `json:"asin,omitempty"`

	// Determines whether this block of content is visually highlighted.
	Highlight bool `json:"highlight,omitempty"`

	// image
	Image *ImageComponent `json:"image,omitempty"`

	// Comparison metrics for the product.
	// Max Items: 10
	// Min Items: 0
	Metrics []*PlainTextItem `json:"metrics"`

	// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
	// Required: true
	// Maximum: 6
	// Minimum: 1
	Position *int64 `json:"position"`

	// The comparison product title.
	// Max Length: 80
	// Min Length: 1
	Title string `json:"title,omitempty"`
}

// Validate validates this standard comparison product block
func (m *StandardComparisonProductBlock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePosition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardComparisonProductBlock) validateAsin(formats strfmt.Registry) error {
	if swag.IsZero(m.Asin) { // not required
		return nil
	}

	if err := m.Asin.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("asin")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("asin")
		}
		return err
	}

	return nil
}

func (m *StandardComparisonProductBlock) validateImage(formats strfmt.Registry) error {
	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *StandardComparisonProductBlock) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	iMetricsSize := int64(len(m.Metrics))

	if err := validate.MinItems("metrics", "body", iMetricsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("metrics", "body", iMetricsSize, 10); err != nil {
		return err
	}

	for i := 0; i < len(m.Metrics); i++ {
		if swag.IsZero(m.Metrics[i]) { // not required
			continue
		}

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StandardComparisonProductBlock) validatePosition(formats strfmt.Registry) error {

	if err := validate.Required("position", "body", m.Position); err != nil {
		return err
	}

	if err := validate.MinimumInt("position", "body", *m.Position, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("position", "body", *m.Position, 6, false); err != nil {
		return err
	}

	return nil
}

func (m *StandardComparisonProductBlock) validateTitle(formats strfmt.Registry) error {
	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MinLength("title", "body", m.Title, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", m.Title, 80); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this standard comparison product block based on the context it is used
func (m *StandardComparisonProductBlock) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateImage(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardComparisonProductBlock) contextValidateAsin(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Asin.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("asin")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("asin")
		}
		return err
	}

	return nil
}

func (m *StandardComparisonProductBlock) contextValidateImage(ctx context.Context, formats strfmt.Registry) error {

	if m.Image != nil {
		if err := m.Image.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *StandardComparisonProductBlock) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metrics); i++ {

		if m.Metrics[i] != nil {
			if err := m.Metrics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardComparisonProductBlock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardComparisonProductBlock) UnmarshalBinary(b []byte) error {
	var res StandardComparisonProductBlock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
