// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TextComponent Rich text content.
//
// swagger:model TextComponent
type TextComponent struct {

	// decorator set
	DecoratorSet DecoratorSet `json:"decoratorSet,omitempty"`

	// The actual plain text.
	// Required: true
	// Max Length: 10000
	// Min Length: 1
	Value *string `json:"value"`
}

// Validate validates this text component
func (m *TextComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDecoratorSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextComponent) validateDecoratorSet(formats strfmt.Registry) error {
	if swag.IsZero(m.DecoratorSet) { // not required
		return nil
	}

	if err := m.DecoratorSet.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("decoratorSet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("decoratorSet")
		}
		return err
	}

	return nil
}

func (m *TextComponent) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	if err := validate.MinLength("value", "body", *m.Value, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("value", "body", *m.Value, 10000); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this text component based on the context it is used
func (m *TextComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDecoratorSet(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TextComponent) contextValidateDecoratorSet(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DecoratorSet.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("decoratorSet")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("decoratorSet")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TextComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TextComponent) UnmarshalBinary(b []byte) error {
	var res TextComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
