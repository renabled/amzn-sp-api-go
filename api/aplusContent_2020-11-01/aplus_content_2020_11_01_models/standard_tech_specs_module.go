// Code generated by go-swagger; DO NOT EDIT.

package aplus_content_2020_11_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StandardTechSpecsModule The standard table of technical feature names and definitions.
//
// swagger:model StandardTechSpecsModule
type StandardTechSpecsModule struct {

	// headline
	Headline *TextComponent `json:"headline,omitempty"`

	// The specification list.
	// Required: true
	// Max Items: 16
	// Min Items: 4
	SpecificationList []*StandardTextPairBlock `json:"specificationList"`

	// The number of tables to present. Features are evenly divided between the tables.
	// Maximum: 2
	// Minimum: 1
	TableCount int64 `json:"tableCount,omitempty"`
}

// Validate validates this standard tech specs module
func (m *StandardTechSpecsModule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpecificationList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTableCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardTechSpecsModule) validateHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Headline) { // not required
		return nil
	}

	if m.Headline != nil {
		if err := m.Headline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardTechSpecsModule) validateSpecificationList(formats strfmt.Registry) error {

	if err := validate.Required("specificationList", "body", m.SpecificationList); err != nil {
		return err
	}

	iSpecificationListSize := int64(len(m.SpecificationList))

	if err := validate.MinItems("specificationList", "body", iSpecificationListSize, 4); err != nil {
		return err
	}

	if err := validate.MaxItems("specificationList", "body", iSpecificationListSize, 16); err != nil {
		return err
	}

	for i := 0; i < len(m.SpecificationList); i++ {
		if swag.IsZero(m.SpecificationList[i]) { // not required
			continue
		}

		if m.SpecificationList[i] != nil {
			if err := m.SpecificationList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("specificationList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("specificationList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StandardTechSpecsModule) validateTableCount(formats strfmt.Registry) error {
	if swag.IsZero(m.TableCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("tableCount", "body", m.TableCount, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("tableCount", "body", m.TableCount, 2, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this standard tech specs module based on the context it is used
func (m *StandardTechSpecsModule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSpecificationList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StandardTechSpecsModule) contextValidateHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Headline != nil {
		if err := m.Headline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *StandardTechSpecsModule) contextValidateSpecificationList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SpecificationList); i++ {

		if m.SpecificationList[i] != nil {
			if err := m.SpecificationList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("specificationList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("specificationList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StandardTechSpecsModule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StandardTechSpecsModule) UnmarshalBinary(b []byte) error {
	var res StandardTechSpecsModule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
