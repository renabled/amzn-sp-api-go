// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/renabled/amzn-sp-api-go/api/listingsItems_2021-08-01/listings_items_2021_08_01_models"
)

// NewPatchListingsItemParams creates a new PatchListingsItemParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewPatchListingsItemParams() *PatchListingsItemParams {
	return &PatchListingsItemParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewPatchListingsItemParamsWithTimeout creates a new PatchListingsItemParams object
// with the ability to set a timeout on a request.
func NewPatchListingsItemParamsWithTimeout(timeout time.Duration) *PatchListingsItemParams {
	return &PatchListingsItemParams{
		timeout: timeout,
	}
}

// NewPatchListingsItemParamsWithContext creates a new PatchListingsItemParams object
// with the ability to set a context for a request.
func NewPatchListingsItemParamsWithContext(ctx context.Context) *PatchListingsItemParams {
	return &PatchListingsItemParams{
		Context: ctx,
	}
}

// NewPatchListingsItemParamsWithHTTPClient creates a new PatchListingsItemParams object
// with the ability to set a custom HTTPClient for a request.
func NewPatchListingsItemParamsWithHTTPClient(client *http.Client) *PatchListingsItemParams {
	return &PatchListingsItemParams{
		HTTPClient: client,
	}
}

/*
PatchListingsItemParams contains all the parameters to send to the API endpoint

	for the patch listings item operation.

	Typically these are written to a http.Request.
*/
type PatchListingsItemParams struct {

	/* Body.

	   The request body schema for the `patchListingsItem` operation.
	*/
	Body *listings_items_2021_08_01_models.ListingsItemPatchRequest

	/* IncludedData.

	   A comma-delimited list of data sets to include in the response. Default: `issues`.

	   Default: ["issues"]
	*/
	IncludedData []string

	/* IssueLocale.

	   A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: `en_US`, `fr_CA`, `fr_FR`. Localized messages default to `en_US` when a localization is not available in the specified locale.
	*/
	IssueLocale *string

	/* MarketplaceIds.

	   A comma-delimited list of Amazon marketplace identifiers for the request.
	*/
	MarketplaceIds []string

	/* Mode.

	   The mode of operation for the request.
	*/
	Mode *string

	/* SellerID.

	   A selling partner identifier, such as a merchant account or vendor code.
	*/
	SellerID string

	/* Sku.

	   A selling partner provided identifier for an Amazon listing.
	*/
	Sku string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the patch listings item params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchListingsItemParams) WithDefaults() *PatchListingsItemParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the patch listings item params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *PatchListingsItemParams) SetDefaults() {
	var (
		includedDataDefault = []string{"issues"}
	)

	val := PatchListingsItemParams{
		IncludedData: includedDataDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the patch listings item params
func (o *PatchListingsItemParams) WithTimeout(timeout time.Duration) *PatchListingsItemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the patch listings item params
func (o *PatchListingsItemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the patch listings item params
func (o *PatchListingsItemParams) WithContext(ctx context.Context) *PatchListingsItemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the patch listings item params
func (o *PatchListingsItemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the patch listings item params
func (o *PatchListingsItemParams) WithHTTPClient(client *http.Client) *PatchListingsItemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the patch listings item params
func (o *PatchListingsItemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the patch listings item params
func (o *PatchListingsItemParams) WithBody(body *listings_items_2021_08_01_models.ListingsItemPatchRequest) *PatchListingsItemParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the patch listings item params
func (o *PatchListingsItemParams) SetBody(body *listings_items_2021_08_01_models.ListingsItemPatchRequest) {
	o.Body = body
}

// WithIncludedData adds the includedData to the patch listings item params
func (o *PatchListingsItemParams) WithIncludedData(includedData []string) *PatchListingsItemParams {
	o.SetIncludedData(includedData)
	return o
}

// SetIncludedData adds the includedData to the patch listings item params
func (o *PatchListingsItemParams) SetIncludedData(includedData []string) {
	o.IncludedData = includedData
}

// WithIssueLocale adds the issueLocale to the patch listings item params
func (o *PatchListingsItemParams) WithIssueLocale(issueLocale *string) *PatchListingsItemParams {
	o.SetIssueLocale(issueLocale)
	return o
}

// SetIssueLocale adds the issueLocale to the patch listings item params
func (o *PatchListingsItemParams) SetIssueLocale(issueLocale *string) {
	o.IssueLocale = issueLocale
}

// WithMarketplaceIds adds the marketplaceIds to the patch listings item params
func (o *PatchListingsItemParams) WithMarketplaceIds(marketplaceIds []string) *PatchListingsItemParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the patch listings item params
func (o *PatchListingsItemParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithMode adds the mode to the patch listings item params
func (o *PatchListingsItemParams) WithMode(mode *string) *PatchListingsItemParams {
	o.SetMode(mode)
	return o
}

// SetMode adds the mode to the patch listings item params
func (o *PatchListingsItemParams) SetMode(mode *string) {
	o.Mode = mode
}

// WithSellerID adds the sellerID to the patch listings item params
func (o *PatchListingsItemParams) WithSellerID(sellerID string) *PatchListingsItemParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the patch listings item params
func (o *PatchListingsItemParams) SetSellerID(sellerID string) {
	o.SellerID = sellerID
}

// WithSku adds the sku to the patch listings item params
func (o *PatchListingsItemParams) WithSku(sku string) *PatchListingsItemParams {
	o.SetSku(sku)
	return o
}

// SetSku adds the sku to the patch listings item params
func (o *PatchListingsItemParams) SetSku(sku string) {
	o.Sku = sku
}

// WriteToRequest writes these params to a swagger request
func (o *PatchListingsItemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.IncludedData != nil {

		// binding items for includedData
		joinedIncludedData := o.bindParamIncludedData(reg)

		// query array param includedData
		if err := r.SetQueryParam("includedData", joinedIncludedData...); err != nil {
			return err
		}
	}

	if o.IssueLocale != nil {

		// query param issueLocale
		var qrIssueLocale string

		if o.IssueLocale != nil {
			qrIssueLocale = *o.IssueLocale
		}
		qIssueLocale := qrIssueLocale
		if qIssueLocale != "" {

			if err := r.SetQueryParam("issueLocale", qIssueLocale); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.Mode != nil {

		// query param mode
		var qrMode string

		if o.Mode != nil {
			qrMode = *o.Mode
		}
		qMode := qrMode
		if qMode != "" {

			if err := r.SetQueryParam("mode", qMode); err != nil {
				return err
			}
		}
	}

	// path param sellerId
	if err := r.SetPathParam("sellerId", o.SellerID); err != nil {
		return err
	}

	// path param sku
	if err := r.SetPathParam("sku", o.Sku); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamPatchListingsItem binds the parameter includedData
func (o *PatchListingsItemParams) bindParamIncludedData(formats strfmt.Registry) []string {
	includedDataIR := o.IncludedData

	var includedDataIC []string
	for _, includedDataIIR := range includedDataIR { // explode []string

		includedDataIIV := includedDataIIR // string as string
		includedDataIC = append(includedDataIC, includedDataIIV)
	}

	// items.CollectionFormat: "csv"
	includedDataIS := swag.JoinByFormat(includedDataIC, "csv")

	return includedDataIS
}

// bindParamPatchListingsItem binds the parameter marketplaceIds
func (o *PatchListingsItemParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "csv")

	return marketplaceIdsIS
}
