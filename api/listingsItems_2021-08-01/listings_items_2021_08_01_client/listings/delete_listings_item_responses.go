// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/listingsItems_2021-08-01/listings_items_2021_08_01_models"
)

// DeleteListingsItemReader is a Reader for the DeleteListingsItem structure.
type DeleteListingsItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteListingsItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteListingsItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteListingsItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteListingsItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteListingsItemRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteListingsItemUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteListingsItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteListingsItemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteListingsItemServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteListingsItemOK creates a DeleteListingsItemOK with default headers values
func NewDeleteListingsItemOK() *DeleteListingsItemOK {
	return &DeleteListingsItemOK{}
}

/* DeleteListingsItemOK describes a response with status code 200, with default header values.

Successfully understood the listings item delete request. See the response to determine whether the submission has been accepted.
*/
type DeleteListingsItemOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ListingsItemSubmissionResponse
}

func (o *DeleteListingsItemOK) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemOK  %+v", 200, o.Payload)
}
func (o *DeleteListingsItemOK) GetPayload() *listings_items_2021_08_01_models.ListingsItemSubmissionResponse {
	return o.Payload
}

func (o *DeleteListingsItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ListingsItemSubmissionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemBadRequest creates a DeleteListingsItemBadRequest with default headers values
func NewDeleteListingsItemBadRequest() *DeleteListingsItemBadRequest {
	return &DeleteListingsItemBadRequest{}
}

/* DeleteListingsItemBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type DeleteListingsItemBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemBadRequest  %+v", 400, o.Payload)
}
func (o *DeleteListingsItemBadRequest) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemForbidden creates a DeleteListingsItemForbidden with default headers values
func NewDeleteListingsItemForbidden() *DeleteListingsItemForbidden {
	return &DeleteListingsItemForbidden{}
}

/* DeleteListingsItemForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type DeleteListingsItemForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemForbidden) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemForbidden  %+v", 403, o.Payload)
}
func (o *DeleteListingsItemForbidden) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemRequestEntityTooLarge creates a DeleteListingsItemRequestEntityTooLarge with default headers values
func NewDeleteListingsItemRequestEntityTooLarge() *DeleteListingsItemRequestEntityTooLarge {
	return &DeleteListingsItemRequestEntityTooLarge{}
}

/* DeleteListingsItemRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type DeleteListingsItemRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *DeleteListingsItemRequestEntityTooLarge) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemUnsupportedMediaType creates a DeleteListingsItemUnsupportedMediaType with default headers values
func NewDeleteListingsItemUnsupportedMediaType() *DeleteListingsItemUnsupportedMediaType {
	return &DeleteListingsItemUnsupportedMediaType{}
}

/* DeleteListingsItemUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type DeleteListingsItemUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *DeleteListingsItemUnsupportedMediaType) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemTooManyRequests creates a DeleteListingsItemTooManyRequests with default headers values
func NewDeleteListingsItemTooManyRequests() *DeleteListingsItemTooManyRequests {
	return &DeleteListingsItemTooManyRequests{}
}

/* DeleteListingsItemTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type DeleteListingsItemTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemTooManyRequests  %+v", 429, o.Payload)
}
func (o *DeleteListingsItemTooManyRequests) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemInternalServerError creates a DeleteListingsItemInternalServerError with default headers values
func NewDeleteListingsItemInternalServerError() *DeleteListingsItemInternalServerError {
	return &DeleteListingsItemInternalServerError{}
}

/* DeleteListingsItemInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type DeleteListingsItemInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemInternalServerError  %+v", 500, o.Payload)
}
func (o *DeleteListingsItemInternalServerError) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteListingsItemServiceUnavailable creates a DeleteListingsItemServiceUnavailable with default headers values
func NewDeleteListingsItemServiceUnavailable() *DeleteListingsItemServiceUnavailable {
	return &DeleteListingsItemServiceUnavailable{}
}

/* DeleteListingsItemServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type DeleteListingsItemServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2021_08_01_models.ErrorList
}

func (o *DeleteListingsItemServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /listings/2021-08-01/items/{sellerId}/{sku}][%d] deleteListingsItemServiceUnavailable  %+v", 503, o.Payload)
}
func (o *DeleteListingsItemServiceUnavailable) GetPayload() *listings_items_2021_08_01_models.ErrorList {
	return o.Payload
}

func (o *DeleteListingsItemServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2021_08_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
