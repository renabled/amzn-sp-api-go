// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchListingsItemsParams creates a new SearchListingsItemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchListingsItemsParams() *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchListingsItemsParamsWithTimeout creates a new SearchListingsItemsParams object
// with the ability to set a timeout on a request.
func NewSearchListingsItemsParamsWithTimeout(timeout time.Duration) *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		timeout: timeout,
	}
}

// NewSearchListingsItemsParamsWithContext creates a new SearchListingsItemsParams object
// with the ability to set a context for a request.
func NewSearchListingsItemsParamsWithContext(ctx context.Context) *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		Context: ctx,
	}
}

// NewSearchListingsItemsParamsWithHTTPClient creates a new SearchListingsItemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchListingsItemsParamsWithHTTPClient(client *http.Client) *SearchListingsItemsParams {
	return &SearchListingsItemsParams{
		HTTPClient: client,
	}
}

/*
SearchListingsItemsParams contains all the parameters to send to the API endpoint

	for the search listings items operation.

	Typically these are written to a http.Request.
*/
type SearchListingsItemsParams struct {

	/* Identifiers.

	     A comma-delimited list of product identifiers to search for listings items by.

	**Note**:
	1. Required when `identifiersType` is provided.
	*/
	Identifiers []string

	/* IdentifiersType.

	     Type of product identifiers to search for listings items by.

	**Note**:
	1. Required when `identifiers` is provided.
	*/
	IdentifiersType *string

	/* IncludedData.

	   A comma-delimited list of data sets to include in the response. Default: summaries.

	   Default: ["summaries"]
	*/
	IncludedData []string

	/* IssueLocale.

	   A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
	*/
	IssueLocale *string

	/* MarketplaceIds.

	   A comma-delimited list of Amazon marketplace identifiers for the request.
	*/
	MarketplaceIds []string

	/* PageSize.

	   Number of results to be returned per page.

	   Default: 10
	*/
	PageSize *int64

	/* PageToken.

	   A token to fetch a certain page when there are multiple pages worth of results.
	*/
	PageToken *string

	/* SellerID.

	   A selling partner identifier, such as a merchant account or vendor code.
	*/
	SellerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search listings items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchListingsItemsParams) WithDefaults() *SearchListingsItemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search listings items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchListingsItemsParams) SetDefaults() {
	var (
		includedDataDefault = []string{"summaries"}

		pageSizeDefault = int64(10)
	)

	val := SearchListingsItemsParams{
		IncludedData: includedDataDefault,
		PageSize:     &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search listings items params
func (o *SearchListingsItemsParams) WithTimeout(timeout time.Duration) *SearchListingsItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search listings items params
func (o *SearchListingsItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search listings items params
func (o *SearchListingsItemsParams) WithContext(ctx context.Context) *SearchListingsItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search listings items params
func (o *SearchListingsItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search listings items params
func (o *SearchListingsItemsParams) WithHTTPClient(client *http.Client) *SearchListingsItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search listings items params
func (o *SearchListingsItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIdentifiers adds the identifiers to the search listings items params
func (o *SearchListingsItemsParams) WithIdentifiers(identifiers []string) *SearchListingsItemsParams {
	o.SetIdentifiers(identifiers)
	return o
}

// SetIdentifiers adds the identifiers to the search listings items params
func (o *SearchListingsItemsParams) SetIdentifiers(identifiers []string) {
	o.Identifiers = identifiers
}

// WithIdentifiersType adds the identifiersType to the search listings items params
func (o *SearchListingsItemsParams) WithIdentifiersType(identifiersType *string) *SearchListingsItemsParams {
	o.SetIdentifiersType(identifiersType)
	return o
}

// SetIdentifiersType adds the identifiersType to the search listings items params
func (o *SearchListingsItemsParams) SetIdentifiersType(identifiersType *string) {
	o.IdentifiersType = identifiersType
}

// WithIncludedData adds the includedData to the search listings items params
func (o *SearchListingsItemsParams) WithIncludedData(includedData []string) *SearchListingsItemsParams {
	o.SetIncludedData(includedData)
	return o
}

// SetIncludedData adds the includedData to the search listings items params
func (o *SearchListingsItemsParams) SetIncludedData(includedData []string) {
	o.IncludedData = includedData
}

// WithIssueLocale adds the issueLocale to the search listings items params
func (o *SearchListingsItemsParams) WithIssueLocale(issueLocale *string) *SearchListingsItemsParams {
	o.SetIssueLocale(issueLocale)
	return o
}

// SetIssueLocale adds the issueLocale to the search listings items params
func (o *SearchListingsItemsParams) SetIssueLocale(issueLocale *string) {
	o.IssueLocale = issueLocale
}

// WithMarketplaceIds adds the marketplaceIds to the search listings items params
func (o *SearchListingsItemsParams) WithMarketplaceIds(marketplaceIds []string) *SearchListingsItemsParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the search listings items params
func (o *SearchListingsItemsParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithPageSize adds the pageSize to the search listings items params
func (o *SearchListingsItemsParams) WithPageSize(pageSize *int64) *SearchListingsItemsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search listings items params
func (o *SearchListingsItemsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the search listings items params
func (o *SearchListingsItemsParams) WithPageToken(pageToken *string) *SearchListingsItemsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the search listings items params
func (o *SearchListingsItemsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithSellerID adds the sellerID to the search listings items params
func (o *SearchListingsItemsParams) WithSellerID(sellerID string) *SearchListingsItemsParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the search listings items params
func (o *SearchListingsItemsParams) SetSellerID(sellerID string) {
	o.SellerID = sellerID
}

// WriteToRequest writes these params to a swagger request
func (o *SearchListingsItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Identifiers != nil {

		// binding items for identifiers
		joinedIdentifiers := o.bindParamIdentifiers(reg)

		// query array param identifiers
		if err := r.SetQueryParam("identifiers", joinedIdentifiers...); err != nil {
			return err
		}
	}

	if o.IdentifiersType != nil {

		// query param identifiersType
		var qrIdentifiersType string

		if o.IdentifiersType != nil {
			qrIdentifiersType = *o.IdentifiersType
		}
		qIdentifiersType := qrIdentifiersType
		if qIdentifiersType != "" {

			if err := r.SetQueryParam("identifiersType", qIdentifiersType); err != nil {
				return err
			}
		}
	}

	if o.IncludedData != nil {

		// binding items for includedData
		joinedIncludedData := o.bindParamIncludedData(reg)

		// query array param includedData
		if err := r.SetQueryParam("includedData", joinedIncludedData...); err != nil {
			return err
		}
	}

	if o.IssueLocale != nil {

		// query param issueLocale
		var qrIssueLocale string

		if o.IssueLocale != nil {
			qrIssueLocale = *o.IssueLocale
		}
		qIssueLocale := qrIssueLocale
		if qIssueLocale != "" {

			if err := r.SetQueryParam("issueLocale", qIssueLocale); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	// path param sellerId
	if err := r.SetPathParam("sellerId", o.SellerID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchListingsItems binds the parameter identifiers
func (o *SearchListingsItemsParams) bindParamIdentifiers(formats strfmt.Registry) []string {
	identifiersIR := o.Identifiers

	var identifiersIC []string
	for _, identifiersIIR := range identifiersIR { // explode []string

		identifiersIIV := identifiersIIR // string as string
		identifiersIC = append(identifiersIC, identifiersIIV)
	}

	// items.CollectionFormat: "csv"
	identifiersIS := swag.JoinByFormat(identifiersIC, "csv")

	return identifiersIS
}

// bindParamSearchListingsItems binds the parameter includedData
func (o *SearchListingsItemsParams) bindParamIncludedData(formats strfmt.Registry) []string {
	includedDataIR := o.IncludedData

	var includedDataIC []string
	for _, includedDataIIR := range includedDataIR { // explode []string

		includedDataIIV := includedDataIIR // string as string
		includedDataIC = append(includedDataIC, includedDataIIV)
	}

	// items.CollectionFormat: "csv"
	includedDataIS := swag.JoinByFormat(includedDataIC, "csv")

	return includedDataIS
}

// bindParamSearchListingsItems binds the parameter marketplaceIds
func (o *SearchListingsItemsParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "csv")

	return marketplaceIdsIS
}
