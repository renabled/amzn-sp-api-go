// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item A listings item.
//
// swagger:model Item
type Item struct {

	// attributes
	Attributes ItemAttributes `json:"attributes,omitempty"`

	// The fulfillment availability for the listings item.
	FulfillmentAvailability []*FulfillmentAvailability `json:"fulfillmentAvailability"`

	// issues
	Issues ItemIssues `json:"issues,omitempty"`

	// offers
	Offers ItemOffers `json:"offers,omitempty"`

	// The vendor procurement information for the listings item.
	Procurement []*ItemProcurement `json:"procurement"`

	// A selling partner provided identifier for an Amazon listing.
	// Required: true
	Sku *string `json:"sku"`

	// summaries
	Summaries ItemSummaries `json:"summaries,omitempty"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentAvailability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcurement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummaries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateFulfillmentAvailability(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentAvailability) { // not required
		return nil
	}

	for i := 0; i < len(m.FulfillmentAvailability); i++ {
		if swag.IsZero(m.FulfillmentAvailability[i]) { // not required
			continue
		}

		if m.FulfillmentAvailability[i] != nil {
			if err := m.FulfillmentAvailability[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fulfillmentAvailability" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fulfillmentAvailability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Item) validateIssues(formats strfmt.Registry) error {
	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	if err := m.Issues.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("issues")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("issues")
		}
		return err
	}

	return nil
}

func (m *Item) validateOffers(formats strfmt.Registry) error {
	if swag.IsZero(m.Offers) { // not required
		return nil
	}

	if err := m.Offers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("offers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("offers")
		}
		return err
	}

	return nil
}

func (m *Item) validateProcurement(formats strfmt.Registry) error {
	if swag.IsZero(m.Procurement) { // not required
		return nil
	}

	for i := 0; i < len(m.Procurement); i++ {
		if swag.IsZero(m.Procurement[i]) { // not required
			continue
		}

		if m.Procurement[i] != nil {
			if err := m.Procurement[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("procurement" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("procurement" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Item) validateSku(formats strfmt.Registry) error {

	if err := validate.Required("sku", "body", m.Sku); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateSummaries(formats strfmt.Registry) error {
	if swag.IsZero(m.Summaries) { // not required
		return nil
	}

	if err := m.Summaries.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("summaries")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("summaries")
		}
		return err
	}

	return nil
}

// ContextValidate validate this item based on the context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFulfillmentAvailability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIssues(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProcurement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummaries(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) contextValidateFulfillmentAvailability(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FulfillmentAvailability); i++ {

		if m.FulfillmentAvailability[i] != nil {
			if err := m.FulfillmentAvailability[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fulfillmentAvailability" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fulfillmentAvailability" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Item) contextValidateIssues(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Issues.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("issues")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("issues")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateOffers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Offers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("offers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("offers")
		}
		return err
	}

	return nil
}

func (m *Item) contextValidateProcurement(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Procurement); i++ {

		if m.Procurement[i] != nil {
			if err := m.Procurement[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("procurement" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("procurement" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Item) contextValidateSummaries(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Summaries.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("summaries")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("summaries")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
