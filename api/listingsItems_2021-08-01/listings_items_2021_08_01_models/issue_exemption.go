// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueExemption Conveying the status of the listed enforcement actions and, if applicable, provides information about the exemption's expiry date.
//
// swagger:model IssueExemption
type IssueExemption struct {

	// This field represents the timestamp, following the ISO 8601 format, which specifies the date when temporary exemptions, if applicable, will expire, and Amazon will begin enforcing the listed actions.
	// Example: 2023-10-28T00:36:48.914Z
	// Format: date-time
	ExpiryDate strfmt.DateTime `json:"expiryDate,omitempty"`

	// This field indicates the current exemption status for the listed enforcement actions. It can take values such as `EXEMPT`, signifying permanent exemption, `EXEMPT_UNTIL_EXPIRY_DATE` indicating temporary exemption until a specified date, or `NOT_EXEMPT` signifying no exemptions, and enforcement actions were already applied.
	// Required: true
	// Enum: [EXEMPT EXEMPT_UNTIL_EXPIRY_DATE NOT_EXEMPT]
	Status *string `json:"status"`
}

// Validate validates this issue exemption
func (m *IssueExemption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpiryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueExemption) validateExpiryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpiryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("expiryDate", "body", "date-time", m.ExpiryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var issueExemptionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXEMPT","EXEMPT_UNTIL_EXPIRY_DATE","NOT_EXEMPT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		issueExemptionTypeStatusPropEnum = append(issueExemptionTypeStatusPropEnum, v)
	}
}

const (

	// IssueExemptionStatusEXEMPT captures enum value "EXEMPT"
	IssueExemptionStatusEXEMPT string = "EXEMPT"

	// IssueExemptionStatusEXEMPTUNTILEXPIRYDATE captures enum value "EXEMPT_UNTIL_EXPIRY_DATE"
	IssueExemptionStatusEXEMPTUNTILEXPIRYDATE string = "EXEMPT_UNTIL_EXPIRY_DATE"

	// IssueExemptionStatusNOTEXEMPT captures enum value "NOT_EXEMPT"
	IssueExemptionStatusNOTEXEMPT string = "NOT_EXEMPT"
)

// prop value enum
func (m *IssueExemption) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, issueExemptionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IssueExemption) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this issue exemption based on context it is used
func (m *IssueExemption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueExemption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueExemption) UnmarshalBinary(b []byte) error {
	var res IssueExemption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
