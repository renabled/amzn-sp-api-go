// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemProcurement Vendor procurement information for the listings item.
//
// swagger:model ItemProcurement
type ItemProcurement struct {

	// The price (numeric value) that you want Amazon to pay you for this product.
	// Required: true
	CostPrice *Money `json:"costPrice"`
}

// Validate validates this item procurement
func (m *ItemProcurement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCostPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemProcurement) validateCostPrice(formats strfmt.Registry) error {

	if err := validate.Required("costPrice", "body", m.CostPrice); err != nil {
		return err
	}

	if m.CostPrice != nil {
		if err := m.CostPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("costPrice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item procurement based on the context it is used
func (m *ItemProcurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCostPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemProcurement) contextValidateCostPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.CostPrice != nil {
		if err := m.CostPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("costPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("costPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemProcurement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemProcurement) UnmarshalBinary(b []byte) error {
	var res ItemProcurement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
