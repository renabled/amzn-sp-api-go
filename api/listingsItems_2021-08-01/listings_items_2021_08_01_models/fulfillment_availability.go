// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentAvailability Fulfillment availability details for the listings item.
//
// swagger:model FulfillmentAvailability
type FulfillmentAvailability struct {

	// Designates which fulfillment network will be used.
	// Required: true
	FulfillmentChannelCode *string `json:"fulfillmentChannelCode"`

	// The quantity of the item you are making available for sale.
	// Minimum: 0
	Quantity *int64 `json:"quantity,omitempty"`
}

// Validate validates this fulfillment availability
func (m *FulfillmentAvailability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFulfillmentChannelCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentAvailability) validateFulfillmentChannelCode(formats strfmt.Registry) error {

	if err := validate.Required("fulfillmentChannelCode", "body", m.FulfillmentChannelCode); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentAvailability) validateQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.Quantity) { // not required
		return nil
	}

	if err := validate.MinimumInt("quantity", "body", *m.Quantity, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this fulfillment availability based on context it is used
func (m *FulfillmentAvailability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentAvailability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentAvailability) UnmarshalBinary(b []byte) error {
	var res FulfillmentAvailability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
