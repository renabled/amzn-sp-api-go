// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueEnforcementAction The enforcement action taken by Amazon that affect the publishing or status of a listing
//
// swagger:model IssueEnforcementAction
type IssueEnforcementAction struct {

	// The enforcement action name.
	//
	// Possible values:
	//
	// * `LISTING_SUPPRESSED` - This enforcement takes down the current listing item`s buyability.
	//
	// * `ATTRIBUTE_SUPPRESSED` - An attribute`s value on the listing item is invalid, which causes it to be rejected by Amazon.
	//
	// * `CATALOG_ITEM_REMOVED` - This catalog item is inactive on Amazon, and all offers against it in the applicable marketplace are non-buyable.
	//
	// * `SEARCH_SUPPRESSED` - This value indicates that the catalog item is hidden from search results.
	// Example: LISTING_SUPPRESSED
	// Required: true
	Action *string `json:"action"`
}

// Validate validates this issue enforcement action
func (m *IssueEnforcementAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueEnforcementAction) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this issue enforcement action based on context it is used
func (m *IssueEnforcementAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IssueEnforcementAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueEnforcementAction) UnmarshalBinary(b []byte) error {
	var res IssueEnforcementAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
