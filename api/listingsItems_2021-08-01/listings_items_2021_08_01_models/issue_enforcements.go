// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IssueEnforcements This field provides information about the enforcement actions taken by Amazon that affect the publishing or status of a listing. It also includes details about any associated exemptions.
//
// swagger:model IssueEnforcements
type IssueEnforcements struct {

	// List of enforcement actions taken by Amazon that affect the publishing or status of a listing.
	// Required: true
	Actions []*IssueEnforcementAction `json:"actions"`

	// The "exemption" field serves to convey the status of enforcement actions by Amazon.
	// Required: true
	Exemption *IssueExemption `json:"exemption"`
}

// Validate validates this issue enforcements
func (m *IssueEnforcements) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExemption(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueEnforcements) validateActions(formats strfmt.Registry) error {

	if err := validate.Required("actions", "body", m.Actions); err != nil {
		return err
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IssueEnforcements) validateExemption(formats strfmt.Registry) error {

	if err := validate.Required("exemption", "body", m.Exemption); err != nil {
		return err
	}

	if m.Exemption != nil {
		if err := m.Exemption.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exemption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exemption")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this issue enforcements based on the context it is used
func (m *IssueEnforcements) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExemption(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IssueEnforcements) contextValidateActions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Actions); i++ {

		if m.Actions[i] != nil {
			if err := m.Actions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *IssueEnforcements) contextValidateExemption(ctx context.Context, formats strfmt.Registry) error {

	if m.Exemption != nil {
		if err := m.Exemption.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exemption")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exemption")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IssueEnforcements) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IssueEnforcements) UnmarshalBinary(b []byte) error {
	var res IssueEnforcements
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
