// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemOfferByMarketplace Offer details of a listings item for an Amazon marketplace.
//
// swagger:model ItemOfferByMarketplace
type ItemOfferByMarketplace struct {

	// Amazon marketplace identifier.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// Type of offer for the listings item.
	// Required: true
	// Enum: [B2C B2B]
	OfferType *string `json:"offerType"`

	// points
	Points *Points `json:"points,omitempty"`

	// Purchase price of the listings item
	// Required: true
	Price *Money `json:"price"`
}

// Validate validates this item offer by marketplace
func (m *ItemOfferByMarketplace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemOfferByMarketplace) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

var itemOfferByMarketplaceTypeOfferTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["B2C","B2B"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		itemOfferByMarketplaceTypeOfferTypePropEnum = append(itemOfferByMarketplaceTypeOfferTypePropEnum, v)
	}
}

const (

	// ItemOfferByMarketplaceOfferTypeB2C captures enum value "B2C"
	ItemOfferByMarketplaceOfferTypeB2C string = "B2C"

	// ItemOfferByMarketplaceOfferTypeB2B captures enum value "B2B"
	ItemOfferByMarketplaceOfferTypeB2B string = "B2B"
)

// prop value enum
func (m *ItemOfferByMarketplace) validateOfferTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, itemOfferByMarketplaceTypeOfferTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ItemOfferByMarketplace) validateOfferType(formats strfmt.Registry) error {

	if err := validate.Required("offerType", "body", m.OfferType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOfferTypeEnum("offerType", "body", *m.OfferType); err != nil {
		return err
	}

	return nil
}

func (m *ItemOfferByMarketplace) validatePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Points) { // not required
		return nil
	}

	if m.Points != nil {
		if err := m.Points.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("points")
			}
			return err
		}
	}

	return nil
}

func (m *ItemOfferByMarketplace) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	if m.Price != nil {
		if err := m.Price.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item offer by marketplace based on the context it is used
func (m *ItemOfferByMarketplace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemOfferByMarketplace) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if m.Points != nil {
		if err := m.Points.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("points")
			}
			return err
		}
	}

	return nil
}

func (m *ItemOfferByMarketplace) contextValidatePrice(ctx context.Context, formats strfmt.Registry) error {

	if m.Price != nil {
		if err := m.Price.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("price")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("price")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemOfferByMarketplace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemOfferByMarketplace) UnmarshalBinary(b []byte) error {
	var res ItemOfferByMarketplace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
