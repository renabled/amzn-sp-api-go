// Code generated by go-swagger; DO NOT EDIT.

package authorization

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAuthorizationCodeParams creates a new GetAuthorizationCodeParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAuthorizationCodeParams() *GetAuthorizationCodeParams {
	return &GetAuthorizationCodeParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuthorizationCodeParamsWithTimeout creates a new GetAuthorizationCodeParams object
// with the ability to set a timeout on a request.
func NewGetAuthorizationCodeParamsWithTimeout(timeout time.Duration) *GetAuthorizationCodeParams {
	return &GetAuthorizationCodeParams{
		timeout: timeout,
	}
}

// NewGetAuthorizationCodeParamsWithContext creates a new GetAuthorizationCodeParams object
// with the ability to set a context for a request.
func NewGetAuthorizationCodeParamsWithContext(ctx context.Context) *GetAuthorizationCodeParams {
	return &GetAuthorizationCodeParams{
		Context: ctx,
	}
}

// NewGetAuthorizationCodeParamsWithHTTPClient creates a new GetAuthorizationCodeParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAuthorizationCodeParamsWithHTTPClient(client *http.Client) *GetAuthorizationCodeParams {
	return &GetAuthorizationCodeParams{
		HTTPClient: client,
	}
}

/*
GetAuthorizationCodeParams contains all the parameters to send to the API endpoint

	for the get authorization code operation.

	Typically these are written to a http.Request.
*/
type GetAuthorizationCodeParams struct {

	/* DeveloperID.

	   Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central.
	*/
	DeveloperID string

	/* MwsAuthToken.

	   The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore.
	*/
	MwsAuthToken string

	/* SellingPartnerID.

	   The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore.
	*/
	SellingPartnerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get authorization code params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuthorizationCodeParams) WithDefaults() *GetAuthorizationCodeParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get authorization code params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAuthorizationCodeParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get authorization code params
func (o *GetAuthorizationCodeParams) WithTimeout(timeout time.Duration) *GetAuthorizationCodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get authorization code params
func (o *GetAuthorizationCodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get authorization code params
func (o *GetAuthorizationCodeParams) WithContext(ctx context.Context) *GetAuthorizationCodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get authorization code params
func (o *GetAuthorizationCodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get authorization code params
func (o *GetAuthorizationCodeParams) WithHTTPClient(client *http.Client) *GetAuthorizationCodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get authorization code params
func (o *GetAuthorizationCodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeveloperID adds the developerID to the get authorization code params
func (o *GetAuthorizationCodeParams) WithDeveloperID(developerID string) *GetAuthorizationCodeParams {
	o.SetDeveloperID(developerID)
	return o
}

// SetDeveloperID adds the developerId to the get authorization code params
func (o *GetAuthorizationCodeParams) SetDeveloperID(developerID string) {
	o.DeveloperID = developerID
}

// WithMwsAuthToken adds the mwsAuthToken to the get authorization code params
func (o *GetAuthorizationCodeParams) WithMwsAuthToken(mwsAuthToken string) *GetAuthorizationCodeParams {
	o.SetMwsAuthToken(mwsAuthToken)
	return o
}

// SetMwsAuthToken adds the mwsAuthToken to the get authorization code params
func (o *GetAuthorizationCodeParams) SetMwsAuthToken(mwsAuthToken string) {
	o.MwsAuthToken = mwsAuthToken
}

// WithSellingPartnerID adds the sellingPartnerID to the get authorization code params
func (o *GetAuthorizationCodeParams) WithSellingPartnerID(sellingPartnerID string) *GetAuthorizationCodeParams {
	o.SetSellingPartnerID(sellingPartnerID)
	return o
}

// SetSellingPartnerID adds the sellingPartnerId to the get authorization code params
func (o *GetAuthorizationCodeParams) SetSellingPartnerID(sellingPartnerID string) {
	o.SellingPartnerID = sellingPartnerID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuthorizationCodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param developerId
	qrDeveloperID := o.DeveloperID
	qDeveloperID := qrDeveloperID
	if qDeveloperID != "" {

		if err := r.SetQueryParam("developerId", qDeveloperID); err != nil {
			return err
		}
	}

	// query param mwsAuthToken
	qrMwsAuthToken := o.MwsAuthToken
	qMwsAuthToken := qrMwsAuthToken
	if qMwsAuthToken != "" {

		if err := r.SetQueryParam("mwsAuthToken", qMwsAuthToken); err != nil {
			return err
		}
	}

	// query param sellingPartnerId
	qrSellingPartnerID := o.SellingPartnerID
	qSellingPartnerID := qrSellingPartnerID
	if qSellingPartnerID != "" {

		if err := r.SetQueryParam("sellingPartnerId", qSellingPartnerID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
