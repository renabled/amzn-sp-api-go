// Code generated by go-swagger; DO NOT EDIT.

package offers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/replenishment-2022-11-07/replenishment_2022_11_07_models"
)

// ListOffersReader is a Reader for the ListOffers structure.
type ListOffersReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOffersReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListOffersOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListOffersBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListOffersUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListOffersForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListOffersNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListOffersRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListOffersUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListOffersTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListOffersInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListOffersServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListOffersOK creates a ListOffersOK with default headers values
func NewListOffersOK() *ListOffersOK {
	return &ListOffersOK{}
}

/*
ListOffersOK describes a response with status code 200, with default header values.

Success.
*/
type ListOffersOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ListOffersResponse
}

// IsSuccess returns true when this list offers o k response has a 2xx status code
func (o *ListOffersOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list offers o k response has a 3xx status code
func (o *ListOffersOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers o k response has a 4xx status code
func (o *ListOffersOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list offers o k response has a 5xx status code
func (o *ListOffersOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers o k response a status code equal to that given
func (o *ListOffersOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListOffersOK) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersOK  %+v", 200, o.Payload)
}

func (o *ListOffersOK) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersOK  %+v", 200, o.Payload)
}

func (o *ListOffersOK) GetPayload() *replenishment_2022_11_07_models.ListOffersResponse {
	return o.Payload
}

func (o *ListOffersOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ListOffersResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersBadRequest creates a ListOffersBadRequest with default headers values
func NewListOffersBadRequest() *ListOffersBadRequest {
	return &ListOffersBadRequest{}
}

/*
ListOffersBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListOffersBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers bad request response has a 2xx status code
func (o *ListOffersBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers bad request response has a 3xx status code
func (o *ListOffersBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers bad request response has a 4xx status code
func (o *ListOffersBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers bad request response has a 5xx status code
func (o *ListOffersBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers bad request response a status code equal to that given
func (o *ListOffersBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListOffersBadRequest) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersBadRequest  %+v", 400, o.Payload)
}

func (o *ListOffersBadRequest) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersBadRequest  %+v", 400, o.Payload)
}

func (o *ListOffersBadRequest) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersUnauthorized creates a ListOffersUnauthorized with default headers values
func NewListOffersUnauthorized() *ListOffersUnauthorized {
	return &ListOffersUnauthorized{}
}

/*
ListOffersUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type ListOffersUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers unauthorized response has a 2xx status code
func (o *ListOffersUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers unauthorized response has a 3xx status code
func (o *ListOffersUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers unauthorized response has a 4xx status code
func (o *ListOffersUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers unauthorized response has a 5xx status code
func (o *ListOffersUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers unauthorized response a status code equal to that given
func (o *ListOffersUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListOffersUnauthorized) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOffersUnauthorized) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOffersUnauthorized) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersForbidden creates a ListOffersForbidden with default headers values
func NewListOffersForbidden() *ListOffersForbidden {
	return &ListOffersForbidden{}
}

/*
ListOffersForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListOffersForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers forbidden response has a 2xx status code
func (o *ListOffersForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers forbidden response has a 3xx status code
func (o *ListOffersForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers forbidden response has a 4xx status code
func (o *ListOffersForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers forbidden response has a 5xx status code
func (o *ListOffersForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers forbidden response a status code equal to that given
func (o *ListOffersForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListOffersForbidden) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersForbidden  %+v", 403, o.Payload)
}

func (o *ListOffersForbidden) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersForbidden  %+v", 403, o.Payload)
}

func (o *ListOffersForbidden) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersNotFound creates a ListOffersNotFound with default headers values
func NewListOffersNotFound() *ListOffersNotFound {
	return &ListOffersNotFound{}
}

/*
ListOffersNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type ListOffersNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers not found response has a 2xx status code
func (o *ListOffersNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers not found response has a 3xx status code
func (o *ListOffersNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers not found response has a 4xx status code
func (o *ListOffersNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers not found response has a 5xx status code
func (o *ListOffersNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers not found response a status code equal to that given
func (o *ListOffersNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListOffersNotFound) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersNotFound  %+v", 404, o.Payload)
}

func (o *ListOffersNotFound) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersNotFound  %+v", 404, o.Payload)
}

func (o *ListOffersNotFound) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersRequestEntityTooLarge creates a ListOffersRequestEntityTooLarge with default headers values
func NewListOffersRequestEntityTooLarge() *ListOffersRequestEntityTooLarge {
	return &ListOffersRequestEntityTooLarge{}
}

/*
ListOffersRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListOffersRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers request entity too large response has a 2xx status code
func (o *ListOffersRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers request entity too large response has a 3xx status code
func (o *ListOffersRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers request entity too large response has a 4xx status code
func (o *ListOffersRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers request entity too large response has a 5xx status code
func (o *ListOffersRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers request entity too large response a status code equal to that given
func (o *ListOffersRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListOffersRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListOffersRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListOffersRequestEntityTooLarge) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersUnsupportedMediaType creates a ListOffersUnsupportedMediaType with default headers values
func NewListOffersUnsupportedMediaType() *ListOffersUnsupportedMediaType {
	return &ListOffersUnsupportedMediaType{}
}

/*
ListOffersUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListOffersUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers unsupported media type response has a 2xx status code
func (o *ListOffersUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers unsupported media type response has a 3xx status code
func (o *ListOffersUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers unsupported media type response has a 4xx status code
func (o *ListOffersUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers unsupported media type response has a 5xx status code
func (o *ListOffersUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers unsupported media type response a status code equal to that given
func (o *ListOffersUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListOffersUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListOffersUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListOffersUnsupportedMediaType) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersTooManyRequests creates a ListOffersTooManyRequests with default headers values
func NewListOffersTooManyRequests() *ListOffersTooManyRequests {
	return &ListOffersTooManyRequests{}
}

/*
ListOffersTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListOffersTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers too many requests response has a 2xx status code
func (o *ListOffersTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers too many requests response has a 3xx status code
func (o *ListOffersTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers too many requests response has a 4xx status code
func (o *ListOffersTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offers too many requests response has a 5xx status code
func (o *ListOffersTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list offers too many requests response a status code equal to that given
func (o *ListOffersTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListOffersTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOffersTooManyRequests) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOffersTooManyRequests) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersInternalServerError creates a ListOffersInternalServerError with default headers values
func NewListOffersInternalServerError() *ListOffersInternalServerError {
	return &ListOffersInternalServerError{}
}

/*
ListOffersInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListOffersInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers internal server error response has a 2xx status code
func (o *ListOffersInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers internal server error response has a 3xx status code
func (o *ListOffersInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers internal server error response has a 4xx status code
func (o *ListOffersInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list offers internal server error response has a 5xx status code
func (o *ListOffersInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list offers internal server error response a status code equal to that given
func (o *ListOffersInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListOffersInternalServerError) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListOffersInternalServerError) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersInternalServerError  %+v", 500, o.Payload)
}

func (o *ListOffersInternalServerError) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOffersServiceUnavailable creates a ListOffersServiceUnavailable with default headers values
func NewListOffersServiceUnavailable() *ListOffersServiceUnavailable {
	return &ListOffersServiceUnavailable{}
}

/*
ListOffersServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListOffersServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offers service unavailable response has a 2xx status code
func (o *ListOffersServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offers service unavailable response has a 3xx status code
func (o *ListOffersServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offers service unavailable response has a 4xx status code
func (o *ListOffersServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list offers service unavailable response has a 5xx status code
func (o *ListOffersServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list offers service unavailable response a status code equal to that given
func (o *ListOffersServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListOffersServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListOffersServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/search][%d] listOffersServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListOffersServiceUnavailable) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOffersServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
