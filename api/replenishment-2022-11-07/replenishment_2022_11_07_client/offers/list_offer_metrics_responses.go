// Code generated by go-swagger; DO NOT EDIT.

package offers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/replenishment-2022-11-07/replenishment_2022_11_07_models"
)

// ListOfferMetricsReader is a Reader for the ListOfferMetrics structure.
type ListOfferMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListOfferMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListOfferMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListOfferMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListOfferMetricsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListOfferMetricsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListOfferMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListOfferMetricsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListOfferMetricsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListOfferMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListOfferMetricsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListOfferMetricsOK creates a ListOfferMetricsOK with default headers values
func NewListOfferMetricsOK() *ListOfferMetricsOK {
	return &ListOfferMetricsOK{}
}

/*
ListOfferMetricsOK describes a response with status code 200, with default header values.

Success.
*/
type ListOfferMetricsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ListOfferMetricsResponse
}

// IsSuccess returns true when this list offer metrics o k response has a 2xx status code
func (o *ListOfferMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list offer metrics o k response has a 3xx status code
func (o *ListOfferMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics o k response has a 4xx status code
func (o *ListOfferMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list offer metrics o k response has a 5xx status code
func (o *ListOfferMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics o k response a status code equal to that given
func (o *ListOfferMetricsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListOfferMetricsOK) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsOK  %+v", 200, o.Payload)
}

func (o *ListOfferMetricsOK) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsOK  %+v", 200, o.Payload)
}

func (o *ListOfferMetricsOK) GetPayload() *replenishment_2022_11_07_models.ListOfferMetricsResponse {
	return o.Payload
}

func (o *ListOfferMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ListOfferMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsBadRequest creates a ListOfferMetricsBadRequest with default headers values
func NewListOfferMetricsBadRequest() *ListOfferMetricsBadRequest {
	return &ListOfferMetricsBadRequest{}
}

/*
ListOfferMetricsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListOfferMetricsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics bad request response has a 2xx status code
func (o *ListOfferMetricsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics bad request response has a 3xx status code
func (o *ListOfferMetricsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics bad request response has a 4xx status code
func (o *ListOfferMetricsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offer metrics bad request response has a 5xx status code
func (o *ListOfferMetricsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics bad request response a status code equal to that given
func (o *ListOfferMetricsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListOfferMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *ListOfferMetricsBadRequest) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *ListOfferMetricsBadRequest) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsUnauthorized creates a ListOfferMetricsUnauthorized with default headers values
func NewListOfferMetricsUnauthorized() *ListOfferMetricsUnauthorized {
	return &ListOfferMetricsUnauthorized{}
}

/*
ListOfferMetricsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type ListOfferMetricsUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics unauthorized response has a 2xx status code
func (o *ListOfferMetricsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics unauthorized response has a 3xx status code
func (o *ListOfferMetricsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics unauthorized response has a 4xx status code
func (o *ListOfferMetricsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offer metrics unauthorized response has a 5xx status code
func (o *ListOfferMetricsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics unauthorized response a status code equal to that given
func (o *ListOfferMetricsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListOfferMetricsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOfferMetricsUnauthorized) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListOfferMetricsUnauthorized) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsForbidden creates a ListOfferMetricsForbidden with default headers values
func NewListOfferMetricsForbidden() *ListOfferMetricsForbidden {
	return &ListOfferMetricsForbidden{}
}

/*
ListOfferMetricsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListOfferMetricsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics forbidden response has a 2xx status code
func (o *ListOfferMetricsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics forbidden response has a 3xx status code
func (o *ListOfferMetricsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics forbidden response has a 4xx status code
func (o *ListOfferMetricsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offer metrics forbidden response has a 5xx status code
func (o *ListOfferMetricsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics forbidden response a status code equal to that given
func (o *ListOfferMetricsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListOfferMetricsForbidden) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsForbidden  %+v", 403, o.Payload)
}

func (o *ListOfferMetricsForbidden) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsForbidden  %+v", 403, o.Payload)
}

func (o *ListOfferMetricsForbidden) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsNotFound creates a ListOfferMetricsNotFound with default headers values
func NewListOfferMetricsNotFound() *ListOfferMetricsNotFound {
	return &ListOfferMetricsNotFound{}
}

/*
ListOfferMetricsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type ListOfferMetricsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics not found response has a 2xx status code
func (o *ListOfferMetricsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics not found response has a 3xx status code
func (o *ListOfferMetricsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics not found response has a 4xx status code
func (o *ListOfferMetricsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offer metrics not found response has a 5xx status code
func (o *ListOfferMetricsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics not found response a status code equal to that given
func (o *ListOfferMetricsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListOfferMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsNotFound  %+v", 404, o.Payload)
}

func (o *ListOfferMetricsNotFound) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsNotFound  %+v", 404, o.Payload)
}

func (o *ListOfferMetricsNotFound) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsUnsupportedMediaType creates a ListOfferMetricsUnsupportedMediaType with default headers values
func NewListOfferMetricsUnsupportedMediaType() *ListOfferMetricsUnsupportedMediaType {
	return &ListOfferMetricsUnsupportedMediaType{}
}

/*
ListOfferMetricsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListOfferMetricsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics unsupported media type response has a 2xx status code
func (o *ListOfferMetricsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics unsupported media type response has a 3xx status code
func (o *ListOfferMetricsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics unsupported media type response has a 4xx status code
func (o *ListOfferMetricsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offer metrics unsupported media type response has a 5xx status code
func (o *ListOfferMetricsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics unsupported media type response a status code equal to that given
func (o *ListOfferMetricsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListOfferMetricsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListOfferMetricsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListOfferMetricsUnsupportedMediaType) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsTooManyRequests creates a ListOfferMetricsTooManyRequests with default headers values
func NewListOfferMetricsTooManyRequests() *ListOfferMetricsTooManyRequests {
	return &ListOfferMetricsTooManyRequests{}
}

/*
ListOfferMetricsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListOfferMetricsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics too many requests response has a 2xx status code
func (o *ListOfferMetricsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics too many requests response has a 3xx status code
func (o *ListOfferMetricsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics too many requests response has a 4xx status code
func (o *ListOfferMetricsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list offer metrics too many requests response has a 5xx status code
func (o *ListOfferMetricsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list offer metrics too many requests response a status code equal to that given
func (o *ListOfferMetricsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListOfferMetricsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOfferMetricsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListOfferMetricsTooManyRequests) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsInternalServerError creates a ListOfferMetricsInternalServerError with default headers values
func NewListOfferMetricsInternalServerError() *ListOfferMetricsInternalServerError {
	return &ListOfferMetricsInternalServerError{}
}

/*
ListOfferMetricsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListOfferMetricsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics internal server error response has a 2xx status code
func (o *ListOfferMetricsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics internal server error response has a 3xx status code
func (o *ListOfferMetricsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics internal server error response has a 4xx status code
func (o *ListOfferMetricsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list offer metrics internal server error response has a 5xx status code
func (o *ListOfferMetricsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list offer metrics internal server error response a status code equal to that given
func (o *ListOfferMetricsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListOfferMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListOfferMetricsInternalServerError) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListOfferMetricsInternalServerError) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListOfferMetricsServiceUnavailable creates a ListOfferMetricsServiceUnavailable with default headers values
func NewListOfferMetricsServiceUnavailable() *ListOfferMetricsServiceUnavailable {
	return &ListOfferMetricsServiceUnavailable{}
}

/*
ListOfferMetricsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListOfferMetricsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this list offer metrics service unavailable response has a 2xx status code
func (o *ListOfferMetricsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list offer metrics service unavailable response has a 3xx status code
func (o *ListOfferMetricsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list offer metrics service unavailable response has a 4xx status code
func (o *ListOfferMetricsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list offer metrics service unavailable response has a 5xx status code
func (o *ListOfferMetricsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list offer metrics service unavailable response a status code equal to that given
func (o *ListOfferMetricsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListOfferMetricsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListOfferMetricsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/offers/metrics/search][%d] listOfferMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListOfferMetricsServiceUnavailable) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *ListOfferMetricsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
