// Code generated by go-swagger; DO NOT EDIT.

package sellingpartners

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/replenishment-2022-11-07/replenishment_2022_11_07_models"
)

// GetSellingPartnerMetricsReader is a Reader for the GetSellingPartnerMetrics structure.
type GetSellingPartnerMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSellingPartnerMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSellingPartnerMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSellingPartnerMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetSellingPartnerMetricsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSellingPartnerMetricsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSellingPartnerMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSellingPartnerMetricsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSellingPartnerMetricsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSellingPartnerMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSellingPartnerMetricsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSellingPartnerMetricsOK creates a GetSellingPartnerMetricsOK with default headers values
func NewGetSellingPartnerMetricsOK() *GetSellingPartnerMetricsOK {
	return &GetSellingPartnerMetricsOK{}
}

/*
GetSellingPartnerMetricsOK describes a response with status code 200, with default header values.

Success.
*/
type GetSellingPartnerMetricsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.GetSellingPartnerMetricsResponse
}

// IsSuccess returns true when this get selling partner metrics o k response has a 2xx status code
func (o *GetSellingPartnerMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get selling partner metrics o k response has a 3xx status code
func (o *GetSellingPartnerMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics o k response has a 4xx status code
func (o *GetSellingPartnerMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get selling partner metrics o k response has a 5xx status code
func (o *GetSellingPartnerMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics o k response a status code equal to that given
func (o *GetSellingPartnerMetricsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetSellingPartnerMetricsOK) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsOK  %+v", 200, o.Payload)
}

func (o *GetSellingPartnerMetricsOK) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsOK  %+v", 200, o.Payload)
}

func (o *GetSellingPartnerMetricsOK) GetPayload() *replenishment_2022_11_07_models.GetSellingPartnerMetricsResponse {
	return o.Payload
}

func (o *GetSellingPartnerMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.GetSellingPartnerMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsBadRequest creates a GetSellingPartnerMetricsBadRequest with default headers values
func NewGetSellingPartnerMetricsBadRequest() *GetSellingPartnerMetricsBadRequest {
	return &GetSellingPartnerMetricsBadRequest{}
}

/*
GetSellingPartnerMetricsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSellingPartnerMetricsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics bad request response has a 2xx status code
func (o *GetSellingPartnerMetricsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics bad request response has a 3xx status code
func (o *GetSellingPartnerMetricsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics bad request response has a 4xx status code
func (o *GetSellingPartnerMetricsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get selling partner metrics bad request response has a 5xx status code
func (o *GetSellingPartnerMetricsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics bad request response a status code equal to that given
func (o *GetSellingPartnerMetricsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetSellingPartnerMetricsBadRequest) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSellingPartnerMetricsBadRequest) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *GetSellingPartnerMetricsBadRequest) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsUnauthorized creates a GetSellingPartnerMetricsUnauthorized with default headers values
func NewGetSellingPartnerMetricsUnauthorized() *GetSellingPartnerMetricsUnauthorized {
	return &GetSellingPartnerMetricsUnauthorized{}
}

/*
GetSellingPartnerMetricsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetSellingPartnerMetricsUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics unauthorized response has a 2xx status code
func (o *GetSellingPartnerMetricsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics unauthorized response has a 3xx status code
func (o *GetSellingPartnerMetricsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics unauthorized response has a 4xx status code
func (o *GetSellingPartnerMetricsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get selling partner metrics unauthorized response has a 5xx status code
func (o *GetSellingPartnerMetricsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics unauthorized response a status code equal to that given
func (o *GetSellingPartnerMetricsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetSellingPartnerMetricsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSellingPartnerMetricsUnauthorized) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetSellingPartnerMetricsUnauthorized) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsForbidden creates a GetSellingPartnerMetricsForbidden with default headers values
func NewGetSellingPartnerMetricsForbidden() *GetSellingPartnerMetricsForbidden {
	return &GetSellingPartnerMetricsForbidden{}
}

/*
GetSellingPartnerMetricsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSellingPartnerMetricsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics forbidden response has a 2xx status code
func (o *GetSellingPartnerMetricsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics forbidden response has a 3xx status code
func (o *GetSellingPartnerMetricsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics forbidden response has a 4xx status code
func (o *GetSellingPartnerMetricsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get selling partner metrics forbidden response has a 5xx status code
func (o *GetSellingPartnerMetricsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics forbidden response a status code equal to that given
func (o *GetSellingPartnerMetricsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetSellingPartnerMetricsForbidden) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsForbidden  %+v", 403, o.Payload)
}

func (o *GetSellingPartnerMetricsForbidden) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsForbidden  %+v", 403, o.Payload)
}

func (o *GetSellingPartnerMetricsForbidden) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsNotFound creates a GetSellingPartnerMetricsNotFound with default headers values
func NewGetSellingPartnerMetricsNotFound() *GetSellingPartnerMetricsNotFound {
	return &GetSellingPartnerMetricsNotFound{}
}

/*
GetSellingPartnerMetricsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetSellingPartnerMetricsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics not found response has a 2xx status code
func (o *GetSellingPartnerMetricsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics not found response has a 3xx status code
func (o *GetSellingPartnerMetricsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics not found response has a 4xx status code
func (o *GetSellingPartnerMetricsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get selling partner metrics not found response has a 5xx status code
func (o *GetSellingPartnerMetricsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics not found response a status code equal to that given
func (o *GetSellingPartnerMetricsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetSellingPartnerMetricsNotFound) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsNotFound  %+v", 404, o.Payload)
}

func (o *GetSellingPartnerMetricsNotFound) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsNotFound  %+v", 404, o.Payload)
}

func (o *GetSellingPartnerMetricsNotFound) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsUnsupportedMediaType creates a GetSellingPartnerMetricsUnsupportedMediaType with default headers values
func NewGetSellingPartnerMetricsUnsupportedMediaType() *GetSellingPartnerMetricsUnsupportedMediaType {
	return &GetSellingPartnerMetricsUnsupportedMediaType{}
}

/*
GetSellingPartnerMetricsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetSellingPartnerMetricsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics unsupported media type response has a 2xx status code
func (o *GetSellingPartnerMetricsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics unsupported media type response has a 3xx status code
func (o *GetSellingPartnerMetricsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics unsupported media type response has a 4xx status code
func (o *GetSellingPartnerMetricsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get selling partner metrics unsupported media type response has a 5xx status code
func (o *GetSellingPartnerMetricsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics unsupported media type response a status code equal to that given
func (o *GetSellingPartnerMetricsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetSellingPartnerMetricsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSellingPartnerMetricsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetSellingPartnerMetricsUnsupportedMediaType) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsTooManyRequests creates a GetSellingPartnerMetricsTooManyRequests with default headers values
func NewGetSellingPartnerMetricsTooManyRequests() *GetSellingPartnerMetricsTooManyRequests {
	return &GetSellingPartnerMetricsTooManyRequests{}
}

/*
GetSellingPartnerMetricsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSellingPartnerMetricsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics too many requests response has a 2xx status code
func (o *GetSellingPartnerMetricsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics too many requests response has a 3xx status code
func (o *GetSellingPartnerMetricsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics too many requests response has a 4xx status code
func (o *GetSellingPartnerMetricsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get selling partner metrics too many requests response has a 5xx status code
func (o *GetSellingPartnerMetricsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get selling partner metrics too many requests response a status code equal to that given
func (o *GetSellingPartnerMetricsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetSellingPartnerMetricsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSellingPartnerMetricsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetSellingPartnerMetricsTooManyRequests) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsInternalServerError creates a GetSellingPartnerMetricsInternalServerError with default headers values
func NewGetSellingPartnerMetricsInternalServerError() *GetSellingPartnerMetricsInternalServerError {
	return &GetSellingPartnerMetricsInternalServerError{}
}

/*
GetSellingPartnerMetricsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSellingPartnerMetricsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics internal server error response has a 2xx status code
func (o *GetSellingPartnerMetricsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics internal server error response has a 3xx status code
func (o *GetSellingPartnerMetricsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics internal server error response has a 4xx status code
func (o *GetSellingPartnerMetricsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get selling partner metrics internal server error response has a 5xx status code
func (o *GetSellingPartnerMetricsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get selling partner metrics internal server error response a status code equal to that given
func (o *GetSellingPartnerMetricsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetSellingPartnerMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSellingPartnerMetricsInternalServerError) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetSellingPartnerMetricsInternalServerError) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSellingPartnerMetricsServiceUnavailable creates a GetSellingPartnerMetricsServiceUnavailable with default headers values
func NewGetSellingPartnerMetricsServiceUnavailable() *GetSellingPartnerMetricsServiceUnavailable {
	return &GetSellingPartnerMetricsServiceUnavailable{}
}

/*
GetSellingPartnerMetricsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSellingPartnerMetricsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *replenishment_2022_11_07_models.ErrorList
}

// IsSuccess returns true when this get selling partner metrics service unavailable response has a 2xx status code
func (o *GetSellingPartnerMetricsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get selling partner metrics service unavailable response has a 3xx status code
func (o *GetSellingPartnerMetricsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get selling partner metrics service unavailable response has a 4xx status code
func (o *GetSellingPartnerMetricsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get selling partner metrics service unavailable response has a 5xx status code
func (o *GetSellingPartnerMetricsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get selling partner metrics service unavailable response a status code equal to that given
func (o *GetSellingPartnerMetricsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetSellingPartnerMetricsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSellingPartnerMetricsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /replenishment/2022-11-07/sellingPartners/metrics/search][%d] getSellingPartnerMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetSellingPartnerMetricsServiceUnavailable) GetPayload() *replenishment_2022_11_07_models.ErrorList {
	return o.Payload
}

func (o *GetSellingPartnerMetricsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(replenishment_2022_11_07_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
