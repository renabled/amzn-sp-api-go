// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Promotion Offer promotions to include in the result filter criteria.
//
// swagger:model Promotion
type Promotion struct {

	// A base discount set by Amazon on the offer.
	AmazonFundedBaseDiscount *DiscountFunding `json:"amazonFundedBaseDiscount,omitempty"`

	// A tiered discount set by Amazon on the offer.
	AmazonFundedTieredDiscount *DiscountFunding `json:"amazonFundedTieredDiscount,omitempty"`

	// A base discount set by the selling partner on the offer.
	SellingPartnerFundedBaseDiscount *DiscountFunding `json:"sellingPartnerFundedBaseDiscount,omitempty"`

	// A tiered discount set by the selling partner on the offer.
	SellingPartnerFundedTieredDiscount *DiscountFunding `json:"sellingPartnerFundedTieredDiscount,omitempty"`
}

// Validate validates this promotion
func (m *Promotion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonFundedBaseDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmazonFundedTieredDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingPartnerFundedBaseDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingPartnerFundedTieredDiscount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Promotion) validateAmazonFundedBaseDiscount(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonFundedBaseDiscount) { // not required
		return nil
	}

	if m.AmazonFundedBaseDiscount != nil {
		if err := m.AmazonFundedBaseDiscount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonFundedBaseDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonFundedBaseDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) validateAmazonFundedTieredDiscount(formats strfmt.Registry) error {
	if swag.IsZero(m.AmazonFundedTieredDiscount) { // not required
		return nil
	}

	if m.AmazonFundedTieredDiscount != nil {
		if err := m.AmazonFundedTieredDiscount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonFundedTieredDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonFundedTieredDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) validateSellingPartnerFundedBaseDiscount(formats strfmt.Registry) error {
	if swag.IsZero(m.SellingPartnerFundedBaseDiscount) { // not required
		return nil
	}

	if m.SellingPartnerFundedBaseDiscount != nil {
		if err := m.SellingPartnerFundedBaseDiscount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingPartnerFundedBaseDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingPartnerFundedBaseDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) validateSellingPartnerFundedTieredDiscount(formats strfmt.Registry) error {
	if swag.IsZero(m.SellingPartnerFundedTieredDiscount) { // not required
		return nil
	}

	if m.SellingPartnerFundedTieredDiscount != nil {
		if err := m.SellingPartnerFundedTieredDiscount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingPartnerFundedTieredDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingPartnerFundedTieredDiscount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this promotion based on the context it is used
func (m *Promotion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonFundedBaseDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAmazonFundedTieredDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingPartnerFundedBaseDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingPartnerFundedTieredDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Promotion) contextValidateAmazonFundedBaseDiscount(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonFundedBaseDiscount != nil {
		if err := m.AmazonFundedBaseDiscount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonFundedBaseDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonFundedBaseDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) contextValidateAmazonFundedTieredDiscount(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonFundedTieredDiscount != nil {
		if err := m.AmazonFundedTieredDiscount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonFundedTieredDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonFundedTieredDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) contextValidateSellingPartnerFundedBaseDiscount(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingPartnerFundedBaseDiscount != nil {
		if err := m.SellingPartnerFundedBaseDiscount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingPartnerFundedBaseDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingPartnerFundedBaseDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *Promotion) contextValidateSellingPartnerFundedTieredDiscount(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingPartnerFundedTieredDiscount != nil {
		if err := m.SellingPartnerFundedTieredDiscount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingPartnerFundedTieredDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingPartnerFundedTieredDiscount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Promotion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Promotion) UnmarshalBinary(b []byte) error {
	var res Promotion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
