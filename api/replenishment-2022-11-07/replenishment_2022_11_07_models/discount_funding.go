// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiscountFunding The discount funding on the offer.
//
// swagger:model DiscountFunding
type DiscountFunding struct {

	// Filters the results to only include offers with the percentage specified.
	// Max Items: 10
	// Min Items: 1
	// Unique: true
	Percentage []*int64 `json:"percentage"`
}

// Validate validates this discount funding
func (m *DiscountFunding) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePercentage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DiscountFunding) validatePercentage(formats strfmt.Registry) error {
	if swag.IsZero(m.Percentage) { // not required
		return nil
	}

	iPercentageSize := int64(len(m.Percentage))

	if err := validate.MinItems("percentage", "body", iPercentageSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("percentage", "body", iPercentageSize, 10); err != nil {
		return err
	}

	if err := validate.UniqueItems("percentage", "body", m.Percentage); err != nil {
		return err
	}

	for i := 0; i < len(m.Percentage); i++ {
		if swag.IsZero(m.Percentage[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("percentage"+"."+strconv.Itoa(i), "body", *m.Percentage[i], 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("percentage"+"."+strconv.Itoa(i), "body", *m.Percentage[i], 100, false); err != nil {
			return err
		}

	}

	return nil
}

// ContextValidate validates this discount funding based on context it is used
func (m *DiscountFunding) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiscountFunding) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiscountFunding) UnmarshalBinary(b []byte) error {
	var res DiscountFunding
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
