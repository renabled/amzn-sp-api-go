// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Preference Offer preferences that you can include in the result filter criteria.
//
// swagger:model Preference
type Preference struct {

	// Filters the results to only include offers with the auto-enrollment preference specified.
	// Min Items: 1
	// Unique: true
	AutoEnrollment []AutoEnrollmentPreference `json:"autoEnrollment"`
}

// Validate validates this preference
func (m *Preference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutoEnrollment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Preference) validateAutoEnrollment(formats strfmt.Registry) error {
	if swag.IsZero(m.AutoEnrollment) { // not required
		return nil
	}

	iAutoEnrollmentSize := int64(len(m.AutoEnrollment))

	if err := validate.MinItems("autoEnrollment", "body", iAutoEnrollmentSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("autoEnrollment", "body", m.AutoEnrollment); err != nil {
		return err
	}

	for i := 0; i < len(m.AutoEnrollment); i++ {

		if err := m.AutoEnrollment[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoEnrollment" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoEnrollment" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this preference based on the context it is used
func (m *Preference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAutoEnrollment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Preference) contextValidateAutoEnrollment(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AutoEnrollment); i++ {

		if err := m.AutoEnrollment[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("autoEnrollment" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("autoEnrollment" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Preference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Preference) UnmarshalBinary(b []byte) error {
	var res Preference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
