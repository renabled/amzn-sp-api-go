// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListOfferMetricsResponseOffer An object which contains offer metrics.
//
// swagger:model ListOfferMetricsResponseOffer
type ListOfferMetricsResponseOffer struct {

	// The number of active subscriptions present at the end of the period. Applicable only for the `PERFORMANCE` `timePeriodType`.
	// Minimum: 0
	ActiveSubscriptions *int64 `json:"activeSubscriptions,omitempty"`

	// The Amazon Standard Identification Number (ASIN).
	Asin string `json:"asin,omitempty"`

	// The percentage of revenue from ASINs with coupons out of total revenue from all ASINs. Applicable only for the PERFORMANCE timePeriodType.
	// Maximum: 100
	// Minimum: 0
	CouponsRevenuePenetration *float64 `json:"couponsRevenuePenetration,omitempty"`

	// The currency code in ISO 4217 format.
	CurrencyCode string `json:"currencyCode,omitempty"`

	// The revenue that would have been generated had there not been out of stock. Applicable only for the PERFORMANCE timePeriodType.
	// Minimum: 0
	LostRevenueDueToOOS *float64 `json:"lostRevenueDueToOOS,omitempty"`

	// The forecasted shipped subscription units for the next 30 days. Applicable only for the `FORECAST` `timePeriodType`.
	// Minimum: 0
	Next30DayShippedSubscriptionUnits *int64 `json:"next30DayShippedSubscriptionUnits,omitempty"`

	// The forecasted total subscription revenue for the next 30 days. Applicable only for the `FORECAST` `timePeriodType`.
	// Minimum: 0
	Next30DayTotalSubscriptionsRevenue *float64 `json:"next30DayTotalSubscriptionsRevenue,omitempty"`

	// The forecasted shipped subscription units for the next 60 days. Applicable only for the `FORECAST` `timePeriodType`.
	// Minimum: 0
	Next60DayShippedSubscriptionUnits *int64 `json:"next60DayShippedSubscriptionUnits,omitempty"`

	// The forecasted total subscription revenue for the next 60 days. Applicable only for the `FORECAST` `timePeriodType`.
	// Minimum: 0
	Next60DayTotalSubscriptionsRevenue *float64 `json:"next60DayTotalSubscriptionsRevenue,omitempty"`

	// The forecasted shipped subscription units for the next 90 days. Applicable only for the `FORECAST` `timePeriodType`.
	// Minimum: 0
	Next90DayShippedSubscriptionUnits *int64 `json:"next90DayShippedSubscriptionUnits,omitempty"`

	// The forecasted total subscription revenue for the next 90 days. Applicable only for the `FORECAST` `timePeriodType`.
	// Minimum: 0
	Next90DayTotalSubscriptionsRevenue *float64 `json:"next90DayTotalSubscriptionsRevenue,omitempty"`

	// The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the `PERFORMANCE` `timePeriodType`.
	// Maximum: 100
	// Minimum: 0
	NotDeliveredDueToOOS *float64 `json:"notDeliveredDueToOOS,omitempty"`

	// The percentage of total program revenue out of total product revenue. Applicable only for the `PERFORMANCE` `timePeriodType`.
	// Maximum: 100
	// Minimum: 0
	RevenuePenetration *float64 `json:"revenuePenetration,omitempty"`

	// The number of units shipped to the subscribers over a period of time. Applicable only for the `PERFORMANCE` `timePeriodType`.
	// Minimum: 0
	ShippedSubscriptionUnits *int64 `json:"shippedSubscriptionUnits,omitempty"`

	// A time interval used to compute metrics.
	TimeInterval *TimeInterval `json:"timeInterval,omitempty"`

	// The revenue generated from subscriptions over a period of time. Applicable only for the `PERFORMANCE` `timePeriodType`.
	// Minimum: 0
	TotalSubscriptionsRevenue *float64 `json:"totalSubscriptionsRevenue,omitempty"`
}

// Validate validates this list offer metrics response offer
func (m *ListOfferMetricsResponseOffer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouponsRevenuePenetration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLostRevenueDueToOOS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext30DayShippedSubscriptionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext30DayTotalSubscriptionsRevenue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext60DayShippedSubscriptionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext60DayTotalSubscriptionsRevenue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext90DayShippedSubscriptionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNext90DayTotalSubscriptionsRevenue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotDeliveredDueToOOS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevenuePenetration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedSubscriptionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSubscriptionsRevenue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOfferMetricsResponseOffer) validateActiveSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveSubscriptions) { // not required
		return nil
	}

	if err := validate.MinimumInt("activeSubscriptions", "body", *m.ActiveSubscriptions, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateCouponsRevenuePenetration(formats strfmt.Registry) error {
	if swag.IsZero(m.CouponsRevenuePenetration) { // not required
		return nil
	}

	if err := validate.Minimum("couponsRevenuePenetration", "body", *m.CouponsRevenuePenetration, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("couponsRevenuePenetration", "body", *m.CouponsRevenuePenetration, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateLostRevenueDueToOOS(formats strfmt.Registry) error {
	if swag.IsZero(m.LostRevenueDueToOOS) { // not required
		return nil
	}

	if err := validate.Minimum("lostRevenueDueToOOS", "body", *m.LostRevenueDueToOOS, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNext30DayShippedSubscriptionUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.Next30DayShippedSubscriptionUnits) { // not required
		return nil
	}

	if err := validate.MinimumInt("next30DayShippedSubscriptionUnits", "body", *m.Next30DayShippedSubscriptionUnits, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNext30DayTotalSubscriptionsRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.Next30DayTotalSubscriptionsRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("next30DayTotalSubscriptionsRevenue", "body", *m.Next30DayTotalSubscriptionsRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNext60DayShippedSubscriptionUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.Next60DayShippedSubscriptionUnits) { // not required
		return nil
	}

	if err := validate.MinimumInt("next60DayShippedSubscriptionUnits", "body", *m.Next60DayShippedSubscriptionUnits, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNext60DayTotalSubscriptionsRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.Next60DayTotalSubscriptionsRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("next60DayTotalSubscriptionsRevenue", "body", *m.Next60DayTotalSubscriptionsRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNext90DayShippedSubscriptionUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.Next90DayShippedSubscriptionUnits) { // not required
		return nil
	}

	if err := validate.MinimumInt("next90DayShippedSubscriptionUnits", "body", *m.Next90DayShippedSubscriptionUnits, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNext90DayTotalSubscriptionsRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.Next90DayTotalSubscriptionsRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("next90DayTotalSubscriptionsRevenue", "body", *m.Next90DayTotalSubscriptionsRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateNotDeliveredDueToOOS(formats strfmt.Registry) error {
	if swag.IsZero(m.NotDeliveredDueToOOS) { // not required
		return nil
	}

	if err := validate.Minimum("notDeliveredDueToOOS", "body", *m.NotDeliveredDueToOOS, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("notDeliveredDueToOOS", "body", *m.NotDeliveredDueToOOS, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateRevenuePenetration(formats strfmt.Registry) error {
	if swag.IsZero(m.RevenuePenetration) { // not required
		return nil
	}

	if err := validate.Minimum("revenuePenetration", "body", *m.RevenuePenetration, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("revenuePenetration", "body", *m.RevenuePenetration, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateShippedSubscriptionUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippedSubscriptionUnits) { // not required
		return nil
	}

	if err := validate.MinimumInt("shippedSubscriptionUnits", "body", *m.ShippedSubscriptionUnits, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateTimeInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeInterval) { // not required
		return nil
	}

	if m.TimeInterval != nil {
		if err := m.TimeInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

func (m *ListOfferMetricsResponseOffer) validateTotalSubscriptionsRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalSubscriptionsRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("totalSubscriptionsRevenue", "body", *m.TotalSubscriptionsRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list offer metrics response offer based on the context it is used
func (m *ListOfferMetricsResponseOffer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOfferMetricsResponseOffer) contextValidateTimeInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeInterval != nil {
		if err := m.TimeInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListOfferMetricsResponseOffer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListOfferMetricsResponseOffer) UnmarshalBinary(b []byte) error {
	var res ListOfferMetricsResponseOffer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
