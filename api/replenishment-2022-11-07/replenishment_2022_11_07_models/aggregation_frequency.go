// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AggregationFrequency The time period used to group data in the response. Note that this is only valid for the performance time period type.
//
// swagger:model AggregationFrequency
type AggregationFrequency string

func NewAggregationFrequency(value AggregationFrequency) *AggregationFrequency {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AggregationFrequency.
func (m AggregationFrequency) Pointer() *AggregationFrequency {
	return &m
}

const (

	// AggregationFrequencyWEEK captures enum value "WEEK"
	AggregationFrequencyWEEK AggregationFrequency = "WEEK"

	// AggregationFrequencyMONTH captures enum value "MONTH"
	AggregationFrequencyMONTH AggregationFrequency = "MONTH"

	// AggregationFrequencyQUARTER captures enum value "QUARTER"
	AggregationFrequencyQUARTER AggregationFrequency = "QUARTER"

	// AggregationFrequencyYEAR captures enum value "YEAR"
	AggregationFrequencyYEAR AggregationFrequency = "YEAR"
)

// for schema
var aggregationFrequencyEnum []interface{}

func init() {
	var res []AggregationFrequency
	if err := json.Unmarshal([]byte(`["WEEK","MONTH","QUARTER","YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aggregationFrequencyEnum = append(aggregationFrequencyEnum, v)
	}
}

func (m AggregationFrequency) validateAggregationFrequencyEnum(path, location string, value AggregationFrequency) error {
	if err := validate.EnumCase(path, location, value, aggregationFrequencyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this aggregation frequency
func (m AggregationFrequency) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAggregationFrequencyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this aggregation frequency based on context it is used
func (m AggregationFrequency) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
