// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TimePeriodType The time period type that determines whether the metrics requested are backward-looking (performance) or forward-looking (forecast).
//
// swagger:model TimePeriodType
type TimePeriodType string

func NewTimePeriodType(value TimePeriodType) *TimePeriodType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated TimePeriodType.
func (m TimePeriodType) Pointer() *TimePeriodType {
	return &m
}

const (

	// TimePeriodTypePERFORMANCE captures enum value "PERFORMANCE"
	TimePeriodTypePERFORMANCE TimePeriodType = "PERFORMANCE"

	// TimePeriodTypeFORECAST captures enum value "FORECAST"
	TimePeriodTypeFORECAST TimePeriodType = "FORECAST"
)

// for schema
var timePeriodTypeEnum []interface{}

func init() {
	var res []TimePeriodType
	if err := json.Unmarshal([]byte(`["PERFORMANCE","FORECAST"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timePeriodTypeEnum = append(timePeriodTypeEnum, v)
	}
}

func (m TimePeriodType) validateTimePeriodTypeEnum(path, location string, value TimePeriodType) error {
	if err := validate.EnumCase(path, location, value, timePeriodTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this time period type
func (m TimePeriodType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTimePeriodTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this time period type based on context it is used
func (m TimePeriodType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
