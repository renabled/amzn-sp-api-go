// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSellingPartnerMetricsResponseMetric An object which contains metric data for a selling partner.
//
// swagger:model GetSellingPartnerMetricsResponseMetric
type GetSellingPartnerMetricsResponseMetric struct {

	// The number of active subscriptions present at the end of the period. Applicable only for the PERFORMANCE timePeriodType.
	// Minimum: 0
	ActiveSubscriptions *int64 `json:"activeSubscriptions,omitempty"`

	// The currency code in ISO 4217 format.
	CurrencyCode string `json:"currencyCode,omitempty"`

	// The average revenue per non-subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable only for the PERFORMANCE timePeriodType.
	// Minimum: 0
	NonSubscriberAverageRevenue *float64 `json:"nonSubscriberAverageRevenue,omitempty"`

	// The percentage of items that were not shipped out of the total shipped units over a period of time due to being out of stock. Applicable only for the PERFORMANCE timePeriodType.
	// Maximum: 100
	// Minimum: 0
	NotDeliveredDueToOOS *float64 `json:"notDeliveredDueToOOS,omitempty"`

	// The number of units shipped to the subscribers over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.
	// Minimum: 0
	ShippedSubscriptionUnits *int64 `json:"shippedSubscriptionUnits,omitempty"`

	// The average revenue per subscriber of the program over a period of past 12 months for sellers and 6 months for vendors. Applicable only for the PERFORMANCE timePeriodType.
	// Minimum: 0
	SubscriberAverageRevenue *float64 `json:"subscriberAverageRevenue,omitempty"`

	// A time interval used to compute metrics.
	TimeInterval *TimeInterval `json:"timeInterval,omitempty"`

	// The revenue generated from subscriptions over a period of time. Applicable for both the PERFORMANCE and FORECAST timePeriodType.
	// Minimum: 0
	TotalSubscriptionsRevenue *float64 `json:"totalSubscriptionsRevenue,omitempty"`
}

// Validate validates this get selling partner metrics response metric
func (m *GetSellingPartnerMetricsResponseMetric) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonSubscriberAverageRevenue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotDeliveredDueToOOS(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippedSubscriptionUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriberAverageRevenue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSubscriptionsRevenue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateActiveSubscriptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ActiveSubscriptions) { // not required
		return nil
	}

	if err := validate.MinimumInt("activeSubscriptions", "body", *m.ActiveSubscriptions, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateNonSubscriberAverageRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.NonSubscriberAverageRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("nonSubscriberAverageRevenue", "body", *m.NonSubscriberAverageRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateNotDeliveredDueToOOS(formats strfmt.Registry) error {
	if swag.IsZero(m.NotDeliveredDueToOOS) { // not required
		return nil
	}

	if err := validate.Minimum("notDeliveredDueToOOS", "body", *m.NotDeliveredDueToOOS, 0, false); err != nil {
		return err
	}

	if err := validate.Maximum("notDeliveredDueToOOS", "body", *m.NotDeliveredDueToOOS, 100, false); err != nil {
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateShippedSubscriptionUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippedSubscriptionUnits) { // not required
		return nil
	}

	if err := validate.MinimumInt("shippedSubscriptionUnits", "body", *m.ShippedSubscriptionUnits, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateSubscriberAverageRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.SubscriberAverageRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("subscriberAverageRevenue", "body", *m.SubscriberAverageRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateTimeInterval(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeInterval) { // not required
		return nil
	}

	if m.TimeInterval != nil {
		if err := m.TimeInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) validateTotalSubscriptionsRevenue(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalSubscriptionsRevenue) { // not required
		return nil
	}

	if err := validate.Minimum("totalSubscriptionsRevenue", "body", *m.TotalSubscriptionsRevenue, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this get selling partner metrics response metric based on the context it is used
func (m *GetSellingPartnerMetricsResponseMetric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimeInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSellingPartnerMetricsResponseMetric) contextValidateTimeInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeInterval != nil {
		if err := m.TimeInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSellingPartnerMetricsResponseMetric) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSellingPartnerMetricsResponseMetric) UnmarshalBinary(b []byte) error {
	var res GetSellingPartnerMetricsResponseMetric
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
