// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetSellingPartnerMetricsRequest The request body for the `getSellingPartnerMetrics` operation.
//
// swagger:model GetSellingPartnerMetricsRequest
type GetSellingPartnerMetricsRequest struct {

	// aggregation frequency
	AggregationFrequency AggregationFrequency `json:"aggregationFrequency,omitempty"`

	// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`

	// The list of metrics requested. If no metric value is provided, data for all of the metrics will be returned.
	// Min Items: 1
	// Unique: true
	Metrics []Metric `json:"metrics"`

	// The list of replenishment program types for which to return metrics.
	// Required: true
	ProgramTypes ProgramTypes `json:"programTypes"`

	// A time interval used to compute metrics.
	// Required: true
	TimeInterval *TimeInterval `json:"timeInterval"`

	// time period type
	// Required: true
	TimePeriodType *TimePeriodType `json:"timePeriodType"`
}

// Validate validates this get selling partner metrics request
func (m *GetSellingPartnerMetricsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetrics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimePeriodType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSellingPartnerMetricsRequest) validateAggregationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregationFrequency) { // not required
		return nil
	}

	if err := m.AggregationFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aggregationFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aggregationFrequency")
		}
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) validateMetrics(formats strfmt.Registry) error {
	if swag.IsZero(m.Metrics) { // not required
		return nil
	}

	iMetricsSize := int64(len(m.Metrics))

	if err := validate.MinItems("metrics", "body", iMetricsSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("metrics", "body", m.Metrics); err != nil {
		return err
	}

	for i := 0; i < len(m.Metrics); i++ {

		if err := m.Metrics[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) validateProgramTypes(formats strfmt.Registry) error {

	if err := validate.Required("programTypes", "body", m.ProgramTypes); err != nil {
		return err
	}

	if err := m.ProgramTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programTypes")
		}
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) validateTimeInterval(formats strfmt.Registry) error {

	if err := validate.Required("timeInterval", "body", m.TimeInterval); err != nil {
		return err
	}

	if m.TimeInterval != nil {
		if err := m.TimeInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) validateTimePeriodType(formats strfmt.Registry) error {

	if err := validate.Required("timePeriodType", "body", m.TimePeriodType); err != nil {
		return err
	}

	if err := validate.Required("timePeriodType", "body", m.TimePeriodType); err != nil {
		return err
	}

	if m.TimePeriodType != nil {
		if err := m.TimePeriodType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriodType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriodType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get selling partner metrics request based on the context it is used
func (m *GetSellingPartnerMetricsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMetrics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgramTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimePeriodType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSellingPartnerMetricsRequest) contextValidateAggregationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AggregationFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aggregationFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aggregationFrequency")
		}
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) contextValidateMetrics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Metrics); i++ {

		if err := m.Metrics[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metrics" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metrics" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) contextValidateProgramTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProgramTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programTypes")
		}
		return err
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) contextValidateTimeInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeInterval != nil {
		if err := m.TimeInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

func (m *GetSellingPartnerMetricsRequest) contextValidateTimePeriodType(ctx context.Context, formats strfmt.Registry) error {

	if m.TimePeriodType != nil {
		if err := m.TimePeriodType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriodType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriodType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSellingPartnerMetricsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSellingPartnerMetricsRequest) UnmarshalBinary(b []byte) error {
	var res GetSellingPartnerMetricsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
