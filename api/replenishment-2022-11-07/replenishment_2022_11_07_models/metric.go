// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Metric The metric name and description.
//
// swagger:model Metric
type Metric string

func NewMetric(value Metric) *Metric {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Metric.
func (m Metric) Pointer() *Metric {
	return &m
}

const (

	// MetricSHIPPEDSUBSCRIPTIONUNITS captures enum value "SHIPPED_SUBSCRIPTION_UNITS"
	MetricSHIPPEDSUBSCRIPTIONUNITS Metric = "SHIPPED_SUBSCRIPTION_UNITS"

	// MetricTOTALSUBSCRIPTIONSREVENUE captures enum value "TOTAL_SUBSCRIPTIONS_REVENUE"
	MetricTOTALSUBSCRIPTIONSREVENUE Metric = "TOTAL_SUBSCRIPTIONS_REVENUE"

	// MetricACTIVESUBSCRIPTIONS captures enum value "ACTIVE_SUBSCRIPTIONS"
	MetricACTIVESUBSCRIPTIONS Metric = "ACTIVE_SUBSCRIPTIONS"

	// MetricNOTDELIVEREDDUETOOOS captures enum value "NOT_DELIVERED_DUE_TO_OOS"
	MetricNOTDELIVEREDDUETOOOS Metric = "NOT_DELIVERED_DUE_TO_OOS"

	// MetricSUBSCRIBERNONSUBSCRIBERAVERAGEREVENUE captures enum value "SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REVENUE"
	MetricSUBSCRIBERNONSUBSCRIBERAVERAGEREVENUE Metric = "SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REVENUE"
)

// for schema
var metricEnum []interface{}

func init() {
	var res []Metric
	if err := json.Unmarshal([]byte(`["SHIPPED_SUBSCRIPTION_UNITS","TOTAL_SUBSCRIPTIONS_REVENUE","ACTIVE_SUBSCRIPTIONS","NOT_DELIVERED_DUE_TO_OOS","SUBSCRIBER_NON_SUBSCRIBER_AVERAGE_REVENUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		metricEnum = append(metricEnum, v)
	}
}

func (m Metric) validateMetricEnum(path, location string, value Metric) error {
	if err := validate.EnumCase(path, location, value, metricEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this metric
func (m Metric) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateMetricEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this metric based on context it is used
func (m Metric) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
