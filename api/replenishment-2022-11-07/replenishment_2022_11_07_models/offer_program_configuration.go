// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OfferProgramConfiguration The offer program configuration contains a set of program properties for an offer.
//
// swagger:model OfferProgramConfiguration
type OfferProgramConfiguration struct {

	// Determines whether the offer was automatically or manually enrolled in the program. This property is only supported for sellers and not vendors.
	EnrollmentMethod EnrollmentMethod `json:"enrollmentMethod,omitempty"`

	// An object which contains the preferences applied to the offer.
	Preferences *OfferProgramConfigurationPreferences `json:"preferences,omitempty"`

	// An object which contains the promotions applied to the offer.
	Promotions *OfferProgramConfigurationPromotions `json:"promotions,omitempty"`
}

// Validate validates this offer program configuration
func (m *OfferProgramConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnrollmentMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OfferProgramConfiguration) validateEnrollmentMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.EnrollmentMethod) { // not required
		return nil
	}

	if err := m.EnrollmentMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enrollmentMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("enrollmentMethod")
		}
		return err
	}

	return nil
}

func (m *OfferProgramConfiguration) validatePreferences(formats strfmt.Registry) error {
	if swag.IsZero(m.Preferences) { // not required
		return nil
	}

	if m.Preferences != nil {
		if err := m.Preferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

func (m *OfferProgramConfiguration) validatePromotions(formats strfmt.Registry) error {
	if swag.IsZero(m.Promotions) { // not required
		return nil
	}

	if m.Promotions != nil {
		if err := m.Promotions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this offer program configuration based on the context it is used
func (m *OfferProgramConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnrollmentMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromotions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OfferProgramConfiguration) contextValidateEnrollmentMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EnrollmentMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("enrollmentMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("enrollmentMethod")
		}
		return err
	}

	return nil
}

func (m *OfferProgramConfiguration) contextValidatePreferences(ctx context.Context, formats strfmt.Registry) error {

	if m.Preferences != nil {
		if err := m.Preferences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

func (m *OfferProgramConfiguration) contextValidatePromotions(ctx context.Context, formats strfmt.Registry) error {

	if m.Promotions != nil {
		if err := m.Promotions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OfferProgramConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OfferProgramConfiguration) UnmarshalBinary(b []byte) error {
	var res OfferProgramConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
