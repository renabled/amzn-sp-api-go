// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListOfferMetricsRequestFilters Use these parameters to filter results. Any result must match all provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
//
// swagger:model ListOfferMetricsRequestFilters
type ListOfferMetricsRequestFilters struct {

	// aggregation frequency
	AggregationFrequency AggregationFrequency `json:"aggregationFrequency,omitempty"`

	// A list of Amazon Standard Identification Numbers (ASINs).
	// Max Items: 20
	// Min Items: 1
	// Unique: true
	Asins []string `json:"asins"`

	// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`

	// program types
	// Required: true
	ProgramTypes ProgramTypes `json:"programTypes"`

	// A time interval used to compute metrics.
	// Required: true
	TimeInterval *TimeInterval `json:"timeInterval"`

	// time period type
	// Required: true
	TimePeriodType *TimePeriodType `json:"timePeriodType"`
}

// Validate validates this list offer metrics request filters
func (m *ListOfferMetricsRequestFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationFrequency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAsins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimePeriodType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOfferMetricsRequestFilters) validateAggregationFrequency(formats strfmt.Registry) error {
	if swag.IsZero(m.AggregationFrequency) { // not required
		return nil
	}

	if err := m.AggregationFrequency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aggregationFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aggregationFrequency")
		}
		return err
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) validateAsins(formats strfmt.Registry) error {
	if swag.IsZero(m.Asins) { // not required
		return nil
	}

	iAsinsSize := int64(len(m.Asins))

	if err := validate.MinItems("asins", "body", iAsinsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("asins", "body", iAsinsSize, 20); err != nil {
		return err
	}

	if err := validate.UniqueItems("asins", "body", m.Asins); err != nil {
		return err
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) validateProgramTypes(formats strfmt.Registry) error {

	if err := validate.Required("programTypes", "body", m.ProgramTypes); err != nil {
		return err
	}

	if err := m.ProgramTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programTypes")
		}
		return err
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) validateTimeInterval(formats strfmt.Registry) error {

	if err := validate.Required("timeInterval", "body", m.TimeInterval); err != nil {
		return err
	}

	if m.TimeInterval != nil {
		if err := m.TimeInterval.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) validateTimePeriodType(formats strfmt.Registry) error {

	if err := validate.Required("timePeriodType", "body", m.TimePeriodType); err != nil {
		return err
	}

	if err := validate.Required("timePeriodType", "body", m.TimePeriodType); err != nil {
		return err
	}

	if m.TimePeriodType != nil {
		if err := m.TimePeriodType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriodType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriodType")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list offer metrics request filters based on the context it is used
func (m *ListOfferMetricsRequestFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAggregationFrequency(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgramTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeInterval(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimePeriodType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOfferMetricsRequestFilters) contextValidateAggregationFrequency(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AggregationFrequency.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("aggregationFrequency")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("aggregationFrequency")
		}
		return err
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) contextValidateProgramTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProgramTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programTypes")
		}
		return err
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) contextValidateTimeInterval(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeInterval != nil {
		if err := m.TimeInterval.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeInterval")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeInterval")
			}
			return err
		}
	}

	return nil
}

func (m *ListOfferMetricsRequestFilters) contextValidateTimePeriodType(ctx context.Context, formats strfmt.Registry) error {

	if m.TimePeriodType != nil {
		if err := m.TimePeriodType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriodType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriodType")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListOfferMetricsRequestFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListOfferMetricsRequestFilters) UnmarshalBinary(b []byte) error {
	var res ListOfferMetricsRequestFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
