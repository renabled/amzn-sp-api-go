// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListOffersRequestFilters Use these parameters to filter results. Any result must match all of the provided parameters. For any parameter that is an array, the result must match at least one element in the provided array.
//
// swagger:model ListOffersRequestFilters
type ListOffersRequestFilters struct {

	// A list of Amazon Standard Identification Numbers (ASINs).
	// Max Items: 20
	// Min Items: 1
	// Unique: true
	Asins []string `json:"asins"`

	// A list of eligibilities associated with an offer.
	// Min Items: 1
	// Unique: true
	Eligibilities []EligibilityStatus `json:"eligibilities"`

	// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`

	// Offer preferences to include in the result filter criteria.
	Preferences *Preference `json:"preferences,omitempty"`

	// program types
	// Required: true
	ProgramTypes ProgramTypes `json:"programTypes"`

	// Offer promotions to include in the result filter criteria.
	Promotions *Promotion `json:"promotions,omitempty"`

	// A list of SKUs to filter. This filter is only supported for sellers and not for vendors.
	// Max Items: 20
	// Min Items: 1
	// Unique: true
	Skus []string `json:"skus"`
}

// Validate validates this list offers request filters
func (m *ListOffersRequestFilters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEligibilities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferences(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSkus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOffersRequestFilters) validateAsins(formats strfmt.Registry) error {
	if swag.IsZero(m.Asins) { // not required
		return nil
	}

	iAsinsSize := int64(len(m.Asins))

	if err := validate.MinItems("asins", "body", iAsinsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("asins", "body", iAsinsSize, 20); err != nil {
		return err
	}

	if err := validate.UniqueItems("asins", "body", m.Asins); err != nil {
		return err
	}

	return nil
}

func (m *ListOffersRequestFilters) validateEligibilities(formats strfmt.Registry) error {
	if swag.IsZero(m.Eligibilities) { // not required
		return nil
	}

	iEligibilitiesSize := int64(len(m.Eligibilities))

	if err := validate.MinItems("eligibilities", "body", iEligibilitiesSize, 1); err != nil {
		return err
	}

	if err := validate.UniqueItems("eligibilities", "body", m.Eligibilities); err != nil {
		return err
	}

	for i := 0; i < len(m.Eligibilities); i++ {

		if err := m.Eligibilities[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eligibilities" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eligibilities" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ListOffersRequestFilters) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersRequestFilters) validatePreferences(formats strfmt.Registry) error {
	if swag.IsZero(m.Preferences) { // not required
		return nil
	}

	if m.Preferences != nil {
		if err := m.Preferences.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersRequestFilters) validateProgramTypes(formats strfmt.Registry) error {

	if err := validate.Required("programTypes", "body", m.ProgramTypes); err != nil {
		return err
	}

	if err := m.ProgramTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programTypes")
		}
		return err
	}

	return nil
}

func (m *ListOffersRequestFilters) validatePromotions(formats strfmt.Registry) error {
	if swag.IsZero(m.Promotions) { // not required
		return nil
	}

	if m.Promotions != nil {
		if err := m.Promotions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotions")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersRequestFilters) validateSkus(formats strfmt.Registry) error {
	if swag.IsZero(m.Skus) { // not required
		return nil
	}

	iSkusSize := int64(len(m.Skus))

	if err := validate.MinItems("skus", "body", iSkusSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("skus", "body", iSkusSize, 20); err != nil {
		return err
	}

	if err := validate.UniqueItems("skus", "body", m.Skus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list offers request filters based on the context it is used
func (m *ListOffersRequestFilters) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEligibilities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreferences(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgramTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromotions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOffersRequestFilters) contextValidateEligibilities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Eligibilities); i++ {

		if err := m.Eligibilities[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eligibilities" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eligibilities" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *ListOffersRequestFilters) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersRequestFilters) contextValidatePreferences(ctx context.Context, formats strfmt.Registry) error {

	if m.Preferences != nil {
		if err := m.Preferences.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("preferences")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("preferences")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersRequestFilters) contextValidateProgramTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProgramTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programTypes")
		}
		return err
	}

	return nil
}

func (m *ListOffersRequestFilters) contextValidatePromotions(ctx context.Context, formats strfmt.Registry) error {

	if m.Promotions != nil {
		if err := m.Promotions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promotions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promotions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListOffersRequestFilters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListOffersRequestFilters) UnmarshalBinary(b []byte) error {
	var res ListOffersRequestFilters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
