// Code generated by go-swagger; DO NOT EDIT.

package replenishment_2022_11_07_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ListOffersResponseOffer An object which contains details about an offer.
//
// swagger:model ListOffersResponseOffer
type ListOffersResponseOffer struct {

	// The Amazon Standard Identification Number (ASIN).
	Asin string `json:"asin,omitempty"`

	// The offer eligibility status.
	Eligibility EligibilityStatus `json:"eligibility,omitempty"`

	// The marketplace identifier. The supported marketplaces for both sellers and vendors are US, CA, ES, UK, FR, IT, IN, DE and JP. The supported marketplaces for vendors only are BR, AU, MX, AE and NL.  Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) to find the identifier for the marketplace.
	MarketplaceID MarketplaceID `json:"marketplaceId,omitempty"`

	// offer program configuration
	OfferProgramConfiguration *OfferProgramConfiguration `json:"offerProgramConfiguration,omitempty"`

	// The replenishment program for the offer.
	ProgramType ProgramType `json:"programType,omitempty"`

	// The SKU. This property is only supported for sellers and not for vendors.
	Sku string `json:"sku,omitempty"`

	// A list of vendor codes associated with the offer.
	VendorCodes []string `json:"vendorCodes"`
}

// Validate validates this list offers response offer
func (m *ListOffersResponseOffer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEligibility(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferProgramConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgramType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOffersResponseOffer) validateEligibility(formats strfmt.Registry) error {
	if swag.IsZero(m.Eligibility) { // not required
		return nil
	}

	if err := m.Eligibility.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eligibility")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eligibility")
		}
		return err
	}

	return nil
}

func (m *ListOffersResponseOffer) validateMarketplaceID(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketplaceID) { // not required
		return nil
	}

	if err := m.MarketplaceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("marketplaceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("marketplaceId")
		}
		return err
	}

	return nil
}

func (m *ListOffersResponseOffer) validateOfferProgramConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.OfferProgramConfiguration) { // not required
		return nil
	}

	if m.OfferProgramConfiguration != nil {
		if err := m.OfferProgramConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offerProgramConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offerProgramConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersResponseOffer) validateProgramType(formats strfmt.Registry) error {
	if swag.IsZero(m.ProgramType) { // not required
		return nil
	}

	if err := m.ProgramType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this list offers response offer based on the context it is used
func (m *ListOffersResponseOffer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEligibility(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfferProgramConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProgramType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListOffersResponseOffer) contextValidateEligibility(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Eligibility.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eligibility")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eligibility")
		}
		return err
	}

	return nil
}

func (m *ListOffersResponseOffer) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("marketplaceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("marketplaceId")
		}
		return err
	}

	return nil
}

func (m *ListOffersResponseOffer) contextValidateOfferProgramConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.OfferProgramConfiguration != nil {
		if err := m.OfferProgramConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offerProgramConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offerProgramConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *ListOffersResponseOffer) contextValidateProgramType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ProgramType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("programType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("programType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListOffersResponseOffer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListOffersResponseOffer) UnmarshalBinary(b []byte) error {
	var res ListOffersResponseOffer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
