// Code generated by go-swagger; DO NOT EDIT.

package vendor_shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/vendorDirectFulfillmentShippingV1/vendor_direct_fulfillment_shipping_v1_models"
)

// SubmitShipmentStatusUpdatesReader is a Reader for the SubmitShipmentStatusUpdates structure.
type SubmitShipmentStatusUpdatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SubmitShipmentStatusUpdatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSubmitShipmentStatusUpdatesAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSubmitShipmentStatusUpdatesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSubmitShipmentStatusUpdatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSubmitShipmentStatusUpdatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSubmitShipmentStatusUpdatesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSubmitShipmentStatusUpdatesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSubmitShipmentStatusUpdatesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSubmitShipmentStatusUpdatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSubmitShipmentStatusUpdatesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSubmitShipmentStatusUpdatesAccepted creates a SubmitShipmentStatusUpdatesAccepted with default headers values
func NewSubmitShipmentStatusUpdatesAccepted() *SubmitShipmentStatusUpdatesAccepted {
	return &SubmitShipmentStatusUpdatesAccepted{}
}

/* SubmitShipmentStatusUpdatesAccepted describes a response with status code 202, with default header values.

Success.
*/
type SubmitShipmentStatusUpdatesAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesAccepted) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesAccepted  %+v", 202, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesAccepted) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesBadRequest creates a SubmitShipmentStatusUpdatesBadRequest with default headers values
func NewSubmitShipmentStatusUpdatesBadRequest() *SubmitShipmentStatusUpdatesBadRequest {
	return &SubmitShipmentStatusUpdatesBadRequest{}
}

/* SubmitShipmentStatusUpdatesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SubmitShipmentStatusUpdatesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesBadRequest) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesBadRequest  %+v", 400, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesBadRequest) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesForbidden creates a SubmitShipmentStatusUpdatesForbidden with default headers values
func NewSubmitShipmentStatusUpdatesForbidden() *SubmitShipmentStatusUpdatesForbidden {
	return &SubmitShipmentStatusUpdatesForbidden{}
}

/* SubmitShipmentStatusUpdatesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SubmitShipmentStatusUpdatesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesForbidden) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesForbidden  %+v", 403, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesForbidden) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesNotFound creates a SubmitShipmentStatusUpdatesNotFound with default headers values
func NewSubmitShipmentStatusUpdatesNotFound() *SubmitShipmentStatusUpdatesNotFound {
	return &SubmitShipmentStatusUpdatesNotFound{}
}

/* SubmitShipmentStatusUpdatesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SubmitShipmentStatusUpdatesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesNotFound) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesNotFound  %+v", 404, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesNotFound) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesRequestEntityTooLarge creates a SubmitShipmentStatusUpdatesRequestEntityTooLarge with default headers values
func NewSubmitShipmentStatusUpdatesRequestEntityTooLarge() *SubmitShipmentStatusUpdatesRequestEntityTooLarge {
	return &SubmitShipmentStatusUpdatesRequestEntityTooLarge{}
}

/* SubmitShipmentStatusUpdatesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SubmitShipmentStatusUpdatesRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesRequestEntityTooLarge) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesUnsupportedMediaType creates a SubmitShipmentStatusUpdatesUnsupportedMediaType with default headers values
func NewSubmitShipmentStatusUpdatesUnsupportedMediaType() *SubmitShipmentStatusUpdatesUnsupportedMediaType {
	return &SubmitShipmentStatusUpdatesUnsupportedMediaType{}
}

/* SubmitShipmentStatusUpdatesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SubmitShipmentStatusUpdatesUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesUnsupportedMediaType) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesTooManyRequests creates a SubmitShipmentStatusUpdatesTooManyRequests with default headers values
func NewSubmitShipmentStatusUpdatesTooManyRequests() *SubmitShipmentStatusUpdatesTooManyRequests {
	return &SubmitShipmentStatusUpdatesTooManyRequests{}
}

/* SubmitShipmentStatusUpdatesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SubmitShipmentStatusUpdatesTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesTooManyRequests  %+v", 429, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesTooManyRequests) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesInternalServerError creates a SubmitShipmentStatusUpdatesInternalServerError with default headers values
func NewSubmitShipmentStatusUpdatesInternalServerError() *SubmitShipmentStatusUpdatesInternalServerError {
	return &SubmitShipmentStatusUpdatesInternalServerError{}
}

/* SubmitShipmentStatusUpdatesInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type SubmitShipmentStatusUpdatesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesInternalServerError  %+v", 500, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesInternalServerError) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSubmitShipmentStatusUpdatesServiceUnavailable creates a SubmitShipmentStatusUpdatesServiceUnavailable with default headers values
func NewSubmitShipmentStatusUpdatesServiceUnavailable() *SubmitShipmentStatusUpdatesServiceUnavailable {
	return &SubmitShipmentStatusUpdatesServiceUnavailable{}
}

/* SubmitShipmentStatusUpdatesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SubmitShipmentStatusUpdatesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse
}

func (o *SubmitShipmentStatusUpdatesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /vendor/directFulfillment/shipping/v1/shipmentStatusUpdates][%d] submitShipmentStatusUpdatesServiceUnavailable  %+v", 503, o.Payload)
}
func (o *SubmitShipmentStatusUpdatesServiceUnavailable) GetPayload() *vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse {
	return o.Payload
}

func (o *SubmitShipmentStatusUpdatesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_shipping_v1_models.SubmitShipmentStatusUpdatesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
