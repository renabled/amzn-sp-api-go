// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_shipping_v1_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatusUpdateDetails Details for the shipment status update given by the vendor for the specific package.
//
// swagger:model StatusUpdateDetails
type StatusUpdateDetails struct {

	// Provides a reason code for the status for the package that will provide additional information about the transportation status. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).
	// Required: true
	ReasonCode *string `json:"reasonCode"`

	// shipment schedule
	ShipmentSchedule *StatusUpdateDetailsShipmentSchedule `json:"shipmentSchedule,omitempty"`

	// Indicates the shipment status code for the package that provides transportation information for Amazon tracking systems and ultimately for the final customer. For more information, refer to the [Additional Fields Explanation](https://developer-docs.amazon.com/sp-api/docs/vendor-direct-fulfillment-shipping-api-use-case-guide#additional-fields-explanation).
	// Required: true
	StatusCode *string `json:"statusCode"`

	// The date and time when the shipment status was updated. This field is expected to be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format, with UTC time zone or UTC offset. For example, `2020-07-16T23:00:00Z` or `2020-07-16T23:00:00+01:00`.
	// Required: true
	// Format: date-time
	StatusDateTime *strfmt.DateTime `json:"statusDateTime"`

	// status location address
	// Required: true
	StatusLocationAddress *Address `json:"statusLocationAddress"`

	// This is required to be provided for every package and should match with the `trackingNumber` sent for the shipment confirmation.
	// Required: true
	TrackingNumber *string `json:"trackingNumber"`
}

// Validate validates this status update details
func (m *StatusUpdateDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusLocationAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusUpdateDetails) validateReasonCode(formats strfmt.Registry) error {

	if err := validate.Required("reasonCode", "body", m.ReasonCode); err != nil {
		return err
	}

	return nil
}

func (m *StatusUpdateDetails) validateShipmentSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentSchedule) { // not required
		return nil
	}

	if m.ShipmentSchedule != nil {
		if err := m.ShipmentSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *StatusUpdateDetails) validateStatusCode(formats strfmt.Registry) error {

	if err := validate.Required("statusCode", "body", m.StatusCode); err != nil {
		return err
	}

	return nil
}

func (m *StatusUpdateDetails) validateStatusDateTime(formats strfmt.Registry) error {

	if err := validate.Required("statusDateTime", "body", m.StatusDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("statusDateTime", "body", "date-time", m.StatusDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StatusUpdateDetails) validateStatusLocationAddress(formats strfmt.Registry) error {

	if err := validate.Required("statusLocationAddress", "body", m.StatusLocationAddress); err != nil {
		return err
	}

	if m.StatusLocationAddress != nil {
		if err := m.StatusLocationAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusLocationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusLocationAddress")
			}
			return err
		}
	}

	return nil
}

func (m *StatusUpdateDetails) validateTrackingNumber(formats strfmt.Registry) error {

	if err := validate.Required("trackingNumber", "body", m.TrackingNumber); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this status update details based on the context it is used
func (m *StatusUpdateDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShipmentSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatusLocationAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusUpdateDetails) contextValidateShipmentSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentSchedule != nil {
		if err := m.ShipmentSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *StatusUpdateDetails) contextValidateStatusLocationAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.StatusLocationAddress != nil {
		if err := m.StatusLocationAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statusLocationAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("statusLocationAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatusUpdateDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusUpdateDetails) UnmarshalBinary(b []byte) error {
	var res StatusUpdateDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// StatusUpdateDetailsShipmentSchedule Details for the scheduled delivery timeline for a shipment, including the estimated delivery date and time, as well as the start and end times of the appointment window for delivery.
//
// swagger:model StatusUpdateDetailsShipmentSchedule
type StatusUpdateDetailsShipmentSchedule struct {

	// This field indicates the date and time at the end of the appointment window scheduled to deliver the shipment. This field is expected to be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format, with UTC time zone or UTC offset. For example, `2020-07-16T23:00:00Z` or `2020-07-16T23:00:00+01:00`.
	// Format: date-time
	ApptWindowEndDateTime strfmt.DateTime `json:"apptWindowEndDateTime,omitempty"`

	// This field indicates the date and time at the start of the appointment window scheduled to deliver the shipment. This field is expected to be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format, with UTC time zone or UTC offset. For example, `2020-07-16T23:00:00Z` or `2020-07-16T23:00:00+01:00`.
	// Format: date-time
	ApptWindowStartDateTime strfmt.DateTime `json:"apptWindowStartDateTime,omitempty"`

	// Date on which the shipment is expected to reach the customer delivery location. This field is expected to be in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date/time format, with UTC time zone or UTC offset. For example, `2020-07-16T23:00:00Z` or `2020-07-16T23:00:00+01:00`.
	// Format: date-time
	EstimatedDeliveryDateTime strfmt.DateTime `json:"estimatedDeliveryDateTime,omitempty"`
}

// Validate validates this status update details shipment schedule
func (m *StatusUpdateDetailsShipmentSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApptWindowEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApptWindowStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedDeliveryDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatusUpdateDetailsShipmentSchedule) validateApptWindowEndDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ApptWindowEndDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentSchedule"+"."+"apptWindowEndDateTime", "body", "date-time", m.ApptWindowEndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StatusUpdateDetailsShipmentSchedule) validateApptWindowStartDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ApptWindowStartDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentSchedule"+"."+"apptWindowStartDateTime", "body", "date-time", m.ApptWindowStartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *StatusUpdateDetailsShipmentSchedule) validateEstimatedDeliveryDateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedDeliveryDateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("shipmentSchedule"+"."+"estimatedDeliveryDateTime", "body", "date-time", m.EstimatedDeliveryDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this status update details shipment schedule based on context it is used
func (m *StatusUpdateDetailsShipmentSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *StatusUpdateDetailsShipmentSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatusUpdateDetailsShipmentSchedule) UnmarshalBinary(b []byte) error {
	var res StatusUpdateDetailsShipmentSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
