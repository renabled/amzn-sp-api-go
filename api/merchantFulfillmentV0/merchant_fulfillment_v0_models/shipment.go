// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Shipment The details of a shipment. Includes the shipment status.
//
// swagger:model Shipment
type Shipment struct {

	// amazon order Id
	// Required: true
	AmazonOrderID *AmazonOrderID `json:"AmazonOrderId"`

	// The date and time the shipment is created.
	// Required: true
	// Format: date-time
	CreatedDate *Timestamp `json:"CreatedDate"`

	// If you specify `DeclaredValue` in a previous call to the `createShipment` operation, then `Insurance` indicates the shipment insurance amount that the carrier uses. If `DeclaredValue` isn't with a previous call to the `createShipment` operation, then the shipment is insured for the carrier's minimum insurance amount, or the combined sale prices that the items are listed for in the shipment.
	// Required: true
	Insurance *CurrencyAmount `json:"Insurance"`

	// item list
	// Required: true
	ItemList ItemList `json:"ItemList"`

	// Data for creating a shipping label and dimensions for printing the label. If the shipment is canceled, an empty label is returned.
	// Required: true
	Label *Label `json:"Label"`

	// The date and time of the last update.
	// Format: date-time
	LastUpdatedDate Timestamp `json:"LastUpdatedDate,omitempty"`

	// package dimensions
	// Required: true
	PackageDimensions *PackageDimensions `json:"PackageDimensions"`

	// seller order Id
	SellerOrderID SellerOrderID `json:"SellerOrderId,omitempty"`

	// The address of the sender.
	// Required: true
	ShipFromAddress *Address `json:"ShipFromAddress"`

	// The destination address for the shipment.
	// Required: true
	ShipToAddress *Address `json:"ShipToAddress"`

	// shipment Id
	// Required: true
	ShipmentID *ShipmentID `json:"ShipmentId"`

	// shipping service
	// Required: true
	ShippingService *ShippingService `json:"ShippingService"`

	// The shipment status.
	// Required: true
	Status *ShipmentStatus `json:"Status"`

	// tracking Id
	TrackingID TrackingID `json:"TrackingId,omitempty"`

	// The package weight.
	// Required: true
	Weight *Weight `json:"Weight"`
}

// Validate validates this shipment
func (m *Shipment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInsurance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Shipment) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("AmazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if err := validate.Required("AmazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AmazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AmazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateCreatedDate(formats strfmt.Registry) error {

	if err := validate.Required("CreatedDate", "body", m.CreatedDate); err != nil {
		return err
	}

	if err := validate.Required("CreatedDate", "body", m.CreatedDate); err != nil {
		return err
	}

	if m.CreatedDate != nil {
		if err := m.CreatedDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreatedDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CreatedDate")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateInsurance(formats strfmt.Registry) error {

	if err := validate.Required("Insurance", "body", m.Insurance); err != nil {
		return err
	}

	if m.Insurance != nil {
		if err := m.Insurance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Insurance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Insurance")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateItemList(formats strfmt.Registry) error {

	if err := validate.Required("ItemList", "body", m.ItemList); err != nil {
		return err
	}

	if err := m.ItemList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ItemList")
		}
		return err
	}

	return nil
}

func (m *Shipment) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("Label", "body", m.Label); err != nil {
		return err
	}

	if m.Label != nil {
		if err := m.Label.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Label")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Label")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateLastUpdatedDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LastUpdatedDate) { // not required
		return nil
	}

	if err := m.LastUpdatedDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LastUpdatedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LastUpdatedDate")
		}
		return err
	}

	return nil
}

func (m *Shipment) validatePackageDimensions(formats strfmt.Registry) error {

	if err := validate.Required("PackageDimensions", "body", m.PackageDimensions); err != nil {
		return err
	}

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateSellerOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.SellerOrderID) { // not required
		return nil
	}

	if err := m.SellerOrderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerOrderId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerOrderId")
		}
		return err
	}

	return nil
}

func (m *Shipment) validateShipFromAddress(formats strfmt.Registry) error {

	if err := validate.Required("ShipFromAddress", "body", m.ShipFromAddress); err != nil {
		return err
	}

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateShipToAddress(formats strfmt.Registry) error {

	if err := validate.Required("ShipToAddress", "body", m.ShipToAddress); err != nil {
		return err
	}

	if m.ShipToAddress != nil {
		if err := m.ShipToAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipToAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("ShipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.Required("ShipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if m.ShipmentID != nil {
		if err := m.ShipmentID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipmentId")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateShippingService(formats strfmt.Registry) error {

	if err := validate.Required("ShippingService", "body", m.ShippingService); err != nil {
		return err
	}

	if m.ShippingService != nil {
		if err := m.ShippingService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingService")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.Required("Status", "body", m.Status); err != nil {
		return err
	}

	if m.Status != nil {
		if err := m.Status.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) validateTrackingID(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingID) { // not required
		return nil
	}

	if err := m.TrackingID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TrackingId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TrackingId")
		}
		return err
	}

	return nil
}

func (m *Shipment) validateWeight(formats strfmt.Registry) error {

	if err := validate.Required("Weight", "body", m.Weight); err != nil {
		return err
	}

	if m.Weight != nil {
		if err := m.Weight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Weight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment based on the context it is used
func (m *Shipment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInsurance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellerOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipToAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingService(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Shipment) contextValidateAmazonOrderID(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AmazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AmazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateCreatedDate(ctx context.Context, formats strfmt.Registry) error {

	if m.CreatedDate != nil {
		if err := m.CreatedDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CreatedDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("CreatedDate")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateInsurance(ctx context.Context, formats strfmt.Registry) error {

	if m.Insurance != nil {
		if err := m.Insurance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Insurance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Insurance")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateItemList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ItemList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ItemList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ItemList")
		}
		return err
	}

	return nil
}

func (m *Shipment) contextValidateLabel(ctx context.Context, formats strfmt.Registry) error {

	if m.Label != nil {
		if err := m.Label.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Label")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Label")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateLastUpdatedDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LastUpdatedDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LastUpdatedDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LastUpdatedDate")
		}
		return err
	}

	return nil
}

func (m *Shipment) contextValidatePackageDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PackageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PackageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateSellerOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SellerOrderID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SellerOrderId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SellerOrderId")
		}
		return err
	}

	return nil
}

func (m *Shipment) contextValidateShipFromAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateShipToAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipToAddress != nil {
		if err := m.ShipToAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipToAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipToAddress")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentID != nil {
		if err := m.ShipmentID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipmentId")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateShippingService(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingService != nil {
		if err := m.ShippingService.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingService")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingService")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.Status != nil {
		if err := m.Status.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Status")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Status")
			}
			return err
		}
	}

	return nil
}

func (m *Shipment) contextValidateTrackingID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TrackingID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TrackingId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TrackingId")
		}
		return err
	}

	return nil
}

func (m *Shipment) contextValidateWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.Weight != nil {
		if err := m.Weight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Weight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Weight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Shipment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Shipment) UnmarshalBinary(b []byte) error {
	var res Shipment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
