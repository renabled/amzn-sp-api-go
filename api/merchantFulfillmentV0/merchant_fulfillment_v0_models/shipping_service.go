// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShippingService A shipping service offer made by a carrier.
//
// swagger:model ShippingService
type ShippingService struct {

	// available format options for label
	AvailableFormatOptionsForLabel AvailableFormatOptionsForLabelList `json:"AvailableFormatOptionsForLabel,omitempty"`

	// available label formats
	AvailableLabelFormats LabelFormatList `json:"AvailableLabelFormats,omitempty"`

	// available shipping service options
	AvailableShippingServiceOptions *AvailableShippingServiceOptions `json:"AvailableShippingServiceOptions,omitempty"`

	// benefits
	Benefits *Benefits `json:"Benefits,omitempty"`

	// The name of the carrier.
	// Required: true
	CarrierName *string `json:"CarrierName"`

	// The earliest date by which the shipment will be delivered.
	// Format: date-time
	EarliestEstimatedDeliveryDate Timestamp `json:"EarliestEstimatedDeliveryDate,omitempty"`

	// The latest date by which the shipment will be delivered.
	// Format: date-time
	LatestEstimatedDeliveryDate Timestamp `json:"LatestEstimatedDeliveryDate,omitempty"`

	// The amount that the carrier will charge for the shipment.
	// Required: true
	Rate *CurrencyAmount `json:"Rate"`

	// When true, additional seller inputs are required.
	// Required: true
	RequiresAdditionalSellerInputs *bool `json:"RequiresAdditionalSellerInputs"`

	// The date that the carrier will ship the package.
	// Required: true
	// Format: date-time
	ShipDate *Timestamp `json:"ShipDate"`

	// shipping service Id
	// Required: true
	ShippingServiceID *ShippingServiceIdentifier `json:"ShippingServiceId"`

	// A plain text representation of a carrier's shipping service. For example, "UPS Ground" or "FedEx Standard Overnight".
	// Required: true
	ShippingServiceName *string `json:"ShippingServiceName"`

	// An Amazon-defined shipping service offer identifier.
	// Required: true
	ShippingServiceOfferID *string `json:"ShippingServiceOfferId"`

	// Extra services offered by the carrier.
	// Required: true
	ShippingServiceOptions *ShippingServiceOptions `json:"ShippingServiceOptions"`
}

// Validate validates this shipping service
func (m *ShippingService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableFormatOptionsForLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableLabelFormats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableShippingServiceOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBenefits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEarliestEstimatedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLatestEstimatedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiresAdditionalSellerInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceOfferID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingService) validateAvailableFormatOptionsForLabel(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableFormatOptionsForLabel) { // not required
		return nil
	}

	if err := m.AvailableFormatOptionsForLabel.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableFormatOptionsForLabel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableFormatOptionsForLabel")
		}
		return err
	}

	return nil
}

func (m *ShippingService) validateAvailableLabelFormats(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableLabelFormats) { // not required
		return nil
	}

	if err := m.AvailableLabelFormats.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableLabelFormats")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableLabelFormats")
		}
		return err
	}

	return nil
}

func (m *ShippingService) validateAvailableShippingServiceOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.AvailableShippingServiceOptions) { // not required
		return nil
	}

	if m.AvailableShippingServiceOptions != nil {
		if err := m.AvailableShippingServiceOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AvailableShippingServiceOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AvailableShippingServiceOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) validateBenefits(formats strfmt.Registry) error {
	if swag.IsZero(m.Benefits) { // not required
		return nil
	}

	if m.Benefits != nil {
		if err := m.Benefits.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Benefits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Benefits")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("CarrierName", "body", m.CarrierName); err != nil {
		return err
	}

	return nil
}

func (m *ShippingService) validateEarliestEstimatedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EarliestEstimatedDeliveryDate) { // not required
		return nil
	}

	if err := m.EarliestEstimatedDeliveryDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EarliestEstimatedDeliveryDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("EarliestEstimatedDeliveryDate")
		}
		return err
	}

	return nil
}

func (m *ShippingService) validateLatestEstimatedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.LatestEstimatedDeliveryDate) { // not required
		return nil
	}

	if err := m.LatestEstimatedDeliveryDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LatestEstimatedDeliveryDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LatestEstimatedDeliveryDate")
		}
		return err
	}

	return nil
}

func (m *ShippingService) validateRate(formats strfmt.Registry) error {

	if err := validate.Required("Rate", "body", m.Rate); err != nil {
		return err
	}

	if m.Rate != nil {
		if err := m.Rate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Rate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Rate")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) validateRequiresAdditionalSellerInputs(formats strfmt.Registry) error {

	if err := validate.Required("RequiresAdditionalSellerInputs", "body", m.RequiresAdditionalSellerInputs); err != nil {
		return err
	}

	return nil
}

func (m *ShippingService) validateShipDate(formats strfmt.Registry) error {

	if err := validate.Required("ShipDate", "body", m.ShipDate); err != nil {
		return err
	}

	if err := validate.Required("ShipDate", "body", m.ShipDate); err != nil {
		return err
	}

	if m.ShipDate != nil {
		if err := m.ShipDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipDate")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) validateShippingServiceID(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceId", "body", m.ShippingServiceID); err != nil {
		return err
	}

	if err := validate.Required("ShippingServiceId", "body", m.ShippingServiceID); err != nil {
		return err
	}

	if m.ShippingServiceID != nil {
		if err := m.ShippingServiceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceId")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) validateShippingServiceName(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceName", "body", m.ShippingServiceName); err != nil {
		return err
	}

	return nil
}

func (m *ShippingService) validateShippingServiceOfferID(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceOfferId", "body", m.ShippingServiceOfferID); err != nil {
		return err
	}

	return nil
}

func (m *ShippingService) validateShippingServiceOptions(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceOptions", "body", m.ShippingServiceOptions); err != nil {
		return err
	}

	if m.ShippingServiceOptions != nil {
		if err := m.ShippingServiceOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceOptions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipping service based on the context it is used
func (m *ShippingService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableFormatOptionsForLabel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableLabelFormats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableShippingServiceOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBenefits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEarliestEstimatedDeliveryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLatestEstimatedDeliveryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingServiceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingServiceOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingService) contextValidateAvailableFormatOptionsForLabel(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableFormatOptionsForLabel.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableFormatOptionsForLabel")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableFormatOptionsForLabel")
		}
		return err
	}

	return nil
}

func (m *ShippingService) contextValidateAvailableLabelFormats(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableLabelFormats.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableLabelFormats")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableLabelFormats")
		}
		return err
	}

	return nil
}

func (m *ShippingService) contextValidateAvailableShippingServiceOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.AvailableShippingServiceOptions != nil {
		if err := m.AvailableShippingServiceOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AvailableShippingServiceOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AvailableShippingServiceOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) contextValidateBenefits(ctx context.Context, formats strfmt.Registry) error {

	if m.Benefits != nil {
		if err := m.Benefits.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Benefits")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Benefits")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) contextValidateEarliestEstimatedDeliveryDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EarliestEstimatedDeliveryDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("EarliestEstimatedDeliveryDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("EarliestEstimatedDeliveryDate")
		}
		return err
	}

	return nil
}

func (m *ShippingService) contextValidateLatestEstimatedDeliveryDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LatestEstimatedDeliveryDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("LatestEstimatedDeliveryDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("LatestEstimatedDeliveryDate")
		}
		return err
	}

	return nil
}

func (m *ShippingService) contextValidateRate(ctx context.Context, formats strfmt.Registry) error {

	if m.Rate != nil {
		if err := m.Rate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Rate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Rate")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) contextValidateShipDate(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipDate != nil {
		if err := m.ShipDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipDate")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) contextValidateShippingServiceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingServiceID != nil {
		if err := m.ShippingServiceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceId")
			}
			return err
		}
	}

	return nil
}

func (m *ShippingService) contextValidateShippingServiceOptions(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingServiceOptions != nil {
		if err := m.ShippingServiceOptions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceOptions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingService) UnmarshalBinary(b []byte) error {
	var res ShippingService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
