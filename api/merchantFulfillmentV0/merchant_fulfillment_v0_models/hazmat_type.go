// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HazmatType Hazardous materials options for a package. Consult the terms and conditions for each carrier for more information on hazardous materials.
//
// swagger:model HazmatType
type HazmatType string

func NewHazmatType(value HazmatType) *HazmatType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HazmatType.
func (m HazmatType) Pointer() *HazmatType {
	return &m
}

const (

	// HazmatTypeNone captures enum value "None"
	HazmatTypeNone HazmatType = "None"

	// HazmatTypeLQHazmat captures enum value "LQHazmat"
	HazmatTypeLQHazmat HazmatType = "LQHazmat"
)

// for schema
var hazmatTypeEnum []interface{}

func init() {
	var res []HazmatType
	if err := json.Unmarshal([]byte(`["None","LQHazmat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hazmatTypeEnum = append(hazmatTypeEnum, v)
	}
}

func (m HazmatType) validateHazmatTypeEnum(path, location string, value HazmatType) error {
	if err := validate.EnumCase(path, location, value, hazmatTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this hazmat type
func (m HazmatType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHazmatTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this hazmat type based on context it is used
func (m HazmatType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
