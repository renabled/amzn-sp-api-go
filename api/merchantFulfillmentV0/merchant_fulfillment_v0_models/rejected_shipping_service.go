// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RejectedShippingService Information about a rejected shipping service
//
// swagger:model RejectedShippingService
type RejectedShippingService struct {

	// The rejected shipping carrier name. For example, USPS.
	// Required: true
	CarrierName *string `json:"CarrierName"`

	// A reason code meant to be consumed programatically. For example, `CARRIER_CANNOT_SHIP_TO_POBOX`.
	// Required: true
	RejectionReasonCode *string `json:"RejectionReasonCode"`

	// A localized human readable description of the rejected reason.
	RejectionReasonMessage string `json:"RejectionReasonMessage,omitempty"`

	// The rejected shipping service identifier. For example, `FEDEX_PTP_STANDARD_OVERNIGHT`.
	// Required: true
	ShippingServiceID *ShippingServiceIdentifier `json:"ShippingServiceId"`

	// The rejected shipping service localized name. For example, FedEx Standard Overnight.
	// Required: true
	ShippingServiceName *string `json:"ShippingServiceName"`
}

// Validate validates this rejected shipping service
func (m *RejectedShippingService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectionReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RejectedShippingService) validateCarrierName(formats strfmt.Registry) error {

	if err := validate.Required("CarrierName", "body", m.CarrierName); err != nil {
		return err
	}

	return nil
}

func (m *RejectedShippingService) validateRejectionReasonCode(formats strfmt.Registry) error {

	if err := validate.Required("RejectionReasonCode", "body", m.RejectionReasonCode); err != nil {
		return err
	}

	return nil
}

func (m *RejectedShippingService) validateShippingServiceID(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceId", "body", m.ShippingServiceID); err != nil {
		return err
	}

	if err := validate.Required("ShippingServiceId", "body", m.ShippingServiceID); err != nil {
		return err
	}

	if m.ShippingServiceID != nil {
		if err := m.ShippingServiceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceId")
			}
			return err
		}
	}

	return nil
}

func (m *RejectedShippingService) validateShippingServiceName(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceName", "body", m.ShippingServiceName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this rejected shipping service based on the context it is used
func (m *RejectedShippingService) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShippingServiceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RejectedShippingService) contextValidateShippingServiceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingServiceID != nil {
		if err := m.ShippingServiceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RejectedShippingService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RejectedShippingService) UnmarshalBinary(b []byte) error {
	var res RejectedShippingService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
