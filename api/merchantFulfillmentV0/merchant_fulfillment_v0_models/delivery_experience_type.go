// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// DeliveryExperienceType The delivery confirmation level.
//
// swagger:model DeliveryExperienceType
type DeliveryExperienceType string

func NewDeliveryExperienceType(value DeliveryExperienceType) *DeliveryExperienceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated DeliveryExperienceType.
func (m DeliveryExperienceType) Pointer() *DeliveryExperienceType {
	return &m
}

const (

	// DeliveryExperienceTypeDeliveryConfirmationWithAdultSignature captures enum value "DeliveryConfirmationWithAdultSignature"
	DeliveryExperienceTypeDeliveryConfirmationWithAdultSignature DeliveryExperienceType = "DeliveryConfirmationWithAdultSignature"

	// DeliveryExperienceTypeDeliveryConfirmationWithSignature captures enum value "DeliveryConfirmationWithSignature"
	DeliveryExperienceTypeDeliveryConfirmationWithSignature DeliveryExperienceType = "DeliveryConfirmationWithSignature"

	// DeliveryExperienceTypeDeliveryConfirmationWithoutSignature captures enum value "DeliveryConfirmationWithoutSignature"
	DeliveryExperienceTypeDeliveryConfirmationWithoutSignature DeliveryExperienceType = "DeliveryConfirmationWithoutSignature"

	// DeliveryExperienceTypeNoTracking captures enum value "NoTracking"
	DeliveryExperienceTypeNoTracking DeliveryExperienceType = "NoTracking"
)

// for schema
var deliveryExperienceTypeEnum []interface{}

func init() {
	var res []DeliveryExperienceType
	if err := json.Unmarshal([]byte(`["DeliveryConfirmationWithAdultSignature","DeliveryConfirmationWithSignature","DeliveryConfirmationWithoutSignature","NoTracking"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deliveryExperienceTypeEnum = append(deliveryExperienceTypeEnum, v)
	}
}

func (m DeliveryExperienceType) validateDeliveryExperienceTypeEnum(path, location string, value DeliveryExperienceType) error {
	if err := validate.EnumCase(path, location, value, deliveryExperienceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this delivery experience type
func (m DeliveryExperienceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateDeliveryExperienceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this delivery experience type based on context it is used
func (m DeliveryExperienceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
