// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetEligibleShipmentServicesResult The payload for the `getEligibleShipmentServices` operation.
//
// swagger:model GetEligibleShipmentServicesResult
type GetEligibleShipmentServicesResult struct {

	// rejected shipping service list
	RejectedShippingServiceList RejectedShippingServiceList `json:"RejectedShippingServiceList,omitempty"`

	// A list of shipping services offers.
	// Required: true
	ShippingServiceList ShippingServiceList `json:"ShippingServiceList"`

	// temporarily unavailable carrier list
	TemporarilyUnavailableCarrierList TemporarilyUnavailableCarrierList `json:"TemporarilyUnavailableCarrierList,omitempty"`

	// terms and conditions not accepted carrier list
	TermsAndConditionsNotAcceptedCarrierList TermsAndConditionsNotAcceptedCarrierList `json:"TermsAndConditionsNotAcceptedCarrierList,omitempty"`
}

// Validate validates this get eligible shipment services result
func (m *GetEligibleShipmentServicesResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRejectedShippingServiceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemporarilyUnavailableCarrierList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTermsAndConditionsNotAcceptedCarrierList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEligibleShipmentServicesResult) validateRejectedShippingServiceList(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectedShippingServiceList) { // not required
		return nil
	}

	if err := m.RejectedShippingServiceList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RejectedShippingServiceList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RejectedShippingServiceList")
		}
		return err
	}

	return nil
}

func (m *GetEligibleShipmentServicesResult) validateShippingServiceList(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceList", "body", m.ShippingServiceList); err != nil {
		return err
	}

	if err := m.ShippingServiceList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShippingServiceList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShippingServiceList")
		}
		return err
	}

	return nil
}

func (m *GetEligibleShipmentServicesResult) validateTemporarilyUnavailableCarrierList(formats strfmt.Registry) error {
	if swag.IsZero(m.TemporarilyUnavailableCarrierList) { // not required
		return nil
	}

	if err := m.TemporarilyUnavailableCarrierList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TemporarilyUnavailableCarrierList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TemporarilyUnavailableCarrierList")
		}
		return err
	}

	return nil
}

func (m *GetEligibleShipmentServicesResult) validateTermsAndConditionsNotAcceptedCarrierList(formats strfmt.Registry) error {
	if swag.IsZero(m.TermsAndConditionsNotAcceptedCarrierList) { // not required
		return nil
	}

	if err := m.TermsAndConditionsNotAcceptedCarrierList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TermsAndConditionsNotAcceptedCarrierList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TermsAndConditionsNotAcceptedCarrierList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get eligible shipment services result based on the context it is used
func (m *GetEligibleShipmentServicesResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRejectedShippingServiceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingServiceList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemporarilyUnavailableCarrierList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTermsAndConditionsNotAcceptedCarrierList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetEligibleShipmentServicesResult) contextValidateRejectedShippingServiceList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RejectedShippingServiceList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("RejectedShippingServiceList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("RejectedShippingServiceList")
		}
		return err
	}

	return nil
}

func (m *GetEligibleShipmentServicesResult) contextValidateShippingServiceList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShippingServiceList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShippingServiceList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShippingServiceList")
		}
		return err
	}

	return nil
}

func (m *GetEligibleShipmentServicesResult) contextValidateTemporarilyUnavailableCarrierList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TemporarilyUnavailableCarrierList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TemporarilyUnavailableCarrierList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TemporarilyUnavailableCarrierList")
		}
		return err
	}

	return nil
}

func (m *GetEligibleShipmentServicesResult) contextValidateTermsAndConditionsNotAcceptedCarrierList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.TermsAndConditionsNotAcceptedCarrierList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("TermsAndConditionsNotAcceptedCarrierList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("TermsAndConditionsNotAcceptedCarrierList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetEligibleShipmentServicesResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetEligibleShipmentServicesResult) UnmarshalBinary(b []byte) error {
	var res GetEligibleShipmentServicesResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
