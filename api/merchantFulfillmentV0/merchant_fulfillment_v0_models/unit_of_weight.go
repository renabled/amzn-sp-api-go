// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// UnitOfWeight The unit of weight.
//
// swagger:model UnitOfWeight
type UnitOfWeight string

func NewUnitOfWeight(value UnitOfWeight) *UnitOfWeight {
	return &value
}

// Pointer returns a pointer to a freshly-allocated UnitOfWeight.
func (m UnitOfWeight) Pointer() *UnitOfWeight {
	return &m
}

const (

	// UnitOfWeightOz captures enum value "oz"
	UnitOfWeightOz UnitOfWeight = "oz"

	// UnitOfWeightG captures enum value "g"
	UnitOfWeightG UnitOfWeight = "g"
)

// for schema
var unitOfWeightEnum []interface{}

func init() {
	var res []UnitOfWeight
	if err := json.Unmarshal([]byte(`["oz","g"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		unitOfWeightEnum = append(unitOfWeightEnum, v)
	}
}

func (m UnitOfWeight) validateUnitOfWeightEnum(path, location string, value UnitOfWeight) error {
	if err := validate.EnumCase(path, location, value, unitOfWeightEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this unit of weight
func (m UnitOfWeight) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateUnitOfWeightEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this unit of weight based on context it is used
func (m UnitOfWeight) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
