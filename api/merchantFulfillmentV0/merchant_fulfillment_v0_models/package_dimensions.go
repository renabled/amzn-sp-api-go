// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PackageDimensions The dimensions of a package contained in a shipment.
//
// swagger:model PackageDimensions
type PackageDimensions struct {

	// The height dimension. If you don't specify PredefinedPackageDimensions, you must specify the Height.
	Height PackageDimension `json:"Height,omitempty"`

	// The length dimension. If you don't specify PredefinedPackageDimensions, you must specify the Length.
	Length PackageDimension `json:"Length,omitempty"`

	// predefined package dimensions
	PredefinedPackageDimensions PredefinedPackageDimensions `json:"PredefinedPackageDimensions,omitempty"`

	// The unit of measurement. If you don't specify PredefinedPackageDimensions, you must specify the Unit.
	Unit UnitOfLength `json:"Unit,omitempty"`

	// The width dimension. If you don't specify PredefinedPackageDimensions, you must specify the Width.
	Width PackageDimension `json:"Width,omitempty"`
}

// Validate validates this package dimensions
func (m *PackageDimensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePredefinedPackageDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageDimensions) validateHeight(formats strfmt.Registry) error {
	if swag.IsZero(m.Height) { // not required
		return nil
	}

	if err := m.Height.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Height")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Height")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) validateLength(formats strfmt.Registry) error {
	if swag.IsZero(m.Length) { // not required
		return nil
	}

	if err := m.Length.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Length")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Length")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) validatePredefinedPackageDimensions(formats strfmt.Registry) error {
	if swag.IsZero(m.PredefinedPackageDimensions) { // not required
		return nil
	}

	if err := m.PredefinedPackageDimensions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PredefinedPackageDimensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PredefinedPackageDimensions")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	if err := m.Unit.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Unit")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Unit")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) validateWidth(formats strfmt.Registry) error {
	if swag.IsZero(m.Width) { // not required
		return nil
	}

	if err := m.Width.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Width")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Width")
		}
		return err
	}

	return nil
}

// ContextValidate validate this package dimensions based on the context it is used
func (m *PackageDimensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateHeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePredefinedPackageDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWidth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackageDimensions) contextValidateHeight(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Height.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Height")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Height")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) contextValidateLength(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Length.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Length")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Length")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) contextValidatePredefinedPackageDimensions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PredefinedPackageDimensions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PredefinedPackageDimensions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PredefinedPackageDimensions")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Unit.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Unit")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Unit")
		}
		return err
	}

	return nil
}

func (m *PackageDimensions) contextValidateWidth(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Width.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Width")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Width")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackageDimensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackageDimensions) UnmarshalBinary(b []byte) error {
	var res PackageDimensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
