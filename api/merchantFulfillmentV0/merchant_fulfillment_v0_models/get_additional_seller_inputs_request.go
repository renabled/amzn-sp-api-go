// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAdditionalSellerInputsRequest Request schema.
//
// swagger:model GetAdditionalSellerInputsRequest
type GetAdditionalSellerInputsRequest struct {

	// An Amazon defined order identifier
	// Required: true
	OrderID *AmazonOrderID `json:"OrderId"`

	// The address from which to ship.
	// Required: true
	ShipFromAddress *Address `json:"ShipFromAddress"`

	// shipping service Id
	// Required: true
	ShippingServiceID *ShippingServiceIdentifier `json:"ShippingServiceId"`
}

// Validate validates this get additional seller inputs request
func (m *GetAdditionalSellerInputsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingServiceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAdditionalSellerInputsRequest) validateOrderID(formats strfmt.Registry) error {

	if err := validate.Required("OrderId", "body", m.OrderID); err != nil {
		return err
	}

	if err := validate.Required("OrderId", "body", m.OrderID); err != nil {
		return err
	}

	if m.OrderID != nil {
		if err := m.OrderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderId")
			}
			return err
		}
	}

	return nil
}

func (m *GetAdditionalSellerInputsRequest) validateShipFromAddress(formats strfmt.Registry) error {

	if err := validate.Required("ShipFromAddress", "body", m.ShipFromAddress); err != nil {
		return err
	}

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *GetAdditionalSellerInputsRequest) validateShippingServiceID(formats strfmt.Registry) error {

	if err := validate.Required("ShippingServiceId", "body", m.ShippingServiceID); err != nil {
		return err
	}

	if err := validate.Required("ShippingServiceId", "body", m.ShippingServiceID); err != nil {
		return err
	}

	if m.ShippingServiceID != nil {
		if err := m.ShippingServiceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get additional seller inputs request based on the context it is used
func (m *GetAdditionalSellerInputsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingServiceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAdditionalSellerInputsRequest) contextValidateOrderID(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderID != nil {
		if err := m.OrderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OrderId")
			}
			return err
		}
	}

	return nil
}

func (m *GetAdditionalSellerInputsRequest) contextValidateShipFromAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromAddress != nil {
		if err := m.ShipFromAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShipFromAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShipFromAddress")
			}
			return err
		}
	}

	return nil
}

func (m *GetAdditionalSellerInputsRequest) contextValidateShippingServiceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingServiceID != nil {
		if err := m.ShippingServiceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingServiceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingServiceId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAdditionalSellerInputsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAdditionalSellerInputsRequest) UnmarshalBinary(b []byte) error {
	var res GetAdditionalSellerInputsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
