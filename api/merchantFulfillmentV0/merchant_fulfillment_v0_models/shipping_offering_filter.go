// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShippingOfferingFilter Filter for use when requesting eligible shipping services.
//
// swagger:model ShippingOfferingFilter
type ShippingOfferingFilter struct {

	// carrier will pick up
	CarrierWillPickUp CarrierWillPickUpOption `json:"CarrierWillPickUp,omitempty"`

	// delivery experience
	DeliveryExperience DeliveryExperienceOption `json:"DeliveryExperience,omitempty"`

	// When true, include complex shipping options.
	IncludeComplexShippingOptions bool `json:"IncludeComplexShippingOptions,omitempty"`

	// When true, include a packing slip with the label.
	IncludePackingSlipWithLabel bool `json:"IncludePackingSlipWithLabel,omitempty"`
}

// Validate validates this shipping offering filter
func (m *ShippingOfferingFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrierWillPickUp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryExperience(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingOfferingFilter) validateCarrierWillPickUp(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierWillPickUp) { // not required
		return nil
	}

	if err := m.CarrierWillPickUp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CarrierWillPickUp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CarrierWillPickUp")
		}
		return err
	}

	return nil
}

func (m *ShippingOfferingFilter) validateDeliveryExperience(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryExperience) { // not required
		return nil
	}

	if err := m.DeliveryExperience.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DeliveryExperience")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("DeliveryExperience")
		}
		return err
	}

	return nil
}

// ContextValidate validate this shipping offering filter based on the context it is used
func (m *ShippingOfferingFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrierWillPickUp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeliveryExperience(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShippingOfferingFilter) contextValidateCarrierWillPickUp(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CarrierWillPickUp.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("CarrierWillPickUp")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("CarrierWillPickUp")
		}
		return err
	}

	return nil
}

func (m *ShippingOfferingFilter) contextValidateDeliveryExperience(ctx context.Context, formats strfmt.Registry) error {

	if err := m.DeliveryExperience.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("DeliveryExperience")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("DeliveryExperience")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShippingOfferingFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShippingOfferingFilter) UnmarshalBinary(b []byte) error {
	var res ShippingOfferingFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
