// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// InputTargetType Indicates whether the additional seller input is at the item or shipment level.
//
// swagger:model InputTargetType
type InputTargetType string

func NewInputTargetType(value InputTargetType) *InputTargetType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated InputTargetType.
func (m InputTargetType) Pointer() *InputTargetType {
	return &m
}

const (

	// InputTargetTypeSHIPMENTLEVEL captures enum value "SHIPMENT_LEVEL"
	InputTargetTypeSHIPMENTLEVEL InputTargetType = "SHIPMENT_LEVEL"

	// InputTargetTypeITEMLEVEL captures enum value "ITEM_LEVEL"
	InputTargetTypeITEMLEVEL InputTargetType = "ITEM_LEVEL"
)

// for schema
var inputTargetTypeEnum []interface{}

func init() {
	var res []InputTargetType
	if err := json.Unmarshal([]byte(`["SHIPMENT_LEVEL","ITEM_LEVEL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		inputTargetTypeEnum = append(inputTargetTypeEnum, v)
	}
}

func (m InputTargetType) validateInputTargetTypeEnum(path, location string, value InputTargetType) error {
	if err := validate.EnumCase(path, location, value, inputTargetTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this input target type
func (m InputTargetType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateInputTargetTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this input target type based on context it is used
func (m InputTargetType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
