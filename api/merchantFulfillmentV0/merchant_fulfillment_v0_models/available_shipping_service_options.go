// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailableShippingServiceOptions The available shipping service options.
//
// swagger:model AvailableShippingServiceOptions
type AvailableShippingServiceOptions struct {

	// available carrier will pick up options
	// Required: true
	AvailableCarrierWillPickUpOptions AvailableCarrierWillPickUpOptionsList `json:"AvailableCarrierWillPickUpOptions"`

	// available delivery experience options
	// Required: true
	AvailableDeliveryExperienceOptions AvailableDeliveryExperienceOptionsList `json:"AvailableDeliveryExperienceOptions"`
}

// Validate validates this available shipping service options
func (m *AvailableShippingServiceOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableCarrierWillPickUpOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailableDeliveryExperienceOptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailableShippingServiceOptions) validateAvailableCarrierWillPickUpOptions(formats strfmt.Registry) error {

	if err := validate.Required("AvailableCarrierWillPickUpOptions", "body", m.AvailableCarrierWillPickUpOptions); err != nil {
		return err
	}

	if err := m.AvailableCarrierWillPickUpOptions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableCarrierWillPickUpOptions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableCarrierWillPickUpOptions")
		}
		return err
	}

	return nil
}

func (m *AvailableShippingServiceOptions) validateAvailableDeliveryExperienceOptions(formats strfmt.Registry) error {

	if err := validate.Required("AvailableDeliveryExperienceOptions", "body", m.AvailableDeliveryExperienceOptions); err != nil {
		return err
	}

	if err := m.AvailableDeliveryExperienceOptions.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableDeliveryExperienceOptions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableDeliveryExperienceOptions")
		}
		return err
	}

	return nil
}

// ContextValidate validate this available shipping service options based on the context it is used
func (m *AvailableShippingServiceOptions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAvailableCarrierWillPickUpOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAvailableDeliveryExperienceOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailableShippingServiceOptions) contextValidateAvailableCarrierWillPickUpOptions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableCarrierWillPickUpOptions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableCarrierWillPickUpOptions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableCarrierWillPickUpOptions")
		}
		return err
	}

	return nil
}

func (m *AvailableShippingServiceOptions) contextValidateAvailableDeliveryExperienceOptions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AvailableDeliveryExperienceOptions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("AvailableDeliveryExperienceOptions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("AvailableDeliveryExperienceOptions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailableShippingServiceOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailableShippingServiceOptions) UnmarshalBinary(b []byte) error {
	var res AvailableShippingServiceOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
