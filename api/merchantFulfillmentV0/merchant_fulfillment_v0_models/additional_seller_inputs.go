// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AdditionalSellerInputs An additional set of seller inputs required to purchase shipping.
//
// swagger:model AdditionalSellerInputs
type AdditionalSellerInputs struct {

	// The name of the additional input field.
	// Required: true
	AdditionalInputFieldName *string `json:"AdditionalInputFieldName"`

	// additional seller input
	// Required: true
	AdditionalSellerInput *AdditionalSellerInput `json:"AdditionalSellerInput"`
}

// Validate validates this additional seller inputs
func (m *AdditionalSellerInputs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdditionalInputFieldName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdditionalSellerInput(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalSellerInputs) validateAdditionalInputFieldName(formats strfmt.Registry) error {

	if err := validate.Required("AdditionalInputFieldName", "body", m.AdditionalInputFieldName); err != nil {
		return err
	}

	return nil
}

func (m *AdditionalSellerInputs) validateAdditionalSellerInput(formats strfmt.Registry) error {

	if err := validate.Required("AdditionalSellerInput", "body", m.AdditionalSellerInput); err != nil {
		return err
	}

	if m.AdditionalSellerInput != nil {
		if err := m.AdditionalSellerInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdditionalSellerInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AdditionalSellerInput")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this additional seller inputs based on the context it is used
func (m *AdditionalSellerInputs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdditionalSellerInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AdditionalSellerInputs) contextValidateAdditionalSellerInput(ctx context.Context, formats strfmt.Registry) error {

	if m.AdditionalSellerInput != nil {
		if err := m.AdditionalSellerInput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AdditionalSellerInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("AdditionalSellerInput")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AdditionalSellerInputs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AdditionalSellerInputs) UnmarshalBinary(b []byte) error {
	var res AdditionalSellerInputs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
