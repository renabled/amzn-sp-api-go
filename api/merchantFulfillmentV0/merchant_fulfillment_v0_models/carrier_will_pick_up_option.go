// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CarrierWillPickUpOption Carrier will pick up option.
//
// swagger:model CarrierWillPickUpOption
type CarrierWillPickUpOption string

func NewCarrierWillPickUpOption(value CarrierWillPickUpOption) *CarrierWillPickUpOption {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CarrierWillPickUpOption.
func (m CarrierWillPickUpOption) Pointer() *CarrierWillPickUpOption {
	return &m
}

const (

	// CarrierWillPickUpOptionCarrierWillPickUp captures enum value "CarrierWillPickUp"
	CarrierWillPickUpOptionCarrierWillPickUp CarrierWillPickUpOption = "CarrierWillPickUp"

	// CarrierWillPickUpOptionShipperWillDropOff captures enum value "ShipperWillDropOff"
	CarrierWillPickUpOptionShipperWillDropOff CarrierWillPickUpOption = "ShipperWillDropOff"

	// CarrierWillPickUpOptionNoPreference captures enum value "NoPreference"
	CarrierWillPickUpOptionNoPreference CarrierWillPickUpOption = "NoPreference"
)

// for schema
var carrierWillPickUpOptionEnum []interface{}

func init() {
	var res []CarrierWillPickUpOption
	if err := json.Unmarshal([]byte(`["CarrierWillPickUp","ShipperWillDropOff","NoPreference"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		carrierWillPickUpOptionEnum = append(carrierWillPickUpOptionEnum, v)
	}
}

func (m CarrierWillPickUpOption) validateCarrierWillPickUpOptionEnum(path, location string, value CarrierWillPickUpOption) error {
	if err := validate.EnumCase(path, location, value, carrierWillPickUpOptionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this carrier will pick up option
func (m CarrierWillPickUpOption) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCarrierWillPickUpOptionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this carrier will pick up option based on context it is used
func (m CarrierWillPickUpOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
