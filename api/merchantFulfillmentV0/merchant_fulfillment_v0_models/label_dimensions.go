// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LabelDimensions Dimensions for printing a shipping label.
//
// swagger:model LabelDimensions
type LabelDimensions struct {

	// The length dimension.
	// Required: true
	Length *LabelDimension `json:"Length"`

	// The unit of measurement.
	// Required: true
	Unit *UnitOfLength `json:"Unit"`

	// The width dimension.
	// Required: true
	Width *LabelDimension `json:"Width"`
}

// Validate validates this label dimensions
func (m *LabelDimensions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLength(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWidth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelDimensions) validateLength(formats strfmt.Registry) error {

	if err := validate.Required("Length", "body", m.Length); err != nil {
		return err
	}

	if err := validate.Required("Length", "body", m.Length); err != nil {
		return err
	}

	if m.Length != nil {
		if err := m.Length.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Length")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Length")
			}
			return err
		}
	}

	return nil
}

func (m *LabelDimensions) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("Unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.Required("Unit", "body", m.Unit); err != nil {
		return err
	}

	if m.Unit != nil {
		if err := m.Unit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

func (m *LabelDimensions) validateWidth(formats strfmt.Registry) error {

	if err := validate.Required("Width", "body", m.Width); err != nil {
		return err
	}

	if err := validate.Required("Width", "body", m.Width); err != nil {
		return err
	}

	if m.Width != nil {
		if err := m.Width.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Width")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Width")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this label dimensions based on the context it is used
func (m *LabelDimensions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLength(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWidth(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelDimensions) contextValidateLength(ctx context.Context, formats strfmt.Registry) error {

	if m.Length != nil {
		if err := m.Length.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Length")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Length")
			}
			return err
		}
	}

	return nil
}

func (m *LabelDimensions) contextValidateUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.Unit != nil {
		if err := m.Unit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Unit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Unit")
			}
			return err
		}
	}

	return nil
}

func (m *LabelDimensions) contextValidateWidth(ctx context.Context, formats strfmt.Registry) error {

	if m.Width != nil {
		if err := m.Width.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Width")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Width")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LabelDimensions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelDimensions) UnmarshalBinary(b []byte) error {
	var res LabelDimensions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
