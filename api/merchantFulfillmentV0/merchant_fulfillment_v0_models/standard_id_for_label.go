// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// StandardIDForLabel The type of standard identifier to print on the label.
//
// swagger:model StandardIdForLabel
type StandardIDForLabel string

func NewStandardIDForLabel(value StandardIDForLabel) *StandardIDForLabel {
	return &value
}

// Pointer returns a pointer to a freshly-allocated StandardIDForLabel.
func (m StandardIDForLabel) Pointer() *StandardIDForLabel {
	return &m
}

const (

	// StandardIDForLabelAmazonOrderID captures enum value "AmazonOrderId"
	StandardIDForLabelAmazonOrderID StandardIDForLabel = "AmazonOrderId"
)

// for schema
var standardIdForLabelEnum []interface{}

func init() {
	var res []StandardIDForLabel
	if err := json.Unmarshal([]byte(`["AmazonOrderId"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		standardIdForLabelEnum = append(standardIdForLabelEnum, v)
	}
}

func (m StandardIDForLabel) validateStandardIDForLabelEnum(path, location string, value StandardIDForLabel) error {
	if err := validate.EnumCase(path, location, value, standardIdForLabelEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this standard Id for label
func (m StandardIDForLabel) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStandardIDForLabelEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this standard Id for label based on context it is used
func (m StandardIDForLabel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
