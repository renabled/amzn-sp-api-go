// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Benefits Benefits that are included and excluded for each shipping offer. Benefits represents services provided by Amazon (eg. CLAIMS_PROTECTED, etc.) when sellers purchase shipping through Amazon. Benefit details will be made available for any shipment placed on or after January 1st 2024 00:00 UTC
//
// swagger:model Benefits
type Benefits struct {

	// excluded benefits
	ExcludedBenefits ExcludedBenefits `json:"ExcludedBenefits,omitempty"`

	// included benefits
	IncludedBenefits IncludedBenefits `json:"IncludedBenefits,omitempty"`
}

// Validate validates this benefits
func (m *Benefits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExcludedBenefits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludedBenefits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Benefits) validateExcludedBenefits(formats strfmt.Registry) error {
	if swag.IsZero(m.ExcludedBenefits) { // not required
		return nil
	}

	if err := m.ExcludedBenefits.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ExcludedBenefits")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ExcludedBenefits")
		}
		return err
	}

	return nil
}

func (m *Benefits) validateIncludedBenefits(formats strfmt.Registry) error {
	if swag.IsZero(m.IncludedBenefits) { // not required
		return nil
	}

	if err := m.IncludedBenefits.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IncludedBenefits")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("IncludedBenefits")
		}
		return err
	}

	return nil
}

// ContextValidate validate this benefits based on the context it is used
func (m *Benefits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateExcludedBenefits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludedBenefits(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Benefits) contextValidateExcludedBenefits(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ExcludedBenefits.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ExcludedBenefits")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ExcludedBenefits")
		}
		return err
	}

	return nil
}

func (m *Benefits) contextValidateIncludedBenefits(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IncludedBenefits.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IncludedBenefits")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("IncludedBenefits")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Benefits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Benefits) UnmarshalBinary(b []byte) error {
	var res Benefits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
