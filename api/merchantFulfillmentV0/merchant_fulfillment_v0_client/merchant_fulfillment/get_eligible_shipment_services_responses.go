// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/merchantFulfillmentV0/merchant_fulfillment_v0_models"
)

// GetEligibleShipmentServicesReader is a Reader for the GetEligibleShipmentServices structure.
type GetEligibleShipmentServicesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEligibleShipmentServicesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEligibleShipmentServicesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetEligibleShipmentServicesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetEligibleShipmentServicesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetEligibleShipmentServicesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetEligibleShipmentServicesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetEligibleShipmentServicesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetEligibleShipmentServicesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetEligibleShipmentServicesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetEligibleShipmentServicesOK creates a GetEligibleShipmentServicesOK with default headers values
func NewGetEligibleShipmentServicesOK() *GetEligibleShipmentServicesOK {
	return &GetEligibleShipmentServicesOK{}
}

/*
GetEligibleShipmentServicesOK describes a response with status code 200, with default header values.

Success.
*/
type GetEligibleShipmentServicesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services o k response has a 2xx status code
func (o *GetEligibleShipmentServicesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get eligible shipment services o k response has a 3xx status code
func (o *GetEligibleShipmentServicesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services o k response has a 4xx status code
func (o *GetEligibleShipmentServicesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get eligible shipment services o k response has a 5xx status code
func (o *GetEligibleShipmentServicesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get eligible shipment services o k response a status code equal to that given
func (o *GetEligibleShipmentServicesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetEligibleShipmentServicesOK) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesOK  %+v", 200, o.Payload)
}

func (o *GetEligibleShipmentServicesOK) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesOK  %+v", 200, o.Payload)
}

func (o *GetEligibleShipmentServicesOK) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesBadRequest creates a GetEligibleShipmentServicesBadRequest with default headers values
func NewGetEligibleShipmentServicesBadRequest() *GetEligibleShipmentServicesBadRequest {
	return &GetEligibleShipmentServicesBadRequest{}
}

/*
GetEligibleShipmentServicesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetEligibleShipmentServicesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services bad request response has a 2xx status code
func (o *GetEligibleShipmentServicesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services bad request response has a 3xx status code
func (o *GetEligibleShipmentServicesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services bad request response has a 4xx status code
func (o *GetEligibleShipmentServicesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get eligible shipment services bad request response has a 5xx status code
func (o *GetEligibleShipmentServicesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get eligible shipment services bad request response a status code equal to that given
func (o *GetEligibleShipmentServicesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetEligibleShipmentServicesBadRequest) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesBadRequest  %+v", 400, o.Payload)
}

func (o *GetEligibleShipmentServicesBadRequest) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesBadRequest  %+v", 400, o.Payload)
}

func (o *GetEligibleShipmentServicesBadRequest) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesUnauthorized creates a GetEligibleShipmentServicesUnauthorized with default headers values
func NewGetEligibleShipmentServicesUnauthorized() *GetEligibleShipmentServicesUnauthorized {
	return &GetEligibleShipmentServicesUnauthorized{}
}

/*
GetEligibleShipmentServicesUnauthorized describes a response with status code 401, with default header values.

The request's authorization header is not formatted correctly or does not contain a valid token.
*/
type GetEligibleShipmentServicesUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services unauthorized response has a 2xx status code
func (o *GetEligibleShipmentServicesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services unauthorized response has a 3xx status code
func (o *GetEligibleShipmentServicesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services unauthorized response has a 4xx status code
func (o *GetEligibleShipmentServicesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get eligible shipment services unauthorized response has a 5xx status code
func (o *GetEligibleShipmentServicesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get eligible shipment services unauthorized response a status code equal to that given
func (o *GetEligibleShipmentServicesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetEligibleShipmentServicesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEligibleShipmentServicesUnauthorized) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetEligibleShipmentServicesUnauthorized) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesForbidden creates a GetEligibleShipmentServicesForbidden with default headers values
func NewGetEligibleShipmentServicesForbidden() *GetEligibleShipmentServicesForbidden {
	return &GetEligibleShipmentServicesForbidden{}
}

/*
GetEligibleShipmentServicesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetEligibleShipmentServicesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services forbidden response has a 2xx status code
func (o *GetEligibleShipmentServicesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services forbidden response has a 3xx status code
func (o *GetEligibleShipmentServicesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services forbidden response has a 4xx status code
func (o *GetEligibleShipmentServicesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get eligible shipment services forbidden response has a 5xx status code
func (o *GetEligibleShipmentServicesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get eligible shipment services forbidden response a status code equal to that given
func (o *GetEligibleShipmentServicesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetEligibleShipmentServicesForbidden) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesForbidden  %+v", 403, o.Payload)
}

func (o *GetEligibleShipmentServicesForbidden) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesForbidden  %+v", 403, o.Payload)
}

func (o *GetEligibleShipmentServicesForbidden) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesNotFound creates a GetEligibleShipmentServicesNotFound with default headers values
func NewGetEligibleShipmentServicesNotFound() *GetEligibleShipmentServicesNotFound {
	return &GetEligibleShipmentServicesNotFound{}
}

/*
GetEligibleShipmentServicesNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetEligibleShipmentServicesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services not found response has a 2xx status code
func (o *GetEligibleShipmentServicesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services not found response has a 3xx status code
func (o *GetEligibleShipmentServicesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services not found response has a 4xx status code
func (o *GetEligibleShipmentServicesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get eligible shipment services not found response has a 5xx status code
func (o *GetEligibleShipmentServicesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get eligible shipment services not found response a status code equal to that given
func (o *GetEligibleShipmentServicesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetEligibleShipmentServicesNotFound) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesNotFound  %+v", 404, o.Payload)
}

func (o *GetEligibleShipmentServicesNotFound) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesNotFound  %+v", 404, o.Payload)
}

func (o *GetEligibleShipmentServicesNotFound) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesTooManyRequests creates a GetEligibleShipmentServicesTooManyRequests with default headers values
func NewGetEligibleShipmentServicesTooManyRequests() *GetEligibleShipmentServicesTooManyRequests {
	return &GetEligibleShipmentServicesTooManyRequests{}
}

/*
GetEligibleShipmentServicesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetEligibleShipmentServicesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services too many requests response has a 2xx status code
func (o *GetEligibleShipmentServicesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services too many requests response has a 3xx status code
func (o *GetEligibleShipmentServicesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services too many requests response has a 4xx status code
func (o *GetEligibleShipmentServicesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get eligible shipment services too many requests response has a 5xx status code
func (o *GetEligibleShipmentServicesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get eligible shipment services too many requests response a status code equal to that given
func (o *GetEligibleShipmentServicesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetEligibleShipmentServicesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEligibleShipmentServicesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetEligibleShipmentServicesTooManyRequests) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesInternalServerError creates a GetEligibleShipmentServicesInternalServerError with default headers values
func NewGetEligibleShipmentServicesInternalServerError() *GetEligibleShipmentServicesInternalServerError {
	return &GetEligibleShipmentServicesInternalServerError{}
}

/*
GetEligibleShipmentServicesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetEligibleShipmentServicesInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services internal server error response has a 2xx status code
func (o *GetEligibleShipmentServicesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services internal server error response has a 3xx status code
func (o *GetEligibleShipmentServicesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services internal server error response has a 4xx status code
func (o *GetEligibleShipmentServicesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get eligible shipment services internal server error response has a 5xx status code
func (o *GetEligibleShipmentServicesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get eligible shipment services internal server error response a status code equal to that given
func (o *GetEligibleShipmentServicesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetEligibleShipmentServicesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEligibleShipmentServicesInternalServerError) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetEligibleShipmentServicesInternalServerError) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEligibleShipmentServicesServiceUnavailable creates a GetEligibleShipmentServicesServiceUnavailable with default headers values
func NewGetEligibleShipmentServicesServiceUnavailable() *GetEligibleShipmentServicesServiceUnavailable {
	return &GetEligibleShipmentServicesServiceUnavailable{}
}

/*
GetEligibleShipmentServicesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetEligibleShipmentServicesServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse
}

// IsSuccess returns true when this get eligible shipment services service unavailable response has a 2xx status code
func (o *GetEligibleShipmentServicesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get eligible shipment services service unavailable response has a 3xx status code
func (o *GetEligibleShipmentServicesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get eligible shipment services service unavailable response has a 4xx status code
func (o *GetEligibleShipmentServicesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get eligible shipment services service unavailable response has a 5xx status code
func (o *GetEligibleShipmentServicesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get eligible shipment services service unavailable response a status code equal to that given
func (o *GetEligibleShipmentServicesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetEligibleShipmentServicesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetEligibleShipmentServicesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /mfn/v0/eligibleShippingServices][%d] getEligibleShipmentServicesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetEligibleShipmentServicesServiceUnavailable) GetPayload() *merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse {
	return o.Payload
}

func (o *GetEligibleShipmentServicesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetEligibleShipmentServicesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
