// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/merchantFulfillmentV0/merchant_fulfillment_v0_models"
)

// GetAdditionalSellerInputsOldReader is a Reader for the GetAdditionalSellerInputsOld structure.
type GetAdditionalSellerInputsOldReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdditionalSellerInputsOldReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdditionalSellerInputsOldOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAdditionalSellerInputsOldBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAdditionalSellerInputsOldUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAdditionalSellerInputsOldForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAdditionalSellerInputsOldNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAdditionalSellerInputsOldTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAdditionalSellerInputsOldInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAdditionalSellerInputsOldServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAdditionalSellerInputsOldOK creates a GetAdditionalSellerInputsOldOK with default headers values
func NewGetAdditionalSellerInputsOldOK() *GetAdditionalSellerInputsOldOK {
	return &GetAdditionalSellerInputsOldOK{}
}

/*
GetAdditionalSellerInputsOldOK describes a response with status code 200, with default header values.

Success
*/
type GetAdditionalSellerInputsOldOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old o k response has a 2xx status code
func (o *GetAdditionalSellerInputsOldOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get additional seller inputs old o k response has a 3xx status code
func (o *GetAdditionalSellerInputsOldOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old o k response has a 4xx status code
func (o *GetAdditionalSellerInputsOldOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional seller inputs old o k response has a 5xx status code
func (o *GetAdditionalSellerInputsOldOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs old o k response a status code equal to that given
func (o *GetAdditionalSellerInputsOldOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAdditionalSellerInputsOldOK) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalSellerInputsOldOK) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalSellerInputsOldOK) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldBadRequest creates a GetAdditionalSellerInputsOldBadRequest with default headers values
func NewGetAdditionalSellerInputsOldBadRequest() *GetAdditionalSellerInputsOldBadRequest {
	return &GetAdditionalSellerInputsOldBadRequest{}
}

/*
GetAdditionalSellerInputsOldBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAdditionalSellerInputsOldBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old bad request response has a 2xx status code
func (o *GetAdditionalSellerInputsOldBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old bad request response has a 3xx status code
func (o *GetAdditionalSellerInputsOldBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old bad request response has a 4xx status code
func (o *GetAdditionalSellerInputsOldBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs old bad request response has a 5xx status code
func (o *GetAdditionalSellerInputsOldBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs old bad request response a status code equal to that given
func (o *GetAdditionalSellerInputsOldBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAdditionalSellerInputsOldBadRequest) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalSellerInputsOldBadRequest) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalSellerInputsOldBadRequest) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldUnauthorized creates a GetAdditionalSellerInputsOldUnauthorized with default headers values
func NewGetAdditionalSellerInputsOldUnauthorized() *GetAdditionalSellerInputsOldUnauthorized {
	return &GetAdditionalSellerInputsOldUnauthorized{}
}

/*
GetAdditionalSellerInputsOldUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetAdditionalSellerInputsOldUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old unauthorized response has a 2xx status code
func (o *GetAdditionalSellerInputsOldUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old unauthorized response has a 3xx status code
func (o *GetAdditionalSellerInputsOldUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old unauthorized response has a 4xx status code
func (o *GetAdditionalSellerInputsOldUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs old unauthorized response has a 5xx status code
func (o *GetAdditionalSellerInputsOldUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs old unauthorized response a status code equal to that given
func (o *GetAdditionalSellerInputsOldUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAdditionalSellerInputsOldUnauthorized) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionalSellerInputsOldUnauthorized) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionalSellerInputsOldUnauthorized) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldForbidden creates a GetAdditionalSellerInputsOldForbidden with default headers values
func NewGetAdditionalSellerInputsOldForbidden() *GetAdditionalSellerInputsOldForbidden {
	return &GetAdditionalSellerInputsOldForbidden{}
}

/*
GetAdditionalSellerInputsOldForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAdditionalSellerInputsOldForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old forbidden response has a 2xx status code
func (o *GetAdditionalSellerInputsOldForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old forbidden response has a 3xx status code
func (o *GetAdditionalSellerInputsOldForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old forbidden response has a 4xx status code
func (o *GetAdditionalSellerInputsOldForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs old forbidden response has a 5xx status code
func (o *GetAdditionalSellerInputsOldForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs old forbidden response a status code equal to that given
func (o *GetAdditionalSellerInputsOldForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAdditionalSellerInputsOldForbidden) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalSellerInputsOldForbidden) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalSellerInputsOldForbidden) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldNotFound creates a GetAdditionalSellerInputsOldNotFound with default headers values
func NewGetAdditionalSellerInputsOldNotFound() *GetAdditionalSellerInputsOldNotFound {
	return &GetAdditionalSellerInputsOldNotFound{}
}

/*
GetAdditionalSellerInputsOldNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetAdditionalSellerInputsOldNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old not found response has a 2xx status code
func (o *GetAdditionalSellerInputsOldNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old not found response has a 3xx status code
func (o *GetAdditionalSellerInputsOldNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old not found response has a 4xx status code
func (o *GetAdditionalSellerInputsOldNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs old not found response has a 5xx status code
func (o *GetAdditionalSellerInputsOldNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs old not found response a status code equal to that given
func (o *GetAdditionalSellerInputsOldNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAdditionalSellerInputsOldNotFound) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalSellerInputsOldNotFound) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalSellerInputsOldNotFound) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldTooManyRequests creates a GetAdditionalSellerInputsOldTooManyRequests with default headers values
func NewGetAdditionalSellerInputsOldTooManyRequests() *GetAdditionalSellerInputsOldTooManyRequests {
	return &GetAdditionalSellerInputsOldTooManyRequests{}
}

/*
GetAdditionalSellerInputsOldTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAdditionalSellerInputsOldTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old too many requests response has a 2xx status code
func (o *GetAdditionalSellerInputsOldTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old too many requests response has a 3xx status code
func (o *GetAdditionalSellerInputsOldTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old too many requests response has a 4xx status code
func (o *GetAdditionalSellerInputsOldTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs old too many requests response has a 5xx status code
func (o *GetAdditionalSellerInputsOldTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs old too many requests response a status code equal to that given
func (o *GetAdditionalSellerInputsOldTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAdditionalSellerInputsOldTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalSellerInputsOldTooManyRequests) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalSellerInputsOldTooManyRequests) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldInternalServerError creates a GetAdditionalSellerInputsOldInternalServerError with default headers values
func NewGetAdditionalSellerInputsOldInternalServerError() *GetAdditionalSellerInputsOldInternalServerError {
	return &GetAdditionalSellerInputsOldInternalServerError{}
}

/*
GetAdditionalSellerInputsOldInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAdditionalSellerInputsOldInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old internal server error response has a 2xx status code
func (o *GetAdditionalSellerInputsOldInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old internal server error response has a 3xx status code
func (o *GetAdditionalSellerInputsOldInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old internal server error response has a 4xx status code
func (o *GetAdditionalSellerInputsOldInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional seller inputs old internal server error response has a 5xx status code
func (o *GetAdditionalSellerInputsOldInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get additional seller inputs old internal server error response a status code equal to that given
func (o *GetAdditionalSellerInputsOldInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAdditionalSellerInputsOldInternalServerError) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionalSellerInputsOldInternalServerError) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionalSellerInputsOldInternalServerError) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsOldServiceUnavailable creates a GetAdditionalSellerInputsOldServiceUnavailable with default headers values
func NewGetAdditionalSellerInputsOldServiceUnavailable() *GetAdditionalSellerInputsOldServiceUnavailable {
	return &GetAdditionalSellerInputsOldServiceUnavailable{}
}

/*
GetAdditionalSellerInputsOldServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAdditionalSellerInputsOldServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs old service unavailable response has a 2xx status code
func (o *GetAdditionalSellerInputsOldServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs old service unavailable response has a 3xx status code
func (o *GetAdditionalSellerInputsOldServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs old service unavailable response has a 4xx status code
func (o *GetAdditionalSellerInputsOldServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional seller inputs old service unavailable response has a 5xx status code
func (o *GetAdditionalSellerInputsOldServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get additional seller inputs old service unavailable response a status code equal to that given
func (o *GetAdditionalSellerInputsOldServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAdditionalSellerInputsOldServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAdditionalSellerInputsOldServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /mfn/v0/sellerInputs][%d] getAdditionalSellerInputsOldServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAdditionalSellerInputsOldServiceUnavailable) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOldServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
