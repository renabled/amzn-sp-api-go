// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/merchantFulfillmentV0/merchant_fulfillment_v0_models"
)

// CancelShipmentOldReader is a Reader for the CancelShipmentOld structure.
type CancelShipmentOldReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelShipmentOldReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelShipmentOldOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelShipmentOldBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelShipmentOldUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelShipmentOldForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelShipmentOldNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelShipmentOldTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelShipmentOldInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelShipmentOldServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelShipmentOldOK creates a CancelShipmentOldOK with default headers values
func NewCancelShipmentOldOK() *CancelShipmentOldOK {
	return &CancelShipmentOldOK{}
}

/* CancelShipmentOldOK describes a response with status code 200, with default header values.

Success
*/
type CancelShipmentOldOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldOK) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldOK  %+v", 200, o.Payload)
}
func (o *CancelShipmentOldOK) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldBadRequest creates a CancelShipmentOldBadRequest with default headers values
func NewCancelShipmentOldBadRequest() *CancelShipmentOldBadRequest {
	return &CancelShipmentOldBadRequest{}
}

/* CancelShipmentOldBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelShipmentOldBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldBadRequest) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldBadRequest  %+v", 400, o.Payload)
}
func (o *CancelShipmentOldBadRequest) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldUnauthorized creates a CancelShipmentOldUnauthorized with default headers values
func NewCancelShipmentOldUnauthorized() *CancelShipmentOldUnauthorized {
	return &CancelShipmentOldUnauthorized{}
}

/* CancelShipmentOldUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CancelShipmentOldUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldUnauthorized  %+v", 401, o.Payload)
}
func (o *CancelShipmentOldUnauthorized) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldForbidden creates a CancelShipmentOldForbidden with default headers values
func NewCancelShipmentOldForbidden() *CancelShipmentOldForbidden {
	return &CancelShipmentOldForbidden{}
}

/* CancelShipmentOldForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CancelShipmentOldForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldForbidden) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldForbidden  %+v", 403, o.Payload)
}
func (o *CancelShipmentOldForbidden) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldNotFound creates a CancelShipmentOldNotFound with default headers values
func NewCancelShipmentOldNotFound() *CancelShipmentOldNotFound {
	return &CancelShipmentOldNotFound{}
}

/* CancelShipmentOldNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CancelShipmentOldNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldNotFound) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldNotFound  %+v", 404, o.Payload)
}
func (o *CancelShipmentOldNotFound) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldTooManyRequests creates a CancelShipmentOldTooManyRequests with default headers values
func NewCancelShipmentOldTooManyRequests() *CancelShipmentOldTooManyRequests {
	return &CancelShipmentOldTooManyRequests{}
}

/* CancelShipmentOldTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelShipmentOldTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldTooManyRequests  %+v", 429, o.Payload)
}
func (o *CancelShipmentOldTooManyRequests) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldInternalServerError creates a CancelShipmentOldInternalServerError with default headers values
func NewCancelShipmentOldInternalServerError() *CancelShipmentOldInternalServerError {
	return &CancelShipmentOldInternalServerError{}
}

/* CancelShipmentOldInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CancelShipmentOldInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldInternalServerError  %+v", 500, o.Payload)
}
func (o *CancelShipmentOldInternalServerError) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentOldServiceUnavailable creates a CancelShipmentOldServiceUnavailable with default headers values
func NewCancelShipmentOldServiceUnavailable() *CancelShipmentOldServiceUnavailable {
	return &CancelShipmentOldServiceUnavailable{}
}

/* CancelShipmentOldServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelShipmentOldServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

func (o *CancelShipmentOldServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /mfn/v0/shipments/{shipmentId}/cancel][%d] cancelShipmentOldServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CancelShipmentOldServiceUnavailable) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOldServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
