// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/merchantFulfillmentV0/merchant_fulfillment_v0_models"
)

// CreateShipmentReader is a Reader for the CreateShipment structure.
type CreateShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateShipmentOK creates a CreateShipmentOK with default headers values
func NewCreateShipmentOK() *CreateShipmentOK {
	return &CreateShipmentOK{}
}

/*
CreateShipmentOK describes a response with status code 200, with default header values.

Success
*/
type CreateShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment o k response has a 2xx status code
func (o *CreateShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create shipment o k response has a 3xx status code
func (o *CreateShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment o k response has a 4xx status code
func (o *CreateShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create shipment o k response has a 5xx status code
func (o *CreateShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipment o k response a status code equal to that given
func (o *CreateShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateShipmentOK) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentOK  %+v", 200, o.Payload)
}

func (o *CreateShipmentOK) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentOK  %+v", 200, o.Payload)
}

func (o *CreateShipmentOK) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentBadRequest creates a CreateShipmentBadRequest with default headers values
func NewCreateShipmentBadRequest() *CreateShipmentBadRequest {
	return &CreateShipmentBadRequest{}
}

/*
CreateShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment bad request response has a 2xx status code
func (o *CreateShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment bad request response has a 3xx status code
func (o *CreateShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment bad request response has a 4xx status code
func (o *CreateShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipment bad request response has a 5xx status code
func (o *CreateShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipment bad request response a status code equal to that given
func (o *CreateShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateShipmentBadRequest) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *CreateShipmentBadRequest) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentUnauthorized creates a CreateShipmentUnauthorized with default headers values
func NewCreateShipmentUnauthorized() *CreateShipmentUnauthorized {
	return &CreateShipmentUnauthorized{}
}

/*
CreateShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateShipmentUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment unauthorized response has a 2xx status code
func (o *CreateShipmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment unauthorized response has a 3xx status code
func (o *CreateShipmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment unauthorized response has a 4xx status code
func (o *CreateShipmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipment unauthorized response has a 5xx status code
func (o *CreateShipmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipment unauthorized response a status code equal to that given
func (o *CreateShipmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateShipmentUnauthorized) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateShipmentUnauthorized) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentForbidden creates a CreateShipmentForbidden with default headers values
func NewCreateShipmentForbidden() *CreateShipmentForbidden {
	return &CreateShipmentForbidden{}
}

/*
CreateShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment forbidden response has a 2xx status code
func (o *CreateShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment forbidden response has a 3xx status code
func (o *CreateShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment forbidden response has a 4xx status code
func (o *CreateShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipment forbidden response has a 5xx status code
func (o *CreateShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipment forbidden response a status code equal to that given
func (o *CreateShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentForbidden  %+v", 403, o.Payload)
}

func (o *CreateShipmentForbidden) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentForbidden  %+v", 403, o.Payload)
}

func (o *CreateShipmentForbidden) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentNotFound creates a CreateShipmentNotFound with default headers values
func NewCreateShipmentNotFound() *CreateShipmentNotFound {
	return &CreateShipmentNotFound{}
}

/*
CreateShipmentNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment not found response has a 2xx status code
func (o *CreateShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment not found response has a 3xx status code
func (o *CreateShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment not found response has a 4xx status code
func (o *CreateShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipment not found response has a 5xx status code
func (o *CreateShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipment not found response a status code equal to that given
func (o *CreateShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentNotFound  %+v", 404, o.Payload)
}

func (o *CreateShipmentNotFound) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentNotFound  %+v", 404, o.Payload)
}

func (o *CreateShipmentNotFound) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentTooManyRequests creates a CreateShipmentTooManyRequests with default headers values
func NewCreateShipmentTooManyRequests() *CreateShipmentTooManyRequests {
	return &CreateShipmentTooManyRequests{}
}

/*
CreateShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateShipmentTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment too many requests response has a 2xx status code
func (o *CreateShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment too many requests response has a 3xx status code
func (o *CreateShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment too many requests response has a 4xx status code
func (o *CreateShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create shipment too many requests response has a 5xx status code
func (o *CreateShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create shipment too many requests response a status code equal to that given
func (o *CreateShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateShipmentTooManyRequests) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentInternalServerError creates a CreateShipmentInternalServerError with default headers values
func NewCreateShipmentInternalServerError() *CreateShipmentInternalServerError {
	return &CreateShipmentInternalServerError{}
}

/*
CreateShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateShipmentInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment internal server error response has a 2xx status code
func (o *CreateShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment internal server error response has a 3xx status code
func (o *CreateShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment internal server error response has a 4xx status code
func (o *CreateShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create shipment internal server error response has a 5xx status code
func (o *CreateShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create shipment internal server error response a status code equal to that given
func (o *CreateShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateShipmentInternalServerError) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateShipmentInternalServerError) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateShipmentServiceUnavailable creates a CreateShipmentServiceUnavailable with default headers values
func NewCreateShipmentServiceUnavailable() *CreateShipmentServiceUnavailable {
	return &CreateShipmentServiceUnavailable{}
}

/*
CreateShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateShipmentServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CreateShipmentResponse
}

// IsSuccess returns true when this create shipment service unavailable response has a 2xx status code
func (o *CreateShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create shipment service unavailable response has a 3xx status code
func (o *CreateShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create shipment service unavailable response has a 4xx status code
func (o *CreateShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create shipment service unavailable response has a 5xx status code
func (o *CreateShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create shipment service unavailable response a status code equal to that given
func (o *CreateShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /mfn/v0/shipments][%d] createShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateShipmentServiceUnavailable) GetPayload() *merchant_fulfillment_v0_models.CreateShipmentResponse {
	return o.Payload
}

func (o *CreateShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CreateShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
