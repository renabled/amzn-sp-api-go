// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/merchantFulfillmentV0/merchant_fulfillment_v0_models"
)

// GetAdditionalSellerInputsReader is a Reader for the GetAdditionalSellerInputs structure.
type GetAdditionalSellerInputsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAdditionalSellerInputsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAdditionalSellerInputsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAdditionalSellerInputsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetAdditionalSellerInputsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAdditionalSellerInputsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAdditionalSellerInputsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAdditionalSellerInputsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAdditionalSellerInputsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAdditionalSellerInputsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAdditionalSellerInputsOK creates a GetAdditionalSellerInputsOK with default headers values
func NewGetAdditionalSellerInputsOK() *GetAdditionalSellerInputsOK {
	return &GetAdditionalSellerInputsOK{}
}

/*
GetAdditionalSellerInputsOK describes a response with status code 200, with default header values.

Success
*/
type GetAdditionalSellerInputsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs o k response has a 2xx status code
func (o *GetAdditionalSellerInputsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get additional seller inputs o k response has a 3xx status code
func (o *GetAdditionalSellerInputsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs o k response has a 4xx status code
func (o *GetAdditionalSellerInputsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional seller inputs o k response has a 5xx status code
func (o *GetAdditionalSellerInputsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs o k response a status code equal to that given
func (o *GetAdditionalSellerInputsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAdditionalSellerInputsOK) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalSellerInputsOK) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsOK  %+v", 200, o.Payload)
}

func (o *GetAdditionalSellerInputsOK) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsBadRequest creates a GetAdditionalSellerInputsBadRequest with default headers values
func NewGetAdditionalSellerInputsBadRequest() *GetAdditionalSellerInputsBadRequest {
	return &GetAdditionalSellerInputsBadRequest{}
}

/*
GetAdditionalSellerInputsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAdditionalSellerInputsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs bad request response has a 2xx status code
func (o *GetAdditionalSellerInputsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs bad request response has a 3xx status code
func (o *GetAdditionalSellerInputsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs bad request response has a 4xx status code
func (o *GetAdditionalSellerInputsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs bad request response has a 5xx status code
func (o *GetAdditionalSellerInputsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs bad request response a status code equal to that given
func (o *GetAdditionalSellerInputsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAdditionalSellerInputsBadRequest) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalSellerInputsBadRequest) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAdditionalSellerInputsBadRequest) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsUnauthorized creates a GetAdditionalSellerInputsUnauthorized with default headers values
func NewGetAdditionalSellerInputsUnauthorized() *GetAdditionalSellerInputsUnauthorized {
	return &GetAdditionalSellerInputsUnauthorized{}
}

/*
GetAdditionalSellerInputsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetAdditionalSellerInputsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs unauthorized response has a 2xx status code
func (o *GetAdditionalSellerInputsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs unauthorized response has a 3xx status code
func (o *GetAdditionalSellerInputsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs unauthorized response has a 4xx status code
func (o *GetAdditionalSellerInputsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs unauthorized response has a 5xx status code
func (o *GetAdditionalSellerInputsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs unauthorized response a status code equal to that given
func (o *GetAdditionalSellerInputsUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetAdditionalSellerInputsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionalSellerInputsUnauthorized) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsUnauthorized  %+v", 401, o.Payload)
}

func (o *GetAdditionalSellerInputsUnauthorized) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsForbidden creates a GetAdditionalSellerInputsForbidden with default headers values
func NewGetAdditionalSellerInputsForbidden() *GetAdditionalSellerInputsForbidden {
	return &GetAdditionalSellerInputsForbidden{}
}

/*
GetAdditionalSellerInputsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAdditionalSellerInputsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs forbidden response has a 2xx status code
func (o *GetAdditionalSellerInputsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs forbidden response has a 3xx status code
func (o *GetAdditionalSellerInputsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs forbidden response has a 4xx status code
func (o *GetAdditionalSellerInputsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs forbidden response has a 5xx status code
func (o *GetAdditionalSellerInputsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs forbidden response a status code equal to that given
func (o *GetAdditionalSellerInputsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAdditionalSellerInputsForbidden) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalSellerInputsForbidden) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsForbidden  %+v", 403, o.Payload)
}

func (o *GetAdditionalSellerInputsForbidden) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsNotFound creates a GetAdditionalSellerInputsNotFound with default headers values
func NewGetAdditionalSellerInputsNotFound() *GetAdditionalSellerInputsNotFound {
	return &GetAdditionalSellerInputsNotFound{}
}

/*
GetAdditionalSellerInputsNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetAdditionalSellerInputsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs not found response has a 2xx status code
func (o *GetAdditionalSellerInputsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs not found response has a 3xx status code
func (o *GetAdditionalSellerInputsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs not found response has a 4xx status code
func (o *GetAdditionalSellerInputsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs not found response has a 5xx status code
func (o *GetAdditionalSellerInputsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs not found response a status code equal to that given
func (o *GetAdditionalSellerInputsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAdditionalSellerInputsNotFound) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalSellerInputsNotFound) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsNotFound  %+v", 404, o.Payload)
}

func (o *GetAdditionalSellerInputsNotFound) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsTooManyRequests creates a GetAdditionalSellerInputsTooManyRequests with default headers values
func NewGetAdditionalSellerInputsTooManyRequests() *GetAdditionalSellerInputsTooManyRequests {
	return &GetAdditionalSellerInputsTooManyRequests{}
}

/*
GetAdditionalSellerInputsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAdditionalSellerInputsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs too many requests response has a 2xx status code
func (o *GetAdditionalSellerInputsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs too many requests response has a 3xx status code
func (o *GetAdditionalSellerInputsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs too many requests response has a 4xx status code
func (o *GetAdditionalSellerInputsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get additional seller inputs too many requests response has a 5xx status code
func (o *GetAdditionalSellerInputsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get additional seller inputs too many requests response a status code equal to that given
func (o *GetAdditionalSellerInputsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAdditionalSellerInputsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalSellerInputsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAdditionalSellerInputsTooManyRequests) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsInternalServerError creates a GetAdditionalSellerInputsInternalServerError with default headers values
func NewGetAdditionalSellerInputsInternalServerError() *GetAdditionalSellerInputsInternalServerError {
	return &GetAdditionalSellerInputsInternalServerError{}
}

/*
GetAdditionalSellerInputsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAdditionalSellerInputsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs internal server error response has a 2xx status code
func (o *GetAdditionalSellerInputsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs internal server error response has a 3xx status code
func (o *GetAdditionalSellerInputsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs internal server error response has a 4xx status code
func (o *GetAdditionalSellerInputsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional seller inputs internal server error response has a 5xx status code
func (o *GetAdditionalSellerInputsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get additional seller inputs internal server error response a status code equal to that given
func (o *GetAdditionalSellerInputsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAdditionalSellerInputsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionalSellerInputsInternalServerError) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAdditionalSellerInputsInternalServerError) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAdditionalSellerInputsServiceUnavailable creates a GetAdditionalSellerInputsServiceUnavailable with default headers values
func NewGetAdditionalSellerInputsServiceUnavailable() *GetAdditionalSellerInputsServiceUnavailable {
	return &GetAdditionalSellerInputsServiceUnavailable{}
}

/*
GetAdditionalSellerInputsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAdditionalSellerInputsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse
}

// IsSuccess returns true when this get additional seller inputs service unavailable response has a 2xx status code
func (o *GetAdditionalSellerInputsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get additional seller inputs service unavailable response has a 3xx status code
func (o *GetAdditionalSellerInputsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get additional seller inputs service unavailable response has a 4xx status code
func (o *GetAdditionalSellerInputsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get additional seller inputs service unavailable response has a 5xx status code
func (o *GetAdditionalSellerInputsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get additional seller inputs service unavailable response a status code equal to that given
func (o *GetAdditionalSellerInputsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAdditionalSellerInputsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAdditionalSellerInputsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /mfn/v0/additionalSellerInputs][%d] getAdditionalSellerInputsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAdditionalSellerInputsServiceUnavailable) GetPayload() *merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse {
	return o.Payload
}

func (o *GetAdditionalSellerInputsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.GetAdditionalSellerInputsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
