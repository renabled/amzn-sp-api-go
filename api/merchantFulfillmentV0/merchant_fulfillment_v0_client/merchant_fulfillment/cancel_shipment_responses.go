// Code generated by go-swagger; DO NOT EDIT.

package merchant_fulfillment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/merchantFulfillmentV0/merchant_fulfillment_v0_models"
)

// CancelShipmentReader is a Reader for the CancelShipment structure.
type CancelShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelShipmentOK creates a CancelShipmentOK with default headers values
func NewCancelShipmentOK() *CancelShipmentOK {
	return &CancelShipmentOK{}
}

/*
CancelShipmentOK describes a response with status code 200, with default header values.

Success
*/
type CancelShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment o k response has a 2xx status code
func (o *CancelShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel shipment o k response has a 3xx status code
func (o *CancelShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment o k response has a 4xx status code
func (o *CancelShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel shipment o k response has a 5xx status code
func (o *CancelShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel shipment o k response a status code equal to that given
func (o *CancelShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *CancelShipmentOK) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentOK  %+v", 200, o.Payload)
}

func (o *CancelShipmentOK) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentOK  %+v", 200, o.Payload)
}

func (o *CancelShipmentOK) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentBadRequest creates a CancelShipmentBadRequest with default headers values
func NewCancelShipmentBadRequest() *CancelShipmentBadRequest {
	return &CancelShipmentBadRequest{}
}

/*
CancelShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment bad request response has a 2xx status code
func (o *CancelShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment bad request response has a 3xx status code
func (o *CancelShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment bad request response has a 4xx status code
func (o *CancelShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel shipment bad request response has a 5xx status code
func (o *CancelShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel shipment bad request response a status code equal to that given
func (o *CancelShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CancelShipmentBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *CancelShipmentBadRequest) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *CancelShipmentBadRequest) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentUnauthorized creates a CancelShipmentUnauthorized with default headers values
func NewCancelShipmentUnauthorized() *CancelShipmentUnauthorized {
	return &CancelShipmentUnauthorized{}
}

/*
CancelShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CancelShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment unauthorized response has a 2xx status code
func (o *CancelShipmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment unauthorized response has a 3xx status code
func (o *CancelShipmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment unauthorized response has a 4xx status code
func (o *CancelShipmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel shipment unauthorized response has a 5xx status code
func (o *CancelShipmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel shipment unauthorized response a status code equal to that given
func (o *CancelShipmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CancelShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelShipmentUnauthorized) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *CancelShipmentUnauthorized) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentForbidden creates a CancelShipmentForbidden with default headers values
func NewCancelShipmentForbidden() *CancelShipmentForbidden {
	return &CancelShipmentForbidden{}
}

/*
CancelShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CancelShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment forbidden response has a 2xx status code
func (o *CancelShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment forbidden response has a 3xx status code
func (o *CancelShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment forbidden response has a 4xx status code
func (o *CancelShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel shipment forbidden response has a 5xx status code
func (o *CancelShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel shipment forbidden response a status code equal to that given
func (o *CancelShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CancelShipmentForbidden) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentForbidden  %+v", 403, o.Payload)
}

func (o *CancelShipmentForbidden) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentForbidden  %+v", 403, o.Payload)
}

func (o *CancelShipmentForbidden) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentNotFound creates a CancelShipmentNotFound with default headers values
func NewCancelShipmentNotFound() *CancelShipmentNotFound {
	return &CancelShipmentNotFound{}
}

/*
CancelShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CancelShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment not found response has a 2xx status code
func (o *CancelShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment not found response has a 3xx status code
func (o *CancelShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment not found response has a 4xx status code
func (o *CancelShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel shipment not found response has a 5xx status code
func (o *CancelShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel shipment not found response a status code equal to that given
func (o *CancelShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CancelShipmentNotFound) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentNotFound  %+v", 404, o.Payload)
}

func (o *CancelShipmentNotFound) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentNotFound  %+v", 404, o.Payload)
}

func (o *CancelShipmentNotFound) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentTooManyRequests creates a CancelShipmentTooManyRequests with default headers values
func NewCancelShipmentTooManyRequests() *CancelShipmentTooManyRequests {
	return &CancelShipmentTooManyRequests{}
}

/*
CancelShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment too many requests response has a 2xx status code
func (o *CancelShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment too many requests response has a 3xx status code
func (o *CancelShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment too many requests response has a 4xx status code
func (o *CancelShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel shipment too many requests response has a 5xx status code
func (o *CancelShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel shipment too many requests response a status code equal to that given
func (o *CancelShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CancelShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelShipmentTooManyRequests) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentInternalServerError creates a CancelShipmentInternalServerError with default headers values
func NewCancelShipmentInternalServerError() *CancelShipmentInternalServerError {
	return &CancelShipmentInternalServerError{}
}

/*
CancelShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CancelShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment internal server error response has a 2xx status code
func (o *CancelShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment internal server error response has a 3xx status code
func (o *CancelShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment internal server error response has a 4xx status code
func (o *CancelShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel shipment internal server error response has a 5xx status code
func (o *CancelShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel shipment internal server error response a status code equal to that given
func (o *CancelShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CancelShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelShipmentInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelShipmentInternalServerError) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentServiceUnavailable creates a CancelShipmentServiceUnavailable with default headers values
func NewCancelShipmentServiceUnavailable() *CancelShipmentServiceUnavailable {
	return &CancelShipmentServiceUnavailable{}
}

/*
CancelShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *merchant_fulfillment_v0_models.CancelShipmentResponse
}

// IsSuccess returns true when this cancel shipment service unavailable response has a 2xx status code
func (o *CancelShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel shipment service unavailable response has a 3xx status code
func (o *CancelShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel shipment service unavailable response has a 4xx status code
func (o *CancelShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel shipment service unavailable response has a 5xx status code
func (o *CancelShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel shipment service unavailable response a status code equal to that given
func (o *CancelShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CancelShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /mfn/v0/shipments/{shipmentId}][%d] cancelShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelShipmentServiceUnavailable) GetPayload() *merchant_fulfillment_v0_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(merchant_fulfillment_v0_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
