// Code generated by go-swagger; DO NOT EDIT.

package product_pricing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/productPricing_2022-05-01/product_pricing_2022_05_01_models"
)

// GetFeaturedOfferExpectedPriceBatchReader is a Reader for the GetFeaturedOfferExpectedPriceBatch structure.
type GetFeaturedOfferExpectedPriceBatchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeaturedOfferExpectedPriceBatchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeaturedOfferExpectedPriceBatchOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFeaturedOfferExpectedPriceBatchBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFeaturedOfferExpectedPriceBatchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeaturedOfferExpectedPriceBatchForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeaturedOfferExpectedPriceBatchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFeaturedOfferExpectedPriceBatchTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFeaturedOfferExpectedPriceBatchInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFeaturedOfferExpectedPriceBatchServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFeaturedOfferExpectedPriceBatchOK creates a GetFeaturedOfferExpectedPriceBatchOK with default headers values
func NewGetFeaturedOfferExpectedPriceBatchOK() *GetFeaturedOfferExpectedPriceBatchOK {
	return &GetFeaturedOfferExpectedPriceBatchOK{}
}

/*
GetFeaturedOfferExpectedPriceBatchOK describes a response with status code 200, with default header values.

Success.
*/
type GetFeaturedOfferExpectedPriceBatchOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.GetFeaturedOfferExpectedPriceBatchResponse
}

// IsSuccess returns true when this get featured offer expected price batch o k response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get featured offer expected price batch o k response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch o k response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get featured offer expected price batch o k response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get featured offer expected price batch o k response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFeaturedOfferExpectedPriceBatchOK) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchOK  %+v", 200, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchOK) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchOK  %+v", 200, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchOK) GetPayload() *product_pricing_2022_05_01_models.GetFeaturedOfferExpectedPriceBatchResponse {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.GetFeaturedOfferExpectedPriceBatchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchBadRequest creates a GetFeaturedOfferExpectedPriceBatchBadRequest with default headers values
func NewGetFeaturedOfferExpectedPriceBatchBadRequest() *GetFeaturedOfferExpectedPriceBatchBadRequest {
	return &GetFeaturedOfferExpectedPriceBatchBadRequest{}
}

/*
GetFeaturedOfferExpectedPriceBatchBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetFeaturedOfferExpectedPriceBatchBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch bad request response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch bad request response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch bad request response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get featured offer expected price batch bad request response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get featured offer expected price batch bad request response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchUnauthorized creates a GetFeaturedOfferExpectedPriceBatchUnauthorized with default headers values
func NewGetFeaturedOfferExpectedPriceBatchUnauthorized() *GetFeaturedOfferExpectedPriceBatchUnauthorized {
	return &GetFeaturedOfferExpectedPriceBatchUnauthorized{}
}

/*
GetFeaturedOfferExpectedPriceBatchUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetFeaturedOfferExpectedPriceBatchUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch unauthorized response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch unauthorized response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch unauthorized response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get featured offer expected price batch unauthorized response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get featured offer expected price batch unauthorized response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchForbidden creates a GetFeaturedOfferExpectedPriceBatchForbidden with default headers values
func NewGetFeaturedOfferExpectedPriceBatchForbidden() *GetFeaturedOfferExpectedPriceBatchForbidden {
	return &GetFeaturedOfferExpectedPriceBatchForbidden{}
}

/*
GetFeaturedOfferExpectedPriceBatchForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetFeaturedOfferExpectedPriceBatchForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch forbidden response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch forbidden response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch forbidden response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get featured offer expected price batch forbidden response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get featured offer expected price batch forbidden response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFeaturedOfferExpectedPriceBatchForbidden) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchForbidden  %+v", 403, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchForbidden) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchForbidden  %+v", 403, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchForbidden) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchNotFound creates a GetFeaturedOfferExpectedPriceBatchNotFound with default headers values
func NewGetFeaturedOfferExpectedPriceBatchNotFound() *GetFeaturedOfferExpectedPriceBatchNotFound {
	return &GetFeaturedOfferExpectedPriceBatchNotFound{}
}

/*
GetFeaturedOfferExpectedPriceBatchNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetFeaturedOfferExpectedPriceBatchNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch not found response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch not found response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch not found response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get featured offer expected price batch not found response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get featured offer expected price batch not found response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFeaturedOfferExpectedPriceBatchNotFound) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchNotFound  %+v", 404, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchNotFound) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchNotFound  %+v", 404, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchNotFound) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchTooManyRequests creates a GetFeaturedOfferExpectedPriceBatchTooManyRequests with default headers values
func NewGetFeaturedOfferExpectedPriceBatchTooManyRequests() *GetFeaturedOfferExpectedPriceBatchTooManyRequests {
	return &GetFeaturedOfferExpectedPriceBatchTooManyRequests{}
}

/*
GetFeaturedOfferExpectedPriceBatchTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetFeaturedOfferExpectedPriceBatchTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch too many requests response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch too many requests response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch too many requests response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get featured offer expected price batch too many requests response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get featured offer expected price batch too many requests response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchInternalServerError creates a GetFeaturedOfferExpectedPriceBatchInternalServerError with default headers values
func NewGetFeaturedOfferExpectedPriceBatchInternalServerError() *GetFeaturedOfferExpectedPriceBatchInternalServerError {
	return &GetFeaturedOfferExpectedPriceBatchInternalServerError{}
}

/*
GetFeaturedOfferExpectedPriceBatchInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetFeaturedOfferExpectedPriceBatchInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch internal server error response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch internal server error response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch internal server error response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get featured offer expected price batch internal server error response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get featured offer expected price batch internal server error response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeaturedOfferExpectedPriceBatchServiceUnavailable creates a GetFeaturedOfferExpectedPriceBatchServiceUnavailable with default headers values
func NewGetFeaturedOfferExpectedPriceBatchServiceUnavailable() *GetFeaturedOfferExpectedPriceBatchServiceUnavailable {
	return &GetFeaturedOfferExpectedPriceBatchServiceUnavailable{}
}

/*
GetFeaturedOfferExpectedPriceBatchServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetFeaturedOfferExpectedPriceBatchServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get featured offer expected price batch service unavailable response has a 2xx status code
func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get featured offer expected price batch service unavailable response has a 3xx status code
func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get featured offer expected price batch service unavailable response has a 4xx status code
func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get featured offer expected price batch service unavailable response has a 5xx status code
func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get featured offer expected price batch service unavailable response a status code equal to that given
func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice][%d] getFeaturedOfferExpectedPriceBatchServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetFeaturedOfferExpectedPriceBatchServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
