// Code generated by go-swagger; DO NOT EDIT.

package product_pricing

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/productPricing_2022-05-01/product_pricing_2022_05_01_models"
)

// GetCompetitiveSummaryReader is a Reader for the GetCompetitiveSummary structure.
type GetCompetitiveSummaryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCompetitiveSummaryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCompetitiveSummaryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetCompetitiveSummaryBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetCompetitiveSummaryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCompetitiveSummaryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetCompetitiveSummaryTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetCompetitiveSummaryInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetCompetitiveSummaryServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetCompetitiveSummaryOK creates a GetCompetitiveSummaryOK with default headers values
func NewGetCompetitiveSummaryOK() *GetCompetitiveSummaryOK {
	return &GetCompetitiveSummaryOK{}
}

/*
GetCompetitiveSummaryOK describes a response with status code 200, with default header values.

Success.
*/
type GetCompetitiveSummaryOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.CompetitiveSummaryBatchResponse
}

// IsSuccess returns true when this get competitive summary o k response has a 2xx status code
func (o *GetCompetitiveSummaryOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get competitive summary o k response has a 3xx status code
func (o *GetCompetitiveSummaryOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary o k response has a 4xx status code
func (o *GetCompetitiveSummaryOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get competitive summary o k response has a 5xx status code
func (o *GetCompetitiveSummaryOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive summary o k response a status code equal to that given
func (o *GetCompetitiveSummaryOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetCompetitiveSummaryOK) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryOK  %+v", 200, o.Payload)
}

func (o *GetCompetitiveSummaryOK) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryOK  %+v", 200, o.Payload)
}

func (o *GetCompetitiveSummaryOK) GetPayload() *product_pricing_2022_05_01_models.CompetitiveSummaryBatchResponse {
	return o.Payload
}

func (o *GetCompetitiveSummaryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.CompetitiveSummaryBatchResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitiveSummaryBadRequest creates a GetCompetitiveSummaryBadRequest with default headers values
func NewGetCompetitiveSummaryBadRequest() *GetCompetitiveSummaryBadRequest {
	return &GetCompetitiveSummaryBadRequest{}
}

/*
GetCompetitiveSummaryBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetCompetitiveSummaryBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get competitive summary bad request response has a 2xx status code
func (o *GetCompetitiveSummaryBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive summary bad request response has a 3xx status code
func (o *GetCompetitiveSummaryBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary bad request response has a 4xx status code
func (o *GetCompetitiveSummaryBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive summary bad request response has a 5xx status code
func (o *GetCompetitiveSummaryBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive summary bad request response a status code equal to that given
func (o *GetCompetitiveSummaryBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetCompetitiveSummaryBadRequest) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryBadRequest  %+v", 400, o.Payload)
}

func (o *GetCompetitiveSummaryBadRequest) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryBadRequest  %+v", 400, o.Payload)
}

func (o *GetCompetitiveSummaryBadRequest) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetCompetitiveSummaryBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitiveSummaryForbidden creates a GetCompetitiveSummaryForbidden with default headers values
func NewGetCompetitiveSummaryForbidden() *GetCompetitiveSummaryForbidden {
	return &GetCompetitiveSummaryForbidden{}
}

/*
GetCompetitiveSummaryForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetCompetitiveSummaryForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get competitive summary forbidden response has a 2xx status code
func (o *GetCompetitiveSummaryForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive summary forbidden response has a 3xx status code
func (o *GetCompetitiveSummaryForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary forbidden response has a 4xx status code
func (o *GetCompetitiveSummaryForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive summary forbidden response has a 5xx status code
func (o *GetCompetitiveSummaryForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive summary forbidden response a status code equal to that given
func (o *GetCompetitiveSummaryForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetCompetitiveSummaryForbidden) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryForbidden  %+v", 403, o.Payload)
}

func (o *GetCompetitiveSummaryForbidden) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryForbidden  %+v", 403, o.Payload)
}

func (o *GetCompetitiveSummaryForbidden) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetCompetitiveSummaryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitiveSummaryNotFound creates a GetCompetitiveSummaryNotFound with default headers values
func NewGetCompetitiveSummaryNotFound() *GetCompetitiveSummaryNotFound {
	return &GetCompetitiveSummaryNotFound{}
}

/*
GetCompetitiveSummaryNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetCompetitiveSummaryNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get competitive summary not found response has a 2xx status code
func (o *GetCompetitiveSummaryNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive summary not found response has a 3xx status code
func (o *GetCompetitiveSummaryNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary not found response has a 4xx status code
func (o *GetCompetitiveSummaryNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive summary not found response has a 5xx status code
func (o *GetCompetitiveSummaryNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive summary not found response a status code equal to that given
func (o *GetCompetitiveSummaryNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetCompetitiveSummaryNotFound) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryNotFound  %+v", 404, o.Payload)
}

func (o *GetCompetitiveSummaryNotFound) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryNotFound  %+v", 404, o.Payload)
}

func (o *GetCompetitiveSummaryNotFound) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetCompetitiveSummaryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitiveSummaryTooManyRequests creates a GetCompetitiveSummaryTooManyRequests with default headers values
func NewGetCompetitiveSummaryTooManyRequests() *GetCompetitiveSummaryTooManyRequests {
	return &GetCompetitiveSummaryTooManyRequests{}
}

/*
GetCompetitiveSummaryTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetCompetitiveSummaryTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get competitive summary too many requests response has a 2xx status code
func (o *GetCompetitiveSummaryTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive summary too many requests response has a 3xx status code
func (o *GetCompetitiveSummaryTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary too many requests response has a 4xx status code
func (o *GetCompetitiveSummaryTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get competitive summary too many requests response has a 5xx status code
func (o *GetCompetitiveSummaryTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get competitive summary too many requests response a status code equal to that given
func (o *GetCompetitiveSummaryTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetCompetitiveSummaryTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCompetitiveSummaryTooManyRequests) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetCompetitiveSummaryTooManyRequests) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetCompetitiveSummaryTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitiveSummaryInternalServerError creates a GetCompetitiveSummaryInternalServerError with default headers values
func NewGetCompetitiveSummaryInternalServerError() *GetCompetitiveSummaryInternalServerError {
	return &GetCompetitiveSummaryInternalServerError{}
}

/*
GetCompetitiveSummaryInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetCompetitiveSummaryInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get competitive summary internal server error response has a 2xx status code
func (o *GetCompetitiveSummaryInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive summary internal server error response has a 3xx status code
func (o *GetCompetitiveSummaryInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary internal server error response has a 4xx status code
func (o *GetCompetitiveSummaryInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get competitive summary internal server error response has a 5xx status code
func (o *GetCompetitiveSummaryInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get competitive summary internal server error response a status code equal to that given
func (o *GetCompetitiveSummaryInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetCompetitiveSummaryInternalServerError) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCompetitiveSummaryInternalServerError) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryInternalServerError  %+v", 500, o.Payload)
}

func (o *GetCompetitiveSummaryInternalServerError) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetCompetitiveSummaryInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCompetitiveSummaryServiceUnavailable creates a GetCompetitiveSummaryServiceUnavailable with default headers values
func NewGetCompetitiveSummaryServiceUnavailable() *GetCompetitiveSummaryServiceUnavailable {
	return &GetCompetitiveSummaryServiceUnavailable{}
}

/*
GetCompetitiveSummaryServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetCompetitiveSummaryServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_pricing_2022_05_01_models.Errors
}

// IsSuccess returns true when this get competitive summary service unavailable response has a 2xx status code
func (o *GetCompetitiveSummaryServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get competitive summary service unavailable response has a 3xx status code
func (o *GetCompetitiveSummaryServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get competitive summary service unavailable response has a 4xx status code
func (o *GetCompetitiveSummaryServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get competitive summary service unavailable response has a 5xx status code
func (o *GetCompetitiveSummaryServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get competitive summary service unavailable response a status code equal to that given
func (o *GetCompetitiveSummaryServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetCompetitiveSummaryServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCompetitiveSummaryServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /batches/products/pricing/2022-05-01/items/competitiveSummary][%d] getCompetitiveSummaryServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetCompetitiveSummaryServiceUnavailable) GetPayload() *product_pricing_2022_05_01_models.Errors {
	return o.Payload
}

func (o *GetCompetitiveSummaryServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_pricing_2022_05_01_models.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
