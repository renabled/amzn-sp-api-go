// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Price Schema for item's price information, including listing price, shipping price, and Amazon points.
//
// swagger:model Price
type Price struct {

	// The listing price of the item excluding any promotions.
	// Required: true
	ListingPrice *MoneyType `json:"listingPrice"`

	// The number of Amazon Points offered with the purchase of an item, and their monetary value.
	Points *Points `json:"points,omitempty"`

	// The shipping cost of the product. Note that the shipping cost is not always available.
	ShippingPrice *MoneyType `json:"shippingPrice,omitempty"`
}

// Validate validates this price
func (m *Price) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListingPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Price) validateListingPrice(formats strfmt.Registry) error {

	if err := validate.Required("listingPrice", "body", m.ListingPrice); err != nil {
		return err
	}

	if m.ListingPrice != nil {
		if err := m.ListingPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listingPrice")
			}
			return err
		}
	}

	return nil
}

func (m *Price) validatePoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Points) { // not required
		return nil
	}

	if m.Points != nil {
		if err := m.Points.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("points")
			}
			return err
		}
	}

	return nil
}

func (m *Price) validateShippingPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingPrice) { // not required
		return nil
	}

	if m.ShippingPrice != nil {
		if err := m.ShippingPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingPrice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this price based on the context it is used
func (m *Price) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateListingPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Price) contextValidateListingPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ListingPrice != nil {
		if err := m.ListingPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listingPrice")
			}
			return err
		}
	}

	return nil
}

func (m *Price) contextValidatePoints(ctx context.Context, formats strfmt.Registry) error {

	if m.Points != nil {
		if err := m.Points.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("points")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("points")
			}
			return err
		}
	}

	return nil
}

func (m *Price) contextValidateShippingPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingPrice != nil {
		if err := m.ShippingPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shippingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shippingPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Price) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Price) UnmarshalBinary(b []byte) error {
	var res Price
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
