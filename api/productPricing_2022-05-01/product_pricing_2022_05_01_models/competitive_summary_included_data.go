// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CompetitiveSummaryIncludedData The supported types of data in the `getCompetitiveSummary` API.
//
// swagger:model CompetitiveSummaryIncludedData
type CompetitiveSummaryIncludedData string

func NewCompetitiveSummaryIncludedData(value CompetitiveSummaryIncludedData) *CompetitiveSummaryIncludedData {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CompetitiveSummaryIncludedData.
func (m CompetitiveSummaryIncludedData) Pointer() *CompetitiveSummaryIncludedData {
	return &m
}

const (

	// CompetitiveSummaryIncludedDataFeaturedBuyingOptions captures enum value "featuredBuyingOptions"
	CompetitiveSummaryIncludedDataFeaturedBuyingOptions CompetitiveSummaryIncludedData = "featuredBuyingOptions"

	// CompetitiveSummaryIncludedDataReferencePrices captures enum value "referencePrices"
	CompetitiveSummaryIncludedDataReferencePrices CompetitiveSummaryIncludedData = "referencePrices"

	// CompetitiveSummaryIncludedDataLowestPricedOffers captures enum value "lowestPricedOffers"
	CompetitiveSummaryIncludedDataLowestPricedOffers CompetitiveSummaryIncludedData = "lowestPricedOffers"
)

// for schema
var competitiveSummaryIncludedDataEnum []interface{}

func init() {
	var res []CompetitiveSummaryIncludedData
	if err := json.Unmarshal([]byte(`["featuredBuyingOptions","referencePrices","lowestPricedOffers"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		competitiveSummaryIncludedDataEnum = append(competitiveSummaryIncludedDataEnum, v)
	}
}

func (m CompetitiveSummaryIncludedData) validateCompetitiveSummaryIncludedDataEnum(path, location string, value CompetitiveSummaryIncludedData) error {
	if err := validate.EnumCase(path, location, value, competitiveSummaryIncludedDataEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this competitive summary included data
func (m CompetitiveSummaryIncludedData) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCompetitiveSummaryIncludedDataEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this competitive summary included data based on context it is used
func (m CompetitiveSummaryIncludedData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
