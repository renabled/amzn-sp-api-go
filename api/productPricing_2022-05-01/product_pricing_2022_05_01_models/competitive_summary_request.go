// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompetitiveSummaryRequest An individual `competitiveSummary` request for an ASIN and `marketplaceId`.
//
// swagger:model CompetitiveSummaryRequest
type CompetitiveSummaryRequest struct {

	// The Amazon identifier for the item.
	// Required: true
	Asin *Asin `json:"asin"`

	// The list of requested competitive pricing data for the product.
	// Required: true
	// Min Items: 1
	IncludedData []CompetitiveSummaryIncludedData `json:"includedData"`

	// The list of `lowestPricedOffersInput` parameters used to build the `lowestPricedOffers` in the response. This attribute is valid only if `lowestPricedOffers` is requested in `includedData`.
	// Max Items: 5
	// Min Items: 0
	LowestPricedOffersInputs []*LowestPricedOffersInput `json:"lowestPricedOffersInputs"`

	// A marketplace identifier.
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`

	// HTTP method type
	// Required: true
	Method *HTTPMethod `json:"method"`

	// The URI associated with the individual APIs being called as part of the batch request. For `getCompetitiveSummary`, this should be `/products/pricing/2022-05-01/items/competitiveSummary`.
	// Required: true
	URI *HTTPURI `json:"uri"`
}

// Validate validates this competitive summary request
func (m *CompetitiveSummaryRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludedData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowestPricedOffersInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompetitiveSummaryRequest) validateAsin(formats strfmt.Registry) error {

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if m.Asin != nil {
		if err := m.Asin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryRequest) validateIncludedData(formats strfmt.Registry) error {

	if err := validate.Required("includedData", "body", m.IncludedData); err != nil {
		return err
	}

	iIncludedDataSize := int64(len(m.IncludedData))

	if err := validate.MinItems("includedData", "body", iIncludedDataSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.IncludedData); i++ {

		if err := m.IncludedData[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includedData" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includedData" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CompetitiveSummaryRequest) validateLowestPricedOffersInputs(formats strfmt.Registry) error {
	if swag.IsZero(m.LowestPricedOffersInputs) { // not required
		return nil
	}

	iLowestPricedOffersInputsSize := int64(len(m.LowestPricedOffersInputs))

	if err := validate.MinItems("lowestPricedOffersInputs", "body", iLowestPricedOffersInputsSize, 0); err != nil {
		return err
	}

	if err := validate.MaxItems("lowestPricedOffersInputs", "body", iLowestPricedOffersInputsSize, 5); err != nil {
		return err
	}

	for i := 0; i < len(m.LowestPricedOffersInputs); i++ {
		if swag.IsZero(m.LowestPricedOffersInputs[i]) { // not required
			continue
		}

		if m.LowestPricedOffersInputs[i] != nil {
			if err := m.LowestPricedOffersInputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lowestPricedOffersInputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lowestPricedOffersInputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompetitiveSummaryRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryRequest) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	if m.Method != nil {
		if err := m.Method.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("method")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryRequest) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	if m.URI != nil {
		if err := m.URI.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uri")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uri")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this competitive summary request based on the context it is used
func (m *CompetitiveSummaryRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncludedData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLowestPricedOffersInputs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateURI(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompetitiveSummaryRequest) contextValidateAsin(ctx context.Context, formats strfmt.Registry) error {

	if m.Asin != nil {
		if err := m.Asin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryRequest) contextValidateIncludedData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.IncludedData); i++ {

		if err := m.IncludedData[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("includedData" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("includedData" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *CompetitiveSummaryRequest) contextValidateLowestPricedOffersInputs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LowestPricedOffersInputs); i++ {

		if m.LowestPricedOffersInputs[i] != nil {
			if err := m.LowestPricedOffersInputs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lowestPricedOffersInputs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lowestPricedOffersInputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompetitiveSummaryRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryRequest) contextValidateMethod(ctx context.Context, formats strfmt.Registry) error {

	if m.Method != nil {
		if err := m.Method.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("method")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("method")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryRequest) contextValidateURI(ctx context.Context, formats strfmt.Registry) error {

	if m.URI != nil {
		if err := m.URI.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uri")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("uri")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompetitiveSummaryRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompetitiveSummaryRequest) UnmarshalBinary(b []byte) error {
	var res CompetitiveSummaryRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
