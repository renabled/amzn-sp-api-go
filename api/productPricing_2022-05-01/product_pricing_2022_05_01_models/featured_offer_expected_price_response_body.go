// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeaturedOfferExpectedPriceResponseBody The featured offer expected price response data for a requested SKU.
//
// swagger:model FeaturedOfferExpectedPriceResponseBody
type FeaturedOfferExpectedPriceResponseBody struct {

	// The errors that occurred if the operation was not successful (HTTP status code non-200).
	Errors ErrorList `json:"errors,omitempty"`

	// The featured offer expected price results for the requested target offer.
	FeaturedOfferExpectedPriceResults FeaturedOfferExpectedPriceResultList `json:"featuredOfferExpectedPriceResults,omitempty"`

	// Metadata that identifies the target offer for which the featured offer expected price result data was computed.
	// Required: true
	OfferIdentifier *OfferIdentifier `json:"offerIdentifier"`
}

// Validate validates this featured offer expected price response body
func (m *FeaturedOfferExpectedPriceResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeaturedOfferExpectedPriceResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeaturedOfferExpectedPriceResponseBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if err := m.Errors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResponseBody) validateFeaturedOfferExpectedPriceResults(formats strfmt.Registry) error {
	if swag.IsZero(m.FeaturedOfferExpectedPriceResults) { // not required
		return nil
	}

	if err := m.FeaturedOfferExpectedPriceResults.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("featuredOfferExpectedPriceResults")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("featuredOfferExpectedPriceResults")
		}
		return err
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResponseBody) validateOfferIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("offerIdentifier", "body", m.OfferIdentifier); err != nil {
		return err
	}

	if m.OfferIdentifier != nil {
		if err := m.OfferIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offerIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offerIdentifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this featured offer expected price response body based on the context it is used
func (m *FeaturedOfferExpectedPriceResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeaturedOfferExpectedPriceResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOfferIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeaturedOfferExpectedPriceResponseBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Errors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResponseBody) contextValidateFeaturedOfferExpectedPriceResults(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeaturedOfferExpectedPriceResults.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("featuredOfferExpectedPriceResults")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("featuredOfferExpectedPriceResults")
		}
		return err
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResponseBody) contextValidateOfferIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.OfferIdentifier != nil {
		if err := m.OfferIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("offerIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("offerIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeaturedOfferExpectedPriceResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeaturedOfferExpectedPriceResponseBody) UnmarshalBinary(b []byte) error {
	var res FeaturedOfferExpectedPriceResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
