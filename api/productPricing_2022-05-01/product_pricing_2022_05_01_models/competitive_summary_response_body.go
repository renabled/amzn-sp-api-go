// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CompetitiveSummaryResponseBody The `competitiveSummaryResponse` body for a requested ASIN and `marketplaceId`.
//
// swagger:model CompetitiveSummaryResponseBody
type CompetitiveSummaryResponseBody struct {

	// The Amazon identifier for the item.
	// Required: true
	Asin *Asin `json:"asin"`

	// A list of errors
	Errors ErrorList `json:"errors,omitempty"`

	// A list of featured buying options for the given ASIN `marketplaceId` combination.
	FeaturedBuyingOptions []*FeaturedBuyingOption `json:"featuredBuyingOptions"`

	// A list of the lowest priced offers for the given ASIN `marketplaceId` combination.
	LowestPricedOffers []*LowestPricedOffer `json:"lowestPricedOffers"`

	// A marketplace identifier.
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`

	// A list of reference prices for the given ASIN `marketplaceId` combination.
	ReferencePrices []*ReferencePrice `json:"referencePrices"`
}

// Validate validates this competitive summary response body
func (m *CompetitiveSummaryResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeaturedBuyingOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLowestPricedOffers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReferencePrices(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompetitiveSummaryResponseBody) validateAsin(formats strfmt.Registry) error {

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if m.Asin != nil {
		if err := m.Asin.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if err := m.Errors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) validateFeaturedBuyingOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.FeaturedBuyingOptions) { // not required
		return nil
	}

	for i := 0; i < len(m.FeaturedBuyingOptions); i++ {
		if swag.IsZero(m.FeaturedBuyingOptions[i]) { // not required
			continue
		}

		if m.FeaturedBuyingOptions[i] != nil {
			if err := m.FeaturedBuyingOptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featuredBuyingOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featuredBuyingOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) validateLowestPricedOffers(formats strfmt.Registry) error {
	if swag.IsZero(m.LowestPricedOffers) { // not required
		return nil
	}

	for i := 0; i < len(m.LowestPricedOffers); i++ {
		if swag.IsZero(m.LowestPricedOffers[i]) { // not required
			continue
		}

		if m.LowestPricedOffers[i] != nil {
			if err := m.LowestPricedOffers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lowestPricedOffers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lowestPricedOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) validateReferencePrices(formats strfmt.Registry) error {
	if swag.IsZero(m.ReferencePrices) { // not required
		return nil
	}

	for i := 0; i < len(m.ReferencePrices); i++ {
		if swag.IsZero(m.ReferencePrices[i]) { // not required
			continue
		}

		if m.ReferencePrices[i] != nil {
			if err := m.ReferencePrices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencePrices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencePrices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this competitive summary response body based on the context it is used
func (m *CompetitiveSummaryResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAsin(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeaturedBuyingOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLowestPricedOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReferencePrices(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CompetitiveSummaryResponseBody) contextValidateAsin(ctx context.Context, formats strfmt.Registry) error {

	if m.Asin != nil {
		if err := m.Asin.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("asin")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("asin")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Errors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) contextValidateFeaturedBuyingOptions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FeaturedBuyingOptions); i++ {

		if m.FeaturedBuyingOptions[i] != nil {
			if err := m.FeaturedBuyingOptions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("featuredBuyingOptions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("featuredBuyingOptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) contextValidateLowestPricedOffers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.LowestPricedOffers); i++ {

		if m.LowestPricedOffers[i] != nil {
			if err := m.LowestPricedOffers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("lowestPricedOffers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("lowestPricedOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CompetitiveSummaryResponseBody) contextValidateReferencePrices(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ReferencePrices); i++ {

		if m.ReferencePrices[i] != nil {
			if err := m.ReferencePrices[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("referencePrices" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("referencePrices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CompetitiveSummaryResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CompetitiveSummaryResponseBody) UnmarshalBinary(b []byte) error {
	var res CompetitiveSummaryResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
