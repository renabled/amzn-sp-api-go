// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LowestPricedOffer The lowest priced offer for the requested item condition and offer type.
//
// swagger:model LowestPricedOffer
type LowestPricedOffer struct {

	// The filtering criteria used to retrieve this lowest-priced offers correspond to the `lowestPricedOffersInputs` received in the request.
	// Required: true
	LowestPricedOffersInput *LowestPricedOffersInput `json:"lowestPricedOffersInput"`

	// A list of up to 20 lowest priced offers that match the criteria specified in the `lowestPricedOffersInput` parameter.
	// Required: true
	// Max Items: 20
	// Min Items: 1
	Offers []*Offer `json:"offers"`
}

// Validate validates this lowest priced offer
func (m *LowestPricedOffer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLowestPricedOffersInput(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LowestPricedOffer) validateLowestPricedOffersInput(formats strfmt.Registry) error {

	if err := validate.Required("lowestPricedOffersInput", "body", m.LowestPricedOffersInput); err != nil {
		return err
	}

	if m.LowestPricedOffersInput != nil {
		if err := m.LowestPricedOffersInput.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lowestPricedOffersInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lowestPricedOffersInput")
			}
			return err
		}
	}

	return nil
}

func (m *LowestPricedOffer) validateOffers(formats strfmt.Registry) error {

	if err := validate.Required("offers", "body", m.Offers); err != nil {
		return err
	}

	iOffersSize := int64(len(m.Offers))

	if err := validate.MinItems("offers", "body", iOffersSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("offers", "body", iOffersSize, 20); err != nil {
		return err
	}

	for i := 0; i < len(m.Offers); i++ {
		if swag.IsZero(m.Offers[i]) { // not required
			continue
		}

		if m.Offers[i] != nil {
			if err := m.Offers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("offers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this lowest priced offer based on the context it is used
func (m *LowestPricedOffer) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLowestPricedOffersInput(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LowestPricedOffer) contextValidateLowestPricedOffersInput(ctx context.Context, formats strfmt.Registry) error {

	if m.LowestPricedOffersInput != nil {
		if err := m.LowestPricedOffersInput.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lowestPricedOffersInput")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lowestPricedOffersInput")
			}
			return err
		}
	}

	return nil
}

func (m *LowestPricedOffer) contextValidateOffers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Offers); i++ {

		if m.Offers[i] != nil {
			if err := m.Offers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("offers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("offers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LowestPricedOffer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LowestPricedOffer) UnmarshalBinary(b []byte) error {
	var res LowestPricedOffer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
