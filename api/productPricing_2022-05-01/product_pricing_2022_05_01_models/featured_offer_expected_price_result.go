// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeaturedOfferExpectedPriceResult The featured offer expected price result data for the requested offer.
//
// swagger:model FeaturedOfferExpectedPriceResult
type FeaturedOfferExpectedPriceResult struct {

	// The offer that will likely be the featured offer if the target offer is priced above its featured offer expected price. If the target offer is currently the featured offer, this property will be different than currentFeaturedOffer.
	CompetingFeaturedOffer *FeaturedOffer `json:"competingFeaturedOffer,omitempty"`

	// The offer that is currently the featured offer. If the target offer is not currently featured, this property will be equal to competingFeaturedOffer.
	CurrentFeaturedOffer *FeaturedOffer `json:"currentFeaturedOffer,omitempty"`

	// featured offer expected price
	FeaturedOfferExpectedPrice *FeaturedOfferExpectedPrice `json:"featuredOfferExpectedPrice,omitempty"`

	// The status of the featured offer expected price computation. Possible values include VALID_FOEP, NO_COMPETING_OFFER, OFFER_NOT_ELIGIBLE, OFFER_NOT_FOUND.
	// Required: true
	ResultStatus *string `json:"resultStatus"`
}

// Validate validates this featured offer expected price result
func (m *FeaturedOfferExpectedPriceResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompetingFeaturedOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentFeaturedOffer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeaturedOfferExpectedPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeaturedOfferExpectedPriceResult) validateCompetingFeaturedOffer(formats strfmt.Registry) error {
	if swag.IsZero(m.CompetingFeaturedOffer) { // not required
		return nil
	}

	if m.CompetingFeaturedOffer != nil {
		if err := m.CompetingFeaturedOffer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("competingFeaturedOffer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("competingFeaturedOffer")
			}
			return err
		}
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResult) validateCurrentFeaturedOffer(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentFeaturedOffer) { // not required
		return nil
	}

	if m.CurrentFeaturedOffer != nil {
		if err := m.CurrentFeaturedOffer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentFeaturedOffer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentFeaturedOffer")
			}
			return err
		}
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResult) validateFeaturedOfferExpectedPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.FeaturedOfferExpectedPrice) { // not required
		return nil
	}

	if m.FeaturedOfferExpectedPrice != nil {
		if err := m.FeaturedOfferExpectedPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featuredOfferExpectedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featuredOfferExpectedPrice")
			}
			return err
		}
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResult) validateResultStatus(formats strfmt.Registry) error {

	if err := validate.Required("resultStatus", "body", m.ResultStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this featured offer expected price result based on the context it is used
func (m *FeaturedOfferExpectedPriceResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCompetingFeaturedOffer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentFeaturedOffer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeaturedOfferExpectedPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeaturedOfferExpectedPriceResult) contextValidateCompetingFeaturedOffer(ctx context.Context, formats strfmt.Registry) error {

	if m.CompetingFeaturedOffer != nil {
		if err := m.CompetingFeaturedOffer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("competingFeaturedOffer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("competingFeaturedOffer")
			}
			return err
		}
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResult) contextValidateCurrentFeaturedOffer(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentFeaturedOffer != nil {
		if err := m.CurrentFeaturedOffer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentFeaturedOffer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentFeaturedOffer")
			}
			return err
		}
	}

	return nil
}

func (m *FeaturedOfferExpectedPriceResult) contextValidateFeaturedOfferExpectedPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.FeaturedOfferExpectedPrice != nil {
		if err := m.FeaturedOfferExpectedPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("featuredOfferExpectedPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("featuredOfferExpectedPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeaturedOfferExpectedPriceResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeaturedOfferExpectedPriceResult) UnmarshalBinary(b []byte) error {
	var res FeaturedOfferExpectedPriceResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
