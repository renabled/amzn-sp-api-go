// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LowestPricedOffersInput The input required for building the `LowestPricedOffers` data in the response.
//
// swagger:model LowestPricedOffersInput
type LowestPricedOffersInput struct {

	// The condition of the item offer that was requested for the `LowestPricedOffers`. The default `itemCondition` is `New`.
	// Required: true
	ItemCondition *Condition `json:"itemCondition"`

	// The type of offers requested for the `LowestPricedOffers`. The `offerType` options are `Consumer` or `Business`. The default `offerType` is `Consumer`.
	// Required: true
	// Enum: [CONSUMER]
	OfferType *string `json:"offerType"`
}

// Validate validates this lowest priced offers input
func (m *LowestPricedOffersInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LowestPricedOffersInput) validateItemCondition(formats strfmt.Registry) error {

	if err := validate.Required("itemCondition", "body", m.ItemCondition); err != nil {
		return err
	}

	if err := validate.Required("itemCondition", "body", m.ItemCondition); err != nil {
		return err
	}

	if m.ItemCondition != nil {
		if err := m.ItemCondition.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemCondition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemCondition")
			}
			return err
		}
	}

	return nil
}

var lowestPricedOffersInputTypeOfferTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONSUMER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		lowestPricedOffersInputTypeOfferTypePropEnum = append(lowestPricedOffersInputTypeOfferTypePropEnum, v)
	}
}

const (

	// LowestPricedOffersInputOfferTypeCONSUMER captures enum value "CONSUMER"
	LowestPricedOffersInputOfferTypeCONSUMER string = "CONSUMER"
)

// prop value enum
func (m *LowestPricedOffersInput) validateOfferTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, lowestPricedOffersInputTypeOfferTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LowestPricedOffersInput) validateOfferType(formats strfmt.Registry) error {

	if err := validate.Required("offerType", "body", m.OfferType); err != nil {
		return err
	}

	// value enum
	if err := m.validateOfferTypeEnum("offerType", "body", *m.OfferType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this lowest priced offers input based on the context it is used
func (m *LowestPricedOffersInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemCondition(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LowestPricedOffersInput) contextValidateItemCondition(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemCondition != nil {
		if err := m.ItemCondition.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemCondition")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemCondition")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LowestPricedOffersInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LowestPricedOffersInput) UnmarshalBinary(b []byte) error {
	var res LowestPricedOffersInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
