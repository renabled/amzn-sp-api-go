// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrimeDetails Amazon Prime details.
//
// swagger:model PrimeDetails
type PrimeDetails struct {

	// Indicates whether the offer is an Amazon Prime offer.
	// Required: true
	// Enum: [NATIONAL REGIONAL NONE]
	Eligibility *string `json:"eligibility"`
}

// Validate validates this prime details
func (m *PrimeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEligibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var primeDetailsTypeEligibilityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NATIONAL","REGIONAL","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		primeDetailsTypeEligibilityPropEnum = append(primeDetailsTypeEligibilityPropEnum, v)
	}
}

const (

	// PrimeDetailsEligibilityNATIONAL captures enum value "NATIONAL"
	PrimeDetailsEligibilityNATIONAL string = "NATIONAL"

	// PrimeDetailsEligibilityREGIONAL captures enum value "REGIONAL"
	PrimeDetailsEligibilityREGIONAL string = "REGIONAL"

	// PrimeDetailsEligibilityNONE captures enum value "NONE"
	PrimeDetailsEligibilityNONE string = "NONE"
)

// prop value enum
func (m *PrimeDetails) validateEligibilityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, primeDetailsTypeEligibilityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrimeDetails) validateEligibility(formats strfmt.Registry) error {

	if err := validate.Required("eligibility", "body", m.Eligibility); err != nil {
		return err
	}

	// value enum
	if err := m.validateEligibilityEnum("eligibility", "body", *m.Eligibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this prime details based on context it is used
func (m *PrimeDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PrimeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrimeDetails) UnmarshalBinary(b []byte) error {
	var res PrimeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
