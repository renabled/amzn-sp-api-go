// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeaturedBuyingOption Describes a featured buying option which includes a list of segmented featured offers for a particular item condition.
//
// swagger:model FeaturedBuyingOption
type FeaturedBuyingOption struct {

	// The buying option type of the featured offer. This field represents the buying options that a customer sees on the detail page. For example, B2B, Fresh, and Subscribe n Save. Currently supports `NEW`
	// Required: true
	// Enum: [New]
	BuyingOptionType *string `json:"buyingOptionType"`

	// A list of segmented featured offers for the current buying option type. A segment can be considered as a group of regional contexts that all have the same featured offer. A regional context is a combination of factors such as customer type, region or postal code and buying option.
	// Required: true
	// Min Items: 1
	SegmentedFeaturedOffers []*SegmentedFeaturedOffer `json:"segmentedFeaturedOffers"`
}

// Validate validates this featured buying option
func (m *FeaturedBuyingOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyingOptionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSegmentedFeaturedOffers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var featuredBuyingOptionTypeBuyingOptionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["New"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		featuredBuyingOptionTypeBuyingOptionTypePropEnum = append(featuredBuyingOptionTypeBuyingOptionTypePropEnum, v)
	}
}

const (

	// FeaturedBuyingOptionBuyingOptionTypeNew captures enum value "New"
	FeaturedBuyingOptionBuyingOptionTypeNew string = "New"
)

// prop value enum
func (m *FeaturedBuyingOption) validateBuyingOptionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, featuredBuyingOptionTypeBuyingOptionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FeaturedBuyingOption) validateBuyingOptionType(formats strfmt.Registry) error {

	if err := validate.Required("buyingOptionType", "body", m.BuyingOptionType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBuyingOptionTypeEnum("buyingOptionType", "body", *m.BuyingOptionType); err != nil {
		return err
	}

	return nil
}

func (m *FeaturedBuyingOption) validateSegmentedFeaturedOffers(formats strfmt.Registry) error {

	if err := validate.Required("segmentedFeaturedOffers", "body", m.SegmentedFeaturedOffers); err != nil {
		return err
	}

	iSegmentedFeaturedOffersSize := int64(len(m.SegmentedFeaturedOffers))

	if err := validate.MinItems("segmentedFeaturedOffers", "body", iSegmentedFeaturedOffersSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.SegmentedFeaturedOffers); i++ {
		if swag.IsZero(m.SegmentedFeaturedOffers[i]) { // not required
			continue
		}

		if m.SegmentedFeaturedOffers[i] != nil {
			if err := m.SegmentedFeaturedOffers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segmentedFeaturedOffers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("segmentedFeaturedOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this featured buying option based on the context it is used
func (m *FeaturedBuyingOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSegmentedFeaturedOffers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeaturedBuyingOption) contextValidateSegmentedFeaturedOffers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SegmentedFeaturedOffers); i++ {

		if m.SegmentedFeaturedOffers[i] != nil {
			if err := m.SegmentedFeaturedOffers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("segmentedFeaturedOffers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("segmentedFeaturedOffers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeaturedBuyingOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeaturedBuyingOption) UnmarshalBinary(b []byte) error {
	var res FeaturedBuyingOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
