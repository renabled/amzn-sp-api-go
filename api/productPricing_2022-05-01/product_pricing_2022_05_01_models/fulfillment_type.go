// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FulfillmentType Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
//
// swagger:model FulfillmentType
type FulfillmentType string

func NewFulfillmentType(value FulfillmentType) *FulfillmentType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FulfillmentType.
func (m FulfillmentType) Pointer() *FulfillmentType {
	return &m
}

const (

	// FulfillmentTypeAFN captures enum value "AFN"
	FulfillmentTypeAFN FulfillmentType = "AFN"

	// FulfillmentTypeMFN captures enum value "MFN"
	FulfillmentTypeMFN FulfillmentType = "MFN"
)

// for schema
var fulfillmentTypeEnum []interface{}

func init() {
	var res []FulfillmentType
	if err := json.Unmarshal([]byte(`["AFN","MFN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentTypeEnum = append(fulfillmentTypeEnum, v)
	}
}

func (m FulfillmentType) validateFulfillmentTypeEnum(path, location string, value FulfillmentType) error {
	if err := validate.EnumCase(path, location, value, fulfillmentTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fulfillment type
func (m FulfillmentType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFulfillmentTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fulfillment type based on context it is used
func (m FulfillmentType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
