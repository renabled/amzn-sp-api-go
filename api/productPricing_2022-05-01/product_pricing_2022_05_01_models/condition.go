// Code generated by go-swagger; DO NOT EDIT.

package product_pricing_2022_05_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Condition The condition of the item.
//
// swagger:model Condition
type Condition string

func NewCondition(value Condition) *Condition {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Condition.
func (m Condition) Pointer() *Condition {
	return &m
}

const (

	// ConditionNew captures enum value "New"
	ConditionNew Condition = "New"

	// ConditionUsed captures enum value "Used"
	ConditionUsed Condition = "Used"

	// ConditionCollectible captures enum value "Collectible"
	ConditionCollectible Condition = "Collectible"

	// ConditionRefurbished captures enum value "Refurbished"
	ConditionRefurbished Condition = "Refurbished"

	// ConditionClub captures enum value "Club"
	ConditionClub Condition = "Club"
)

// for schema
var conditionEnum []interface{}

func init() {
	var res []Condition
	if err := json.Unmarshal([]byte(`["New","Used","Collectible","Refurbished","Club"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		conditionEnum = append(conditionEnum, v)
	}
}

func (m Condition) validateConditionEnum(path, location string, value Condition) error {
	if err := validate.EnumCase(path, location, value, conditionEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this condition
func (m Condition) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateConditionEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this condition based on context it is used
func (m Condition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
