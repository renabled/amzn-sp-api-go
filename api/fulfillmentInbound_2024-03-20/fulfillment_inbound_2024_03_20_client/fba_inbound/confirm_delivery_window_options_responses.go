// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// ConfirmDeliveryWindowOptionsReader is a Reader for the ConfirmDeliveryWindowOptions structure.
type ConfirmDeliveryWindowOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmDeliveryWindowOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewConfirmDeliveryWindowOptionsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmDeliveryWindowOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmDeliveryWindowOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmDeliveryWindowOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmDeliveryWindowOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmDeliveryWindowOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmDeliveryWindowOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmDeliveryWindowOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmDeliveryWindowOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmDeliveryWindowOptionsAccepted creates a ConfirmDeliveryWindowOptionsAccepted with default headers values
func NewConfirmDeliveryWindowOptionsAccepted() *ConfirmDeliveryWindowOptionsAccepted {
	return &ConfirmDeliveryWindowOptionsAccepted{}
}

/*
ConfirmDeliveryWindowOptionsAccepted describes a response with status code 202, with default header values.

ConfirmDeliveryWindowOptions 202 response
*/
type ConfirmDeliveryWindowOptionsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ConfirmDeliveryWindowOptionsResponse
}

// IsSuccess returns true when this confirm delivery window options accepted response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm delivery window options accepted response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options accepted response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm delivery window options accepted response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options accepted response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ConfirmDeliveryWindowOptionsAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsAccepted  %+v", 202, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsAccepted  %+v", 202, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsAccepted) GetPayload() *fulfillment_inbound_2024_03_20_models.ConfirmDeliveryWindowOptionsResponse {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ConfirmDeliveryWindowOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsBadRequest creates a ConfirmDeliveryWindowOptionsBadRequest with default headers values
func NewConfirmDeliveryWindowOptionsBadRequest() *ConfirmDeliveryWindowOptionsBadRequest {
	return &ConfirmDeliveryWindowOptionsBadRequest{}
}

/*
ConfirmDeliveryWindowOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmDeliveryWindowOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options bad request response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options bad request response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options bad request response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm delivery window options bad request response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options bad request response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmDeliveryWindowOptionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsForbidden creates a ConfirmDeliveryWindowOptionsForbidden with default headers values
func NewConfirmDeliveryWindowOptionsForbidden() *ConfirmDeliveryWindowOptionsForbidden {
	return &ConfirmDeliveryWindowOptionsForbidden{}
}

/*
ConfirmDeliveryWindowOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmDeliveryWindowOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options forbidden response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options forbidden response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options forbidden response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm delivery window options forbidden response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options forbidden response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmDeliveryWindowOptionsForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsNotFound creates a ConfirmDeliveryWindowOptionsNotFound with default headers values
func NewConfirmDeliveryWindowOptionsNotFound() *ConfirmDeliveryWindowOptionsNotFound {
	return &ConfirmDeliveryWindowOptionsNotFound{}
}

/*
ConfirmDeliveryWindowOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmDeliveryWindowOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options not found response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options not found response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options not found response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm delivery window options not found response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options not found response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmDeliveryWindowOptionsNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsRequestEntityTooLarge creates a ConfirmDeliveryWindowOptionsRequestEntityTooLarge with default headers values
func NewConfirmDeliveryWindowOptionsRequestEntityTooLarge() *ConfirmDeliveryWindowOptionsRequestEntityTooLarge {
	return &ConfirmDeliveryWindowOptionsRequestEntityTooLarge{}
}

/*
ConfirmDeliveryWindowOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmDeliveryWindowOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options request entity too large response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options request entity too large response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options request entity too large response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm delivery window options request entity too large response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options request entity too large response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsUnsupportedMediaType creates a ConfirmDeliveryWindowOptionsUnsupportedMediaType with default headers values
func NewConfirmDeliveryWindowOptionsUnsupportedMediaType() *ConfirmDeliveryWindowOptionsUnsupportedMediaType {
	return &ConfirmDeliveryWindowOptionsUnsupportedMediaType{}
}

/*
ConfirmDeliveryWindowOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmDeliveryWindowOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options unsupported media type response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options unsupported media type response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options unsupported media type response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm delivery window options unsupported media type response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options unsupported media type response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsTooManyRequests creates a ConfirmDeliveryWindowOptionsTooManyRequests with default headers values
func NewConfirmDeliveryWindowOptionsTooManyRequests() *ConfirmDeliveryWindowOptionsTooManyRequests {
	return &ConfirmDeliveryWindowOptionsTooManyRequests{}
}

/*
ConfirmDeliveryWindowOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmDeliveryWindowOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options too many requests response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options too many requests response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options too many requests response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm delivery window options too many requests response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm delivery window options too many requests response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmDeliveryWindowOptionsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsInternalServerError creates a ConfirmDeliveryWindowOptionsInternalServerError with default headers values
func NewConfirmDeliveryWindowOptionsInternalServerError() *ConfirmDeliveryWindowOptionsInternalServerError {
	return &ConfirmDeliveryWindowOptionsInternalServerError{}
}

/*
ConfirmDeliveryWindowOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmDeliveryWindowOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options internal server error response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options internal server error response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options internal server error response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm delivery window options internal server error response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm delivery window options internal server error response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmDeliveryWindowOptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmDeliveryWindowOptionsServiceUnavailable creates a ConfirmDeliveryWindowOptionsServiceUnavailable with default headers values
func NewConfirmDeliveryWindowOptionsServiceUnavailable() *ConfirmDeliveryWindowOptionsServiceUnavailable {
	return &ConfirmDeliveryWindowOptionsServiceUnavailable{}
}

/*
ConfirmDeliveryWindowOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmDeliveryWindowOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm delivery window options service unavailable response has a 2xx status code
func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm delivery window options service unavailable response has a 3xx status code
func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm delivery window options service unavailable response has a 4xx status code
func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm delivery window options service unavailable response has a 5xx status code
func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm delivery window options service unavailable response a status code equal to that given
func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions/{deliveryWindowOptionId}/confirmation][%d] confirmDeliveryWindowOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmDeliveryWindowOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
