// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// GeneratePackingOptionsReader is a Reader for the GeneratePackingOptions structure.
type GeneratePackingOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GeneratePackingOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewGeneratePackingOptionsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGeneratePackingOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGeneratePackingOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGeneratePackingOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGeneratePackingOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGeneratePackingOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGeneratePackingOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGeneratePackingOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGeneratePackingOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGeneratePackingOptionsAccepted creates a GeneratePackingOptionsAccepted with default headers values
func NewGeneratePackingOptionsAccepted() *GeneratePackingOptionsAccepted {
	return &GeneratePackingOptionsAccepted{}
}

/*
GeneratePackingOptionsAccepted describes a response with status code 202, with default header values.

GeneratePackingOptions 202 response
*/
type GeneratePackingOptionsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.GeneratePackingOptionsResponse
}

// IsSuccess returns true when this generate packing options accepted response has a 2xx status code
func (o *GeneratePackingOptionsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this generate packing options accepted response has a 3xx status code
func (o *GeneratePackingOptionsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options accepted response has a 4xx status code
func (o *GeneratePackingOptionsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate packing options accepted response has a 5xx status code
func (o *GeneratePackingOptionsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options accepted response a status code equal to that given
func (o *GeneratePackingOptionsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *GeneratePackingOptionsAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsAccepted  %+v", 202, o.Payload)
}

func (o *GeneratePackingOptionsAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsAccepted  %+v", 202, o.Payload)
}

func (o *GeneratePackingOptionsAccepted) GetPayload() *fulfillment_inbound_2024_03_20_models.GeneratePackingOptionsResponse {
	return o.Payload
}

func (o *GeneratePackingOptionsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.GeneratePackingOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsBadRequest creates a GeneratePackingOptionsBadRequest with default headers values
func NewGeneratePackingOptionsBadRequest() *GeneratePackingOptionsBadRequest {
	return &GeneratePackingOptionsBadRequest{}
}

/*
GeneratePackingOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GeneratePackingOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options bad request response has a 2xx status code
func (o *GeneratePackingOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options bad request response has a 3xx status code
func (o *GeneratePackingOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options bad request response has a 4xx status code
func (o *GeneratePackingOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate packing options bad request response has a 5xx status code
func (o *GeneratePackingOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options bad request response a status code equal to that given
func (o *GeneratePackingOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GeneratePackingOptionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *GeneratePackingOptionsBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *GeneratePackingOptionsBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsForbidden creates a GeneratePackingOptionsForbidden with default headers values
func NewGeneratePackingOptionsForbidden() *GeneratePackingOptionsForbidden {
	return &GeneratePackingOptionsForbidden{}
}

/*
GeneratePackingOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GeneratePackingOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options forbidden response has a 2xx status code
func (o *GeneratePackingOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options forbidden response has a 3xx status code
func (o *GeneratePackingOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options forbidden response has a 4xx status code
func (o *GeneratePackingOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate packing options forbidden response has a 5xx status code
func (o *GeneratePackingOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options forbidden response a status code equal to that given
func (o *GeneratePackingOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GeneratePackingOptionsForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsForbidden  %+v", 403, o.Payload)
}

func (o *GeneratePackingOptionsForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsForbidden  %+v", 403, o.Payload)
}

func (o *GeneratePackingOptionsForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsNotFound creates a GeneratePackingOptionsNotFound with default headers values
func NewGeneratePackingOptionsNotFound() *GeneratePackingOptionsNotFound {
	return &GeneratePackingOptionsNotFound{}
}

/*
GeneratePackingOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GeneratePackingOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options not found response has a 2xx status code
func (o *GeneratePackingOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options not found response has a 3xx status code
func (o *GeneratePackingOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options not found response has a 4xx status code
func (o *GeneratePackingOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate packing options not found response has a 5xx status code
func (o *GeneratePackingOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options not found response a status code equal to that given
func (o *GeneratePackingOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GeneratePackingOptionsNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsNotFound  %+v", 404, o.Payload)
}

func (o *GeneratePackingOptionsNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsNotFound  %+v", 404, o.Payload)
}

func (o *GeneratePackingOptionsNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsRequestEntityTooLarge creates a GeneratePackingOptionsRequestEntityTooLarge with default headers values
func NewGeneratePackingOptionsRequestEntityTooLarge() *GeneratePackingOptionsRequestEntityTooLarge {
	return &GeneratePackingOptionsRequestEntityTooLarge{}
}

/*
GeneratePackingOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GeneratePackingOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options request entity too large response has a 2xx status code
func (o *GeneratePackingOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options request entity too large response has a 3xx status code
func (o *GeneratePackingOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options request entity too large response has a 4xx status code
func (o *GeneratePackingOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate packing options request entity too large response has a 5xx status code
func (o *GeneratePackingOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options request entity too large response a status code equal to that given
func (o *GeneratePackingOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GeneratePackingOptionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GeneratePackingOptionsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GeneratePackingOptionsRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsUnsupportedMediaType creates a GeneratePackingOptionsUnsupportedMediaType with default headers values
func NewGeneratePackingOptionsUnsupportedMediaType() *GeneratePackingOptionsUnsupportedMediaType {
	return &GeneratePackingOptionsUnsupportedMediaType{}
}

/*
GeneratePackingOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GeneratePackingOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options unsupported media type response has a 2xx status code
func (o *GeneratePackingOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options unsupported media type response has a 3xx status code
func (o *GeneratePackingOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options unsupported media type response has a 4xx status code
func (o *GeneratePackingOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate packing options unsupported media type response has a 5xx status code
func (o *GeneratePackingOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options unsupported media type response a status code equal to that given
func (o *GeneratePackingOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GeneratePackingOptionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GeneratePackingOptionsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GeneratePackingOptionsUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsTooManyRequests creates a GeneratePackingOptionsTooManyRequests with default headers values
func NewGeneratePackingOptionsTooManyRequests() *GeneratePackingOptionsTooManyRequests {
	return &GeneratePackingOptionsTooManyRequests{}
}

/*
GeneratePackingOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GeneratePackingOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options too many requests response has a 2xx status code
func (o *GeneratePackingOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options too many requests response has a 3xx status code
func (o *GeneratePackingOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options too many requests response has a 4xx status code
func (o *GeneratePackingOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate packing options too many requests response has a 5xx status code
func (o *GeneratePackingOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this generate packing options too many requests response a status code equal to that given
func (o *GeneratePackingOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GeneratePackingOptionsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GeneratePackingOptionsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GeneratePackingOptionsTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsInternalServerError creates a GeneratePackingOptionsInternalServerError with default headers values
func NewGeneratePackingOptionsInternalServerError() *GeneratePackingOptionsInternalServerError {
	return &GeneratePackingOptionsInternalServerError{}
}

/*
GeneratePackingOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GeneratePackingOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options internal server error response has a 2xx status code
func (o *GeneratePackingOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options internal server error response has a 3xx status code
func (o *GeneratePackingOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options internal server error response has a 4xx status code
func (o *GeneratePackingOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate packing options internal server error response has a 5xx status code
func (o *GeneratePackingOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this generate packing options internal server error response a status code equal to that given
func (o *GeneratePackingOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GeneratePackingOptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GeneratePackingOptionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GeneratePackingOptionsInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGeneratePackingOptionsServiceUnavailable creates a GeneratePackingOptionsServiceUnavailable with default headers values
func NewGeneratePackingOptionsServiceUnavailable() *GeneratePackingOptionsServiceUnavailable {
	return &GeneratePackingOptionsServiceUnavailable{}
}

/*
GeneratePackingOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GeneratePackingOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate packing options service unavailable response has a 2xx status code
func (o *GeneratePackingOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate packing options service unavailable response has a 3xx status code
func (o *GeneratePackingOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate packing options service unavailable response has a 4xx status code
func (o *GeneratePackingOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate packing options service unavailable response has a 5xx status code
func (o *GeneratePackingOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this generate packing options service unavailable response a status code equal to that given
func (o *GeneratePackingOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GeneratePackingOptionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GeneratePackingOptionsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/packingOptions][%d] generatePackingOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GeneratePackingOptionsServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GeneratePackingOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
