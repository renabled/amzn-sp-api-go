// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// UpdateInboundPlanNameReader is a Reader for the UpdateInboundPlanName structure.
type UpdateInboundPlanNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInboundPlanNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateInboundPlanNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateInboundPlanNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateInboundPlanNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInboundPlanNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateInboundPlanNameRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateInboundPlanNameUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateInboundPlanNameTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateInboundPlanNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateInboundPlanNameServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateInboundPlanNameNoContent creates a UpdateInboundPlanNameNoContent with default headers values
func NewUpdateInboundPlanNameNoContent() *UpdateInboundPlanNameNoContent {
	return &UpdateInboundPlanNameNoContent{}
}

/*
UpdateInboundPlanNameNoContent describes a response with status code 204, with default header values.

UpdateInboundPlanName 204 response
*/
type UpdateInboundPlanNameNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this update inbound plan name no content response has a 2xx status code
func (o *UpdateInboundPlanNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update inbound plan name no content response has a 3xx status code
func (o *UpdateInboundPlanNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name no content response has a 4xx status code
func (o *UpdateInboundPlanNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inbound plan name no content response has a 5xx status code
func (o *UpdateInboundPlanNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name no content response a status code equal to that given
func (o *UpdateInboundPlanNameNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateInboundPlanNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameNoContent ", 204)
}

func (o *UpdateInboundPlanNameNoContent) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameNoContent ", 204)
}

func (o *UpdateInboundPlanNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewUpdateInboundPlanNameBadRequest creates a UpdateInboundPlanNameBadRequest with default headers values
func NewUpdateInboundPlanNameBadRequest() *UpdateInboundPlanNameBadRequest {
	return &UpdateInboundPlanNameBadRequest{}
}

/*
UpdateInboundPlanNameBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateInboundPlanNameBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name bad request response has a 2xx status code
func (o *UpdateInboundPlanNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name bad request response has a 3xx status code
func (o *UpdateInboundPlanNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name bad request response has a 4xx status code
func (o *UpdateInboundPlanNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound plan name bad request response has a 5xx status code
func (o *UpdateInboundPlanNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name bad request response a status code equal to that given
func (o *UpdateInboundPlanNameBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateInboundPlanNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInboundPlanNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateInboundPlanNameBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameForbidden creates a UpdateInboundPlanNameForbidden with default headers values
func NewUpdateInboundPlanNameForbidden() *UpdateInboundPlanNameForbidden {
	return &UpdateInboundPlanNameForbidden{}
}

/*
UpdateInboundPlanNameForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateInboundPlanNameForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name forbidden response has a 2xx status code
func (o *UpdateInboundPlanNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name forbidden response has a 3xx status code
func (o *UpdateInboundPlanNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name forbidden response has a 4xx status code
func (o *UpdateInboundPlanNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound plan name forbidden response has a 5xx status code
func (o *UpdateInboundPlanNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name forbidden response a status code equal to that given
func (o *UpdateInboundPlanNameForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateInboundPlanNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInboundPlanNameForbidden) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInboundPlanNameForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameNotFound creates a UpdateInboundPlanNameNotFound with default headers values
func NewUpdateInboundPlanNameNotFound() *UpdateInboundPlanNameNotFound {
	return &UpdateInboundPlanNameNotFound{}
}

/*
UpdateInboundPlanNameNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateInboundPlanNameNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name not found response has a 2xx status code
func (o *UpdateInboundPlanNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name not found response has a 3xx status code
func (o *UpdateInboundPlanNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name not found response has a 4xx status code
func (o *UpdateInboundPlanNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound plan name not found response has a 5xx status code
func (o *UpdateInboundPlanNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name not found response a status code equal to that given
func (o *UpdateInboundPlanNameNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateInboundPlanNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInboundPlanNameNotFound) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInboundPlanNameNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameRequestEntityTooLarge creates a UpdateInboundPlanNameRequestEntityTooLarge with default headers values
func NewUpdateInboundPlanNameRequestEntityTooLarge() *UpdateInboundPlanNameRequestEntityTooLarge {
	return &UpdateInboundPlanNameRequestEntityTooLarge{}
}

/*
UpdateInboundPlanNameRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateInboundPlanNameRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name request entity too large response has a 2xx status code
func (o *UpdateInboundPlanNameRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name request entity too large response has a 3xx status code
func (o *UpdateInboundPlanNameRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name request entity too large response has a 4xx status code
func (o *UpdateInboundPlanNameRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound plan name request entity too large response has a 5xx status code
func (o *UpdateInboundPlanNameRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name request entity too large response a status code equal to that given
func (o *UpdateInboundPlanNameRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateInboundPlanNameRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateInboundPlanNameRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateInboundPlanNameRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameUnsupportedMediaType creates a UpdateInboundPlanNameUnsupportedMediaType with default headers values
func NewUpdateInboundPlanNameUnsupportedMediaType() *UpdateInboundPlanNameUnsupportedMediaType {
	return &UpdateInboundPlanNameUnsupportedMediaType{}
}

/*
UpdateInboundPlanNameUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateInboundPlanNameUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name unsupported media type response has a 2xx status code
func (o *UpdateInboundPlanNameUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name unsupported media type response has a 3xx status code
func (o *UpdateInboundPlanNameUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name unsupported media type response has a 4xx status code
func (o *UpdateInboundPlanNameUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound plan name unsupported media type response has a 5xx status code
func (o *UpdateInboundPlanNameUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name unsupported media type response a status code equal to that given
func (o *UpdateInboundPlanNameUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateInboundPlanNameUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateInboundPlanNameUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateInboundPlanNameUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameTooManyRequests creates a UpdateInboundPlanNameTooManyRequests with default headers values
func NewUpdateInboundPlanNameTooManyRequests() *UpdateInboundPlanNameTooManyRequests {
	return &UpdateInboundPlanNameTooManyRequests{}
}

/*
UpdateInboundPlanNameTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateInboundPlanNameTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name too many requests response has a 2xx status code
func (o *UpdateInboundPlanNameTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name too many requests response has a 3xx status code
func (o *UpdateInboundPlanNameTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name too many requests response has a 4xx status code
func (o *UpdateInboundPlanNameTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inbound plan name too many requests response has a 5xx status code
func (o *UpdateInboundPlanNameTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update inbound plan name too many requests response a status code equal to that given
func (o *UpdateInboundPlanNameTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateInboundPlanNameTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInboundPlanNameTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateInboundPlanNameTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameInternalServerError creates a UpdateInboundPlanNameInternalServerError with default headers values
func NewUpdateInboundPlanNameInternalServerError() *UpdateInboundPlanNameInternalServerError {
	return &UpdateInboundPlanNameInternalServerError{}
}

/*
UpdateInboundPlanNameInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateInboundPlanNameInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name internal server error response has a 2xx status code
func (o *UpdateInboundPlanNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name internal server error response has a 3xx status code
func (o *UpdateInboundPlanNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name internal server error response has a 4xx status code
func (o *UpdateInboundPlanNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inbound plan name internal server error response has a 5xx status code
func (o *UpdateInboundPlanNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update inbound plan name internal server error response a status code equal to that given
func (o *UpdateInboundPlanNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateInboundPlanNameInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInboundPlanNameInternalServerError) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateInboundPlanNameInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInboundPlanNameServiceUnavailable creates a UpdateInboundPlanNameServiceUnavailable with default headers values
func NewUpdateInboundPlanNameServiceUnavailable() *UpdateInboundPlanNameServiceUnavailable {
	return &UpdateInboundPlanNameServiceUnavailable{}
}

/*
UpdateInboundPlanNameServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateInboundPlanNameServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update inbound plan name service unavailable response has a 2xx status code
func (o *UpdateInboundPlanNameServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inbound plan name service unavailable response has a 3xx status code
func (o *UpdateInboundPlanNameServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inbound plan name service unavailable response has a 4xx status code
func (o *UpdateInboundPlanNameServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inbound plan name service unavailable response has a 5xx status code
func (o *UpdateInboundPlanNameServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update inbound plan name service unavailable response a status code equal to that given
func (o *UpdateInboundPlanNameServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateInboundPlanNameServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateInboundPlanNameServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/name][%d] updateInboundPlanNameServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateInboundPlanNameServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateInboundPlanNameServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
