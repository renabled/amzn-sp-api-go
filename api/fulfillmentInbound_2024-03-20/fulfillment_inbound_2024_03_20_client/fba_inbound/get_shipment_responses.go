// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// GetShipmentReader is a Reader for the GetShipment structure.
type GetShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetShipmentRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetShipmentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShipmentOK creates a GetShipmentOK with default headers values
func NewGetShipmentOK() *GetShipmentOK {
	return &GetShipmentOK{}
}

/*
GetShipmentOK describes a response with status code 200, with default header values.

GetShipment 200 response
*/
type GetShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.Shipment
}

// IsSuccess returns true when this get shipment o k response has a 2xx status code
func (o *GetShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get shipment o k response has a 3xx status code
func (o *GetShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment o k response has a 4xx status code
func (o *GetShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment o k response has a 5xx status code
func (o *GetShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment o k response a status code equal to that given
func (o *GetShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetShipmentOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentOK  %+v", 200, o.Payload)
}

func (o *GetShipmentOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentOK  %+v", 200, o.Payload)
}

func (o *GetShipmentOK) GetPayload() *fulfillment_inbound_2024_03_20_models.Shipment {
	return o.Payload
}

func (o *GetShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.Shipment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentBadRequest creates a GetShipmentBadRequest with default headers values
func NewGetShipmentBadRequest() *GetShipmentBadRequest {
	return &GetShipmentBadRequest{}
}

/*
GetShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment bad request response has a 2xx status code
func (o *GetShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment bad request response has a 3xx status code
func (o *GetShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment bad request response has a 4xx status code
func (o *GetShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment bad request response has a 5xx status code
func (o *GetShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment bad request response a status code equal to that given
func (o *GetShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetShipmentBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetShipmentBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *GetShipmentBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentForbidden creates a GetShipmentForbidden with default headers values
func NewGetShipmentForbidden() *GetShipmentForbidden {
	return &GetShipmentForbidden{}
}

/*
GetShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment forbidden response has a 2xx status code
func (o *GetShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment forbidden response has a 3xx status code
func (o *GetShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment forbidden response has a 4xx status code
func (o *GetShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment forbidden response has a 5xx status code
func (o *GetShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment forbidden response a status code equal to that given
func (o *GetShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetShipmentForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentForbidden  %+v", 403, o.Payload)
}

func (o *GetShipmentForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentForbidden  %+v", 403, o.Payload)
}

func (o *GetShipmentForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentNotFound creates a GetShipmentNotFound with default headers values
func NewGetShipmentNotFound() *GetShipmentNotFound {
	return &GetShipmentNotFound{}
}

/*
GetShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment not found response has a 2xx status code
func (o *GetShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment not found response has a 3xx status code
func (o *GetShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment not found response has a 4xx status code
func (o *GetShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment not found response has a 5xx status code
func (o *GetShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment not found response a status code equal to that given
func (o *GetShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetShipmentNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentNotFound  %+v", 404, o.Payload)
}

func (o *GetShipmentNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentNotFound  %+v", 404, o.Payload)
}

func (o *GetShipmentNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentRequestEntityTooLarge creates a GetShipmentRequestEntityTooLarge with default headers values
func NewGetShipmentRequestEntityTooLarge() *GetShipmentRequestEntityTooLarge {
	return &GetShipmentRequestEntityTooLarge{}
}

/*
GetShipmentRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetShipmentRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment request entity too large response has a 2xx status code
func (o *GetShipmentRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment request entity too large response has a 3xx status code
func (o *GetShipmentRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment request entity too large response has a 4xx status code
func (o *GetShipmentRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment request entity too large response has a 5xx status code
func (o *GetShipmentRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment request entity too large response a status code equal to that given
func (o *GetShipmentRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetShipmentRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetShipmentRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetShipmentRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentUnsupportedMediaType creates a GetShipmentUnsupportedMediaType with default headers values
func NewGetShipmentUnsupportedMediaType() *GetShipmentUnsupportedMediaType {
	return &GetShipmentUnsupportedMediaType{}
}

/*
GetShipmentUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetShipmentUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment unsupported media type response has a 2xx status code
func (o *GetShipmentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment unsupported media type response has a 3xx status code
func (o *GetShipmentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment unsupported media type response has a 4xx status code
func (o *GetShipmentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment unsupported media type response has a 5xx status code
func (o *GetShipmentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment unsupported media type response a status code equal to that given
func (o *GetShipmentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetShipmentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShipmentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShipmentUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentTooManyRequests creates a GetShipmentTooManyRequests with default headers values
func NewGetShipmentTooManyRequests() *GetShipmentTooManyRequests {
	return &GetShipmentTooManyRequests{}
}

/*
GetShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShipmentTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment too many requests response has a 2xx status code
func (o *GetShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment too many requests response has a 3xx status code
func (o *GetShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment too many requests response has a 4xx status code
func (o *GetShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment too many requests response has a 5xx status code
func (o *GetShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment too many requests response a status code equal to that given
func (o *GetShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShipmentTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentInternalServerError creates a GetShipmentInternalServerError with default headers values
func NewGetShipmentInternalServerError() *GetShipmentInternalServerError {
	return &GetShipmentInternalServerError{}
}

/*
GetShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetShipmentInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment internal server error response has a 2xx status code
func (o *GetShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment internal server error response has a 3xx status code
func (o *GetShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment internal server error response has a 4xx status code
func (o *GetShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment internal server error response has a 5xx status code
func (o *GetShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipment internal server error response a status code equal to that given
func (o *GetShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShipmentInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShipmentInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentServiceUnavailable creates a GetShipmentServiceUnavailable with default headers values
func NewGetShipmentServiceUnavailable() *GetShipmentServiceUnavailable {
	return &GetShipmentServiceUnavailable{}
}

/*
GetShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShipmentServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment service unavailable response has a 2xx status code
func (o *GetShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment service unavailable response has a 3xx status code
func (o *GetShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment service unavailable response has a 4xx status code
func (o *GetShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment service unavailable response has a 5xx status code
func (o *GetShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipment service unavailable response a status code equal to that given
func (o *GetShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}][%d] getShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShipmentServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
