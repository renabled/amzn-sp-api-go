// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListInboundPlansParams creates a new ListInboundPlansParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListInboundPlansParams() *ListInboundPlansParams {
	return &ListInboundPlansParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListInboundPlansParamsWithTimeout creates a new ListInboundPlansParams object
// with the ability to set a timeout on a request.
func NewListInboundPlansParamsWithTimeout(timeout time.Duration) *ListInboundPlansParams {
	return &ListInboundPlansParams{
		timeout: timeout,
	}
}

// NewListInboundPlansParamsWithContext creates a new ListInboundPlansParams object
// with the ability to set a context for a request.
func NewListInboundPlansParamsWithContext(ctx context.Context) *ListInboundPlansParams {
	return &ListInboundPlansParams{
		Context: ctx,
	}
}

// NewListInboundPlansParamsWithHTTPClient creates a new ListInboundPlansParams object
// with the ability to set a custom HTTPClient for a request.
func NewListInboundPlansParamsWithHTTPClient(client *http.Client) *ListInboundPlansParams {
	return &ListInboundPlansParams{
		HTTPClient: client,
	}
}

/*
ListInboundPlansParams contains all the parameters to send to the API endpoint

	for the list inbound plans operation.

	Typically these are written to a http.Request.
*/
type ListInboundPlansParams struct {

	/* PageSize.

	   The number of inbound plans to return in the response matching the given query.

	   Default: 10
	*/
	PageSize *int64

	/* PaginationToken.

	   A token to fetch a certain page when there are multiple pages worth of results. The value of this token is fetched from the `pagination` returned in the API response. In the absence of the token value from the query parameter the API returns the first page of the result.
	*/
	PaginationToken *string

	/* SortBy.

	   Sort by field.
	*/
	SortBy *string

	/* SortOrder.

	   The sort order.
	*/
	SortOrder *string

	/* Status.

	   The status of an inbound plan.
	*/
	Status *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list inbound plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListInboundPlansParams) WithDefaults() *ListInboundPlansParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list inbound plans params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListInboundPlansParams) SetDefaults() {
	var (
		pageSizeDefault = int64(10)
	)

	val := ListInboundPlansParams{
		PageSize: &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the list inbound plans params
func (o *ListInboundPlansParams) WithTimeout(timeout time.Duration) *ListInboundPlansParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list inbound plans params
func (o *ListInboundPlansParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list inbound plans params
func (o *ListInboundPlansParams) WithContext(ctx context.Context) *ListInboundPlansParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list inbound plans params
func (o *ListInboundPlansParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list inbound plans params
func (o *ListInboundPlansParams) WithHTTPClient(client *http.Client) *ListInboundPlansParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list inbound plans params
func (o *ListInboundPlansParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPageSize adds the pageSize to the list inbound plans params
func (o *ListInboundPlansParams) WithPageSize(pageSize *int64) *ListInboundPlansParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list inbound plans params
func (o *ListInboundPlansParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPaginationToken adds the paginationToken to the list inbound plans params
func (o *ListInboundPlansParams) WithPaginationToken(paginationToken *string) *ListInboundPlansParams {
	o.SetPaginationToken(paginationToken)
	return o
}

// SetPaginationToken adds the paginationToken to the list inbound plans params
func (o *ListInboundPlansParams) SetPaginationToken(paginationToken *string) {
	o.PaginationToken = paginationToken
}

// WithSortBy adds the sortBy to the list inbound plans params
func (o *ListInboundPlansParams) WithSortBy(sortBy *string) *ListInboundPlansParams {
	o.SetSortBy(sortBy)
	return o
}

// SetSortBy adds the sortBy to the list inbound plans params
func (o *ListInboundPlansParams) SetSortBy(sortBy *string) {
	o.SortBy = sortBy
}

// WithSortOrder adds the sortOrder to the list inbound plans params
func (o *ListInboundPlansParams) WithSortOrder(sortOrder *string) *ListInboundPlansParams {
	o.SetSortOrder(sortOrder)
	return o
}

// SetSortOrder adds the sortOrder to the list inbound plans params
func (o *ListInboundPlansParams) SetSortOrder(sortOrder *string) {
	o.SortOrder = sortOrder
}

// WithStatus adds the status to the list inbound plans params
func (o *ListInboundPlansParams) WithStatus(status *string) *ListInboundPlansParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the list inbound plans params
func (o *ListInboundPlansParams) SetStatus(status *string) {
	o.Status = status
}

// WriteToRequest writes these params to a swagger request
func (o *ListInboundPlansParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PaginationToken != nil {

		// query param paginationToken
		var qrPaginationToken string

		if o.PaginationToken != nil {
			qrPaginationToken = *o.PaginationToken
		}
		qPaginationToken := qrPaginationToken
		if qPaginationToken != "" {

			if err := r.SetQueryParam("paginationToken", qPaginationToken); err != nil {
				return err
			}
		}
	}

	if o.SortBy != nil {

		// query param sortBy
		var qrSortBy string

		if o.SortBy != nil {
			qrSortBy = *o.SortBy
		}
		qSortBy := qrSortBy
		if qSortBy != "" {

			if err := r.SetQueryParam("sortBy", qSortBy); err != nil {
				return err
			}
		}
	}

	if o.SortOrder != nil {

		// query param sortOrder
		var qrSortOrder string

		if o.SortOrder != nil {
			qrSortOrder = *o.SortOrder
		}
		qSortOrder := qrSortOrder
		if qSortOrder != "" {

			if err := r.SetQueryParam("sortOrder", qSortOrder); err != nil {
				return err
			}
		}
	}

	if o.Status != nil {

		// query param status
		var qrStatus string

		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {

			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
