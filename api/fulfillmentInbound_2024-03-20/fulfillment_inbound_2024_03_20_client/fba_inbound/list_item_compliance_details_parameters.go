// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewListItemComplianceDetailsParams creates a new ListItemComplianceDetailsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewListItemComplianceDetailsParams() *ListItemComplianceDetailsParams {
	return &ListItemComplianceDetailsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewListItemComplianceDetailsParamsWithTimeout creates a new ListItemComplianceDetailsParams object
// with the ability to set a timeout on a request.
func NewListItemComplianceDetailsParamsWithTimeout(timeout time.Duration) *ListItemComplianceDetailsParams {
	return &ListItemComplianceDetailsParams{
		timeout: timeout,
	}
}

// NewListItemComplianceDetailsParamsWithContext creates a new ListItemComplianceDetailsParams object
// with the ability to set a context for a request.
func NewListItemComplianceDetailsParamsWithContext(ctx context.Context) *ListItemComplianceDetailsParams {
	return &ListItemComplianceDetailsParams{
		Context: ctx,
	}
}

// NewListItemComplianceDetailsParamsWithHTTPClient creates a new ListItemComplianceDetailsParams object
// with the ability to set a custom HTTPClient for a request.
func NewListItemComplianceDetailsParamsWithHTTPClient(client *http.Client) *ListItemComplianceDetailsParams {
	return &ListItemComplianceDetailsParams{
		HTTPClient: client,
	}
}

/*
ListItemComplianceDetailsParams contains all the parameters to send to the API endpoint

	for the list item compliance details operation.

	Typically these are written to a http.Request.
*/
type ListItemComplianceDetailsParams struct {

	/* MarketplaceID.

	   The Marketplace ID. For a list of possible values, refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids).
	*/
	MarketplaceID string

	/* Mskus.

	   A list of merchant SKUs, a merchant-supplied identifier of a specific SKU.
	*/
	Mskus []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the list item compliance details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListItemComplianceDetailsParams) WithDefaults() *ListItemComplianceDetailsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the list item compliance details params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *ListItemComplianceDetailsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the list item compliance details params
func (o *ListItemComplianceDetailsParams) WithTimeout(timeout time.Duration) *ListItemComplianceDetailsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list item compliance details params
func (o *ListItemComplianceDetailsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list item compliance details params
func (o *ListItemComplianceDetailsParams) WithContext(ctx context.Context) *ListItemComplianceDetailsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list item compliance details params
func (o *ListItemComplianceDetailsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list item compliance details params
func (o *ListItemComplianceDetailsParams) WithHTTPClient(client *http.Client) *ListItemComplianceDetailsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list item compliance details params
func (o *ListItemComplianceDetailsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMarketplaceID adds the marketplaceID to the list item compliance details params
func (o *ListItemComplianceDetailsParams) WithMarketplaceID(marketplaceID string) *ListItemComplianceDetailsParams {
	o.SetMarketplaceID(marketplaceID)
	return o
}

// SetMarketplaceID adds the marketplaceId to the list item compliance details params
func (o *ListItemComplianceDetailsParams) SetMarketplaceID(marketplaceID string) {
	o.MarketplaceID = marketplaceID
}

// WithMskus adds the mskus to the list item compliance details params
func (o *ListItemComplianceDetailsParams) WithMskus(mskus []string) *ListItemComplianceDetailsParams {
	o.SetMskus(mskus)
	return o
}

// SetMskus adds the mskus to the list item compliance details params
func (o *ListItemComplianceDetailsParams) SetMskus(mskus []string) {
	o.Mskus = mskus
}

// WriteToRequest writes these params to a swagger request
func (o *ListItemComplianceDetailsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param marketplaceId
	qrMarketplaceID := o.MarketplaceID
	qMarketplaceID := qrMarketplaceID
	if qMarketplaceID != "" {

		if err := r.SetQueryParam("marketplaceId", qMarketplaceID); err != nil {
			return err
		}
	}

	if o.Mskus != nil {

		// binding items for mskus
		joinedMskus := o.bindParamMskus(reg)

		// query array param mskus
		if err := r.SetQueryParam("mskus", joinedMskus...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamListItemComplianceDetails binds the parameter mskus
func (o *ListItemComplianceDetailsParams) bindParamMskus(formats strfmt.Registry) []string {
	mskusIR := o.Mskus

	var mskusIC []string
	for _, mskusIIR := range mskusIR { // explode []string

		mskusIIV := mskusIIR // string as string
		mskusIC = append(mskusIC, mskusIIV)
	}

	// items.CollectionFormat: "multi"
	mskusIS := swag.JoinByFormat(mskusIC, "multi")

	return mskusIS
}
