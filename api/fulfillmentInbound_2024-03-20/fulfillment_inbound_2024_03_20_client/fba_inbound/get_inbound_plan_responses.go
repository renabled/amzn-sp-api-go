// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// GetInboundPlanReader is a Reader for the GetInboundPlan structure.
type GetInboundPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInboundPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInboundPlanOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInboundPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInboundPlanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInboundPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInboundPlanRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInboundPlanUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInboundPlanTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInboundPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInboundPlanServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInboundPlanOK creates a GetInboundPlanOK with default headers values
func NewGetInboundPlanOK() *GetInboundPlanOK {
	return &GetInboundPlanOK{}
}

/*
GetInboundPlanOK describes a response with status code 200, with default header values.

GetInboundPlan 200 response
*/
type GetInboundPlanOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.InboundPlan
}

// IsSuccess returns true when this get inbound plan o k response has a 2xx status code
func (o *GetInboundPlanOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get inbound plan o k response has a 3xx status code
func (o *GetInboundPlanOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan o k response has a 4xx status code
func (o *GetInboundPlanOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound plan o k response has a 5xx status code
func (o *GetInboundPlanOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan o k response a status code equal to that given
func (o *GetInboundPlanOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInboundPlanOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanOK  %+v", 200, o.Payload)
}

func (o *GetInboundPlanOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanOK  %+v", 200, o.Payload)
}

func (o *GetInboundPlanOK) GetPayload() *fulfillment_inbound_2024_03_20_models.InboundPlan {
	return o.Payload
}

func (o *GetInboundPlanOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.InboundPlan)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanBadRequest creates a GetInboundPlanBadRequest with default headers values
func NewGetInboundPlanBadRequest() *GetInboundPlanBadRequest {
	return &GetInboundPlanBadRequest{}
}

/*
GetInboundPlanBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInboundPlanBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan bad request response has a 2xx status code
func (o *GetInboundPlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan bad request response has a 3xx status code
func (o *GetInboundPlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan bad request response has a 4xx status code
func (o *GetInboundPlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound plan bad request response has a 5xx status code
func (o *GetInboundPlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan bad request response a status code equal to that given
func (o *GetInboundPlanBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInboundPlanBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundPlanBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundPlanBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanForbidden creates a GetInboundPlanForbidden with default headers values
func NewGetInboundPlanForbidden() *GetInboundPlanForbidden {
	return &GetInboundPlanForbidden{}
}

/*
GetInboundPlanForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInboundPlanForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan forbidden response has a 2xx status code
func (o *GetInboundPlanForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan forbidden response has a 3xx status code
func (o *GetInboundPlanForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan forbidden response has a 4xx status code
func (o *GetInboundPlanForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound plan forbidden response has a 5xx status code
func (o *GetInboundPlanForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan forbidden response a status code equal to that given
func (o *GetInboundPlanForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInboundPlanForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundPlanForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundPlanForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanNotFound creates a GetInboundPlanNotFound with default headers values
func NewGetInboundPlanNotFound() *GetInboundPlanNotFound {
	return &GetInboundPlanNotFound{}
}

/*
GetInboundPlanNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInboundPlanNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan not found response has a 2xx status code
func (o *GetInboundPlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan not found response has a 3xx status code
func (o *GetInboundPlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan not found response has a 4xx status code
func (o *GetInboundPlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound plan not found response has a 5xx status code
func (o *GetInboundPlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan not found response a status code equal to that given
func (o *GetInboundPlanNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInboundPlanNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundPlanNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundPlanNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanRequestEntityTooLarge creates a GetInboundPlanRequestEntityTooLarge with default headers values
func NewGetInboundPlanRequestEntityTooLarge() *GetInboundPlanRequestEntityTooLarge {
	return &GetInboundPlanRequestEntityTooLarge{}
}

/*
GetInboundPlanRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInboundPlanRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan request entity too large response has a 2xx status code
func (o *GetInboundPlanRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan request entity too large response has a 3xx status code
func (o *GetInboundPlanRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan request entity too large response has a 4xx status code
func (o *GetInboundPlanRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound plan request entity too large response has a 5xx status code
func (o *GetInboundPlanRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan request entity too large response a status code equal to that given
func (o *GetInboundPlanRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInboundPlanRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundPlanRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundPlanRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanUnsupportedMediaType creates a GetInboundPlanUnsupportedMediaType with default headers values
func NewGetInboundPlanUnsupportedMediaType() *GetInboundPlanUnsupportedMediaType {
	return &GetInboundPlanUnsupportedMediaType{}
}

/*
GetInboundPlanUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInboundPlanUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan unsupported media type response has a 2xx status code
func (o *GetInboundPlanUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan unsupported media type response has a 3xx status code
func (o *GetInboundPlanUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan unsupported media type response has a 4xx status code
func (o *GetInboundPlanUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound plan unsupported media type response has a 5xx status code
func (o *GetInboundPlanUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan unsupported media type response a status code equal to that given
func (o *GetInboundPlanUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInboundPlanUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundPlanUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundPlanUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanTooManyRequests creates a GetInboundPlanTooManyRequests with default headers values
func NewGetInboundPlanTooManyRequests() *GetInboundPlanTooManyRequests {
	return &GetInboundPlanTooManyRequests{}
}

/*
GetInboundPlanTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInboundPlanTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan too many requests response has a 2xx status code
func (o *GetInboundPlanTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan too many requests response has a 3xx status code
func (o *GetInboundPlanTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan too many requests response has a 4xx status code
func (o *GetInboundPlanTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound plan too many requests response has a 5xx status code
func (o *GetInboundPlanTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound plan too many requests response a status code equal to that given
func (o *GetInboundPlanTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInboundPlanTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundPlanTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundPlanTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanInternalServerError creates a GetInboundPlanInternalServerError with default headers values
func NewGetInboundPlanInternalServerError() *GetInboundPlanInternalServerError {
	return &GetInboundPlanInternalServerError{}
}

/*
GetInboundPlanInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInboundPlanInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan internal server error response has a 2xx status code
func (o *GetInboundPlanInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan internal server error response has a 3xx status code
func (o *GetInboundPlanInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan internal server error response has a 4xx status code
func (o *GetInboundPlanInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound plan internal server error response has a 5xx status code
func (o *GetInboundPlanInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound plan internal server error response a status code equal to that given
func (o *GetInboundPlanInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInboundPlanInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundPlanInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundPlanInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundPlanServiceUnavailable creates a GetInboundPlanServiceUnavailable with default headers values
func NewGetInboundPlanServiceUnavailable() *GetInboundPlanServiceUnavailable {
	return &GetInboundPlanServiceUnavailable{}
}

/*
GetInboundPlanServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInboundPlanServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound plan service unavailable response has a 2xx status code
func (o *GetInboundPlanServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound plan service unavailable response has a 3xx status code
func (o *GetInboundPlanServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound plan service unavailable response has a 4xx status code
func (o *GetInboundPlanServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound plan service unavailable response has a 5xx status code
func (o *GetInboundPlanServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound plan service unavailable response a status code equal to that given
func (o *GetInboundPlanServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInboundPlanServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundPlanServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}][%d] getInboundPlanServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundPlanServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundPlanServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
