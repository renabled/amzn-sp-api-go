// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// ListPrepDetailsReader is a Reader for the ListPrepDetails structure.
type ListPrepDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPrepDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListPrepDetailsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListPrepDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListPrepDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListPrepDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListPrepDetailsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListPrepDetailsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListPrepDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListPrepDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListPrepDetailsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListPrepDetailsOK creates a ListPrepDetailsOK with default headers values
func NewListPrepDetailsOK() *ListPrepDetailsOK {
	return &ListPrepDetailsOK{}
}

/*
ListPrepDetailsOK describes a response with status code 200, with default header values.

ListPrepDetails 200 response
*/
type ListPrepDetailsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ListPrepDetailsResponse
}

// IsSuccess returns true when this list prep details o k response has a 2xx status code
func (o *ListPrepDetailsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list prep details o k response has a 3xx status code
func (o *ListPrepDetailsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details o k response has a 4xx status code
func (o *ListPrepDetailsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list prep details o k response has a 5xx status code
func (o *ListPrepDetailsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details o k response a status code equal to that given
func (o *ListPrepDetailsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListPrepDetailsOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsOK  %+v", 200, o.Payload)
}

func (o *ListPrepDetailsOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsOK  %+v", 200, o.Payload)
}

func (o *ListPrepDetailsOK) GetPayload() *fulfillment_inbound_2024_03_20_models.ListPrepDetailsResponse {
	return o.Payload
}

func (o *ListPrepDetailsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ListPrepDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsBadRequest creates a ListPrepDetailsBadRequest with default headers values
func NewListPrepDetailsBadRequest() *ListPrepDetailsBadRequest {
	return &ListPrepDetailsBadRequest{}
}

/*
ListPrepDetailsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListPrepDetailsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details bad request response has a 2xx status code
func (o *ListPrepDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details bad request response has a 3xx status code
func (o *ListPrepDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details bad request response has a 4xx status code
func (o *ListPrepDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list prep details bad request response has a 5xx status code
func (o *ListPrepDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details bad request response a status code equal to that given
func (o *ListPrepDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListPrepDetailsBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPrepDetailsBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPrepDetailsBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsForbidden creates a ListPrepDetailsForbidden with default headers values
func NewListPrepDetailsForbidden() *ListPrepDetailsForbidden {
	return &ListPrepDetailsForbidden{}
}

/*
ListPrepDetailsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListPrepDetailsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details forbidden response has a 2xx status code
func (o *ListPrepDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details forbidden response has a 3xx status code
func (o *ListPrepDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details forbidden response has a 4xx status code
func (o *ListPrepDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list prep details forbidden response has a 5xx status code
func (o *ListPrepDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details forbidden response a status code equal to that given
func (o *ListPrepDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListPrepDetailsForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsForbidden  %+v", 403, o.Payload)
}

func (o *ListPrepDetailsForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsForbidden  %+v", 403, o.Payload)
}

func (o *ListPrepDetailsForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsNotFound creates a ListPrepDetailsNotFound with default headers values
func NewListPrepDetailsNotFound() *ListPrepDetailsNotFound {
	return &ListPrepDetailsNotFound{}
}

/*
ListPrepDetailsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListPrepDetailsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details not found response has a 2xx status code
func (o *ListPrepDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details not found response has a 3xx status code
func (o *ListPrepDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details not found response has a 4xx status code
func (o *ListPrepDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list prep details not found response has a 5xx status code
func (o *ListPrepDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details not found response a status code equal to that given
func (o *ListPrepDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListPrepDetailsNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsNotFound  %+v", 404, o.Payload)
}

func (o *ListPrepDetailsNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsNotFound  %+v", 404, o.Payload)
}

func (o *ListPrepDetailsNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsRequestEntityTooLarge creates a ListPrepDetailsRequestEntityTooLarge with default headers values
func NewListPrepDetailsRequestEntityTooLarge() *ListPrepDetailsRequestEntityTooLarge {
	return &ListPrepDetailsRequestEntityTooLarge{}
}

/*
ListPrepDetailsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListPrepDetailsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details request entity too large response has a 2xx status code
func (o *ListPrepDetailsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details request entity too large response has a 3xx status code
func (o *ListPrepDetailsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details request entity too large response has a 4xx status code
func (o *ListPrepDetailsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list prep details request entity too large response has a 5xx status code
func (o *ListPrepDetailsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details request entity too large response a status code equal to that given
func (o *ListPrepDetailsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListPrepDetailsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListPrepDetailsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListPrepDetailsRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsUnsupportedMediaType creates a ListPrepDetailsUnsupportedMediaType with default headers values
func NewListPrepDetailsUnsupportedMediaType() *ListPrepDetailsUnsupportedMediaType {
	return &ListPrepDetailsUnsupportedMediaType{}
}

/*
ListPrepDetailsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListPrepDetailsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details unsupported media type response has a 2xx status code
func (o *ListPrepDetailsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details unsupported media type response has a 3xx status code
func (o *ListPrepDetailsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details unsupported media type response has a 4xx status code
func (o *ListPrepDetailsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list prep details unsupported media type response has a 5xx status code
func (o *ListPrepDetailsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details unsupported media type response a status code equal to that given
func (o *ListPrepDetailsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListPrepDetailsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListPrepDetailsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListPrepDetailsUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsTooManyRequests creates a ListPrepDetailsTooManyRequests with default headers values
func NewListPrepDetailsTooManyRequests() *ListPrepDetailsTooManyRequests {
	return &ListPrepDetailsTooManyRequests{}
}

/*
ListPrepDetailsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListPrepDetailsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details too many requests response has a 2xx status code
func (o *ListPrepDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details too many requests response has a 3xx status code
func (o *ListPrepDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details too many requests response has a 4xx status code
func (o *ListPrepDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list prep details too many requests response has a 5xx status code
func (o *ListPrepDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list prep details too many requests response a status code equal to that given
func (o *ListPrepDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListPrepDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListPrepDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListPrepDetailsTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsInternalServerError creates a ListPrepDetailsInternalServerError with default headers values
func NewListPrepDetailsInternalServerError() *ListPrepDetailsInternalServerError {
	return &ListPrepDetailsInternalServerError{}
}

/*
ListPrepDetailsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListPrepDetailsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details internal server error response has a 2xx status code
func (o *ListPrepDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details internal server error response has a 3xx status code
func (o *ListPrepDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details internal server error response has a 4xx status code
func (o *ListPrepDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list prep details internal server error response has a 5xx status code
func (o *ListPrepDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list prep details internal server error response a status code equal to that given
func (o *ListPrepDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListPrepDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPrepDetailsInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPrepDetailsInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPrepDetailsServiceUnavailable creates a ListPrepDetailsServiceUnavailable with default headers values
func NewListPrepDetailsServiceUnavailable() *ListPrepDetailsServiceUnavailable {
	return &ListPrepDetailsServiceUnavailable{}
}

/*
ListPrepDetailsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListPrepDetailsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list prep details service unavailable response has a 2xx status code
func (o *ListPrepDetailsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list prep details service unavailable response has a 3xx status code
func (o *ListPrepDetailsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list prep details service unavailable response has a 4xx status code
func (o *ListPrepDetailsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list prep details service unavailable response has a 5xx status code
func (o *ListPrepDetailsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list prep details service unavailable response a status code equal to that given
func (o *ListPrepDetailsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListPrepDetailsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListPrepDetailsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/items/prepDetails][%d] listPrepDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListPrepDetailsServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListPrepDetailsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
