// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// ListShipmentItemsReader is a Reader for the ListShipmentItems structure.
type ListShipmentItemsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListShipmentItemsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListShipmentItemsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListShipmentItemsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListShipmentItemsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListShipmentItemsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListShipmentItemsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListShipmentItemsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListShipmentItemsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListShipmentItemsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListShipmentItemsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListShipmentItemsOK creates a ListShipmentItemsOK with default headers values
func NewListShipmentItemsOK() *ListShipmentItemsOK {
	return &ListShipmentItemsOK{}
}

/*
ListShipmentItemsOK describes a response with status code 200, with default header values.

ListShipmentItems 200 response
*/
type ListShipmentItemsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ListShipmentItemsResponse
}

// IsSuccess returns true when this list shipment items o k response has a 2xx status code
func (o *ListShipmentItemsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list shipment items o k response has a 3xx status code
func (o *ListShipmentItemsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items o k response has a 4xx status code
func (o *ListShipmentItemsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list shipment items o k response has a 5xx status code
func (o *ListShipmentItemsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items o k response a status code equal to that given
func (o *ListShipmentItemsOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListShipmentItemsOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsOK  %+v", 200, o.Payload)
}

func (o *ListShipmentItemsOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsOK  %+v", 200, o.Payload)
}

func (o *ListShipmentItemsOK) GetPayload() *fulfillment_inbound_2024_03_20_models.ListShipmentItemsResponse {
	return o.Payload
}

func (o *ListShipmentItemsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ListShipmentItemsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsBadRequest creates a ListShipmentItemsBadRequest with default headers values
func NewListShipmentItemsBadRequest() *ListShipmentItemsBadRequest {
	return &ListShipmentItemsBadRequest{}
}

/*
ListShipmentItemsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListShipmentItemsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items bad request response has a 2xx status code
func (o *ListShipmentItemsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items bad request response has a 3xx status code
func (o *ListShipmentItemsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items bad request response has a 4xx status code
func (o *ListShipmentItemsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment items bad request response has a 5xx status code
func (o *ListShipmentItemsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items bad request response a status code equal to that given
func (o *ListShipmentItemsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListShipmentItemsBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsBadRequest  %+v", 400, o.Payload)
}

func (o *ListShipmentItemsBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsBadRequest  %+v", 400, o.Payload)
}

func (o *ListShipmentItemsBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsForbidden creates a ListShipmentItemsForbidden with default headers values
func NewListShipmentItemsForbidden() *ListShipmentItemsForbidden {
	return &ListShipmentItemsForbidden{}
}

/*
ListShipmentItemsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListShipmentItemsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items forbidden response has a 2xx status code
func (o *ListShipmentItemsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items forbidden response has a 3xx status code
func (o *ListShipmentItemsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items forbidden response has a 4xx status code
func (o *ListShipmentItemsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment items forbidden response has a 5xx status code
func (o *ListShipmentItemsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items forbidden response a status code equal to that given
func (o *ListShipmentItemsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListShipmentItemsForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsForbidden  %+v", 403, o.Payload)
}

func (o *ListShipmentItemsForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsForbidden  %+v", 403, o.Payload)
}

func (o *ListShipmentItemsForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsNotFound creates a ListShipmentItemsNotFound with default headers values
func NewListShipmentItemsNotFound() *ListShipmentItemsNotFound {
	return &ListShipmentItemsNotFound{}
}

/*
ListShipmentItemsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListShipmentItemsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items not found response has a 2xx status code
func (o *ListShipmentItemsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items not found response has a 3xx status code
func (o *ListShipmentItemsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items not found response has a 4xx status code
func (o *ListShipmentItemsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment items not found response has a 5xx status code
func (o *ListShipmentItemsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items not found response a status code equal to that given
func (o *ListShipmentItemsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListShipmentItemsNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsNotFound  %+v", 404, o.Payload)
}

func (o *ListShipmentItemsNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsNotFound  %+v", 404, o.Payload)
}

func (o *ListShipmentItemsNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsRequestEntityTooLarge creates a ListShipmentItemsRequestEntityTooLarge with default headers values
func NewListShipmentItemsRequestEntityTooLarge() *ListShipmentItemsRequestEntityTooLarge {
	return &ListShipmentItemsRequestEntityTooLarge{}
}

/*
ListShipmentItemsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListShipmentItemsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items request entity too large response has a 2xx status code
func (o *ListShipmentItemsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items request entity too large response has a 3xx status code
func (o *ListShipmentItemsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items request entity too large response has a 4xx status code
func (o *ListShipmentItemsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment items request entity too large response has a 5xx status code
func (o *ListShipmentItemsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items request entity too large response a status code equal to that given
func (o *ListShipmentItemsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListShipmentItemsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListShipmentItemsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListShipmentItemsRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsUnsupportedMediaType creates a ListShipmentItemsUnsupportedMediaType with default headers values
func NewListShipmentItemsUnsupportedMediaType() *ListShipmentItemsUnsupportedMediaType {
	return &ListShipmentItemsUnsupportedMediaType{}
}

/*
ListShipmentItemsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListShipmentItemsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items unsupported media type response has a 2xx status code
func (o *ListShipmentItemsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items unsupported media type response has a 3xx status code
func (o *ListShipmentItemsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items unsupported media type response has a 4xx status code
func (o *ListShipmentItemsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment items unsupported media type response has a 5xx status code
func (o *ListShipmentItemsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items unsupported media type response a status code equal to that given
func (o *ListShipmentItemsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListShipmentItemsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListShipmentItemsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListShipmentItemsUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsTooManyRequests creates a ListShipmentItemsTooManyRequests with default headers values
func NewListShipmentItemsTooManyRequests() *ListShipmentItemsTooManyRequests {
	return &ListShipmentItemsTooManyRequests{}
}

/*
ListShipmentItemsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListShipmentItemsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items too many requests response has a 2xx status code
func (o *ListShipmentItemsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items too many requests response has a 3xx status code
func (o *ListShipmentItemsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items too many requests response has a 4xx status code
func (o *ListShipmentItemsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment items too many requests response has a 5xx status code
func (o *ListShipmentItemsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment items too many requests response a status code equal to that given
func (o *ListShipmentItemsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListShipmentItemsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListShipmentItemsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListShipmentItemsTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsInternalServerError creates a ListShipmentItemsInternalServerError with default headers values
func NewListShipmentItemsInternalServerError() *ListShipmentItemsInternalServerError {
	return &ListShipmentItemsInternalServerError{}
}

/*
ListShipmentItemsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListShipmentItemsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items internal server error response has a 2xx status code
func (o *ListShipmentItemsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items internal server error response has a 3xx status code
func (o *ListShipmentItemsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items internal server error response has a 4xx status code
func (o *ListShipmentItemsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list shipment items internal server error response has a 5xx status code
func (o *ListShipmentItemsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list shipment items internal server error response a status code equal to that given
func (o *ListShipmentItemsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListShipmentItemsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListShipmentItemsInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListShipmentItemsInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentItemsServiceUnavailable creates a ListShipmentItemsServiceUnavailable with default headers values
func NewListShipmentItemsServiceUnavailable() *ListShipmentItemsServiceUnavailable {
	return &ListShipmentItemsServiceUnavailable{}
}

/*
ListShipmentItemsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListShipmentItemsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment items service unavailable response has a 2xx status code
func (o *ListShipmentItemsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment items service unavailable response has a 3xx status code
func (o *ListShipmentItemsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment items service unavailable response has a 4xx status code
func (o *ListShipmentItemsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list shipment items service unavailable response has a 5xx status code
func (o *ListShipmentItemsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list shipment items service unavailable response a status code equal to that given
func (o *ListShipmentItemsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListShipmentItemsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListShipmentItemsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/items][%d] listShipmentItemsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListShipmentItemsServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentItemsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
