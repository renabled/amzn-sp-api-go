// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// ListShipmentBoxesReader is a Reader for the ListShipmentBoxes structure.
type ListShipmentBoxesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListShipmentBoxesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListShipmentBoxesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListShipmentBoxesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListShipmentBoxesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListShipmentBoxesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewListShipmentBoxesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewListShipmentBoxesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewListShipmentBoxesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListShipmentBoxesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewListShipmentBoxesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListShipmentBoxesOK creates a ListShipmentBoxesOK with default headers values
func NewListShipmentBoxesOK() *ListShipmentBoxesOK {
	return &ListShipmentBoxesOK{}
}

/*
ListShipmentBoxesOK describes a response with status code 200, with default header values.

ListShipmentBoxes 200 response
*/
type ListShipmentBoxesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ListShipmentBoxesResponse
}

// IsSuccess returns true when this list shipment boxes o k response has a 2xx status code
func (o *ListShipmentBoxesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list shipment boxes o k response has a 3xx status code
func (o *ListShipmentBoxesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes o k response has a 4xx status code
func (o *ListShipmentBoxesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list shipment boxes o k response has a 5xx status code
func (o *ListShipmentBoxesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes o k response a status code equal to that given
func (o *ListShipmentBoxesOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListShipmentBoxesOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesOK  %+v", 200, o.Payload)
}

func (o *ListShipmentBoxesOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesOK  %+v", 200, o.Payload)
}

func (o *ListShipmentBoxesOK) GetPayload() *fulfillment_inbound_2024_03_20_models.ListShipmentBoxesResponse {
	return o.Payload
}

func (o *ListShipmentBoxesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ListShipmentBoxesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesBadRequest creates a ListShipmentBoxesBadRequest with default headers values
func NewListShipmentBoxesBadRequest() *ListShipmentBoxesBadRequest {
	return &ListShipmentBoxesBadRequest{}
}

/*
ListShipmentBoxesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ListShipmentBoxesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes bad request response has a 2xx status code
func (o *ListShipmentBoxesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes bad request response has a 3xx status code
func (o *ListShipmentBoxesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes bad request response has a 4xx status code
func (o *ListShipmentBoxesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment boxes bad request response has a 5xx status code
func (o *ListShipmentBoxesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes bad request response a status code equal to that given
func (o *ListShipmentBoxesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ListShipmentBoxesBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesBadRequest  %+v", 400, o.Payload)
}

func (o *ListShipmentBoxesBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesBadRequest  %+v", 400, o.Payload)
}

func (o *ListShipmentBoxesBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesForbidden creates a ListShipmentBoxesForbidden with default headers values
func NewListShipmentBoxesForbidden() *ListShipmentBoxesForbidden {
	return &ListShipmentBoxesForbidden{}
}

/*
ListShipmentBoxesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ListShipmentBoxesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes forbidden response has a 2xx status code
func (o *ListShipmentBoxesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes forbidden response has a 3xx status code
func (o *ListShipmentBoxesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes forbidden response has a 4xx status code
func (o *ListShipmentBoxesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment boxes forbidden response has a 5xx status code
func (o *ListShipmentBoxesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes forbidden response a status code equal to that given
func (o *ListShipmentBoxesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ListShipmentBoxesForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesForbidden  %+v", 403, o.Payload)
}

func (o *ListShipmentBoxesForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesForbidden  %+v", 403, o.Payload)
}

func (o *ListShipmentBoxesForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesNotFound creates a ListShipmentBoxesNotFound with default headers values
func NewListShipmentBoxesNotFound() *ListShipmentBoxesNotFound {
	return &ListShipmentBoxesNotFound{}
}

/*
ListShipmentBoxesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ListShipmentBoxesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes not found response has a 2xx status code
func (o *ListShipmentBoxesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes not found response has a 3xx status code
func (o *ListShipmentBoxesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes not found response has a 4xx status code
func (o *ListShipmentBoxesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment boxes not found response has a 5xx status code
func (o *ListShipmentBoxesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes not found response a status code equal to that given
func (o *ListShipmentBoxesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ListShipmentBoxesNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesNotFound  %+v", 404, o.Payload)
}

func (o *ListShipmentBoxesNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesNotFound  %+v", 404, o.Payload)
}

func (o *ListShipmentBoxesNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesRequestEntityTooLarge creates a ListShipmentBoxesRequestEntityTooLarge with default headers values
func NewListShipmentBoxesRequestEntityTooLarge() *ListShipmentBoxesRequestEntityTooLarge {
	return &ListShipmentBoxesRequestEntityTooLarge{}
}

/*
ListShipmentBoxesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ListShipmentBoxesRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes request entity too large response has a 2xx status code
func (o *ListShipmentBoxesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes request entity too large response has a 3xx status code
func (o *ListShipmentBoxesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes request entity too large response has a 4xx status code
func (o *ListShipmentBoxesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment boxes request entity too large response has a 5xx status code
func (o *ListShipmentBoxesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes request entity too large response a status code equal to that given
func (o *ListShipmentBoxesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ListShipmentBoxesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListShipmentBoxesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ListShipmentBoxesRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesUnsupportedMediaType creates a ListShipmentBoxesUnsupportedMediaType with default headers values
func NewListShipmentBoxesUnsupportedMediaType() *ListShipmentBoxesUnsupportedMediaType {
	return &ListShipmentBoxesUnsupportedMediaType{}
}

/*
ListShipmentBoxesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ListShipmentBoxesUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes unsupported media type response has a 2xx status code
func (o *ListShipmentBoxesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes unsupported media type response has a 3xx status code
func (o *ListShipmentBoxesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes unsupported media type response has a 4xx status code
func (o *ListShipmentBoxesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment boxes unsupported media type response has a 5xx status code
func (o *ListShipmentBoxesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes unsupported media type response a status code equal to that given
func (o *ListShipmentBoxesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ListShipmentBoxesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListShipmentBoxesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ListShipmentBoxesUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesTooManyRequests creates a ListShipmentBoxesTooManyRequests with default headers values
func NewListShipmentBoxesTooManyRequests() *ListShipmentBoxesTooManyRequests {
	return &ListShipmentBoxesTooManyRequests{}
}

/*
ListShipmentBoxesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ListShipmentBoxesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes too many requests response has a 2xx status code
func (o *ListShipmentBoxesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes too many requests response has a 3xx status code
func (o *ListShipmentBoxesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes too many requests response has a 4xx status code
func (o *ListShipmentBoxesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this list shipment boxes too many requests response has a 5xx status code
func (o *ListShipmentBoxesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this list shipment boxes too many requests response a status code equal to that given
func (o *ListShipmentBoxesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ListShipmentBoxesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListShipmentBoxesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesTooManyRequests  %+v", 429, o.Payload)
}

func (o *ListShipmentBoxesTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesInternalServerError creates a ListShipmentBoxesInternalServerError with default headers values
func NewListShipmentBoxesInternalServerError() *ListShipmentBoxesInternalServerError {
	return &ListShipmentBoxesInternalServerError{}
}

/*
ListShipmentBoxesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ListShipmentBoxesInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes internal server error response has a 2xx status code
func (o *ListShipmentBoxesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes internal server error response has a 3xx status code
func (o *ListShipmentBoxesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes internal server error response has a 4xx status code
func (o *ListShipmentBoxesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this list shipment boxes internal server error response has a 5xx status code
func (o *ListShipmentBoxesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this list shipment boxes internal server error response a status code equal to that given
func (o *ListShipmentBoxesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ListShipmentBoxesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListShipmentBoxesInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListShipmentBoxesInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListShipmentBoxesServiceUnavailable creates a ListShipmentBoxesServiceUnavailable with default headers values
func NewListShipmentBoxesServiceUnavailable() *ListShipmentBoxesServiceUnavailable {
	return &ListShipmentBoxesServiceUnavailable{}
}

/*
ListShipmentBoxesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ListShipmentBoxesServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this list shipment boxes service unavailable response has a 2xx status code
func (o *ListShipmentBoxesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list shipment boxes service unavailable response has a 3xx status code
func (o *ListShipmentBoxesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list shipment boxes service unavailable response has a 4xx status code
func (o *ListShipmentBoxesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this list shipment boxes service unavailable response has a 5xx status code
func (o *ListShipmentBoxesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this list shipment boxes service unavailable response a status code equal to that given
func (o *ListShipmentBoxesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ListShipmentBoxesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListShipmentBoxesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/boxes][%d] listShipmentBoxesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ListShipmentBoxesServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ListShipmentBoxesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
