// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// GetInboundOperationStatusReader is a Reader for the GetInboundOperationStatus structure.
type GetInboundOperationStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInboundOperationStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInboundOperationStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetInboundOperationStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetInboundOperationStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInboundOperationStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetInboundOperationStatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetInboundOperationStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetInboundOperationStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetInboundOperationStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetInboundOperationStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetInboundOperationStatusOK creates a GetInboundOperationStatusOK with default headers values
func NewGetInboundOperationStatusOK() *GetInboundOperationStatusOK {
	return &GetInboundOperationStatusOK{}
}

/*
GetInboundOperationStatusOK describes a response with status code 200, with default header values.

GetInboundOperationStatus 200 response
*/
type GetInboundOperationStatusOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.InboundOperationStatus
}

// IsSuccess returns true when this get inbound operation status o k response has a 2xx status code
func (o *GetInboundOperationStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get inbound operation status o k response has a 3xx status code
func (o *GetInboundOperationStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status o k response has a 4xx status code
func (o *GetInboundOperationStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound operation status o k response has a 5xx status code
func (o *GetInboundOperationStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status o k response a status code equal to that given
func (o *GetInboundOperationStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetInboundOperationStatusOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusOK  %+v", 200, o.Payload)
}

func (o *GetInboundOperationStatusOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusOK  %+v", 200, o.Payload)
}

func (o *GetInboundOperationStatusOK) GetPayload() *fulfillment_inbound_2024_03_20_models.InboundOperationStatus {
	return o.Payload
}

func (o *GetInboundOperationStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.InboundOperationStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusBadRequest creates a GetInboundOperationStatusBadRequest with default headers values
func NewGetInboundOperationStatusBadRequest() *GetInboundOperationStatusBadRequest {
	return &GetInboundOperationStatusBadRequest{}
}

/*
GetInboundOperationStatusBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetInboundOperationStatusBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status bad request response has a 2xx status code
func (o *GetInboundOperationStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status bad request response has a 3xx status code
func (o *GetInboundOperationStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status bad request response has a 4xx status code
func (o *GetInboundOperationStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound operation status bad request response has a 5xx status code
func (o *GetInboundOperationStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status bad request response a status code equal to that given
func (o *GetInboundOperationStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetInboundOperationStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundOperationStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetInboundOperationStatusBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusForbidden creates a GetInboundOperationStatusForbidden with default headers values
func NewGetInboundOperationStatusForbidden() *GetInboundOperationStatusForbidden {
	return &GetInboundOperationStatusForbidden{}
}

/*
GetInboundOperationStatusForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetInboundOperationStatusForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status forbidden response has a 2xx status code
func (o *GetInboundOperationStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status forbidden response has a 3xx status code
func (o *GetInboundOperationStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status forbidden response has a 4xx status code
func (o *GetInboundOperationStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound operation status forbidden response has a 5xx status code
func (o *GetInboundOperationStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status forbidden response a status code equal to that given
func (o *GetInboundOperationStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetInboundOperationStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundOperationStatusForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetInboundOperationStatusForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusNotFound creates a GetInboundOperationStatusNotFound with default headers values
func NewGetInboundOperationStatusNotFound() *GetInboundOperationStatusNotFound {
	return &GetInboundOperationStatusNotFound{}
}

/*
GetInboundOperationStatusNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetInboundOperationStatusNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status not found response has a 2xx status code
func (o *GetInboundOperationStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status not found response has a 3xx status code
func (o *GetInboundOperationStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status not found response has a 4xx status code
func (o *GetInboundOperationStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound operation status not found response has a 5xx status code
func (o *GetInboundOperationStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status not found response a status code equal to that given
func (o *GetInboundOperationStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetInboundOperationStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundOperationStatusNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetInboundOperationStatusNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusRequestEntityTooLarge creates a GetInboundOperationStatusRequestEntityTooLarge with default headers values
func NewGetInboundOperationStatusRequestEntityTooLarge() *GetInboundOperationStatusRequestEntityTooLarge {
	return &GetInboundOperationStatusRequestEntityTooLarge{}
}

/*
GetInboundOperationStatusRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetInboundOperationStatusRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status request entity too large response has a 2xx status code
func (o *GetInboundOperationStatusRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status request entity too large response has a 3xx status code
func (o *GetInboundOperationStatusRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status request entity too large response has a 4xx status code
func (o *GetInboundOperationStatusRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound operation status request entity too large response has a 5xx status code
func (o *GetInboundOperationStatusRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status request entity too large response a status code equal to that given
func (o *GetInboundOperationStatusRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetInboundOperationStatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundOperationStatusRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetInboundOperationStatusRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusUnsupportedMediaType creates a GetInboundOperationStatusUnsupportedMediaType with default headers values
func NewGetInboundOperationStatusUnsupportedMediaType() *GetInboundOperationStatusUnsupportedMediaType {
	return &GetInboundOperationStatusUnsupportedMediaType{}
}

/*
GetInboundOperationStatusUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetInboundOperationStatusUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status unsupported media type response has a 2xx status code
func (o *GetInboundOperationStatusUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status unsupported media type response has a 3xx status code
func (o *GetInboundOperationStatusUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status unsupported media type response has a 4xx status code
func (o *GetInboundOperationStatusUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound operation status unsupported media type response has a 5xx status code
func (o *GetInboundOperationStatusUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status unsupported media type response a status code equal to that given
func (o *GetInboundOperationStatusUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetInboundOperationStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundOperationStatusUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetInboundOperationStatusUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusTooManyRequests creates a GetInboundOperationStatusTooManyRequests with default headers values
func NewGetInboundOperationStatusTooManyRequests() *GetInboundOperationStatusTooManyRequests {
	return &GetInboundOperationStatusTooManyRequests{}
}

/*
GetInboundOperationStatusTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetInboundOperationStatusTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status too many requests response has a 2xx status code
func (o *GetInboundOperationStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status too many requests response has a 3xx status code
func (o *GetInboundOperationStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status too many requests response has a 4xx status code
func (o *GetInboundOperationStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get inbound operation status too many requests response has a 5xx status code
func (o *GetInboundOperationStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get inbound operation status too many requests response a status code equal to that given
func (o *GetInboundOperationStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetInboundOperationStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundOperationStatusTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetInboundOperationStatusTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusInternalServerError creates a GetInboundOperationStatusInternalServerError with default headers values
func NewGetInboundOperationStatusInternalServerError() *GetInboundOperationStatusInternalServerError {
	return &GetInboundOperationStatusInternalServerError{}
}

/*
GetInboundOperationStatusInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetInboundOperationStatusInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status internal server error response has a 2xx status code
func (o *GetInboundOperationStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status internal server error response has a 3xx status code
func (o *GetInboundOperationStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status internal server error response has a 4xx status code
func (o *GetInboundOperationStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound operation status internal server error response has a 5xx status code
func (o *GetInboundOperationStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound operation status internal server error response a status code equal to that given
func (o *GetInboundOperationStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetInboundOperationStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundOperationStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetInboundOperationStatusInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInboundOperationStatusServiceUnavailable creates a GetInboundOperationStatusServiceUnavailable with default headers values
func NewGetInboundOperationStatusServiceUnavailable() *GetInboundOperationStatusServiceUnavailable {
	return &GetInboundOperationStatusServiceUnavailable{}
}

/*
GetInboundOperationStatusServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetInboundOperationStatusServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get inbound operation status service unavailable response has a 2xx status code
func (o *GetInboundOperationStatusServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get inbound operation status service unavailable response has a 3xx status code
func (o *GetInboundOperationStatusServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get inbound operation status service unavailable response has a 4xx status code
func (o *GetInboundOperationStatusServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get inbound operation status service unavailable response has a 5xx status code
func (o *GetInboundOperationStatusServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get inbound operation status service unavailable response a status code equal to that given
func (o *GetInboundOperationStatusServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetInboundOperationStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundOperationStatusServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/operations/{operationId}][%d] getInboundOperationStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetInboundOperationStatusServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetInboundOperationStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
