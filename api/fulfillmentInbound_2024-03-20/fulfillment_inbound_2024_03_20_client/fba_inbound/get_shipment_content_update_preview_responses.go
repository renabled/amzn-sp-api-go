// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// GetShipmentContentUpdatePreviewReader is a Reader for the GetShipmentContentUpdatePreview structure.
type GetShipmentContentUpdatePreviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShipmentContentUpdatePreviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShipmentContentUpdatePreviewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShipmentContentUpdatePreviewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShipmentContentUpdatePreviewForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShipmentContentUpdatePreviewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetShipmentContentUpdatePreviewRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetShipmentContentUpdatePreviewUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShipmentContentUpdatePreviewTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShipmentContentUpdatePreviewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShipmentContentUpdatePreviewServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShipmentContentUpdatePreviewOK creates a GetShipmentContentUpdatePreviewOK with default headers values
func NewGetShipmentContentUpdatePreviewOK() *GetShipmentContentUpdatePreviewOK {
	return &GetShipmentContentUpdatePreviewOK{}
}

/*
GetShipmentContentUpdatePreviewOK describes a response with status code 200, with default header values.

GetShipmentContentUpdatePreview 200 response
*/
type GetShipmentContentUpdatePreviewOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ContentUpdatePreview
}

// IsSuccess returns true when this get shipment content update preview o k response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get shipment content update preview o k response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview o k response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment content update preview o k response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview o k response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetShipmentContentUpdatePreviewOK) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewOK  %+v", 200, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewOK) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewOK  %+v", 200, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewOK) GetPayload() *fulfillment_inbound_2024_03_20_models.ContentUpdatePreview {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ContentUpdatePreview)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewBadRequest creates a GetShipmentContentUpdatePreviewBadRequest with default headers values
func NewGetShipmentContentUpdatePreviewBadRequest() *GetShipmentContentUpdatePreviewBadRequest {
	return &GetShipmentContentUpdatePreviewBadRequest{}
}

/*
GetShipmentContentUpdatePreviewBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShipmentContentUpdatePreviewBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview bad request response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview bad request response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview bad request response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment content update preview bad request response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview bad request response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetShipmentContentUpdatePreviewBadRequest) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewBadRequest  %+v", 400, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewBadRequest) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewBadRequest  %+v", 400, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewForbidden creates a GetShipmentContentUpdatePreviewForbidden with default headers values
func NewGetShipmentContentUpdatePreviewForbidden() *GetShipmentContentUpdatePreviewForbidden {
	return &GetShipmentContentUpdatePreviewForbidden{}
}

/*
GetShipmentContentUpdatePreviewForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetShipmentContentUpdatePreviewForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview forbidden response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview forbidden response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview forbidden response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment content update preview forbidden response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview forbidden response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetShipmentContentUpdatePreviewForbidden) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewForbidden  %+v", 403, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewForbidden) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewForbidden  %+v", 403, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewNotFound creates a GetShipmentContentUpdatePreviewNotFound with default headers values
func NewGetShipmentContentUpdatePreviewNotFound() *GetShipmentContentUpdatePreviewNotFound {
	return &GetShipmentContentUpdatePreviewNotFound{}
}

/*
GetShipmentContentUpdatePreviewNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetShipmentContentUpdatePreviewNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview not found response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview not found response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview not found response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment content update preview not found response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview not found response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetShipmentContentUpdatePreviewNotFound) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewNotFound  %+v", 404, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewNotFound) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewNotFound  %+v", 404, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewRequestEntityTooLarge creates a GetShipmentContentUpdatePreviewRequestEntityTooLarge with default headers values
func NewGetShipmentContentUpdatePreviewRequestEntityTooLarge() *GetShipmentContentUpdatePreviewRequestEntityTooLarge {
	return &GetShipmentContentUpdatePreviewRequestEntityTooLarge{}
}

/*
GetShipmentContentUpdatePreviewRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetShipmentContentUpdatePreviewRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview request entity too large response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview request entity too large response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview request entity too large response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment content update preview request entity too large response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview request entity too large response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewUnsupportedMediaType creates a GetShipmentContentUpdatePreviewUnsupportedMediaType with default headers values
func NewGetShipmentContentUpdatePreviewUnsupportedMediaType() *GetShipmentContentUpdatePreviewUnsupportedMediaType {
	return &GetShipmentContentUpdatePreviewUnsupportedMediaType{}
}

/*
GetShipmentContentUpdatePreviewUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetShipmentContentUpdatePreviewUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview unsupported media type response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview unsupported media type response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview unsupported media type response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment content update preview unsupported media type response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview unsupported media type response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewTooManyRequests creates a GetShipmentContentUpdatePreviewTooManyRequests with default headers values
func NewGetShipmentContentUpdatePreviewTooManyRequests() *GetShipmentContentUpdatePreviewTooManyRequests {
	return &GetShipmentContentUpdatePreviewTooManyRequests{}
}

/*
GetShipmentContentUpdatePreviewTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShipmentContentUpdatePreviewTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview too many requests response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview too many requests response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview too many requests response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get shipment content update preview too many requests response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get shipment content update preview too many requests response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetShipmentContentUpdatePreviewTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewTooManyRequests) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewInternalServerError creates a GetShipmentContentUpdatePreviewInternalServerError with default headers values
func NewGetShipmentContentUpdatePreviewInternalServerError() *GetShipmentContentUpdatePreviewInternalServerError {
	return &GetShipmentContentUpdatePreviewInternalServerError{}
}

/*
GetShipmentContentUpdatePreviewInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetShipmentContentUpdatePreviewInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview internal server error response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview internal server error response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview internal server error response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment content update preview internal server error response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipment content update preview internal server error response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetShipmentContentUpdatePreviewInternalServerError) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewInternalServerError) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewInternalServerError  %+v", 500, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentContentUpdatePreviewServiceUnavailable creates a GetShipmentContentUpdatePreviewServiceUnavailable with default headers values
func NewGetShipmentContentUpdatePreviewServiceUnavailable() *GetShipmentContentUpdatePreviewServiceUnavailable {
	return &GetShipmentContentUpdatePreviewServiceUnavailable{}
}

/*
GetShipmentContentUpdatePreviewServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShipmentContentUpdatePreviewServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this get shipment content update preview service unavailable response has a 2xx status code
func (o *GetShipmentContentUpdatePreviewServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get shipment content update preview service unavailable response has a 3xx status code
func (o *GetShipmentContentUpdatePreviewServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get shipment content update preview service unavailable response has a 4xx status code
func (o *GetShipmentContentUpdatePreviewServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get shipment content update preview service unavailable response has a 5xx status code
func (o *GetShipmentContentUpdatePreviewServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get shipment content update preview service unavailable response a status code equal to that given
func (o *GetShipmentContentUpdatePreviewServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetShipmentContentUpdatePreviewServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}][%d] getShipmentContentUpdatePreviewServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetShipmentContentUpdatePreviewServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GetShipmentContentUpdatePreviewServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
