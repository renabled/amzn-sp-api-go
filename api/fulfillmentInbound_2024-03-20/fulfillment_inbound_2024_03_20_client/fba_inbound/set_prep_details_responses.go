// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// SetPrepDetailsReader is a Reader for the SetPrepDetails structure.
type SetPrepDetailsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetPrepDetailsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewSetPrepDetailsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetPrepDetailsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetPrepDetailsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetPrepDetailsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSetPrepDetailsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSetPrepDetailsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetPrepDetailsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetPrepDetailsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSetPrepDetailsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetPrepDetailsAccepted creates a SetPrepDetailsAccepted with default headers values
func NewSetPrepDetailsAccepted() *SetPrepDetailsAccepted {
	return &SetPrepDetailsAccepted{}
}

/*
SetPrepDetailsAccepted describes a response with status code 202, with default header values.

SetPrepDetails 202 response
*/
type SetPrepDetailsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.SetPrepDetailsResponse
}

// IsSuccess returns true when this set prep details accepted response has a 2xx status code
func (o *SetPrepDetailsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this set prep details accepted response has a 3xx status code
func (o *SetPrepDetailsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details accepted response has a 4xx status code
func (o *SetPrepDetailsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this set prep details accepted response has a 5xx status code
func (o *SetPrepDetailsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details accepted response a status code equal to that given
func (o *SetPrepDetailsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *SetPrepDetailsAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsAccepted  %+v", 202, o.Payload)
}

func (o *SetPrepDetailsAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsAccepted  %+v", 202, o.Payload)
}

func (o *SetPrepDetailsAccepted) GetPayload() *fulfillment_inbound_2024_03_20_models.SetPrepDetailsResponse {
	return o.Payload
}

func (o *SetPrepDetailsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.SetPrepDetailsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsBadRequest creates a SetPrepDetailsBadRequest with default headers values
func NewSetPrepDetailsBadRequest() *SetPrepDetailsBadRequest {
	return &SetPrepDetailsBadRequest{}
}

/*
SetPrepDetailsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SetPrepDetailsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details bad request response has a 2xx status code
func (o *SetPrepDetailsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details bad request response has a 3xx status code
func (o *SetPrepDetailsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details bad request response has a 4xx status code
func (o *SetPrepDetailsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this set prep details bad request response has a 5xx status code
func (o *SetPrepDetailsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details bad request response a status code equal to that given
func (o *SetPrepDetailsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SetPrepDetailsBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *SetPrepDetailsBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsBadRequest  %+v", 400, o.Payload)
}

func (o *SetPrepDetailsBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsForbidden creates a SetPrepDetailsForbidden with default headers values
func NewSetPrepDetailsForbidden() *SetPrepDetailsForbidden {
	return &SetPrepDetailsForbidden{}
}

/*
SetPrepDetailsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SetPrepDetailsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details forbidden response has a 2xx status code
func (o *SetPrepDetailsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details forbidden response has a 3xx status code
func (o *SetPrepDetailsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details forbidden response has a 4xx status code
func (o *SetPrepDetailsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this set prep details forbidden response has a 5xx status code
func (o *SetPrepDetailsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details forbidden response a status code equal to that given
func (o *SetPrepDetailsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SetPrepDetailsForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsForbidden  %+v", 403, o.Payload)
}

func (o *SetPrepDetailsForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsForbidden  %+v", 403, o.Payload)
}

func (o *SetPrepDetailsForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsNotFound creates a SetPrepDetailsNotFound with default headers values
func NewSetPrepDetailsNotFound() *SetPrepDetailsNotFound {
	return &SetPrepDetailsNotFound{}
}

/*
SetPrepDetailsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SetPrepDetailsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details not found response has a 2xx status code
func (o *SetPrepDetailsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details not found response has a 3xx status code
func (o *SetPrepDetailsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details not found response has a 4xx status code
func (o *SetPrepDetailsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this set prep details not found response has a 5xx status code
func (o *SetPrepDetailsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details not found response a status code equal to that given
func (o *SetPrepDetailsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SetPrepDetailsNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsNotFound  %+v", 404, o.Payload)
}

func (o *SetPrepDetailsNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsNotFound  %+v", 404, o.Payload)
}

func (o *SetPrepDetailsNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsRequestEntityTooLarge creates a SetPrepDetailsRequestEntityTooLarge with default headers values
func NewSetPrepDetailsRequestEntityTooLarge() *SetPrepDetailsRequestEntityTooLarge {
	return &SetPrepDetailsRequestEntityTooLarge{}
}

/*
SetPrepDetailsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SetPrepDetailsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details request entity too large response has a 2xx status code
func (o *SetPrepDetailsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details request entity too large response has a 3xx status code
func (o *SetPrepDetailsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details request entity too large response has a 4xx status code
func (o *SetPrepDetailsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this set prep details request entity too large response has a 5xx status code
func (o *SetPrepDetailsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details request entity too large response a status code equal to that given
func (o *SetPrepDetailsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *SetPrepDetailsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SetPrepDetailsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SetPrepDetailsRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsUnsupportedMediaType creates a SetPrepDetailsUnsupportedMediaType with default headers values
func NewSetPrepDetailsUnsupportedMediaType() *SetPrepDetailsUnsupportedMediaType {
	return &SetPrepDetailsUnsupportedMediaType{}
}

/*
SetPrepDetailsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SetPrepDetailsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details unsupported media type response has a 2xx status code
func (o *SetPrepDetailsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details unsupported media type response has a 3xx status code
func (o *SetPrepDetailsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details unsupported media type response has a 4xx status code
func (o *SetPrepDetailsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this set prep details unsupported media type response has a 5xx status code
func (o *SetPrepDetailsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details unsupported media type response a status code equal to that given
func (o *SetPrepDetailsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *SetPrepDetailsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SetPrepDetailsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SetPrepDetailsUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsTooManyRequests creates a SetPrepDetailsTooManyRequests with default headers values
func NewSetPrepDetailsTooManyRequests() *SetPrepDetailsTooManyRequests {
	return &SetPrepDetailsTooManyRequests{}
}

/*
SetPrepDetailsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SetPrepDetailsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details too many requests response has a 2xx status code
func (o *SetPrepDetailsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details too many requests response has a 3xx status code
func (o *SetPrepDetailsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details too many requests response has a 4xx status code
func (o *SetPrepDetailsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this set prep details too many requests response has a 5xx status code
func (o *SetPrepDetailsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this set prep details too many requests response a status code equal to that given
func (o *SetPrepDetailsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SetPrepDetailsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetPrepDetailsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsTooManyRequests  %+v", 429, o.Payload)
}

func (o *SetPrepDetailsTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsInternalServerError creates a SetPrepDetailsInternalServerError with default headers values
func NewSetPrepDetailsInternalServerError() *SetPrepDetailsInternalServerError {
	return &SetPrepDetailsInternalServerError{}
}

/*
SetPrepDetailsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SetPrepDetailsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details internal server error response has a 2xx status code
func (o *SetPrepDetailsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details internal server error response has a 3xx status code
func (o *SetPrepDetailsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details internal server error response has a 4xx status code
func (o *SetPrepDetailsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this set prep details internal server error response has a 5xx status code
func (o *SetPrepDetailsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this set prep details internal server error response a status code equal to that given
func (o *SetPrepDetailsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SetPrepDetailsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *SetPrepDetailsInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsInternalServerError  %+v", 500, o.Payload)
}

func (o *SetPrepDetailsInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetPrepDetailsServiceUnavailable creates a SetPrepDetailsServiceUnavailable with default headers values
func NewSetPrepDetailsServiceUnavailable() *SetPrepDetailsServiceUnavailable {
	return &SetPrepDetailsServiceUnavailable{}
}

/*
SetPrepDetailsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SetPrepDetailsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this set prep details service unavailable response has a 2xx status code
func (o *SetPrepDetailsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this set prep details service unavailable response has a 3xx status code
func (o *SetPrepDetailsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this set prep details service unavailable response has a 4xx status code
func (o *SetPrepDetailsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this set prep details service unavailable response has a 5xx status code
func (o *SetPrepDetailsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this set prep details service unavailable response a status code equal to that given
func (o *SetPrepDetailsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SetPrepDetailsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SetPrepDetailsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/items/prepDetails][%d] setPrepDetailsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SetPrepDetailsServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *SetPrepDetailsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
