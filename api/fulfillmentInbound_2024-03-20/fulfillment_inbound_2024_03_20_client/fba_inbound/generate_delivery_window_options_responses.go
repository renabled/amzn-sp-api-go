// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// GenerateDeliveryWindowOptionsReader is a Reader for the GenerateDeliveryWindowOptions structure.
type GenerateDeliveryWindowOptionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GenerateDeliveryWindowOptionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewGenerateDeliveryWindowOptionsAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGenerateDeliveryWindowOptionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGenerateDeliveryWindowOptionsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGenerateDeliveryWindowOptionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGenerateDeliveryWindowOptionsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGenerateDeliveryWindowOptionsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGenerateDeliveryWindowOptionsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGenerateDeliveryWindowOptionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGenerateDeliveryWindowOptionsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGenerateDeliveryWindowOptionsAccepted creates a GenerateDeliveryWindowOptionsAccepted with default headers values
func NewGenerateDeliveryWindowOptionsAccepted() *GenerateDeliveryWindowOptionsAccepted {
	return &GenerateDeliveryWindowOptionsAccepted{}
}

/*
GenerateDeliveryWindowOptionsAccepted describes a response with status code 202, with default header values.

GenerateDeliveryWindowOptions 202 response
*/
type GenerateDeliveryWindowOptionsAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.GenerateDeliveryWindowOptionsResponse
}

// IsSuccess returns true when this generate delivery window options accepted response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this generate delivery window options accepted response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options accepted response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate delivery window options accepted response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options accepted response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *GenerateDeliveryWindowOptionsAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsAccepted  %+v", 202, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsAccepted  %+v", 202, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsAccepted) GetPayload() *fulfillment_inbound_2024_03_20_models.GenerateDeliveryWindowOptionsResponse {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.GenerateDeliveryWindowOptionsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsBadRequest creates a GenerateDeliveryWindowOptionsBadRequest with default headers values
func NewGenerateDeliveryWindowOptionsBadRequest() *GenerateDeliveryWindowOptionsBadRequest {
	return &GenerateDeliveryWindowOptionsBadRequest{}
}

/*
GenerateDeliveryWindowOptionsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GenerateDeliveryWindowOptionsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options bad request response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options bad request response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options bad request response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate delivery window options bad request response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options bad request response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GenerateDeliveryWindowOptionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsBadRequest  %+v", 400, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsForbidden creates a GenerateDeliveryWindowOptionsForbidden with default headers values
func NewGenerateDeliveryWindowOptionsForbidden() *GenerateDeliveryWindowOptionsForbidden {
	return &GenerateDeliveryWindowOptionsForbidden{}
}

/*
GenerateDeliveryWindowOptionsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GenerateDeliveryWindowOptionsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options forbidden response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options forbidden response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options forbidden response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate delivery window options forbidden response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options forbidden response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GenerateDeliveryWindowOptionsForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsForbidden  %+v", 403, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsForbidden  %+v", 403, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsNotFound creates a GenerateDeliveryWindowOptionsNotFound with default headers values
func NewGenerateDeliveryWindowOptionsNotFound() *GenerateDeliveryWindowOptionsNotFound {
	return &GenerateDeliveryWindowOptionsNotFound{}
}

/*
GenerateDeliveryWindowOptionsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GenerateDeliveryWindowOptionsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options not found response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options not found response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options not found response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate delivery window options not found response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options not found response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GenerateDeliveryWindowOptionsNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsNotFound  %+v", 404, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsNotFound  %+v", 404, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsRequestEntityTooLarge creates a GenerateDeliveryWindowOptionsRequestEntityTooLarge with default headers values
func NewGenerateDeliveryWindowOptionsRequestEntityTooLarge() *GenerateDeliveryWindowOptionsRequestEntityTooLarge {
	return &GenerateDeliveryWindowOptionsRequestEntityTooLarge{}
}

/*
GenerateDeliveryWindowOptionsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GenerateDeliveryWindowOptionsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options request entity too large response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options request entity too large response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options request entity too large response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate delivery window options request entity too large response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options request entity too large response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsUnsupportedMediaType creates a GenerateDeliveryWindowOptionsUnsupportedMediaType with default headers values
func NewGenerateDeliveryWindowOptionsUnsupportedMediaType() *GenerateDeliveryWindowOptionsUnsupportedMediaType {
	return &GenerateDeliveryWindowOptionsUnsupportedMediaType{}
}

/*
GenerateDeliveryWindowOptionsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GenerateDeliveryWindowOptionsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options unsupported media type response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options unsupported media type response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options unsupported media type response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate delivery window options unsupported media type response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options unsupported media type response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsTooManyRequests creates a GenerateDeliveryWindowOptionsTooManyRequests with default headers values
func NewGenerateDeliveryWindowOptionsTooManyRequests() *GenerateDeliveryWindowOptionsTooManyRequests {
	return &GenerateDeliveryWindowOptionsTooManyRequests{}
}

/*
GenerateDeliveryWindowOptionsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GenerateDeliveryWindowOptionsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options too many requests response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options too many requests response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options too many requests response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this generate delivery window options too many requests response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this generate delivery window options too many requests response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GenerateDeliveryWindowOptionsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsInternalServerError creates a GenerateDeliveryWindowOptionsInternalServerError with default headers values
func NewGenerateDeliveryWindowOptionsInternalServerError() *GenerateDeliveryWindowOptionsInternalServerError {
	return &GenerateDeliveryWindowOptionsInternalServerError{}
}

/*
GenerateDeliveryWindowOptionsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GenerateDeliveryWindowOptionsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options internal server error response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options internal server error response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options internal server error response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate delivery window options internal server error response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this generate delivery window options internal server error response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GenerateDeliveryWindowOptionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsInternalServerError  %+v", 500, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateDeliveryWindowOptionsServiceUnavailable creates a GenerateDeliveryWindowOptionsServiceUnavailable with default headers values
func NewGenerateDeliveryWindowOptionsServiceUnavailable() *GenerateDeliveryWindowOptionsServiceUnavailable {
	return &GenerateDeliveryWindowOptionsServiceUnavailable{}
}

/*
GenerateDeliveryWindowOptionsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GenerateDeliveryWindowOptionsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this generate delivery window options service unavailable response has a 2xx status code
func (o *GenerateDeliveryWindowOptionsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this generate delivery window options service unavailable response has a 3xx status code
func (o *GenerateDeliveryWindowOptionsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this generate delivery window options service unavailable response has a 4xx status code
func (o *GenerateDeliveryWindowOptionsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this generate delivery window options service unavailable response has a 5xx status code
func (o *GenerateDeliveryWindowOptionsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this generate delivery window options service unavailable response a status code equal to that given
func (o *GenerateDeliveryWindowOptionsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GenerateDeliveryWindowOptionsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/deliveryWindowOptions][%d] generateDeliveryWindowOptionsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GenerateDeliveryWindowOptionsServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *GenerateDeliveryWindowOptionsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
