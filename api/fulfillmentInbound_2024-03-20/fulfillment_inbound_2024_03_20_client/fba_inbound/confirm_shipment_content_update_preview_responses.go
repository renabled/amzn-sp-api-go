// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// ConfirmShipmentContentUpdatePreviewReader is a Reader for the ConfirmShipmentContentUpdatePreview structure.
type ConfirmShipmentContentUpdatePreviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmShipmentContentUpdatePreviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewConfirmShipmentContentUpdatePreviewAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmShipmentContentUpdatePreviewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmShipmentContentUpdatePreviewForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmShipmentContentUpdatePreviewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewConfirmShipmentContentUpdatePreviewRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewConfirmShipmentContentUpdatePreviewUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmShipmentContentUpdatePreviewTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmShipmentContentUpdatePreviewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmShipmentContentUpdatePreviewServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmShipmentContentUpdatePreviewAccepted creates a ConfirmShipmentContentUpdatePreviewAccepted with default headers values
func NewConfirmShipmentContentUpdatePreviewAccepted() *ConfirmShipmentContentUpdatePreviewAccepted {
	return &ConfirmShipmentContentUpdatePreviewAccepted{}
}

/*
ConfirmShipmentContentUpdatePreviewAccepted describes a response with status code 202, with default header values.

ConfirmShipmentContentUpdatePreview 202 response
*/
type ConfirmShipmentContentUpdatePreviewAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ConfirmShipmentContentUpdatePreviewResponse
}

// IsSuccess returns true when this confirm shipment content update preview accepted response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm shipment content update preview accepted response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview accepted response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm shipment content update preview accepted response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview accepted response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *ConfirmShipmentContentUpdatePreviewAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewAccepted  %+v", 202, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewAccepted  %+v", 202, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewAccepted) GetPayload() *fulfillment_inbound_2024_03_20_models.ConfirmShipmentContentUpdatePreviewResponse {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ConfirmShipmentContentUpdatePreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewBadRequest creates a ConfirmShipmentContentUpdatePreviewBadRequest with default headers values
func NewConfirmShipmentContentUpdatePreviewBadRequest() *ConfirmShipmentContentUpdatePreviewBadRequest {
	return &ConfirmShipmentContentUpdatePreviewBadRequest{}
}

/*
ConfirmShipmentContentUpdatePreviewBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmShipmentContentUpdatePreviewBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview bad request response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview bad request response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview bad request response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment content update preview bad request response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview bad request response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmShipmentContentUpdatePreviewBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewForbidden creates a ConfirmShipmentContentUpdatePreviewForbidden with default headers values
func NewConfirmShipmentContentUpdatePreviewForbidden() *ConfirmShipmentContentUpdatePreviewForbidden {
	return &ConfirmShipmentContentUpdatePreviewForbidden{}
}

/*
ConfirmShipmentContentUpdatePreviewForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmShipmentContentUpdatePreviewForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview forbidden response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview forbidden response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview forbidden response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment content update preview forbidden response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview forbidden response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmShipmentContentUpdatePreviewForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewNotFound creates a ConfirmShipmentContentUpdatePreviewNotFound with default headers values
func NewConfirmShipmentContentUpdatePreviewNotFound() *ConfirmShipmentContentUpdatePreviewNotFound {
	return &ConfirmShipmentContentUpdatePreviewNotFound{}
}

/*
ConfirmShipmentContentUpdatePreviewNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type ConfirmShipmentContentUpdatePreviewNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview not found response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview not found response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview not found response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment content update preview not found response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview not found response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmShipmentContentUpdatePreviewNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewRequestEntityTooLarge creates a ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge with default headers values
func NewConfirmShipmentContentUpdatePreviewRequestEntityTooLarge() *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge {
	return &ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge{}
}

/*
ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview request entity too large response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview request entity too large response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview request entity too large response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment content update preview request entity too large response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview request entity too large response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewUnsupportedMediaType creates a ConfirmShipmentContentUpdatePreviewUnsupportedMediaType with default headers values
func NewConfirmShipmentContentUpdatePreviewUnsupportedMediaType() *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType {
	return &ConfirmShipmentContentUpdatePreviewUnsupportedMediaType{}
}

/*
ConfirmShipmentContentUpdatePreviewUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type ConfirmShipmentContentUpdatePreviewUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview unsupported media type response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview unsupported media type response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview unsupported media type response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment content update preview unsupported media type response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview unsupported media type response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewTooManyRequests creates a ConfirmShipmentContentUpdatePreviewTooManyRequests with default headers values
func NewConfirmShipmentContentUpdatePreviewTooManyRequests() *ConfirmShipmentContentUpdatePreviewTooManyRequests {
	return &ConfirmShipmentContentUpdatePreviewTooManyRequests{}
}

/*
ConfirmShipmentContentUpdatePreviewTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmShipmentContentUpdatePreviewTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview too many requests response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview too many requests response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview too many requests response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment content update preview too many requests response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment content update preview too many requests response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewInternalServerError creates a ConfirmShipmentContentUpdatePreviewInternalServerError with default headers values
func NewConfirmShipmentContentUpdatePreviewInternalServerError() *ConfirmShipmentContentUpdatePreviewInternalServerError {
	return &ConfirmShipmentContentUpdatePreviewInternalServerError{}
}

/*
ConfirmShipmentContentUpdatePreviewInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmShipmentContentUpdatePreviewInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview internal server error response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview internal server error response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview internal server error response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm shipment content update preview internal server error response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm shipment content update preview internal server error response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentContentUpdatePreviewServiceUnavailable creates a ConfirmShipmentContentUpdatePreviewServiceUnavailable with default headers values
func NewConfirmShipmentContentUpdatePreviewServiceUnavailable() *ConfirmShipmentContentUpdatePreviewServiceUnavailable {
	return &ConfirmShipmentContentUpdatePreviewServiceUnavailable{}
}

/*
ConfirmShipmentContentUpdatePreviewServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmShipmentContentUpdatePreviewServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this confirm shipment content update preview service unavailable response has a 2xx status code
func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment content update preview service unavailable response has a 3xx status code
func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment content update preview service unavailable response has a 4xx status code
func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm shipment content update preview service unavailable response has a 5xx status code
func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm shipment content update preview service unavailable response a status code equal to that given
func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/contentUpdatePreviews/{contentUpdatePreviewId}/confirmation][%d] confirmShipmentContentUpdatePreviewServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *ConfirmShipmentContentUpdatePreviewServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
