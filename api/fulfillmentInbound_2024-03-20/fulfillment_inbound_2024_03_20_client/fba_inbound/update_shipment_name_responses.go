// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// UpdateShipmentNameReader is a Reader for the UpdateShipmentName structure.
type UpdateShipmentNameReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateShipmentNameReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateShipmentNameNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateShipmentNameBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateShipmentNameForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateShipmentNameNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateShipmentNameRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateShipmentNameUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateShipmentNameTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateShipmentNameInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateShipmentNameServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateShipmentNameNoContent creates a UpdateShipmentNameNoContent with default headers values
func NewUpdateShipmentNameNoContent() *UpdateShipmentNameNoContent {
	return &UpdateShipmentNameNoContent{}
}

/*
UpdateShipmentNameNoContent describes a response with status code 204, with default header values.

UpdateShipmentName 204 response
*/
type UpdateShipmentNameNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this update shipment name no content response has a 2xx status code
func (o *UpdateShipmentNameNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update shipment name no content response has a 3xx status code
func (o *UpdateShipmentNameNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name no content response has a 4xx status code
func (o *UpdateShipmentNameNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment name no content response has a 5xx status code
func (o *UpdateShipmentNameNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name no content response a status code equal to that given
func (o *UpdateShipmentNameNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateShipmentNameNoContent) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameNoContent ", 204)
}

func (o *UpdateShipmentNameNoContent) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameNoContent ", 204)
}

func (o *UpdateShipmentNameNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewUpdateShipmentNameBadRequest creates a UpdateShipmentNameBadRequest with default headers values
func NewUpdateShipmentNameBadRequest() *UpdateShipmentNameBadRequest {
	return &UpdateShipmentNameBadRequest{}
}

/*
UpdateShipmentNameBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateShipmentNameBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name bad request response has a 2xx status code
func (o *UpdateShipmentNameBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name bad request response has a 3xx status code
func (o *UpdateShipmentNameBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name bad request response has a 4xx status code
func (o *UpdateShipmentNameBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment name bad request response has a 5xx status code
func (o *UpdateShipmentNameBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name bad request response a status code equal to that given
func (o *UpdateShipmentNameBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateShipmentNameBadRequest) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateShipmentNameBadRequest) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateShipmentNameBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameForbidden creates a UpdateShipmentNameForbidden with default headers values
func NewUpdateShipmentNameForbidden() *UpdateShipmentNameForbidden {
	return &UpdateShipmentNameForbidden{}
}

/*
UpdateShipmentNameForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateShipmentNameForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name forbidden response has a 2xx status code
func (o *UpdateShipmentNameForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name forbidden response has a 3xx status code
func (o *UpdateShipmentNameForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name forbidden response has a 4xx status code
func (o *UpdateShipmentNameForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment name forbidden response has a 5xx status code
func (o *UpdateShipmentNameForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name forbidden response a status code equal to that given
func (o *UpdateShipmentNameForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateShipmentNameForbidden) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameForbidden  %+v", 403, o.Payload)
}

func (o *UpdateShipmentNameForbidden) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameForbidden  %+v", 403, o.Payload)
}

func (o *UpdateShipmentNameForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameNotFound creates a UpdateShipmentNameNotFound with default headers values
func NewUpdateShipmentNameNotFound() *UpdateShipmentNameNotFound {
	return &UpdateShipmentNameNotFound{}
}

/*
UpdateShipmentNameNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateShipmentNameNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name not found response has a 2xx status code
func (o *UpdateShipmentNameNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name not found response has a 3xx status code
func (o *UpdateShipmentNameNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name not found response has a 4xx status code
func (o *UpdateShipmentNameNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment name not found response has a 5xx status code
func (o *UpdateShipmentNameNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name not found response a status code equal to that given
func (o *UpdateShipmentNameNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateShipmentNameNotFound) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameNotFound  %+v", 404, o.Payload)
}

func (o *UpdateShipmentNameNotFound) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameNotFound  %+v", 404, o.Payload)
}

func (o *UpdateShipmentNameNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameRequestEntityTooLarge creates a UpdateShipmentNameRequestEntityTooLarge with default headers values
func NewUpdateShipmentNameRequestEntityTooLarge() *UpdateShipmentNameRequestEntityTooLarge {
	return &UpdateShipmentNameRequestEntityTooLarge{}
}

/*
UpdateShipmentNameRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateShipmentNameRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name request entity too large response has a 2xx status code
func (o *UpdateShipmentNameRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name request entity too large response has a 3xx status code
func (o *UpdateShipmentNameRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name request entity too large response has a 4xx status code
func (o *UpdateShipmentNameRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment name request entity too large response has a 5xx status code
func (o *UpdateShipmentNameRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name request entity too large response a status code equal to that given
func (o *UpdateShipmentNameRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateShipmentNameRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateShipmentNameRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateShipmentNameRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameUnsupportedMediaType creates a UpdateShipmentNameUnsupportedMediaType with default headers values
func NewUpdateShipmentNameUnsupportedMediaType() *UpdateShipmentNameUnsupportedMediaType {
	return &UpdateShipmentNameUnsupportedMediaType{}
}

/*
UpdateShipmentNameUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateShipmentNameUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name unsupported media type response has a 2xx status code
func (o *UpdateShipmentNameUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name unsupported media type response has a 3xx status code
func (o *UpdateShipmentNameUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name unsupported media type response has a 4xx status code
func (o *UpdateShipmentNameUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment name unsupported media type response has a 5xx status code
func (o *UpdateShipmentNameUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name unsupported media type response a status code equal to that given
func (o *UpdateShipmentNameUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateShipmentNameUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateShipmentNameUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateShipmentNameUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameTooManyRequests creates a UpdateShipmentNameTooManyRequests with default headers values
func NewUpdateShipmentNameTooManyRequests() *UpdateShipmentNameTooManyRequests {
	return &UpdateShipmentNameTooManyRequests{}
}

/*
UpdateShipmentNameTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateShipmentNameTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name too many requests response has a 2xx status code
func (o *UpdateShipmentNameTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name too many requests response has a 3xx status code
func (o *UpdateShipmentNameTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name too many requests response has a 4xx status code
func (o *UpdateShipmentNameTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update shipment name too many requests response has a 5xx status code
func (o *UpdateShipmentNameTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update shipment name too many requests response a status code equal to that given
func (o *UpdateShipmentNameTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateShipmentNameTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateShipmentNameTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateShipmentNameTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameInternalServerError creates a UpdateShipmentNameInternalServerError with default headers values
func NewUpdateShipmentNameInternalServerError() *UpdateShipmentNameInternalServerError {
	return &UpdateShipmentNameInternalServerError{}
}

/*
UpdateShipmentNameInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateShipmentNameInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name internal server error response has a 2xx status code
func (o *UpdateShipmentNameInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name internal server error response has a 3xx status code
func (o *UpdateShipmentNameInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name internal server error response has a 4xx status code
func (o *UpdateShipmentNameInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment name internal server error response has a 5xx status code
func (o *UpdateShipmentNameInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update shipment name internal server error response a status code equal to that given
func (o *UpdateShipmentNameInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateShipmentNameInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateShipmentNameInternalServerError) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateShipmentNameInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateShipmentNameServiceUnavailable creates a UpdateShipmentNameServiceUnavailable with default headers values
func NewUpdateShipmentNameServiceUnavailable() *UpdateShipmentNameServiceUnavailable {
	return &UpdateShipmentNameServiceUnavailable{}
}

/*
UpdateShipmentNameServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateShipmentNameServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this update shipment name service unavailable response has a 2xx status code
func (o *UpdateShipmentNameServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update shipment name service unavailable response has a 3xx status code
func (o *UpdateShipmentNameServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update shipment name service unavailable response has a 4xx status code
func (o *UpdateShipmentNameServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update shipment name service unavailable response has a 5xx status code
func (o *UpdateShipmentNameServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update shipment name service unavailable response a status code equal to that given
func (o *UpdateShipmentNameServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateShipmentNameServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateShipmentNameServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /inbound/fba/2024-03-20/inboundPlans/{inboundPlanId}/shipments/{shipmentId}/name][%d] updateShipmentNameServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateShipmentNameServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *UpdateShipmentNameServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
