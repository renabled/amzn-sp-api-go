// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fulfillmentInbound_2024-03-20/fulfillment_inbound_2024_03_20_models"
)

// CreateInboundPlanReader is a Reader for the CreateInboundPlan structure.
type CreateInboundPlanReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInboundPlanReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewCreateInboundPlanAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInboundPlanBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInboundPlanForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInboundPlanNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateInboundPlanRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateInboundPlanUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateInboundPlanTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInboundPlanInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateInboundPlanServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateInboundPlanAccepted creates a CreateInboundPlanAccepted with default headers values
func NewCreateInboundPlanAccepted() *CreateInboundPlanAccepted {
	return &CreateInboundPlanAccepted{}
}

/*
CreateInboundPlanAccepted describes a response with status code 202, with default header values.

CreateInboundPlan 202 response
*/
type CreateInboundPlanAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.CreateInboundPlanResponse
}

// IsSuccess returns true when this create inbound plan accepted response has a 2xx status code
func (o *CreateInboundPlanAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create inbound plan accepted response has a 3xx status code
func (o *CreateInboundPlanAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan accepted response has a 4xx status code
func (o *CreateInboundPlanAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inbound plan accepted response has a 5xx status code
func (o *CreateInboundPlanAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan accepted response a status code equal to that given
func (o *CreateInboundPlanAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *CreateInboundPlanAccepted) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanAccepted  %+v", 202, o.Payload)
}

func (o *CreateInboundPlanAccepted) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanAccepted  %+v", 202, o.Payload)
}

func (o *CreateInboundPlanAccepted) GetPayload() *fulfillment_inbound_2024_03_20_models.CreateInboundPlanResponse {
	return o.Payload
}

func (o *CreateInboundPlanAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.CreateInboundPlanResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanBadRequest creates a CreateInboundPlanBadRequest with default headers values
func NewCreateInboundPlanBadRequest() *CreateInboundPlanBadRequest {
	return &CreateInboundPlanBadRequest{}
}

/*
CreateInboundPlanBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateInboundPlanBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan bad request response has a 2xx status code
func (o *CreateInboundPlanBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan bad request response has a 3xx status code
func (o *CreateInboundPlanBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan bad request response has a 4xx status code
func (o *CreateInboundPlanBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound plan bad request response has a 5xx status code
func (o *CreateInboundPlanBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan bad request response a status code equal to that given
func (o *CreateInboundPlanBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateInboundPlanBadRequest) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInboundPlanBadRequest) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInboundPlanBadRequest) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanForbidden creates a CreateInboundPlanForbidden with default headers values
func NewCreateInboundPlanForbidden() *CreateInboundPlanForbidden {
	return &CreateInboundPlanForbidden{}
}

/*
CreateInboundPlanForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateInboundPlanForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan forbidden response has a 2xx status code
func (o *CreateInboundPlanForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan forbidden response has a 3xx status code
func (o *CreateInboundPlanForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan forbidden response has a 4xx status code
func (o *CreateInboundPlanForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound plan forbidden response has a 5xx status code
func (o *CreateInboundPlanForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan forbidden response a status code equal to that given
func (o *CreateInboundPlanForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateInboundPlanForbidden) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanForbidden  %+v", 403, o.Payload)
}

func (o *CreateInboundPlanForbidden) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanForbidden  %+v", 403, o.Payload)
}

func (o *CreateInboundPlanForbidden) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanNotFound creates a CreateInboundPlanNotFound with default headers values
func NewCreateInboundPlanNotFound() *CreateInboundPlanNotFound {
	return &CreateInboundPlanNotFound{}
}

/*
CreateInboundPlanNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateInboundPlanNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan not found response has a 2xx status code
func (o *CreateInboundPlanNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan not found response has a 3xx status code
func (o *CreateInboundPlanNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan not found response has a 4xx status code
func (o *CreateInboundPlanNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound plan not found response has a 5xx status code
func (o *CreateInboundPlanNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan not found response a status code equal to that given
func (o *CreateInboundPlanNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateInboundPlanNotFound) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanNotFound  %+v", 404, o.Payload)
}

func (o *CreateInboundPlanNotFound) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanNotFound  %+v", 404, o.Payload)
}

func (o *CreateInboundPlanNotFound) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanRequestEntityTooLarge creates a CreateInboundPlanRequestEntityTooLarge with default headers values
func NewCreateInboundPlanRequestEntityTooLarge() *CreateInboundPlanRequestEntityTooLarge {
	return &CreateInboundPlanRequestEntityTooLarge{}
}

/*
CreateInboundPlanRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateInboundPlanRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan request entity too large response has a 2xx status code
func (o *CreateInboundPlanRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan request entity too large response has a 3xx status code
func (o *CreateInboundPlanRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan request entity too large response has a 4xx status code
func (o *CreateInboundPlanRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound plan request entity too large response has a 5xx status code
func (o *CreateInboundPlanRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan request entity too large response a status code equal to that given
func (o *CreateInboundPlanRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateInboundPlanRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateInboundPlanRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateInboundPlanRequestEntityTooLarge) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanUnsupportedMediaType creates a CreateInboundPlanUnsupportedMediaType with default headers values
func NewCreateInboundPlanUnsupportedMediaType() *CreateInboundPlanUnsupportedMediaType {
	return &CreateInboundPlanUnsupportedMediaType{}
}

/*
CreateInboundPlanUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateInboundPlanUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan unsupported media type response has a 2xx status code
func (o *CreateInboundPlanUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan unsupported media type response has a 3xx status code
func (o *CreateInboundPlanUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan unsupported media type response has a 4xx status code
func (o *CreateInboundPlanUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound plan unsupported media type response has a 5xx status code
func (o *CreateInboundPlanUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan unsupported media type response a status code equal to that given
func (o *CreateInboundPlanUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateInboundPlanUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateInboundPlanUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateInboundPlanUnsupportedMediaType) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanTooManyRequests creates a CreateInboundPlanTooManyRequests with default headers values
func NewCreateInboundPlanTooManyRequests() *CreateInboundPlanTooManyRequests {
	return &CreateInboundPlanTooManyRequests{}
}

/*
CreateInboundPlanTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateInboundPlanTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan too many requests response has a 2xx status code
func (o *CreateInboundPlanTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan too many requests response has a 3xx status code
func (o *CreateInboundPlanTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan too many requests response has a 4xx status code
func (o *CreateInboundPlanTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inbound plan too many requests response has a 5xx status code
func (o *CreateInboundPlanTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create inbound plan too many requests response a status code equal to that given
func (o *CreateInboundPlanTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateInboundPlanTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateInboundPlanTooManyRequests) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateInboundPlanTooManyRequests) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanInternalServerError creates a CreateInboundPlanInternalServerError with default headers values
func NewCreateInboundPlanInternalServerError() *CreateInboundPlanInternalServerError {
	return &CreateInboundPlanInternalServerError{}
}

/*
CreateInboundPlanInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateInboundPlanInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan internal server error response has a 2xx status code
func (o *CreateInboundPlanInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan internal server error response has a 3xx status code
func (o *CreateInboundPlanInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan internal server error response has a 4xx status code
func (o *CreateInboundPlanInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inbound plan internal server error response has a 5xx status code
func (o *CreateInboundPlanInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create inbound plan internal server error response a status code equal to that given
func (o *CreateInboundPlanInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateInboundPlanInternalServerError) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInboundPlanInternalServerError) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInboundPlanInternalServerError) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInboundPlanServiceUnavailable creates a CreateInboundPlanServiceUnavailable with default headers values
func NewCreateInboundPlanServiceUnavailable() *CreateInboundPlanServiceUnavailable {
	return &CreateInboundPlanServiceUnavailable{}
}

/*
CreateInboundPlanServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateInboundPlanServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fulfillment_inbound_2024_03_20_models.ErrorList
}

// IsSuccess returns true when this create inbound plan service unavailable response has a 2xx status code
func (o *CreateInboundPlanServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inbound plan service unavailable response has a 3xx status code
func (o *CreateInboundPlanServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inbound plan service unavailable response has a 4xx status code
func (o *CreateInboundPlanServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inbound plan service unavailable response has a 5xx status code
func (o *CreateInboundPlanServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create inbound plan service unavailable response a status code equal to that given
func (o *CreateInboundPlanServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateInboundPlanServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateInboundPlanServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /inbound/fba/2024-03-20/inboundPlans][%d] createInboundPlanServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateInboundPlanServiceUnavailable) GetPayload() *fulfillment_inbound_2024_03_20_models.ErrorList {
	return o.Payload
}

func (o *CreateInboundPlanServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fulfillment_inbound_2024_03_20_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
