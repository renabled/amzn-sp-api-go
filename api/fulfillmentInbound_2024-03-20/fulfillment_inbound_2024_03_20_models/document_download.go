// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DocumentDownload Resource to download the requested document.
//
// swagger:model DocumentDownload
type DocumentDownload struct {

	// The type of download. Can be `URL`.
	// Required: true
	DownloadType *string `json:"downloadType"`

	// The timestamp of expiration of the URI. This is in ISO 8601 datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
	// Format: date-time
	Expiration strfmt.DateTime `json:"expiration,omitempty"`

	// Uniform resource identifier to identify where the document is located.
	// Required: true
	URI *string `json:"uri"`
}

// Validate validates this document download
func (m *DocumentDownload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownloadType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DocumentDownload) validateDownloadType(formats strfmt.Registry) error {

	if err := validate.Required("downloadType", "body", m.DownloadType); err != nil {
		return err
	}

	return nil
}

func (m *DocumentDownload) validateExpiration(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration", "body", "date-time", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DocumentDownload) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this document download based on context it is used
func (m *DocumentDownload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DocumentDownload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DocumentDownload) UnmarshalBinary(b []byte) error {
	var res DocumentDownload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
