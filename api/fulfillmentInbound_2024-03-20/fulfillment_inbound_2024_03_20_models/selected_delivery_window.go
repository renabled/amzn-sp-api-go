// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SelectedDeliveryWindow Selected delivery window attributes.
// Example: {"availabilityType":"AVAILABLE","deliveryWindowOptionId":"dw1234abcd-1234-abcd-5678-1234abcd5678","editableUntil":"2024-01-05T20:00:00.000Z","endDate":"2024-01-05T20:00:00.000Z","startDate":"2024-01-05T14:00:00.000Z"}
//
// swagger:model SelectedDeliveryWindow
type SelectedDeliveryWindow struct {

	// Identifies type of Delivery Window Availability. Values: `AVAILABLE`, `CONGESTED`
	// Required: true
	AvailabilityType *string `json:"availabilityType"`

	// Identifier of a delivery window option. A delivery window option represent one option for when a shipment is expected to be delivered.
	// Required: true
	// Max Length: 38
	// Min Length: 36
	// Pattern: ^[a-zA-Z0-9-]*$
	DeliveryWindowOptionID *string `json:"deliveryWindowOptionId"`

	// The timestamp at which this Window can no longer be edited.
	// Format: date-time
	EditableUntil strfmt.DateTime `json:"editableUntil,omitempty"`

	// The end timestamp of the window.
	// Required: true
	// Format: date-time
	EndDate *strfmt.DateTime `json:"endDate"`

	// The start timestamp of the window.
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`
}

// Validate validates this selected delivery window
func (m *SelectedDeliveryWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryWindowOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEditableUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SelectedDeliveryWindow) validateAvailabilityType(formats strfmt.Registry) error {

	if err := validate.Required("availabilityType", "body", m.AvailabilityType); err != nil {
		return err
	}

	return nil
}

func (m *SelectedDeliveryWindow) validateDeliveryWindowOptionID(formats strfmt.Registry) error {

	if err := validate.Required("deliveryWindowOptionId", "body", m.DeliveryWindowOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("deliveryWindowOptionId", "body", *m.DeliveryWindowOptionID, 36); err != nil {
		return err
	}

	if err := validate.MaxLength("deliveryWindowOptionId", "body", *m.DeliveryWindowOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("deliveryWindowOptionId", "body", *m.DeliveryWindowOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *SelectedDeliveryWindow) validateEditableUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.EditableUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("editableUntil", "body", "date-time", m.EditableUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SelectedDeliveryWindow) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SelectedDeliveryWindow) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this selected delivery window based on context it is used
func (m *SelectedDeliveryWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SelectedDeliveryWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SelectedDeliveryWindow) UnmarshalBinary(b []byte) error {
	var res SelectedDeliveryWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
