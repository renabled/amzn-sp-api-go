// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SetPackingInformationRequest The `setPackingInformation` request.
// Example: {"packageGroupings":[{"boxes":[{"contentInformationSource":"BOX_CONTENT_PROVIDED","dimensions":{"height":5,"length":3,"unitOfMeasurement":"CM","width":4},"items":[{"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantity":10}],"quantity":2,"weight":{"unit":"KG","value":5.5}}],"packingGroupId":"pg1234abcd-1234-abcd-5678-1234abcd5678","shipmentId":"sh1234abcd-1234-abcd-5678-1234abcd5678"}]}
//
// swagger:model SetPackingInformationRequest
type SetPackingInformationRequest struct {

	// List of packing information for the inbound plan.
	// Required: true
	// Min Items: 1
	PackageGroupings []*PackageGroupingInput `json:"packageGroupings"`
}

// Validate validates this set packing information request
func (m *SetPackingInformationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageGroupings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetPackingInformationRequest) validatePackageGroupings(formats strfmt.Registry) error {

	if err := validate.Required("packageGroupings", "body", m.PackageGroupings); err != nil {
		return err
	}

	iPackageGroupingsSize := int64(len(m.PackageGroupings))

	if err := validate.MinItems("packageGroupings", "body", iPackageGroupingsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.PackageGroupings); i++ {
		if swag.IsZero(m.PackageGroupings[i]) { // not required
			continue
		}

		if m.PackageGroupings[i] != nil {
			if err := m.PackageGroupings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packageGroupings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packageGroupings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this set packing information request based on the context it is used
func (m *SetPackingInformationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageGroupings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetPackingInformationRequest) contextValidatePackageGroupings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PackageGroupings); i++ {

		if m.PackageGroupings[i] != nil {
			if err := m.PackageGroupings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("packageGroupings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("packageGroupings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetPackingInformationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetPackingInformationRequest) UnmarshalBinary(b []byte) error {
	var res SetPackingInformationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
