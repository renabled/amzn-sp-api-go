// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Item Information associated with a single SKU in the seller's catalog.
//
// swagger:model Item
type Item struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	// Required: true
	// Max Length: 10
	// Min Length: 1
	Asin *string `json:"asin"`

	// The expiration date of the MSKU in ISO 8601 format. The same MSKU with different expiration dates cannot go into the same box.
	// Pattern: ^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$
	Expiration string `json:"expiration,omitempty"`

	// A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center.
	// Required: true
	// Max Length: 10
	// Min Length: 1
	Fnsku *string `json:"fnsku"`

	// Specifies who will label the items. Options include `AMAZON`, `SELLER`, and `NONE`.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	LabelOwner *string `json:"labelOwner"`

	// The manufacturing lot code.
	// Max Length: 256
	// Min Length: 1
	ManufacturingLotCode string `json:"manufacturingLotCode,omitempty"`

	// The merchant defined SKU ID.
	// Required: true
	// Max Length: 40
	// Min Length: 1
	Msku *string `json:"msku"`

	// Special preparations that are required for an item.
	// Required: true
	PrepInstructions []*PrepInstruction `json:"prepInstructions"`

	// The number of the specified MSKU.
	// Required: true
	// Maximum: 10000
	// Minimum: 1
	Quantity *int64 `json:"quantity"`
}

// Validate validates this item
func (m *Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAsin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFnsku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateManufacturingLotCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMsku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepInstructions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) validateAsin(formats strfmt.Registry) error {

	if err := validate.Required("asin", "body", m.Asin); err != nil {
		return err
	}

	if err := validate.MinLength("asin", "body", *m.Asin, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("asin", "body", *m.Asin, 10); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateExpiration(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.Pattern("expiration", "body", m.Expiration, `^([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])$`); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateFnsku(formats strfmt.Registry) error {

	if err := validate.Required("fnsku", "body", m.Fnsku); err != nil {
		return err
	}

	if err := validate.MinLength("fnsku", "body", *m.Fnsku, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("fnsku", "body", *m.Fnsku, 10); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateLabelOwner(formats strfmt.Registry) error {

	if err := validate.Required("labelOwner", "body", m.LabelOwner); err != nil {
		return err
	}

	if err := validate.MinLength("labelOwner", "body", *m.LabelOwner, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("labelOwner", "body", *m.LabelOwner, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateManufacturingLotCode(formats strfmt.Registry) error {
	if swag.IsZero(m.ManufacturingLotCode) { // not required
		return nil
	}

	if err := validate.MinLength("manufacturingLotCode", "body", m.ManufacturingLotCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("manufacturingLotCode", "body", m.ManufacturingLotCode, 256); err != nil {
		return err
	}

	return nil
}

func (m *Item) validateMsku(formats strfmt.Registry) error {

	if err := validate.Required("msku", "body", m.Msku); err != nil {
		return err
	}

	if err := validate.MinLength("msku", "body", *m.Msku, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("msku", "body", *m.Msku, 40); err != nil {
		return err
	}

	return nil
}

func (m *Item) validatePrepInstructions(formats strfmt.Registry) error {

	if err := validate.Required("prepInstructions", "body", m.PrepInstructions); err != nil {
		return err
	}

	for i := 0; i < len(m.PrepInstructions); i++ {
		if swag.IsZero(m.PrepInstructions[i]) { // not required
			continue
		}

		if m.PrepInstructions[i] != nil {
			if err := m.PrepInstructions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prepInstructions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prepInstructions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Item) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	if err := validate.MinimumInt("quantity", "body", *m.Quantity, 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("quantity", "body", *m.Quantity, 10000, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this item based on the context it is used
func (m *Item) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrepInstructions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Item) contextValidatePrepInstructions(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrepInstructions); i++ {

		if m.PrepInstructions[i] != nil {
			if err := m.PrepInstructions[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("prepInstructions" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("prepInstructions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Item) UnmarshalBinary(b []byte) error {
	var res Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
