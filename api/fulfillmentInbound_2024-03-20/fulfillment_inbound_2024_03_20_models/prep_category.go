// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// PrepCategory The preparation category for shipping an item to Amazon's fulfillment network.
//
// swagger:model PrepCategory
type PrepCategory string

func NewPrepCategory(value PrepCategory) *PrepCategory {
	return &value
}

// Pointer returns a pointer to a freshly-allocated PrepCategory.
func (m PrepCategory) Pointer() *PrepCategory {
	return &m
}

const (

	// PrepCategoryADULT captures enum value "ADULT"
	PrepCategoryADULT PrepCategory = "ADULT"

	// PrepCategoryBABY captures enum value "BABY"
	PrepCategoryBABY PrepCategory = "BABY"

	// PrepCategoryFCPROVIDED captures enum value "FC_PROVIDED"
	PrepCategoryFCPROVIDED PrepCategory = "FC_PROVIDED"

	// PrepCategoryFRAGILE captures enum value "FRAGILE"
	PrepCategoryFRAGILE PrepCategory = "FRAGILE"

	// PrepCategoryGRANULAR captures enum value "GRANULAR"
	PrepCategoryGRANULAR PrepCategory = "GRANULAR"

	// PrepCategoryHANGER captures enum value "HANGER"
	PrepCategoryHANGER PrepCategory = "HANGER"

	// PrepCategoryLIQUID captures enum value "LIQUID"
	PrepCategoryLIQUID PrepCategory = "LIQUID"

	// PrepCategoryPERFORATED captures enum value "PERFORATED"
	PrepCategoryPERFORATED PrepCategory = "PERFORATED"

	// PrepCategorySET captures enum value "SET"
	PrepCategorySET PrepCategory = "SET"

	// PrepCategorySHARP captures enum value "SHARP"
	PrepCategorySHARP PrepCategory = "SHARP"

	// PrepCategorySMALL captures enum value "SMALL"
	PrepCategorySMALL PrepCategory = "SMALL"

	// PrepCategoryTEXTILE captures enum value "TEXTILE"
	PrepCategoryTEXTILE PrepCategory = "TEXTILE"

	// PrepCategoryUNKNOWN captures enum value "UNKNOWN"
	PrepCategoryUNKNOWN PrepCategory = "UNKNOWN"

	// PrepCategoryNONE captures enum value "NONE"
	PrepCategoryNONE PrepCategory = "NONE"
)

// for schema
var prepCategoryEnum []interface{}

func init() {
	var res []PrepCategory
	if err := json.Unmarshal([]byte(`["ADULT","BABY","FC_PROVIDED","FRAGILE","GRANULAR","HANGER","LIQUID","PERFORATED","SET","SHARP","SMALL","TEXTILE","UNKNOWN","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		prepCategoryEnum = append(prepCategoryEnum, v)
	}
}

func (m PrepCategory) validatePrepCategoryEnum(path, location string, value PrepCategory) error {
	if err := validate.EnumCase(path, location, value, prepCategoryEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this prep category
func (m PrepCategory) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validatePrepCategoryEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this prep category based on context it is used
func (m PrepCategory) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
