// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Window Contains a start and end DateTime representing a time range.
// Example: {"editableUntil":"2024-01-05T20:00:00.000Z","end":"2024-01-05T20:00:00.000Z","start":"2024-01-05T14:00:00.000Z"}
//
// swagger:model Window
type Window struct {

	// The timestamp at which this Window can no longer be edited.
	// Format: date-time
	EditableUntil strfmt.DateTime `json:"editableUntil,omitempty"`

	// The end timestamp of the window.
	// Required: true
	// Format: date-time
	End *strfmt.DateTime `json:"end"`

	// The start timestamp of the window.
	// Required: true
	// Format: date-time
	Start *strfmt.DateTime `json:"start"`
}

// Validate validates this window
func (m *Window) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEditableUntil(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Window) validateEditableUntil(formats strfmt.Registry) error {
	if swag.IsZero(m.EditableUntil) { // not required
		return nil
	}

	if err := validate.FormatOf("editableUntil", "body", "date-time", m.EditableUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Window) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	if err := validate.FormatOf("end", "body", "date-time", m.End.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Window) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	if err := validate.FormatOf("start", "body", "date-time", m.Start.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this window based on context it is used
func (m *Window) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Window) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Window) UnmarshalBinary(b []byte) error {
	var res Window
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
