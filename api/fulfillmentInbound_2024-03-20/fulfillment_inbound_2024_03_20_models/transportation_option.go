// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TransportationOption Contains information pertaining to a transportation option and the related carrier.
// Example: {"carrier":{"alphaCode":"ABCD","name":"Carrier Name"},"carrierAppointment":{"endTime":"2024-01-06T14:48:00.000Z","startTime":"2024-01-05T14:48:00.000Z"},"preconditions":["CONFIRMED_DELIVERY_WINDOW"],"quote":{"cost":{"amount":5.5,"code":"CAD"},"expiration":"2024-01-06T14:48:00.000Z","voidableUntil":"2024-01-05T14:48:00.000Z"},"shipmentId":"sh1234abcd-1234-abcd-5678-1234abcd5678","shippingMode":"GROUND_SMALL_PARCEL","shippingSolution":"AMAZON_PARTNERED_CARRIER","transportationOptionId":"to1234abcd-1234-abcd-5678-1234abcd5678"}
//
// swagger:model TransportationOption
type TransportationOption struct {

	// carrier
	// Required: true
	Carrier *Carrier `json:"carrier"`

	// carrier appointment
	CarrierAppointment *CarrierAppointment `json:"carrierAppointment,omitempty"`

	// Identifies a list of preconditions for confirming the transportation option.
	// Required: true
	Preconditions []string `json:"preconditions"`

	// quote
	Quote *Quote `json:"quote,omitempty"`

	// Identifier of a shipment. A shipment contains the boxes and units being inbounded.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	ShipmentID *string `json:"shipmentId"`

	// Mode of shipment transportation that this option will provide.
	//
	// Possible values: `GROUND_SMALL_PARCEL`, `FREIGHT_LTL`, `FREIGHT_FTL_PALLET`, `FREIGHT_FTL_NONPALLET`, `OCEAN_LCL`, `OCEAN_FCL`, `AIR_SMALL_PARCEL`, `AIR_SMALL_PARCEL_EXPRESS`.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	ShippingMode *string `json:"shippingMode"`

	// Shipping program for the option. Possible values: `AMAZON_PARTNERED_CARRIER`, `USE_YOUR_OWN_CARRIER`.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	ShippingSolution *string `json:"shippingSolution"`

	// Identifier of a transportation option. A transportation option represent one option for how to send a shipment.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	TransportationOptionID *string `json:"transportationOptionId"`
}

// Validate validates this transportation option
func (m *TransportationOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCarrier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCarrierAppointment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreconditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuote(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingSolution(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransportationOptionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationOption) validateCarrier(formats strfmt.Registry) error {

	if err := validate.Required("carrier", "body", m.Carrier); err != nil {
		return err
	}

	if m.Carrier != nil {
		if err := m.Carrier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrier")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) validateCarrierAppointment(formats strfmt.Registry) error {
	if swag.IsZero(m.CarrierAppointment) { // not required
		return nil
	}

	if m.CarrierAppointment != nil {
		if err := m.CarrierAppointment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierAppointment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierAppointment")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) validatePreconditions(formats strfmt.Registry) error {

	if err := validate.Required("preconditions", "body", m.Preconditions); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateQuote(formats strfmt.Registry) error {
	if swag.IsZero(m.Quote) { // not required
		return nil
	}

	if m.Quote != nil {
		if err := m.Quote.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quote")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.MinLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("shipmentId", "body", *m.ShipmentID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateShippingMode(formats strfmt.Registry) error {

	if err := validate.Required("shippingMode", "body", m.ShippingMode); err != nil {
		return err
	}

	if err := validate.MinLength("shippingMode", "body", *m.ShippingMode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("shippingMode", "body", *m.ShippingMode, 1024); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateShippingSolution(formats strfmt.Registry) error {

	if err := validate.Required("shippingSolution", "body", m.ShippingSolution); err != nil {
		return err
	}

	if err := validate.MinLength("shippingSolution", "body", *m.ShippingSolution, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("shippingSolution", "body", *m.ShippingSolution, 1024); err != nil {
		return err
	}

	return nil
}

func (m *TransportationOption) validateTransportationOptionID(formats strfmt.Registry) error {

	if err := validate.Required("transportationOptionId", "body", m.TransportationOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("transportationOptionId", "body", *m.TransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("transportationOptionId", "body", *m.TransportationOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("transportationOptionId", "body", *m.TransportationOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transportation option based on the context it is used
func (m *TransportationOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCarrier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCarrierAppointment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateQuote(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransportationOption) contextValidateCarrier(ctx context.Context, formats strfmt.Registry) error {

	if m.Carrier != nil {
		if err := m.Carrier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrier")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) contextValidateCarrierAppointment(ctx context.Context, formats strfmt.Registry) error {

	if m.CarrierAppointment != nil {
		if err := m.CarrierAppointment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("carrierAppointment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("carrierAppointment")
			}
			return err
		}
	}

	return nil
}

func (m *TransportationOption) contextValidateQuote(ctx context.Context, formats strfmt.Registry) error {

	if m.Quote != nil {
		if err := m.Quote.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("quote")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("quote")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransportationOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransportationOption) UnmarshalBinary(b []byte) error {
	var res TransportationOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
