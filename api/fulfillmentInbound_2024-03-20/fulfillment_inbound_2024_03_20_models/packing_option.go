// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PackingOption A packing option contains a set of pack groups plus additional information about the packing option, such as any discounts or fees if it's selected.
//
// swagger:model PackingOption
type PackingOption struct {

	// Discount for the offered option.
	// Required: true
	Discounts []*Incentive `json:"discounts"`

	// The time at which this packing option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mm:ss.sssZ`.
	// Format: date-time
	Expiration strfmt.DateTime `json:"expiration,omitempty"`

	// Fee for the offered option.
	// Required: true
	Fees []*Incentive `json:"fees"`

	// Packing group IDs.
	// Required: true
	PackingGroups []string `json:"packingGroups"`

	// Identifier of a packing option.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PackingOptionID *string `json:"packingOptionId"`

	// The status of the packing option. Possible values: `OFFERED`, `ACCEPTED`, `EXPIRED`.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	Status *string `json:"status"`

	// List of supported shipping modes.
	// Required: true
	SupportedShippingConfigurations []*ShippingConfiguration `json:"supportedShippingConfigurations"`
}

// Validate validates this packing option
func (m *PackingOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiscounts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFees(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackingGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackingOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedShippingConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackingOption) validateDiscounts(formats strfmt.Registry) error {

	if err := validate.Required("discounts", "body", m.Discounts); err != nil {
		return err
	}

	for i := 0; i < len(m.Discounts); i++ {
		if swag.IsZero(m.Discounts[i]) { // not required
			continue
		}

		if m.Discounts[i] != nil {
			if err := m.Discounts[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PackingOption) validateExpiration(formats strfmt.Registry) error {
	if swag.IsZero(m.Expiration) { // not required
		return nil
	}

	if err := validate.FormatOf("expiration", "body", "date-time", m.Expiration.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PackingOption) validateFees(formats strfmt.Registry) error {

	if err := validate.Required("fees", "body", m.Fees); err != nil {
		return err
	}

	for i := 0; i < len(m.Fees); i++ {
		if swag.IsZero(m.Fees[i]) { // not required
			continue
		}

		if m.Fees[i] != nil {
			if err := m.Fees[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PackingOption) validatePackingGroups(formats strfmt.Registry) error {

	if err := validate.Required("packingGroups", "body", m.PackingGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.PackingGroups); i++ {

		if err := validate.MinLength("packingGroups"+"."+strconv.Itoa(i), "body", m.PackingGroups[i], 38); err != nil {
			return err
		}

		if err := validate.MaxLength("packingGroups"+"."+strconv.Itoa(i), "body", m.PackingGroups[i], 38); err != nil {
			return err
		}

		if err := validate.Pattern("packingGroups"+"."+strconv.Itoa(i), "body", m.PackingGroups[i], `^[a-zA-Z0-9-]*$`); err != nil {
			return err
		}

	}

	return nil
}

func (m *PackingOption) validatePackingOptionID(formats strfmt.Registry) error {

	if err := validate.Required("packingOptionId", "body", m.PackingOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("packingOptionId", "body", *m.PackingOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("packingOptionId", "body", *m.PackingOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("packingOptionId", "body", *m.PackingOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *PackingOption) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	if err := validate.MinLength("status", "body", *m.Status, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("status", "body", *m.Status, 1024); err != nil {
		return err
	}

	return nil
}

func (m *PackingOption) validateSupportedShippingConfigurations(formats strfmt.Registry) error {

	if err := validate.Required("supportedShippingConfigurations", "body", m.SupportedShippingConfigurations); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedShippingConfigurations); i++ {
		if swag.IsZero(m.SupportedShippingConfigurations[i]) { // not required
			continue
		}

		if m.SupportedShippingConfigurations[i] != nil {
			if err := m.SupportedShippingConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedShippingConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("supportedShippingConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this packing option based on the context it is used
func (m *PackingOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDiscounts(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupportedShippingConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PackingOption) contextValidateDiscounts(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Discounts); i++ {

		if m.Discounts[i] != nil {
			if err := m.Discounts[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("discounts" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("discounts" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PackingOption) contextValidateFees(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Fees); i++ {

		if m.Fees[i] != nil {
			if err := m.Fees[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("fees" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("fees" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PackingOption) contextValidateSupportedShippingConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.SupportedShippingConfigurations); i++ {

		if m.SupportedShippingConfigurations[i] != nil {
			if err := m.SupportedShippingConfigurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedShippingConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("supportedShippingConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PackingOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PackingOption) UnmarshalBinary(b []byte) error {
	var res PackingOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
