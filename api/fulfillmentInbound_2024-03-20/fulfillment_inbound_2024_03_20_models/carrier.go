// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Carrier The carrier for the inbound shipment.
//
// swagger:model Carrier
type Carrier struct {

	// The carrier code. For example, USPS or DHLEX.
	// Max Length: 1024
	// Min Length: 1
	AlphaCode string `json:"alphaCode,omitempty"`

	// The name of the carrier.
	// Max Length: 1024
	// Min Length: 1
	Name string `json:"name,omitempty"`
}

// Validate validates this carrier
func (m *Carrier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlphaCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Carrier) validateAlphaCode(formats strfmt.Registry) error {
	if swag.IsZero(m.AlphaCode) { // not required
		return nil
	}

	if err := validate.MinLength("alphaCode", "body", m.AlphaCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("alphaCode", "body", m.AlphaCode, 1024); err != nil {
		return err
	}

	return nil
}

func (m *Carrier) validateName(formats strfmt.Registry) error {
	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", m.Name, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this carrier based on context it is used
func (m *Carrier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Carrier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Carrier) UnmarshalBinary(b []byte) error {
	var res Carrier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
