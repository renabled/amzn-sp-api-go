// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Stackability Indicates whether pallets will be stacked when carrier arrives for pick-up.
//
// swagger:model Stackability
type Stackability string

func NewStackability(value Stackability) *Stackability {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Stackability.
func (m Stackability) Pointer() *Stackability {
	return &m
}

const (

	// StackabilitySTACKABLE captures enum value "STACKABLE"
	StackabilitySTACKABLE Stackability = "STACKABLE"

	// StackabilityNONSTACKABLE captures enum value "NON_STACKABLE"
	StackabilityNONSTACKABLE Stackability = "NON_STACKABLE"
)

// for schema
var stackabilityEnum []interface{}

func init() {
	var res []Stackability
	if err := json.Unmarshal([]byte(`["STACKABLE","NON_STACKABLE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackabilityEnum = append(stackabilityEnum, v)
	}
}

func (m Stackability) validateStackabilityEnum(path, location string, value Stackability) error {
	if err := validate.EnumCase(path, location, value, stackabilityEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this stackability
func (m Stackability) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateStackabilityEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this stackability based on context it is used
func (m Stackability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
