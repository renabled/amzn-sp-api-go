// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OwnerConstraint A constraint that can apply to an individual owner. If no constraint is specified, both `AMAZON` and `SELLER` are acceptable.
//
// swagger:model OwnerConstraint
type OwnerConstraint string

func NewOwnerConstraint(value OwnerConstraint) *OwnerConstraint {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OwnerConstraint.
func (m OwnerConstraint) Pointer() *OwnerConstraint {
	return &m
}

const (

	// OwnerConstraintAMAZONONLY captures enum value "AMAZON_ONLY"
	OwnerConstraintAMAZONONLY OwnerConstraint = "AMAZON_ONLY"

	// OwnerConstraintNONEONLY captures enum value "NONE_ONLY"
	OwnerConstraintNONEONLY OwnerConstraint = "NONE_ONLY"

	// OwnerConstraintSELLERONLY captures enum value "SELLER_ONLY"
	OwnerConstraintSELLERONLY OwnerConstraint = "SELLER_ONLY"
)

// for schema
var ownerConstraintEnum []interface{}

func init() {
	var res []OwnerConstraint
	if err := json.Unmarshal([]byte(`["AMAZON_ONLY","NONE_ONLY","SELLER_ONLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ownerConstraintEnum = append(ownerConstraintEnum, v)
	}
}

func (m OwnerConstraint) validateOwnerConstraintEnum(path, location string, value OwnerConstraint) error {
	if err := validate.EnumCase(path, location, value, ownerConstraintEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this owner constraint
func (m OwnerConstraint) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOwnerConstraintEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this owner constraint based on context it is used
func (m OwnerConstraint) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
