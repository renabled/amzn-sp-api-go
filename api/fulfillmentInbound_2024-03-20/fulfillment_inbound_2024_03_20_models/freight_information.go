// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FreightInformation Freight information describes the skus being transported. Freight carrier options and quotes will only be returned if the freight information is provided.
// Example: {"declaredValue":{"amount":5.5,"code":"CAD"},"freightClass":"FC_50"}
//
// swagger:model FreightInformation
type FreightInformation struct {

	// declared value
	DeclaredValue *Currency `json:"declaredValue,omitempty"`

	// Freight class. Can be: `NONE`, `FC_50`, `FC_55`, `FC_60`, `FC_65`, `FC_70`, `FC_77_5`, `FC_85`, `FC_92_5`, `FC_100`, `FC_110`, `FC_125`, `FC_150`, `FC_175`, `FC_200`, `FC_250`, `FC_300`, `FC_400`, `FC_500`.
	// Max Length: 1024
	// Min Length: 1
	FreightClass string `json:"freightClass,omitempty"`
}

// Validate validates this freight information
func (m *FreightInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeclaredValue(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreightClass(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreightInformation) validateDeclaredValue(formats strfmt.Registry) error {
	if swag.IsZero(m.DeclaredValue) { // not required
		return nil
	}

	if m.DeclaredValue != nil {
		if err := m.DeclaredValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("declaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("declaredValue")
			}
			return err
		}
	}

	return nil
}

func (m *FreightInformation) validateFreightClass(formats strfmt.Registry) error {
	if swag.IsZero(m.FreightClass) { // not required
		return nil
	}

	if err := validate.MinLength("freightClass", "body", m.FreightClass, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("freightClass", "body", m.FreightClass, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this freight information based on the context it is used
func (m *FreightInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeclaredValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreightInformation) contextValidateDeclaredValue(ctx context.Context, formats strfmt.Registry) error {

	if m.DeclaredValue != nil {
		if err := m.DeclaredValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("declaredValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("declaredValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FreightInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FreightInformation) UnmarshalBinary(b []byte) error {
	var res FreightInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
