// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentTransportationConfiguration Details needed to generate the transportation options.
//
// swagger:model ShipmentTransportationConfiguration
type ShipmentTransportationConfiguration struct {

	// contact information
	ContactInformation *ContactInformation `json:"contactInformation,omitempty"`

	// freight information
	FreightInformation *FreightInformation `json:"freightInformation,omitempty"`

	// List of pallet configuration inputs.
	Pallets []*PalletInput `json:"pallets"`

	// The range of dates within which the seller intends to ship their items. This is the pick-up date or 'ready to ship' date, not an estimated delivery date.
	// Required: true
	ReadyToShipWindow *WindowInput `json:"readyToShipWindow"`

	// Identifier of a shipment. A shipment contains the boxes and units being inbounded.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	ShipmentID *string `json:"shipmentId"`
}

// Validate validates this shipment transportation configuration
func (m *ShipmentTransportationConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreightInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePallets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReadyToShipWindow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentTransportationConfiguration) validateContactInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactInformation) { // not required
		return nil
	}

	if m.ContactInformation != nil {
		if err := m.ContactInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentTransportationConfiguration) validateFreightInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.FreightInformation) { // not required
		return nil
	}

	if m.FreightInformation != nil {
		if err := m.FreightInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freightInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("freightInformation")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentTransportationConfiguration) validatePallets(formats strfmt.Registry) error {
	if swag.IsZero(m.Pallets) { // not required
		return nil
	}

	for i := 0; i < len(m.Pallets); i++ {
		if swag.IsZero(m.Pallets[i]) { // not required
			continue
		}

		if m.Pallets[i] != nil {
			if err := m.Pallets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pallets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pallets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentTransportationConfiguration) validateReadyToShipWindow(formats strfmt.Registry) error {

	if err := validate.Required("readyToShipWindow", "body", m.ReadyToShipWindow); err != nil {
		return err
	}

	if m.ReadyToShipWindow != nil {
		if err := m.ReadyToShipWindow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readyToShipWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readyToShipWindow")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentTransportationConfiguration) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.MinLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("shipmentId", "body", *m.ShipmentID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("shipmentId", "body", *m.ShipmentID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this shipment transportation configuration based on the context it is used
func (m *ShipmentTransportationConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFreightInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePallets(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReadyToShipWindow(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentTransportationConfiguration) contextValidateContactInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactInformation != nil {
		if err := m.ContactInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactInformation")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentTransportationConfiguration) contextValidateFreightInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.FreightInformation != nil {
		if err := m.FreightInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freightInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("freightInformation")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentTransportationConfiguration) contextValidatePallets(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Pallets); i++ {

		if m.Pallets[i] != nil {
			if err := m.Pallets[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pallets" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("pallets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ShipmentTransportationConfiguration) contextValidateReadyToShipWindow(ctx context.Context, formats strfmt.Registry) error {

	if m.ReadyToShipWindow != nil {
		if err := m.ReadyToShipWindow.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("readyToShipWindow")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("readyToShipWindow")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentTransportationConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentTransportationConfiguration) UnmarshalBinary(b []byte) error {
	var res ShipmentTransportationConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
