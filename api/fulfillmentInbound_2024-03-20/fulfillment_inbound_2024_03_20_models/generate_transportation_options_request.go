// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenerateTransportationOptionsRequest The `generateTransportationOptions` request.
// Example: {"placementOptionId":"pl1234abcd-1234-abcd-5678-1234abcd5678","shipmentTransportationConfigurations":[{"contactInformation":{"email":"email@email.com","name":"John Smithy","phoneNumber":"1234567890"},"freightInformation":{"declaredValue":{"amount":5.5,"code":"CAD"},"freightClass":"FC_50"},"pallets":[{"dimensions":{"height":5,"length":3,"unitOfMeasurement":"CM","width":4},"quantity":2,"stackability":"STACKABLE","weight":{"unit":"KG","value":5.5}}],"readyToShipWindow":{"start":"2024-01-01T00:00Z"},"shipmentId":"sh1234abcd-1234-abcd-5678-1234abcd5678"}]}
//
// swagger:model GenerateTransportationOptionsRequest
type GenerateTransportationOptionsRequest struct {

	// The placement option to generate transportation options for.
	// Required: true
	// Max Length: 38
	// Min Length: 38
	// Pattern: ^[a-zA-Z0-9-]*$
	PlacementOptionID *string `json:"placementOptionId"`

	// List of shipment transportation configurations.
	// Required: true
	// Min Items: 1
	ShipmentTransportationConfigurations []*ShipmentTransportationConfiguration `json:"shipmentTransportationConfigurations"`
}

// Validate validates this generate transportation options request
func (m *GenerateTransportationOptionsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePlacementOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentTransportationConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateTransportationOptionsRequest) validatePlacementOptionID(formats strfmt.Registry) error {

	if err := validate.Required("placementOptionId", "body", m.PlacementOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("placementOptionId", "body", *m.PlacementOptionID, 38); err != nil {
		return err
	}

	if err := validate.MaxLength("placementOptionId", "body", *m.PlacementOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("placementOptionId", "body", *m.PlacementOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *GenerateTransportationOptionsRequest) validateShipmentTransportationConfigurations(formats strfmt.Registry) error {

	if err := validate.Required("shipmentTransportationConfigurations", "body", m.ShipmentTransportationConfigurations); err != nil {
		return err
	}

	iShipmentTransportationConfigurationsSize := int64(len(m.ShipmentTransportationConfigurations))

	if err := validate.MinItems("shipmentTransportationConfigurations", "body", iShipmentTransportationConfigurationsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.ShipmentTransportationConfigurations); i++ {
		if swag.IsZero(m.ShipmentTransportationConfigurations[i]) { // not required
			continue
		}

		if m.ShipmentTransportationConfigurations[i] != nil {
			if err := m.ShipmentTransportationConfigurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentTransportationConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipmentTransportationConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this generate transportation options request based on the context it is used
func (m *GenerateTransportationOptionsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShipmentTransportationConfigurations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateTransportationOptionsRequest) contextValidateShipmentTransportationConfigurations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ShipmentTransportationConfigurations); i++ {

		if m.ShipmentTransportationConfigurations[i] != nil {
			if err := m.ShipmentTransportationConfigurations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("shipmentTransportationConfigurations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("shipmentTransportationConfigurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GenerateTransportationOptionsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenerateTransportationOptionsRequest) UnmarshalBinary(b []byte) error {
	var res GenerateTransportationOptionsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
