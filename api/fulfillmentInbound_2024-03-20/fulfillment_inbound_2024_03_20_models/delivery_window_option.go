// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeliveryWindowOption Contains information pertaining to a delivery window option.
// Example: {"availabilityType":"AVAILABLE","deliveryWindowOptionId":"dw1234abcd-1234-abcd-5678-1234abcd5678","endDate":"2024-01-05T20:00:00.000Z","inboundPlanId":"wf1234abcd-1234-abcd-5678-1234abcd5678","placementOptionId":"pl1234abcd-1234-abcd-5678-1234abcd5678","shipmentId":"sh1234abcd-1234-abcd-5678-1234abcd5678","startDate":"2024-01-05T14:00:00.000Z","validUntil":"2024-01-05T20:00:00.000Z"}
//
// swagger:model DeliveryWindowOption
type DeliveryWindowOption struct {

	// Identifies type of Delivery Window Availability. Values: `AVAILABLE`, `CONGESTED`
	// Required: true
	AvailabilityType *string `json:"availabilityType"`

	// Identifier of a delivery window option. A delivery window option represent one option for when a shipment is expected to be delivered.
	// Required: true
	// Max Length: 38
	// Min Length: 36
	// Pattern: ^[a-zA-Z0-9-]*$
	DeliveryWindowOptionID *string `json:"deliveryWindowOptionId"`

	// The time at which this delivery window option ends. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mmZ`.
	// Required: true
	// Format: date-time
	EndDate *strfmt.DateTime `json:"endDate"`

	// The time at which this delivery window option starts. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mmZ`.
	// Required: true
	// Format: date-time
	StartDate *strfmt.DateTime `json:"startDate"`

	// The time at which this window delivery option is no longer valid. In [ISO 8601](https://developer-docs.amazon.com/sp-api/docs/iso-8601) datetime format with pattern `yyyy-MM-ddTHH:mmZ`.
	// Required: true
	// Format: date-time
	ValidUntil *strfmt.DateTime `json:"validUntil"`
}

// Validate validates this delivery window option
func (m *DeliveryWindowOption) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryWindowOptionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValidUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryWindowOption) validateAvailabilityType(formats strfmt.Registry) error {

	if err := validate.Required("availabilityType", "body", m.AvailabilityType); err != nil {
		return err
	}

	return nil
}

func (m *DeliveryWindowOption) validateDeliveryWindowOptionID(formats strfmt.Registry) error {

	if err := validate.Required("deliveryWindowOptionId", "body", m.DeliveryWindowOptionID); err != nil {
		return err
	}

	if err := validate.MinLength("deliveryWindowOptionId", "body", *m.DeliveryWindowOptionID, 36); err != nil {
		return err
	}

	if err := validate.MaxLength("deliveryWindowOptionId", "body", *m.DeliveryWindowOptionID, 38); err != nil {
		return err
	}

	if err := validate.Pattern("deliveryWindowOptionId", "body", *m.DeliveryWindowOptionID, `^[a-zA-Z0-9-]*$`); err != nil {
		return err
	}

	return nil
}

func (m *DeliveryWindowOption) validateEndDate(formats strfmt.Registry) error {

	if err := validate.Required("endDate", "body", m.EndDate); err != nil {
		return err
	}

	if err := validate.FormatOf("endDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeliveryWindowOption) validateStartDate(formats strfmt.Registry) error {

	if err := validate.Required("startDate", "body", m.StartDate); err != nil {
		return err
	}

	if err := validate.FormatOf("startDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *DeliveryWindowOption) validateValidUntil(formats strfmt.Registry) error {

	if err := validate.Required("validUntil", "body", m.ValidUntil); err != nil {
		return err
	}

	if err := validate.FormatOf("validUntil", "body", "date-time", m.ValidUntil.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this delivery window option based on context it is used
func (m *DeliveryWindowOption) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DeliveryWindowOption) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeliveryWindowOption) UnmarshalBinary(b []byte) error {
	var res DeliveryWindowOption
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
