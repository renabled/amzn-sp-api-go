// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// BoxContentInformationSource Indication of how box content is meant to be provided.
//
// swagger:model BoxContentInformationSource
type BoxContentInformationSource string

func NewBoxContentInformationSource(value BoxContentInformationSource) *BoxContentInformationSource {
	return &value
}

// Pointer returns a pointer to a freshly-allocated BoxContentInformationSource.
func (m BoxContentInformationSource) Pointer() *BoxContentInformationSource {
	return &m
}

const (

	// BoxContentInformationSourceBOXCONTENTPROVIDED captures enum value "BOX_CONTENT_PROVIDED"
	BoxContentInformationSourceBOXCONTENTPROVIDED BoxContentInformationSource = "BOX_CONTENT_PROVIDED"

	// BoxContentInformationSourceMANUALPROCESS captures enum value "MANUAL_PROCESS"
	BoxContentInformationSourceMANUALPROCESS BoxContentInformationSource = "MANUAL_PROCESS"

	// BoxContentInformationSourceBARCODE2D captures enum value "BARCODE_2D"
	BoxContentInformationSourceBARCODE2D BoxContentInformationSource = "BARCODE_2D"
)

// for schema
var boxContentInformationSourceEnum []interface{}

func init() {
	var res []BoxContentInformationSource
	if err := json.Unmarshal([]byte(`["BOX_CONTENT_PROVIDED","MANUAL_PROCESS","BARCODE_2D"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		boxContentInformationSourceEnum = append(boxContentInformationSourceEnum, v)
	}
}

func (m BoxContentInformationSource) validateBoxContentInformationSourceEnum(path, location string, value BoxContentInformationSource) error {
	if err := validate.EnumCase(path, location, value, boxContentInformationSourceEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this box content information source
func (m BoxContentInformationSource) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateBoxContentInformationSourceEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this box content information source based on context it is used
func (m BoxContentInformationSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
