// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LabelPrintType Indicates the type of print type for a given label.
// Example: STANDARD_FORMAT
//
// swagger:model LabelPrintType
type LabelPrintType string

func NewLabelPrintType(value LabelPrintType) *LabelPrintType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LabelPrintType.
func (m LabelPrintType) Pointer() *LabelPrintType {
	return &m
}

const (

	// LabelPrintTypeSTANDARDFORMAT captures enum value "STANDARD_FORMAT"
	LabelPrintTypeSTANDARDFORMAT LabelPrintType = "STANDARD_FORMAT"

	// LabelPrintTypeTHERMALPRINTING captures enum value "THERMAL_PRINTING"
	LabelPrintTypeTHERMALPRINTING LabelPrintType = "THERMAL_PRINTING"
)

// for schema
var labelPrintTypeEnum []interface{}

func init() {
	var res []LabelPrintType
	if err := json.Unmarshal([]byte(`["STANDARD_FORMAT","THERMAL_PRINTING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelPrintTypeEnum = append(labelPrintTypeEnum, v)
	}
}

func (m LabelPrintType) validateLabelPrintTypeEnum(path, location string, value LabelPrintType) error {
	if err := validate.EnumCase(path, location, value, labelPrintTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this label print type
func (m LabelPrintType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLabelPrintTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this label print type based on context it is used
func (m LabelPrintType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
