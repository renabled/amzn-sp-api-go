// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenerateShipmentContentUpdatePreviewsRequest The `GenerateShipmentContentUpdatePreviews` request.
// Example: {"boxes":[{"contentInformationSource":"BOX_CONTENT_PROVIDED","dimensions":{"height":5,"length":3,"unitOfMeasurement":"CM","width":4},"items":[{"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantity":10}],"packageId":"pk1234abcd-1234-abcd-5678-1234abcd5678","quantity":2,"weight":{"unit":"KG","value":5.5}}],"items":[{"expiration":"2024-01-01","labelOwner":"AMAZON","manufacturingLotCode":"manufacturingLotCode","msku":"Sunglasses","prepOwner":"AMAZON","quantity":10}]}
//
// swagger:model GenerateShipmentContentUpdatePreviewsRequest
type GenerateShipmentContentUpdatePreviewsRequest struct {

	// A list of boxes that will be present in the shipment after the update.
	// Required: true
	// Max Items: 5000
	// Min Items: 1
	Boxes []*BoxUpdateInput `json:"boxes"`

	// A list of all items that will be present in the shipment after the update.
	// Required: true
	// Max Items: 2000
	// Min Items: 1
	Items []*ItemInput `json:"items"`
}

// Validate validates this generate shipment content update previews request
func (m *GenerateShipmentContentUpdatePreviewsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBoxes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateShipmentContentUpdatePreviewsRequest) validateBoxes(formats strfmt.Registry) error {

	if err := validate.Required("boxes", "body", m.Boxes); err != nil {
		return err
	}

	iBoxesSize := int64(len(m.Boxes))

	if err := validate.MinItems("boxes", "body", iBoxesSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("boxes", "body", iBoxesSize, 5000); err != nil {
		return err
	}

	for i := 0; i < len(m.Boxes); i++ {
		if swag.IsZero(m.Boxes[i]) { // not required
			continue
		}

		if m.Boxes[i] != nil {
			if err := m.Boxes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boxes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GenerateShipmentContentUpdatePreviewsRequest) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	iItemsSize := int64(len(m.Items))

	if err := validate.MinItems("items", "body", iItemsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("items", "body", iItemsSize, 2000); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this generate shipment content update previews request based on the context it is used
func (m *GenerateShipmentContentUpdatePreviewsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBoxes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateShipmentContentUpdatePreviewsRequest) contextValidateBoxes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Boxes); i++ {

		if m.Boxes[i] != nil {
			if err := m.Boxes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("boxes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("boxes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GenerateShipmentContentUpdatePreviewsRequest) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GenerateShipmentContentUpdatePreviewsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenerateShipmentContentUpdatePreviewsRequest) UnmarshalBinary(b []byte) error {
	var res GenerateShipmentContentUpdatePreviewsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
