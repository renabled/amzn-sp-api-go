// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationProblem A problem with additional properties persisted to an operation.
//
// swagger:model OperationProblem
type OperationProblem struct {

	// An error code that identifies the type of error that occurred.
	// Required: true
	// Max Length: 256
	// Min Length: 1
	Code *string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	// Max Length: 8192
	// Min Length: 0
	Details *string `json:"details,omitempty"`

	// A message that describes the error condition.
	// Required: true
	// Max Length: 2048
	// Min Length: 1
	Message *string `json:"message"`

	// The severity of the problem. Can be: `WARNING`, `ERROR`.
	// Required: true
	// Max Length: 1024
	// Min Length: 1
	Severity *string `json:"severity"`
}

// Validate validates this operation problem
func (m *OperationProblem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationProblem) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	if err := validate.MinLength("code", "body", *m.Code, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("code", "body", *m.Code, 256); err != nil {
		return err
	}

	return nil
}

func (m *OperationProblem) validateDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.Details) { // not required
		return nil
	}

	if err := validate.MinLength("details", "body", *m.Details, 0); err != nil {
		return err
	}

	if err := validate.MaxLength("details", "body", *m.Details, 8192); err != nil {
		return err
	}

	return nil
}

func (m *OperationProblem) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", *m.Message, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("message", "body", *m.Message, 2048); err != nil {
		return err
	}

	return nil
}

func (m *OperationProblem) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	if err := validate.MinLength("severity", "body", *m.Severity, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("severity", "body", *m.Severity, 1024); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this operation problem based on context it is used
func (m *OperationProblem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OperationProblem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationProblem) UnmarshalBinary(b []byte) error {
	var res OperationProblem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
