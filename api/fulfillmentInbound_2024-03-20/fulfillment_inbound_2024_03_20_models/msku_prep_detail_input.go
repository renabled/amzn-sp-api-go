// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MskuPrepDetailInput An MSKU and its related prep details.
// Example: {"msku":"msku","prepCategory":"NONE","prepTypes":["ITEM_NO_PREP"]}
//
// swagger:model MskuPrepDetailInput
type MskuPrepDetailInput struct {

	// The merchant SKU, a merchant-supplied identifier for a specific SKU.
	// Required: true
	// Max Length: 40
	// Min Length: 1
	Msku *string `json:"msku"`

	// prep category
	// Required: true
	PrepCategory *PrepCategory `json:"prepCategory"`

	// A list of preparation types associated with a preparation category.
	// Required: true
	PrepTypes []PrepType `json:"prepTypes"`
}

// Validate validates this msku prep detail input
func (m *MskuPrepDetailInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMsku(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MskuPrepDetailInput) validateMsku(formats strfmt.Registry) error {

	if err := validate.Required("msku", "body", m.Msku); err != nil {
		return err
	}

	if err := validate.MinLength("msku", "body", *m.Msku, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("msku", "body", *m.Msku, 40); err != nil {
		return err
	}

	return nil
}

func (m *MskuPrepDetailInput) validatePrepCategory(formats strfmt.Registry) error {

	if err := validate.Required("prepCategory", "body", m.PrepCategory); err != nil {
		return err
	}

	if err := validate.Required("prepCategory", "body", m.PrepCategory); err != nil {
		return err
	}

	if m.PrepCategory != nil {
		if err := m.PrepCategory.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prepCategory")
			}
			return err
		}
	}

	return nil
}

func (m *MskuPrepDetailInput) validatePrepTypes(formats strfmt.Registry) error {

	if err := validate.Required("prepTypes", "body", m.PrepTypes); err != nil {
		return err
	}

	for i := 0; i < len(m.PrepTypes); i++ {

		if err := m.PrepTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepTypes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prepTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// ContextValidate validate this msku prep detail input based on the context it is used
func (m *MskuPrepDetailInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrepCategory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrepTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MskuPrepDetailInput) contextValidatePrepCategory(ctx context.Context, formats strfmt.Registry) error {

	if m.PrepCategory != nil {
		if err := m.PrepCategory.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepCategory")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prepCategory")
			}
			return err
		}
	}

	return nil
}

func (m *MskuPrepDetailInput) contextValidatePrepTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PrepTypes); i++ {

		if err := m.PrepTypes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepTypes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("prepTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *MskuPrepDetailInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MskuPrepDetailInput) UnmarshalBinary(b []byte) error {
	var res MskuPrepDetailInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
