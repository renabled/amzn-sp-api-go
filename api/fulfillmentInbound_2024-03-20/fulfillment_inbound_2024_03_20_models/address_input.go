// Code generated by go-swagger; DO NOT EDIT.

package fulfillment_inbound_2024_03_20_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddressInput Specific details to identify a place.
// Example: {"addressLine1":"123 example street","addressLine2":"Floor 19","city":"Toronto","companyName":"Acme","countryCode":"CA","email":"email@email.com","name":"name","phoneNumber":"1234567890","postalCode":"M1M1M1","stateOrProvinceCode":"ON"}
//
// swagger:model AddressInput
type AddressInput struct {

	// Street address information.
	// Required: true
	// Max Length: 180
	// Min Length: 1
	AddressLine1 *string `json:"addressLine1"`

	// Additional street address information.
	// Max Length: 60
	// Min Length: 1
	AddressLine2 string `json:"addressLine2,omitempty"`

	// The city.
	// Required: true
	// Max Length: 30
	// Min Length: 1
	City *string `json:"city"`

	// The name of the business.
	// Max Length: 50
	// Min Length: 1
	CompanyName string `json:"companyName,omitempty"`

	// The country code in two-character ISO 3166-1 alpha-2 format.
	// Required: true
	// Max Length: 2
	// Min Length: 2
	// Pattern: ^[A-Z]{2}$
	CountryCode *string `json:"countryCode"`

	// The email address.
	// Max Length: 1024
	// Min Length: 1
	Email string `json:"email,omitempty"`

	// The name of the individual who is the primary contact.
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// The phone number.
	// Required: true
	// Max Length: 20
	// Min Length: 1
	PhoneNumber *string `json:"phoneNumber"`

	// The postal code.
	// Required: true
	// Max Length: 32
	// Min Length: 1
	PostalCode *string `json:"postalCode"`

	// The state or province code.
	// Max Length: 64
	// Min Length: 1
	StateOrProvinceCode string `json:"stateOrProvinceCode,omitempty"`
}

// Validate validates this address input
func (m *AddressInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddressLine2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCompanyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhoneNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrProvinceCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddressInput) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("addressLine1", "body", m.AddressLine1); err != nil {
		return err
	}

	if err := validate.MinLength("addressLine1", "body", *m.AddressLine1, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("addressLine1", "body", *m.AddressLine1, 180); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateAddressLine2(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressLine2) { // not required
		return nil
	}

	if err := validate.MinLength("addressLine2", "body", m.AddressLine2, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("addressLine2", "body", m.AddressLine2, 60); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateCity(formats strfmt.Registry) error {

	if err := validate.Required("city", "body", m.City); err != nil {
		return err
	}

	if err := validate.MinLength("city", "body", *m.City, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("city", "body", *m.City, 30); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateCompanyName(formats strfmt.Registry) error {
	if swag.IsZero(m.CompanyName) { // not required
		return nil
	}

	if err := validate.MinLength("companyName", "body", m.CompanyName, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("companyName", "body", m.CompanyName, 50); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateCountryCode(formats strfmt.Registry) error {

	if err := validate.Required("countryCode", "body", m.CountryCode); err != nil {
		return err
	}

	if err := validate.MinLength("countryCode", "body", *m.CountryCode, 2); err != nil {
		return err
	}

	if err := validate.MaxLength("countryCode", "body", *m.CountryCode, 2); err != nil {
		return err
	}

	if err := validate.Pattern("countryCode", "body", *m.CountryCode, `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.MinLength("email", "body", m.Email, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("email", "body", m.Email, 1024); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", *m.Name, 50); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validatePhoneNumber(formats strfmt.Registry) error {

	if err := validate.Required("phoneNumber", "body", m.PhoneNumber); err != nil {
		return err
	}

	if err := validate.MinLength("phoneNumber", "body", *m.PhoneNumber, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("phoneNumber", "body", *m.PhoneNumber, 20); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validatePostalCode(formats strfmt.Registry) error {

	if err := validate.Required("postalCode", "body", m.PostalCode); err != nil {
		return err
	}

	if err := validate.MinLength("postalCode", "body", *m.PostalCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("postalCode", "body", *m.PostalCode, 32); err != nil {
		return err
	}

	return nil
}

func (m *AddressInput) validateStateOrProvinceCode(formats strfmt.Registry) error {
	if swag.IsZero(m.StateOrProvinceCode) { // not required
		return nil
	}

	if err := validate.MinLength("stateOrProvinceCode", "body", m.StateOrProvinceCode, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("stateOrProvinceCode", "body", m.StateOrProvinceCode, 64); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address input based on context it is used
func (m *AddressInput) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddressInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddressInput) UnmarshalBinary(b []byte) error {
	var res AddressInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
