// Code generated by go-swagger; DO NOT EDIT.

package fees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/productFeesV0/product_fees_v0_models"
)

// GetMyFeesEstimateForSKUReader is a Reader for the GetMyFeesEstimateForSKU structure.
type GetMyFeesEstimateForSKUReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMyFeesEstimateForSKUReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMyFeesEstimateForSKUOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMyFeesEstimateForSKUBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetMyFeesEstimateForSKUUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMyFeesEstimateForSKUForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMyFeesEstimateForSKUNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMyFeesEstimateForSKUTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMyFeesEstimateForSKUInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMyFeesEstimateForSKUServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMyFeesEstimateForSKUOK creates a GetMyFeesEstimateForSKUOK with default headers values
func NewGetMyFeesEstimateForSKUOK() *GetMyFeesEstimateForSKUOK {
	return &GetMyFeesEstimateForSKUOK{}
}

/* GetMyFeesEstimateForSKUOK describes a response with status code 200, with default header values.

Success.
*/
type GetMyFeesEstimateForSKUOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUOK) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUOK  %+v", 200, o.Payload)
}
func (o *GetMyFeesEstimateForSKUOK) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUBadRequest creates a GetMyFeesEstimateForSKUBadRequest with default headers values
func NewGetMyFeesEstimateForSKUBadRequest() *GetMyFeesEstimateForSKUBadRequest {
	return &GetMyFeesEstimateForSKUBadRequest{}
}

/* GetMyFeesEstimateForSKUBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetMyFeesEstimateForSKUBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUBadRequest) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUBadRequest  %+v", 400, o.Payload)
}
func (o *GetMyFeesEstimateForSKUBadRequest) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUUnauthorized creates a GetMyFeesEstimateForSKUUnauthorized with default headers values
func NewGetMyFeesEstimateForSKUUnauthorized() *GetMyFeesEstimateForSKUUnauthorized {
	return &GetMyFeesEstimateForSKUUnauthorized{}
}

/* GetMyFeesEstimateForSKUUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetMyFeesEstimateForSKUUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUUnauthorized) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUUnauthorized  %+v", 401, o.Payload)
}
func (o *GetMyFeesEstimateForSKUUnauthorized) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUForbidden creates a GetMyFeesEstimateForSKUForbidden with default headers values
func NewGetMyFeesEstimateForSKUForbidden() *GetMyFeesEstimateForSKUForbidden {
	return &GetMyFeesEstimateForSKUForbidden{}
}

/* GetMyFeesEstimateForSKUForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetMyFeesEstimateForSKUForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUForbidden) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUForbidden  %+v", 403, o.Payload)
}
func (o *GetMyFeesEstimateForSKUForbidden) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUNotFound creates a GetMyFeesEstimateForSKUNotFound with default headers values
func NewGetMyFeesEstimateForSKUNotFound() *GetMyFeesEstimateForSKUNotFound {
	return &GetMyFeesEstimateForSKUNotFound{}
}

/* GetMyFeesEstimateForSKUNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetMyFeesEstimateForSKUNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUNotFound) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUNotFound  %+v", 404, o.Payload)
}
func (o *GetMyFeesEstimateForSKUNotFound) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUTooManyRequests creates a GetMyFeesEstimateForSKUTooManyRequests with default headers values
func NewGetMyFeesEstimateForSKUTooManyRequests() *GetMyFeesEstimateForSKUTooManyRequests {
	return &GetMyFeesEstimateForSKUTooManyRequests{}
}

/* GetMyFeesEstimateForSKUTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetMyFeesEstimateForSKUTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetMyFeesEstimateForSKUTooManyRequests) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUInternalServerError creates a GetMyFeesEstimateForSKUInternalServerError with default headers values
func NewGetMyFeesEstimateForSKUInternalServerError() *GetMyFeesEstimateForSKUInternalServerError {
	return &GetMyFeesEstimateForSKUInternalServerError{}
}

/* GetMyFeesEstimateForSKUInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetMyFeesEstimateForSKUInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUInternalServerError) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUInternalServerError  %+v", 500, o.Payload)
}
func (o *GetMyFeesEstimateForSKUInternalServerError) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimateForSKUServiceUnavailable creates a GetMyFeesEstimateForSKUServiceUnavailable with default headers values
func NewGetMyFeesEstimateForSKUServiceUnavailable() *GetMyFeesEstimateForSKUServiceUnavailable {
	return &GetMyFeesEstimateForSKUServiceUnavailable{}
}

/* GetMyFeesEstimateForSKUServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetMyFeesEstimateForSKUServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimateResponse
}

func (o *GetMyFeesEstimateForSKUServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/listings/{SellerSKU}/feesEstimate][%d] getMyFeesEstimateForSKUServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetMyFeesEstimateForSKUServiceUnavailable) GetPayload() *product_fees_v0_models.GetMyFeesEstimateResponse {
	return o.Payload
}

func (o *GetMyFeesEstimateForSKUServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimateResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
