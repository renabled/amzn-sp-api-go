// Code generated by go-swagger; DO NOT EDIT.

package fees

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/productFeesV0/product_fees_v0_models"
)

// GetMyFeesEstimatesReader is a Reader for the GetMyFeesEstimates structure.
type GetMyFeesEstimatesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMyFeesEstimatesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMyFeesEstimatesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMyFeesEstimatesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetMyFeesEstimatesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMyFeesEstimatesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMyFeesEstimatesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMyFeesEstimatesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMyFeesEstimatesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMyFeesEstimatesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMyFeesEstimatesOK creates a GetMyFeesEstimatesOK with default headers values
func NewGetMyFeesEstimatesOK() *GetMyFeesEstimatesOK {
	return &GetMyFeesEstimatesOK{}
}

/*
GetMyFeesEstimatesOK describes a response with status code 200, with default header values.

Success.
*/
type GetMyFeesEstimatesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload product_fees_v0_models.GetMyFeesEstimatesResponse
}

// IsSuccess returns true when this get my fees estimates o k response has a 2xx status code
func (o *GetMyFeesEstimatesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get my fees estimates o k response has a 3xx status code
func (o *GetMyFeesEstimatesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates o k response has a 4xx status code
func (o *GetMyFeesEstimatesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get my fees estimates o k response has a 5xx status code
func (o *GetMyFeesEstimatesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get my fees estimates o k response a status code equal to that given
func (o *GetMyFeesEstimatesOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMyFeesEstimatesOK) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesOK  %+v", 200, o.Payload)
}

func (o *GetMyFeesEstimatesOK) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesOK  %+v", 200, o.Payload)
}

func (o *GetMyFeesEstimatesOK) GetPayload() product_fees_v0_models.GetMyFeesEstimatesResponse {
	return o.Payload
}

func (o *GetMyFeesEstimatesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesBadRequest creates a GetMyFeesEstimatesBadRequest with default headers values
func NewGetMyFeesEstimatesBadRequest() *GetMyFeesEstimatesBadRequest {
	return &GetMyFeesEstimatesBadRequest{}
}

/*
GetMyFeesEstimatesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetMyFeesEstimatesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates bad request response has a 2xx status code
func (o *GetMyFeesEstimatesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates bad request response has a 3xx status code
func (o *GetMyFeesEstimatesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates bad request response has a 4xx status code
func (o *GetMyFeesEstimatesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get my fees estimates bad request response has a 5xx status code
func (o *GetMyFeesEstimatesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get my fees estimates bad request response a status code equal to that given
func (o *GetMyFeesEstimatesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetMyFeesEstimatesBadRequest) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesBadRequest  %+v", 400, o.Payload)
}

func (o *GetMyFeesEstimatesBadRequest) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesBadRequest  %+v", 400, o.Payload)
}

func (o *GetMyFeesEstimatesBadRequest) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesUnauthorized creates a GetMyFeesEstimatesUnauthorized with default headers values
func NewGetMyFeesEstimatesUnauthorized() *GetMyFeesEstimatesUnauthorized {
	return &GetMyFeesEstimatesUnauthorized{}
}

/*
GetMyFeesEstimatesUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetMyFeesEstimatesUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates unauthorized response has a 2xx status code
func (o *GetMyFeesEstimatesUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates unauthorized response has a 3xx status code
func (o *GetMyFeesEstimatesUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates unauthorized response has a 4xx status code
func (o *GetMyFeesEstimatesUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get my fees estimates unauthorized response has a 5xx status code
func (o *GetMyFeesEstimatesUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get my fees estimates unauthorized response a status code equal to that given
func (o *GetMyFeesEstimatesUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetMyFeesEstimatesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMyFeesEstimatesUnauthorized) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesUnauthorized  %+v", 401, o.Payload)
}

func (o *GetMyFeesEstimatesUnauthorized) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesForbidden creates a GetMyFeesEstimatesForbidden with default headers values
func NewGetMyFeesEstimatesForbidden() *GetMyFeesEstimatesForbidden {
	return &GetMyFeesEstimatesForbidden{}
}

/*
GetMyFeesEstimatesForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include **Access Denied**, **Unauthorized**, **Expired Token**, or **Invalid Signature**.
*/
type GetMyFeesEstimatesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates forbidden response has a 2xx status code
func (o *GetMyFeesEstimatesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates forbidden response has a 3xx status code
func (o *GetMyFeesEstimatesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates forbidden response has a 4xx status code
func (o *GetMyFeesEstimatesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get my fees estimates forbidden response has a 5xx status code
func (o *GetMyFeesEstimatesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get my fees estimates forbidden response a status code equal to that given
func (o *GetMyFeesEstimatesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetMyFeesEstimatesForbidden) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesForbidden  %+v", 403, o.Payload)
}

func (o *GetMyFeesEstimatesForbidden) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesForbidden  %+v", 403, o.Payload)
}

func (o *GetMyFeesEstimatesForbidden) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesNotFound creates a GetMyFeesEstimatesNotFound with default headers values
func NewGetMyFeesEstimatesNotFound() *GetMyFeesEstimatesNotFound {
	return &GetMyFeesEstimatesNotFound{}
}

/*
GetMyFeesEstimatesNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetMyFeesEstimatesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates not found response has a 2xx status code
func (o *GetMyFeesEstimatesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates not found response has a 3xx status code
func (o *GetMyFeesEstimatesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates not found response has a 4xx status code
func (o *GetMyFeesEstimatesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get my fees estimates not found response has a 5xx status code
func (o *GetMyFeesEstimatesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get my fees estimates not found response a status code equal to that given
func (o *GetMyFeesEstimatesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetMyFeesEstimatesNotFound) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesNotFound  %+v", 404, o.Payload)
}

func (o *GetMyFeesEstimatesNotFound) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesNotFound  %+v", 404, o.Payload)
}

func (o *GetMyFeesEstimatesNotFound) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesTooManyRequests creates a GetMyFeesEstimatesTooManyRequests with default headers values
func NewGetMyFeesEstimatesTooManyRequests() *GetMyFeesEstimatesTooManyRequests {
	return &GetMyFeesEstimatesTooManyRequests{}
}

/*
GetMyFeesEstimatesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetMyFeesEstimatesTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates too many requests response has a 2xx status code
func (o *GetMyFeesEstimatesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates too many requests response has a 3xx status code
func (o *GetMyFeesEstimatesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates too many requests response has a 4xx status code
func (o *GetMyFeesEstimatesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get my fees estimates too many requests response has a 5xx status code
func (o *GetMyFeesEstimatesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get my fees estimates too many requests response a status code equal to that given
func (o *GetMyFeesEstimatesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetMyFeesEstimatesTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMyFeesEstimatesTooManyRequests) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMyFeesEstimatesTooManyRequests) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesInternalServerError creates a GetMyFeesEstimatesInternalServerError with default headers values
func NewGetMyFeesEstimatesInternalServerError() *GetMyFeesEstimatesInternalServerError {
	return &GetMyFeesEstimatesInternalServerError{}
}

/*
GetMyFeesEstimatesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetMyFeesEstimatesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates internal server error response has a 2xx status code
func (o *GetMyFeesEstimatesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates internal server error response has a 3xx status code
func (o *GetMyFeesEstimatesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates internal server error response has a 4xx status code
func (o *GetMyFeesEstimatesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get my fees estimates internal server error response has a 5xx status code
func (o *GetMyFeesEstimatesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get my fees estimates internal server error response a status code equal to that given
func (o *GetMyFeesEstimatesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetMyFeesEstimatesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMyFeesEstimatesInternalServerError) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMyFeesEstimatesInternalServerError) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMyFeesEstimatesServiceUnavailable creates a GetMyFeesEstimatesServiceUnavailable with default headers values
func NewGetMyFeesEstimatesServiceUnavailable() *GetMyFeesEstimatesServiceUnavailable {
	return &GetMyFeesEstimatesServiceUnavailable{}
}

/*
GetMyFeesEstimatesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetMyFeesEstimatesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *product_fees_v0_models.GetMyFeesEstimatesErrorList
}

// IsSuccess returns true when this get my fees estimates service unavailable response has a 2xx status code
func (o *GetMyFeesEstimatesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get my fees estimates service unavailable response has a 3xx status code
func (o *GetMyFeesEstimatesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get my fees estimates service unavailable response has a 4xx status code
func (o *GetMyFeesEstimatesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get my fees estimates service unavailable response has a 5xx status code
func (o *GetMyFeesEstimatesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get my fees estimates service unavailable response a status code equal to that given
func (o *GetMyFeesEstimatesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetMyFeesEstimatesServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMyFeesEstimatesServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /products/fees/v0/feesEstimate][%d] getMyFeesEstimatesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMyFeesEstimatesServiceUnavailable) GetPayload() *product_fees_v0_models.GetMyFeesEstimatesErrorList {
	return o.Payload
}

func (o *GetMyFeesEstimatesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(product_fees_v0_models.GetMyFeesEstimatesErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
