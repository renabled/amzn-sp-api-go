// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncludedFeeDetail The type of fee, fee amount, and other details.
//
// swagger:model IncludedFeeDetail
type IncludedFeeDetail struct {

	// The amount charged for a given fee.
	// Required: true
	FeeAmount *MoneyType `json:"FeeAmount"`

	// The promotion amount for a given fee.
	FeePromotion *MoneyType `json:"FeePromotion,omitempty"`

	// The type of fee charged to a seller.
	// Required: true
	FeeType *string `json:"FeeType"`

	// The final fee amount for a given fee.
	// Required: true
	FinalFee *MoneyType `json:"FinalFee"`

	// The tax amount for a given fee.
	TaxAmount *MoneyType `json:"TaxAmount,omitempty"`
}

// Validate validates this included fee detail
func (m *IncludedFeeDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeePromotion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFinalFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxAmount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncludedFeeDetail) validateFeeAmount(formats strfmt.Registry) error {

	if err := validate.Required("FeeAmount", "body", m.FeeAmount); err != nil {
		return err
	}

	if m.FeeAmount != nil {
		if err := m.FeeAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *IncludedFeeDetail) validateFeePromotion(formats strfmt.Registry) error {
	if swag.IsZero(m.FeePromotion) { // not required
		return nil
	}

	if m.FeePromotion != nil {
		if err := m.FeePromotion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeePromotion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeePromotion")
			}
			return err
		}
	}

	return nil
}

func (m *IncludedFeeDetail) validateFeeType(formats strfmt.Registry) error {

	if err := validate.Required("FeeType", "body", m.FeeType); err != nil {
		return err
	}

	return nil
}

func (m *IncludedFeeDetail) validateFinalFee(formats strfmt.Registry) error {

	if err := validate.Required("FinalFee", "body", m.FinalFee); err != nil {
		return err
	}

	if m.FinalFee != nil {
		if err := m.FinalFee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FinalFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FinalFee")
			}
			return err
		}
	}

	return nil
}

func (m *IncludedFeeDetail) validateTaxAmount(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxAmount) { // not required
		return nil
	}

	if m.TaxAmount != nil {
		if err := m.TaxAmount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxAmount")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this included fee detail based on the context it is used
func (m *IncludedFeeDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeePromotion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFinalFee(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxAmount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncludedFeeDetail) contextValidateFeeAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.FeeAmount != nil {
		if err := m.FeeAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeeAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeeAmount")
			}
			return err
		}
	}

	return nil
}

func (m *IncludedFeeDetail) contextValidateFeePromotion(ctx context.Context, formats strfmt.Registry) error {

	if m.FeePromotion != nil {
		if err := m.FeePromotion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeePromotion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeePromotion")
			}
			return err
		}
	}

	return nil
}

func (m *IncludedFeeDetail) contextValidateFinalFee(ctx context.Context, formats strfmt.Registry) error {

	if m.FinalFee != nil {
		if err := m.FinalFee.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FinalFee")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FinalFee")
			}
			return err
		}
	}

	return nil
}

func (m *IncludedFeeDetail) contextValidateTaxAmount(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxAmount != nil {
		if err := m.TaxAmount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TaxAmount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TaxAmount")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncludedFeeDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncludedFeeDetail) UnmarshalBinary(b []byte) error {
	var res IncludedFeeDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
