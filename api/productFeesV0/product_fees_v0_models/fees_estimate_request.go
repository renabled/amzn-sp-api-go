// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeesEstimateRequest A product, marketplace, and proposed price used to request estimated fees.
//
// swagger:model FeesEstimateRequest
type FeesEstimateRequest struct {

	// A unique identifier provided by the caller to track this request.
	// Required: true
	Identifier *string `json:"Identifier"`

	// When true, the offer is fulfilled by Amazon.
	IsAmazonFulfilled bool `json:"IsAmazonFulfilled,omitempty"`

	// A marketplace identifier.
	// Required: true
	MarketplaceID *string `json:"MarketplaceId"`

	// optional fulfillment program
	OptionalFulfillmentProgram OptionalFulfillmentProgram `json:"OptionalFulfillmentProgram,omitempty"`

	// The product price that the fee estimate is based on.
	// Required: true
	PriceToEstimateFees *PriceToEstimateFees `json:"PriceToEstimateFees"`
}

// Validate validates this fees estimate request
func (m *FeesEstimateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalFulfillmentProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceToEstimateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateRequest) validateIdentifier(formats strfmt.Registry) error {

	if err := validate.Required("Identifier", "body", m.Identifier); err != nil {
		return err
	}

	return nil
}

func (m *FeesEstimateRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("MarketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *FeesEstimateRequest) validateOptionalFulfillmentProgram(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionalFulfillmentProgram) { // not required
		return nil
	}

	if err := m.OptionalFulfillmentProgram.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OptionalFulfillmentProgram")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("OptionalFulfillmentProgram")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateRequest) validatePriceToEstimateFees(formats strfmt.Registry) error {

	if err := validate.Required("PriceToEstimateFees", "body", m.PriceToEstimateFees); err != nil {
		return err
	}

	if m.PriceToEstimateFees != nil {
		if err := m.PriceToEstimateFees.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceToEstimateFees")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceToEstimateFees")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fees estimate request based on the context it is used
func (m *FeesEstimateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOptionalFulfillmentProgram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceToEstimateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateRequest) contextValidateOptionalFulfillmentProgram(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OptionalFulfillmentProgram.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OptionalFulfillmentProgram")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("OptionalFulfillmentProgram")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateRequest) contextValidatePriceToEstimateFees(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceToEstimateFees != nil {
		if err := m.PriceToEstimateFees.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceToEstimateFees")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceToEstimateFees")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeesEstimateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeesEstimateRequest) UnmarshalBinary(b []byte) error {
	var res FeesEstimateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
