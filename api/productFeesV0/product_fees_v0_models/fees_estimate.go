// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeesEstimate The total estimated fees for an item and a list of details.
//
// swagger:model FeesEstimate
type FeesEstimate struct {

	// fee detail list
	FeeDetailList FeeDetailList `json:"FeeDetailList,omitempty"`

	// The time at which the fees were estimated. This defaults to the time the request is made.
	// Required: true
	// Format: date-time
	TimeOfFeesEstimation *strfmt.DateTime `json:"TimeOfFeesEstimation"`

	// Total estimated fees for a given item, price, and fulfillment channel.
	TotalFeesEstimate *MoneyType `json:"TotalFeesEstimate,omitempty"`
}

// Validate validates this fees estimate
func (m *FeesEstimate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeeDetailList(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeOfFeesEstimation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalFeesEstimate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimate) validateFeeDetailList(formats strfmt.Registry) error {
	if swag.IsZero(m.FeeDetailList) { // not required
		return nil
	}

	if err := m.FeeDetailList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeDetailList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FeeDetailList")
		}
		return err
	}

	return nil
}

func (m *FeesEstimate) validateTimeOfFeesEstimation(formats strfmt.Registry) error {

	if err := validate.Required("TimeOfFeesEstimation", "body", m.TimeOfFeesEstimation); err != nil {
		return err
	}

	if err := validate.FormatOf("TimeOfFeesEstimation", "body", "date-time", m.TimeOfFeesEstimation.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FeesEstimate) validateTotalFeesEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalFeesEstimate) { // not required
		return nil
	}

	if m.TotalFeesEstimate != nil {
		if err := m.TotalFeesEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalFeesEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalFeesEstimate")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fees estimate based on the context it is used
func (m *FeesEstimate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFeeDetailList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalFeesEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimate) contextValidateFeeDetailList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FeeDetailList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("FeeDetailList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("FeeDetailList")
		}
		return err
	}

	return nil
}

func (m *FeesEstimate) contextValidateTotalFeesEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalFeesEstimate != nil {
		if err := m.TotalFeesEstimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("TotalFeesEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("TotalFeesEstimate")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeesEstimate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeesEstimate) UnmarshalBinary(b []byte) error {
	var res FeesEstimate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
