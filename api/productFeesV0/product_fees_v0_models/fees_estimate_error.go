// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeesEstimateError An unexpected error occurred during this operation.
//
// swagger:model FeesEstimateError
type FeesEstimateError struct {

	// An error code that identifies the type of error that occurred.
	// Required: true
	Code *string `json:"Code"`

	// detail
	// Required: true
	Detail FeesEstimateErrorDetail `json:"Detail"`

	// A message that describes the error condition.
	// Required: true
	Message *string `json:"Message"`

	// An error type, identifying either the receiver or the sender as the originator of the error.
	// Required: true
	Type *string `json:"Type"`
}

// Validate validates this fees estimate error
func (m *FeesEstimateError) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateError) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("Code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

func (m *FeesEstimateError) validateDetail(formats strfmt.Registry) error {

	if err := validate.Required("Detail", "body", m.Detail); err != nil {
		return err
	}

	if err := m.Detail.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Detail")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Detail")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateError) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("Message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *FeesEstimateError) validateType(formats strfmt.Registry) error {

	if err := validate.Required("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fees estimate error based on the context it is used
func (m *FeesEstimateError) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateError) contextValidateDetail(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Detail.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Detail")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Detail")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeesEstimateError) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeesEstimateError) UnmarshalBinary(b []byte) error {
	var res FeesEstimateError
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
