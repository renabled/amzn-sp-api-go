// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FeesEstimateIdentifier An item identifier, marketplace, time of request, and other details that identify an estimate.
//
// swagger:model FeesEstimateIdentifier
type FeesEstimateIdentifier struct {

	// Id type
	IDType IDType `json:"IdType,omitempty"`

	// The item identifier.
	IDValue string `json:"IdValue,omitempty"`

	// When true, the offer is fulfilled by Amazon.
	IsAmazonFulfilled bool `json:"IsAmazonFulfilled,omitempty"`

	// A marketplace identifier.
	MarketplaceID string `json:"MarketplaceId,omitempty"`

	// optional fulfillment program
	OptionalFulfillmentProgram OptionalFulfillmentProgram `json:"OptionalFulfillmentProgram,omitempty"`

	// The item price on which the fee estimate is based.
	PriceToEstimateFees *PriceToEstimateFees `json:"PriceToEstimateFees,omitempty"`

	// The seller identifier.
	SellerID string `json:"SellerId,omitempty"`

	// A unique identifier provided by the caller to track this request.
	SellerInputIdentifier string `json:"SellerInputIdentifier,omitempty"`
}

// Validate validates this fees estimate identifier
func (m *FeesEstimateIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIDType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalFulfillmentProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceToEstimateFees(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateIdentifier) validateIDType(formats strfmt.Registry) error {
	if swag.IsZero(m.IDType) { // not required
		return nil
	}

	if err := m.IDType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IdType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("IdType")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateIdentifier) validateOptionalFulfillmentProgram(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionalFulfillmentProgram) { // not required
		return nil
	}

	if err := m.OptionalFulfillmentProgram.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OptionalFulfillmentProgram")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("OptionalFulfillmentProgram")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateIdentifier) validatePriceToEstimateFees(formats strfmt.Registry) error {
	if swag.IsZero(m.PriceToEstimateFees) { // not required
		return nil
	}

	if m.PriceToEstimateFees != nil {
		if err := m.PriceToEstimateFees.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceToEstimateFees")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceToEstimateFees")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fees estimate identifier based on the context it is used
func (m *FeesEstimateIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIDType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptionalFulfillmentProgram(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePriceToEstimateFees(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateIdentifier) contextValidateIDType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.IDType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("IdType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("IdType")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateIdentifier) contextValidateOptionalFulfillmentProgram(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OptionalFulfillmentProgram.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OptionalFulfillmentProgram")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("OptionalFulfillmentProgram")
		}
		return err
	}

	return nil
}

func (m *FeesEstimateIdentifier) contextValidatePriceToEstimateFees(ctx context.Context, formats strfmt.Registry) error {

	if m.PriceToEstimateFees != nil {
		if err := m.PriceToEstimateFees.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PriceToEstimateFees")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PriceToEstimateFees")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeesEstimateIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeesEstimateIdentifier) UnmarshalBinary(b []byte) error {
	var res FeesEstimateIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
