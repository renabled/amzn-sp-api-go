// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FeesEstimateResult An item identifier and the estimated fees for the item.
//
// swagger:model FeesEstimateResult
type FeesEstimateResult struct {

	// An error object with a type, code, and message.
	Error *FeesEstimateError `json:"Error,omitempty"`

	// The total estimated fees for an item and a list of details.
	FeesEstimate *FeesEstimate `json:"FeesEstimate,omitempty"`

	// Information used to identify a fees estimate request.
	FeesEstimateIdentifier *FeesEstimateIdentifier `json:"FeesEstimateIdentifier,omitempty"`

	// The status of the fee request. Possible values: Success, ClientError, ServiceError.
	Status string `json:"Status,omitempty"`
}

// Validate validates this fees estimate result
func (m *FeesEstimateResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeesEstimate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeesEstimateIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateResult) validateError(formats strfmt.Registry) error {
	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Error")
			}
			return err
		}
	}

	return nil
}

func (m *FeesEstimateResult) validateFeesEstimate(formats strfmt.Registry) error {
	if swag.IsZero(m.FeesEstimate) { // not required
		return nil
	}

	if m.FeesEstimate != nil {
		if err := m.FeesEstimate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeesEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeesEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *FeesEstimateResult) validateFeesEstimateIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.FeesEstimateIdentifier) { // not required
		return nil
	}

	if m.FeesEstimateIdentifier != nil {
		if err := m.FeesEstimateIdentifier.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeesEstimateIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeesEstimateIdentifier")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fees estimate result based on the context it is used
func (m *FeesEstimateResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateError(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeesEstimate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFeesEstimateIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FeesEstimateResult) contextValidateError(ctx context.Context, formats strfmt.Registry) error {

	if m.Error != nil {
		if err := m.Error.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Error")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Error")
			}
			return err
		}
	}

	return nil
}

func (m *FeesEstimateResult) contextValidateFeesEstimate(ctx context.Context, formats strfmt.Registry) error {

	if m.FeesEstimate != nil {
		if err := m.FeesEstimate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeesEstimate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeesEstimate")
			}
			return err
		}
	}

	return nil
}

func (m *FeesEstimateResult) contextValidateFeesEstimateIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if m.FeesEstimateIdentifier != nil {
		if err := m.FeesEstimateIdentifier.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FeesEstimateIdentifier")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FeesEstimateIdentifier")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FeesEstimateResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeesEstimateResult) UnmarshalBinary(b []byte) error {
	var res FeesEstimateResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
