// Code generated by go-swagger; DO NOT EDIT.

package product_fees_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// IDType The type of product identifier used in a `FeesEstimateByIdRequest`.
//
// swagger:model IdType
type IDType string

func NewIDType(value IDType) *IDType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated IDType.
func (m IDType) Pointer() *IDType {
	return &m
}

const (

	// IDTypeASIN captures enum value "ASIN"
	IDTypeASIN IDType = "ASIN"

	// IDTypeSellerSKU captures enum value "SellerSKU"
	IDTypeSellerSKU IDType = "SellerSKU"
)

// for schema
var idTypeEnum []interface{}

func init() {
	var res []IDType
	if err := json.Unmarshal([]byte(`["ASIN","SellerSKU"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		idTypeEnum = append(idTypeEnum, v)
	}
}

func (m IDType) validateIDTypeEnum(path, location string, value IDType) error {
	if err := validate.EnumCase(path, location, value, idTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this Id type
func (m IDType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateIDTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this Id type based on context it is used
func (m IDType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
