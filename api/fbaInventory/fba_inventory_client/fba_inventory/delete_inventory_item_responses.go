// Code generated by go-swagger; DO NOT EDIT.

package fba_inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fbaInventory/fba_inventory_models"
)

// DeleteInventoryItemReader is a Reader for the DeleteInventoryItem structure.
type DeleteInventoryItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInventoryItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteInventoryItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteInventoryItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteInventoryItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteInventoryItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteInventoryItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteInventoryItemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteInventoryItemServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteInventoryItemOK creates a DeleteInventoryItemOK with default headers values
func NewDeleteInventoryItemOK() *DeleteInventoryItemOK {
	return &DeleteInventoryItemOK{}
}

/*
DeleteInventoryItemOK describes a response with status code 200, with default header values.

OK
*/
type DeleteInventoryItemOK struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item o k response has a 2xx status code
func (o *DeleteInventoryItemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete inventory item o k response has a 3xx status code
func (o *DeleteInventoryItemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item o k response has a 4xx status code
func (o *DeleteInventoryItemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete inventory item o k response has a 5xx status code
func (o *DeleteInventoryItemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete inventory item o k response a status code equal to that given
func (o *DeleteInventoryItemOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteInventoryItemOK) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemOK  %+v", 200, o.Payload)
}

func (o *DeleteInventoryItemOK) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemOK  %+v", 200, o.Payload)
}

func (o *DeleteInventoryItemOK) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryItemBadRequest creates a DeleteInventoryItemBadRequest with default headers values
func NewDeleteInventoryItemBadRequest() *DeleteInventoryItemBadRequest {
	return &DeleteInventoryItemBadRequest{}
}

/*
DeleteInventoryItemBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type DeleteInventoryItemBadRequest struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item bad request response has a 2xx status code
func (o *DeleteInventoryItemBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete inventory item bad request response has a 3xx status code
func (o *DeleteInventoryItemBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item bad request response has a 4xx status code
func (o *DeleteInventoryItemBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete inventory item bad request response has a 5xx status code
func (o *DeleteInventoryItemBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete inventory item bad request response a status code equal to that given
func (o *DeleteInventoryItemBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteInventoryItemBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteInventoryItemBadRequest) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteInventoryItemBadRequest) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryItemForbidden creates a DeleteInventoryItemForbidden with default headers values
func NewDeleteInventoryItemForbidden() *DeleteInventoryItemForbidden {
	return &DeleteInventoryItemForbidden{}
}

/*
DeleteInventoryItemForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type DeleteInventoryItemForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item forbidden response has a 2xx status code
func (o *DeleteInventoryItemForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete inventory item forbidden response has a 3xx status code
func (o *DeleteInventoryItemForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item forbidden response has a 4xx status code
func (o *DeleteInventoryItemForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete inventory item forbidden response has a 5xx status code
func (o *DeleteInventoryItemForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete inventory item forbidden response a status code equal to that given
func (o *DeleteInventoryItemForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteInventoryItemForbidden) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInventoryItemForbidden) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemForbidden  %+v", 403, o.Payload)
}

func (o *DeleteInventoryItemForbidden) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryItemNotFound creates a DeleteInventoryItemNotFound with default headers values
func NewDeleteInventoryItemNotFound() *DeleteInventoryItemNotFound {
	return &DeleteInventoryItemNotFound{}
}

/*
DeleteInventoryItemNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type DeleteInventoryItemNotFound struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item not found response has a 2xx status code
func (o *DeleteInventoryItemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete inventory item not found response has a 3xx status code
func (o *DeleteInventoryItemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item not found response has a 4xx status code
func (o *DeleteInventoryItemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete inventory item not found response has a 5xx status code
func (o *DeleteInventoryItemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete inventory item not found response a status code equal to that given
func (o *DeleteInventoryItemNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteInventoryItemNotFound) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInventoryItemNotFound) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInventoryItemNotFound) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryItemTooManyRequests creates a DeleteInventoryItemTooManyRequests with default headers values
func NewDeleteInventoryItemTooManyRequests() *DeleteInventoryItemTooManyRequests {
	return &DeleteInventoryItemTooManyRequests{}
}

/*
DeleteInventoryItemTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type DeleteInventoryItemTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item too many requests response has a 2xx status code
func (o *DeleteInventoryItemTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete inventory item too many requests response has a 3xx status code
func (o *DeleteInventoryItemTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item too many requests response has a 4xx status code
func (o *DeleteInventoryItemTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete inventory item too many requests response has a 5xx status code
func (o *DeleteInventoryItemTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete inventory item too many requests response a status code equal to that given
func (o *DeleteInventoryItemTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteInventoryItemTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteInventoryItemTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteInventoryItemTooManyRequests) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryItemInternalServerError creates a DeleteInventoryItemInternalServerError with default headers values
func NewDeleteInventoryItemInternalServerError() *DeleteInventoryItemInternalServerError {
	return &DeleteInventoryItemInternalServerError{}
}

/*
DeleteInventoryItemInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type DeleteInventoryItemInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item internal server error response has a 2xx status code
func (o *DeleteInventoryItemInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete inventory item internal server error response has a 3xx status code
func (o *DeleteInventoryItemInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item internal server error response has a 4xx status code
func (o *DeleteInventoryItemInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete inventory item internal server error response has a 5xx status code
func (o *DeleteInventoryItemInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete inventory item internal server error response a status code equal to that given
func (o *DeleteInventoryItemInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteInventoryItemInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteInventoryItemInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteInventoryItemInternalServerError) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInventoryItemServiceUnavailable creates a DeleteInventoryItemServiceUnavailable with default headers values
func NewDeleteInventoryItemServiceUnavailable() *DeleteInventoryItemServiceUnavailable {
	return &DeleteInventoryItemServiceUnavailable{}
}

/*
DeleteInventoryItemServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type DeleteInventoryItemServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.DeleteInventoryItemResponse
}

// IsSuccess returns true when this delete inventory item service unavailable response has a 2xx status code
func (o *DeleteInventoryItemServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete inventory item service unavailable response has a 3xx status code
func (o *DeleteInventoryItemServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete inventory item service unavailable response has a 4xx status code
func (o *DeleteInventoryItemServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete inventory item service unavailable response has a 5xx status code
func (o *DeleteInventoryItemServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete inventory item service unavailable response a status code equal to that given
func (o *DeleteInventoryItemServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteInventoryItemServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteInventoryItemServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /fba/inventory/v1/items/{sellerSku}][%d] deleteInventoryItemServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteInventoryItemServiceUnavailable) GetPayload() *fba_inventory_models.DeleteInventoryItemResponse {
	return o.Payload
}

func (o *DeleteInventoryItemServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.DeleteInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
