// Code generated by go-swagger; DO NOT EDIT.

package fba_inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/fbaInventory/fba_inventory_models"
)

// CreateInventoryItemReader is a Reader for the CreateInventoryItem structure.
type CreateInventoryItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateInventoryItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateInventoryItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateInventoryItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateInventoryItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateInventoryItemNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateInventoryItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateInventoryItemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateInventoryItemServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateInventoryItemOK creates a CreateInventoryItemOK with default headers values
func NewCreateInventoryItemOK() *CreateInventoryItemOK {
	return &CreateInventoryItemOK{}
}

/*
CreateInventoryItemOK describes a response with status code 200, with default header values.

OK
*/
type CreateInventoryItemOK struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item o k response has a 2xx status code
func (o *CreateInventoryItemOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create inventory item o k response has a 3xx status code
func (o *CreateInventoryItemOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item o k response has a 4xx status code
func (o *CreateInventoryItemOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inventory item o k response has a 5xx status code
func (o *CreateInventoryItemOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create inventory item o k response a status code equal to that given
func (o *CreateInventoryItemOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateInventoryItemOK) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemOK  %+v", 200, o.Payload)
}

func (o *CreateInventoryItemOK) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemOK  %+v", 200, o.Payload)
}

func (o *CreateInventoryItemOK) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInventoryItemBadRequest creates a CreateInventoryItemBadRequest with default headers values
func NewCreateInventoryItemBadRequest() *CreateInventoryItemBadRequest {
	return &CreateInventoryItemBadRequest{}
}

/*
CreateInventoryItemBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateInventoryItemBadRequest struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item bad request response has a 2xx status code
func (o *CreateInventoryItemBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inventory item bad request response has a 3xx status code
func (o *CreateInventoryItemBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item bad request response has a 4xx status code
func (o *CreateInventoryItemBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inventory item bad request response has a 5xx status code
func (o *CreateInventoryItemBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create inventory item bad request response a status code equal to that given
func (o *CreateInventoryItemBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateInventoryItemBadRequest) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInventoryItemBadRequest) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemBadRequest  %+v", 400, o.Payload)
}

func (o *CreateInventoryItemBadRequest) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInventoryItemForbidden creates a CreateInventoryItemForbidden with default headers values
func NewCreateInventoryItemForbidden() *CreateInventoryItemForbidden {
	return &CreateInventoryItemForbidden{}
}

/*
CreateInventoryItemForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type CreateInventoryItemForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item forbidden response has a 2xx status code
func (o *CreateInventoryItemForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inventory item forbidden response has a 3xx status code
func (o *CreateInventoryItemForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item forbidden response has a 4xx status code
func (o *CreateInventoryItemForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inventory item forbidden response has a 5xx status code
func (o *CreateInventoryItemForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create inventory item forbidden response a status code equal to that given
func (o *CreateInventoryItemForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateInventoryItemForbidden) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemForbidden  %+v", 403, o.Payload)
}

func (o *CreateInventoryItemForbidden) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemForbidden  %+v", 403, o.Payload)
}

func (o *CreateInventoryItemForbidden) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInventoryItemNotFound creates a CreateInventoryItemNotFound with default headers values
func NewCreateInventoryItemNotFound() *CreateInventoryItemNotFound {
	return &CreateInventoryItemNotFound{}
}

/*
CreateInventoryItemNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateInventoryItemNotFound struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item not found response has a 2xx status code
func (o *CreateInventoryItemNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inventory item not found response has a 3xx status code
func (o *CreateInventoryItemNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item not found response has a 4xx status code
func (o *CreateInventoryItemNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inventory item not found response has a 5xx status code
func (o *CreateInventoryItemNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create inventory item not found response a status code equal to that given
func (o *CreateInventoryItemNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateInventoryItemNotFound) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemNotFound  %+v", 404, o.Payload)
}

func (o *CreateInventoryItemNotFound) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemNotFound  %+v", 404, o.Payload)
}

func (o *CreateInventoryItemNotFound) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInventoryItemTooManyRequests creates a CreateInventoryItemTooManyRequests with default headers values
func NewCreateInventoryItemTooManyRequests() *CreateInventoryItemTooManyRequests {
	return &CreateInventoryItemTooManyRequests{}
}

/*
CreateInventoryItemTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateInventoryItemTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item too many requests response has a 2xx status code
func (o *CreateInventoryItemTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inventory item too many requests response has a 3xx status code
func (o *CreateInventoryItemTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item too many requests response has a 4xx status code
func (o *CreateInventoryItemTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create inventory item too many requests response has a 5xx status code
func (o *CreateInventoryItemTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create inventory item too many requests response a status code equal to that given
func (o *CreateInventoryItemTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateInventoryItemTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateInventoryItemTooManyRequests) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateInventoryItemTooManyRequests) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInventoryItemInternalServerError creates a CreateInventoryItemInternalServerError with default headers values
func NewCreateInventoryItemInternalServerError() *CreateInventoryItemInternalServerError {
	return &CreateInventoryItemInternalServerError{}
}

/*
CreateInventoryItemInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateInventoryItemInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item internal server error response has a 2xx status code
func (o *CreateInventoryItemInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inventory item internal server error response has a 3xx status code
func (o *CreateInventoryItemInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item internal server error response has a 4xx status code
func (o *CreateInventoryItemInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inventory item internal server error response has a 5xx status code
func (o *CreateInventoryItemInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create inventory item internal server error response a status code equal to that given
func (o *CreateInventoryItemInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateInventoryItemInternalServerError) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInventoryItemInternalServerError) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateInventoryItemInternalServerError) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateInventoryItemServiceUnavailable creates a CreateInventoryItemServiceUnavailable with default headers values
func NewCreateInventoryItemServiceUnavailable() *CreateInventoryItemServiceUnavailable {
	return &CreateInventoryItemServiceUnavailable{}
}

/*
CreateInventoryItemServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateInventoryItemServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *fba_inventory_models.CreateInventoryItemResponse
}

// IsSuccess returns true when this create inventory item service unavailable response has a 2xx status code
func (o *CreateInventoryItemServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create inventory item service unavailable response has a 3xx status code
func (o *CreateInventoryItemServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create inventory item service unavailable response has a 4xx status code
func (o *CreateInventoryItemServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create inventory item service unavailable response has a 5xx status code
func (o *CreateInventoryItemServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create inventory item service unavailable response a status code equal to that given
func (o *CreateInventoryItemServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateInventoryItemServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateInventoryItemServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /fba/inventory/v1/items][%d] createInventoryItemServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateInventoryItemServiceUnavailable) GetPayload() *fba_inventory_models.CreateInventoryItemResponse {
	return o.Payload
}

func (o *CreateInventoryItemServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inventory_models.CreateInventoryItemResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
