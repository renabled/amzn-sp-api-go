// Code generated by go-swagger; DO NOT EDIT.

package fba_inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InventoryItem An item in the list of inventory to be added.
//
// swagger:model InventoryItem
type InventoryItem struct {

	// The marketplaceId.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// The quantity of item to add.
	// Required: true
	Quantity *int64 `json:"quantity"`

	// The seller SKU of the item.
	// Required: true
	SellerSku *string `json:"sellerSku"`
}

// Validate validates this inventory item
func (m *InventoryItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellerSku(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryItem) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *InventoryItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *InventoryItem) validateSellerSku(formats strfmt.Registry) error {

	if err := validate.Required("sellerSku", "body", m.SellerSku); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this inventory item based on context it is used
func (m *InventoryItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InventoryItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryItem) UnmarshalBinary(b []byte) error {
	var res InventoryItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
