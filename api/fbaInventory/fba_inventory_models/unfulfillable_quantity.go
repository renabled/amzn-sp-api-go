// Code generated by go-swagger; DO NOT EDIT.

package fba_inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UnfulfillableQuantity The quantity of unfulfillable inventory.
//
// swagger:model UnfulfillableQuantity
type UnfulfillableQuantity struct {

	// The number of units in carrier damaged disposition.
	CarrierDamagedQuantity int64 `json:"carrierDamagedQuantity,omitempty"`

	// The number of units in customer damaged disposition.
	CustomerDamagedQuantity int64 `json:"customerDamagedQuantity,omitempty"`

	// The number of units in defective disposition.
	DefectiveQuantity int64 `json:"defectiveQuantity,omitempty"`

	// The number of units in distributor damaged disposition.
	DistributorDamagedQuantity int64 `json:"distributorDamagedQuantity,omitempty"`

	// The number of units in expired disposition.
	ExpiredQuantity int64 `json:"expiredQuantity,omitempty"`

	// The total number of units in Amazon's fulfillment network in unsellable condition.
	TotalUnfulfillableQuantity int64 `json:"totalUnfulfillableQuantity,omitempty"`

	// The number of units in warehouse damaged disposition.
	WarehouseDamagedQuantity int64 `json:"warehouseDamagedQuantity,omitempty"`
}

// Validate validates this unfulfillable quantity
func (m *UnfulfillableQuantity) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this unfulfillable quantity based on context it is used
func (m *UnfulfillableQuantity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UnfulfillableQuantity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UnfulfillableQuantity) UnmarshalBinary(b []byte) error {
	var res UnfulfillableQuantity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
