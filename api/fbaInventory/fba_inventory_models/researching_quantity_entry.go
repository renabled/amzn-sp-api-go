// Code generated by go-swagger; DO NOT EDIT.

package fba_inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResearchingQuantityEntry The misplaced or warehouse damaged inventory that is actively being confirmed at our fulfillment centers.
//
// swagger:model ResearchingQuantityEntry
type ResearchingQuantityEntry struct {

	// The duration of the research.
	// Required: true
	// Enum: [researchingQuantityInShortTerm researchingQuantityInMidTerm researchingQuantityInLongTerm]
	Name *string `json:"name"`

	// The number of units.
	// Required: true
	Quantity *int64 `json:"quantity"`
}

// Validate validates this researching quantity entry
func (m *ResearchingQuantityEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var researchingQuantityEntryTypeNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["researchingQuantityInShortTerm","researchingQuantityInMidTerm","researchingQuantityInLongTerm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		researchingQuantityEntryTypeNamePropEnum = append(researchingQuantityEntryTypeNamePropEnum, v)
	}
}

const (

	// ResearchingQuantityEntryNameResearchingQuantityInShortTerm captures enum value "researchingQuantityInShortTerm"
	ResearchingQuantityEntryNameResearchingQuantityInShortTerm string = "researchingQuantityInShortTerm"

	// ResearchingQuantityEntryNameResearchingQuantityInMidTerm captures enum value "researchingQuantityInMidTerm"
	ResearchingQuantityEntryNameResearchingQuantityInMidTerm string = "researchingQuantityInMidTerm"

	// ResearchingQuantityEntryNameResearchingQuantityInLongTerm captures enum value "researchingQuantityInLongTerm"
	ResearchingQuantityEntryNameResearchingQuantityInLongTerm string = "researchingQuantityInLongTerm"
)

// prop value enum
func (m *ResearchingQuantityEntry) validateNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, researchingQuantityEntryTypeNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ResearchingQuantityEntry) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	// value enum
	if err := m.validateNameEnum("name", "body", *m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ResearchingQuantityEntry) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this researching quantity entry based on context it is used
func (m *ResearchingQuantityEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ResearchingQuantityEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResearchingQuantityEntry) UnmarshalBinary(b []byte) error {
	var res ResearchingQuantityEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
