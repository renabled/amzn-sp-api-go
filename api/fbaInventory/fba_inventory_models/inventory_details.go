// Code generated by go-swagger; DO NOT EDIT.

package fba_inventory_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InventoryDetails Summarized inventory details. This object will not appear if the details parameter in the request is false.
//
// swagger:model InventoryDetails
type InventoryDetails struct {

	// The item quantity that can be picked, packed, and shipped.
	FulfillableQuantity int64 `json:"fulfillableQuantity,omitempty"`

	// The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.
	InboundReceivingQuantity int64 `json:"inboundReceivingQuantity,omitempty"`

	// The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.
	InboundShippedQuantity int64 `json:"inboundShippedQuantity,omitempty"`

	// The number of units in an inbound shipment for which you have notified Amazon.
	InboundWorkingQuantity int64 `json:"inboundWorkingQuantity,omitempty"`

	// researching quantity
	ResearchingQuantity *ResearchingQuantity `json:"researchingQuantity,omitempty"`

	// reserved quantity
	ReservedQuantity *ReservedQuantity `json:"reservedQuantity,omitempty"`

	// unfulfillable quantity
	UnfulfillableQuantity *UnfulfillableQuantity `json:"unfulfillableQuantity,omitempty"`
}

// Validate validates this inventory details
func (m *InventoryDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResearchingQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnfulfillableQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryDetails) validateResearchingQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.ResearchingQuantity) { // not required
		return nil
	}

	if m.ResearchingQuantity != nil {
		if err := m.ResearchingQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("researchingQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("researchingQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryDetails) validateReservedQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.ReservedQuantity) { // not required
		return nil
	}

	if m.ReservedQuantity != nil {
		if err := m.ReservedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reservedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reservedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryDetails) validateUnfulfillableQuantity(formats strfmt.Registry) error {
	if swag.IsZero(m.UnfulfillableQuantity) { // not required
		return nil
	}

	if m.UnfulfillableQuantity != nil {
		if err := m.UnfulfillableQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unfulfillableQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unfulfillableQuantity")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this inventory details based on the context it is used
func (m *InventoryDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResearchingQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReservedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnfulfillableQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InventoryDetails) contextValidateResearchingQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.ResearchingQuantity != nil {
		if err := m.ResearchingQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("researchingQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("researchingQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryDetails) contextValidateReservedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.ReservedQuantity != nil {
		if err := m.ReservedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reservedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reservedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *InventoryDetails) contextValidateUnfulfillableQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.UnfulfillableQuantity != nil {
		if err := m.UnfulfillableQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unfulfillableQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unfulfillableQuantity")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InventoryDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InventoryDetails) UnmarshalBinary(b []byte) error {
	var res InventoryDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
