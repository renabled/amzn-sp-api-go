// Code generated by go-swagger; DO NOT EDIT.

package tokens_2021_03_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RestrictedResource Model of a restricted resource.
//
// swagger:model RestrictedResource
type RestrictedResource struct {

	// Indicates the type of Personally Identifiable Information requested. This parameter is required only when getting an RDT for use with the getOrder, getOrders, or getOrderItems operation of the Orders API. For more information, see the [Tokens API Use Case Guide](doc:tokens-api-use-case-guide). Possible values include:
	// - **buyerInfo**. On the order level this includes general identifying information about the buyer and tax-related information. On the order item level this includes gift wrap information and custom order information, if available.
	// - **shippingAddress**. This includes information for fulfilling orders.
	// - **buyerTaxInformation**. This includes information for issuing tax invoices.
	DataElements []string `json:"dataElements"`

	// The HTTP method in the restricted resource.
	// Required: true
	// Enum: [GET PUT POST DELETE]
	Method *string `json:"method"`

	// The path in the restricted resource. Here are some path examples:
	// - ```/orders/v0/orders```. For getting an RDT for the getOrders operation of the Orders API. For bulk orders.
	// - ```/orders/v0/orders/123-1234567-1234567```. For getting an RDT for the getOrder operation of the Orders API. For a specific order.
	// - ```/orders/v0/orders/123-1234567-1234567/orderItems```. For getting an RDT for the getOrderItems operation of the Orders API. For the order items in a specific order.
	// - ```/mfn/v0/shipments/FBA1234ABC5D```. For getting an RDT for the getShipment operation of the Shipping API. For a specific shipment.
	// - ```/mfn/v0/shipments/{shipmentId}```. For getting an RDT for the getShipment operation of the Shipping API. For any of a selling partner's shipments that you specify when you call the getShipment operation.
	// Required: true
	Path *string `json:"path"`
}

// Validate validates this restricted resource
func (m *RestrictedResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var restrictedResourceTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET","PUT","POST","DELETE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restrictedResourceTypeMethodPropEnum = append(restrictedResourceTypeMethodPropEnum, v)
	}
}

const (

	// RestrictedResourceMethodGET captures enum value "GET"
	RestrictedResourceMethodGET string = "GET"

	// RestrictedResourceMethodPUT captures enum value "PUT"
	RestrictedResourceMethodPUT string = "PUT"

	// RestrictedResourceMethodPOST captures enum value "POST"
	RestrictedResourceMethodPOST string = "POST"

	// RestrictedResourceMethodDELETE captures enum value "DELETE"
	RestrictedResourceMethodDELETE string = "DELETE"
)

// prop value enum
func (m *RestrictedResource) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restrictedResourceTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RestrictedResource) validateMethod(formats strfmt.Registry) error {

	if err := validate.Required("method", "body", m.Method); err != nil {
		return err
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", *m.Method); err != nil {
		return err
	}

	return nil
}

func (m *RestrictedResource) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this restricted resource based on context it is used
func (m *RestrictedResource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RestrictedResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RestrictedResource) UnmarshalBinary(b []byte) error {
	var res RestrictedResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
