// Code generated by go-swagger; DO NOT EDIT.

package tokens_2021_03_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRestrictedDataTokenRequest The request schema for the createRestrictedDataToken operation.
//
// swagger:model CreateRestrictedDataTokenRequest
type CreateRestrictedDataTokenRequest struct {

	// A list of restricted resources.
	// Maximum: 50
	// Required: true
	RestrictedResources []*RestrictedResource `json:"restrictedResources"`

	// The application ID for the target application to which access is being delegated.
	TargetApplication string `json:"targetApplication,omitempty"`
}

// Validate validates this create restricted data token request
func (m *CreateRestrictedDataTokenRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRestrictedResources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRestrictedDataTokenRequest) validateRestrictedResources(formats strfmt.Registry) error {

	if err := validate.Required("restrictedResources", "body", m.RestrictedResources); err != nil {
		return err
	}

	for i := 0; i < len(m.RestrictedResources); i++ {
		if swag.IsZero(m.RestrictedResources[i]) { // not required
			continue
		}

		if m.RestrictedResources[i] != nil {
			if err := m.RestrictedResources[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create restricted data token request based on the context it is used
func (m *CreateRestrictedDataTokenRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRestrictedResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRestrictedDataTokenRequest) contextValidateRestrictedResources(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RestrictedResources); i++ {

		if m.RestrictedResources[i] != nil {
			if err := m.RestrictedResources[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("restrictedResources" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("restrictedResources" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRestrictedDataTokenRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRestrictedDataTokenRequest) UnmarshalBinary(b []byte) error {
	var res CreateRestrictedDataTokenRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
