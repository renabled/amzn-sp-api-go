// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/feeds_2021-06-30/feeds_2021_06_30_models"
)

// CreateFeedReader is a Reader for the CreateFeed structure.
type CreateFeedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateFeedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewCreateFeedAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateFeedBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateFeedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateFeedForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateFeedNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateFeedUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateFeedTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateFeedInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateFeedServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateFeedAccepted creates a CreateFeedAccepted with default headers values
func NewCreateFeedAccepted() *CreateFeedAccepted {
	return &CreateFeedAccepted{}
}

/*
CreateFeedAccepted describes a response with status code 202, with default header values.

Success.
*/
type CreateFeedAccepted struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.CreateFeedResponse
}

// IsSuccess returns true when this create feed accepted response has a 2xx status code
func (o *CreateFeedAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create feed accepted response has a 3xx status code
func (o *CreateFeedAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed accepted response has a 4xx status code
func (o *CreateFeedAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this create feed accepted response has a 5xx status code
func (o *CreateFeedAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed accepted response a status code equal to that given
func (o *CreateFeedAccepted) IsCode(code int) bool {
	return code == 202
}

func (o *CreateFeedAccepted) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedAccepted  %+v", 202, o.Payload)
}

func (o *CreateFeedAccepted) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedAccepted  %+v", 202, o.Payload)
}

func (o *CreateFeedAccepted) GetPayload() *feeds_2021_06_30_models.CreateFeedResponse {
	return o.Payload
}

func (o *CreateFeedAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.CreateFeedResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedBadRequest creates a CreateFeedBadRequest with default headers values
func NewCreateFeedBadRequest() *CreateFeedBadRequest {
	return &CreateFeedBadRequest{}
}

/*
CreateFeedBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateFeedBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed bad request response has a 2xx status code
func (o *CreateFeedBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed bad request response has a 3xx status code
func (o *CreateFeedBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed bad request response has a 4xx status code
func (o *CreateFeedBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed bad request response has a 5xx status code
func (o *CreateFeedBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed bad request response a status code equal to that given
func (o *CreateFeedBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateFeedBadRequest) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedBadRequest  %+v", 400, o.Payload)
}

func (o *CreateFeedBadRequest) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedBadRequest  %+v", 400, o.Payload)
}

func (o *CreateFeedBadRequest) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedUnauthorized creates a CreateFeedUnauthorized with default headers values
func NewCreateFeedUnauthorized() *CreateFeedUnauthorized {
	return &CreateFeedUnauthorized{}
}

/*
CreateFeedUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateFeedUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed unauthorized response has a 2xx status code
func (o *CreateFeedUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed unauthorized response has a 3xx status code
func (o *CreateFeedUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed unauthorized response has a 4xx status code
func (o *CreateFeedUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed unauthorized response has a 5xx status code
func (o *CreateFeedUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed unauthorized response a status code equal to that given
func (o *CreateFeedUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateFeedUnauthorized) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateFeedUnauthorized) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateFeedUnauthorized) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedForbidden creates a CreateFeedForbidden with default headers values
func NewCreateFeedForbidden() *CreateFeedForbidden {
	return &CreateFeedForbidden{}
}

/*
CreateFeedForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateFeedForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed forbidden response has a 2xx status code
func (o *CreateFeedForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed forbidden response has a 3xx status code
func (o *CreateFeedForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed forbidden response has a 4xx status code
func (o *CreateFeedForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed forbidden response has a 5xx status code
func (o *CreateFeedForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed forbidden response a status code equal to that given
func (o *CreateFeedForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateFeedForbidden) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedForbidden  %+v", 403, o.Payload)
}

func (o *CreateFeedForbidden) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedForbidden  %+v", 403, o.Payload)
}

func (o *CreateFeedForbidden) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedNotFound creates a CreateFeedNotFound with default headers values
func NewCreateFeedNotFound() *CreateFeedNotFound {
	return &CreateFeedNotFound{}
}

/*
CreateFeedNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateFeedNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed not found response has a 2xx status code
func (o *CreateFeedNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed not found response has a 3xx status code
func (o *CreateFeedNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed not found response has a 4xx status code
func (o *CreateFeedNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed not found response has a 5xx status code
func (o *CreateFeedNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed not found response a status code equal to that given
func (o *CreateFeedNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateFeedNotFound) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedNotFound  %+v", 404, o.Payload)
}

func (o *CreateFeedNotFound) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedNotFound  %+v", 404, o.Payload)
}

func (o *CreateFeedNotFound) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedUnsupportedMediaType creates a CreateFeedUnsupportedMediaType with default headers values
func NewCreateFeedUnsupportedMediaType() *CreateFeedUnsupportedMediaType {
	return &CreateFeedUnsupportedMediaType{}
}

/*
CreateFeedUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type CreateFeedUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed unsupported media type response has a 2xx status code
func (o *CreateFeedUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed unsupported media type response has a 3xx status code
func (o *CreateFeedUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed unsupported media type response has a 4xx status code
func (o *CreateFeedUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed unsupported media type response has a 5xx status code
func (o *CreateFeedUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed unsupported media type response a status code equal to that given
func (o *CreateFeedUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateFeedUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateFeedUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateFeedUnsupportedMediaType) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedTooManyRequests creates a CreateFeedTooManyRequests with default headers values
func NewCreateFeedTooManyRequests() *CreateFeedTooManyRequests {
	return &CreateFeedTooManyRequests{}
}

/*
CreateFeedTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateFeedTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed too many requests response has a 2xx status code
func (o *CreateFeedTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed too many requests response has a 3xx status code
func (o *CreateFeedTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed too many requests response has a 4xx status code
func (o *CreateFeedTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create feed too many requests response has a 5xx status code
func (o *CreateFeedTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create feed too many requests response a status code equal to that given
func (o *CreateFeedTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateFeedTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateFeedTooManyRequests) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateFeedTooManyRequests) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedInternalServerError creates a CreateFeedInternalServerError with default headers values
func NewCreateFeedInternalServerError() *CreateFeedInternalServerError {
	return &CreateFeedInternalServerError{}
}

/*
CreateFeedInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateFeedInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed internal server error response has a 2xx status code
func (o *CreateFeedInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed internal server error response has a 3xx status code
func (o *CreateFeedInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed internal server error response has a 4xx status code
func (o *CreateFeedInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create feed internal server error response has a 5xx status code
func (o *CreateFeedInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create feed internal server error response a status code equal to that given
func (o *CreateFeedInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateFeedInternalServerError) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateFeedInternalServerError) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateFeedInternalServerError) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateFeedServiceUnavailable creates a CreateFeedServiceUnavailable with default headers values
func NewCreateFeedServiceUnavailable() *CreateFeedServiceUnavailable {
	return &CreateFeedServiceUnavailable{}
}

/*
CreateFeedServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateFeedServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this create feed service unavailable response has a 2xx status code
func (o *CreateFeedServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create feed service unavailable response has a 3xx status code
func (o *CreateFeedServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create feed service unavailable response has a 4xx status code
func (o *CreateFeedServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create feed service unavailable response has a 5xx status code
func (o *CreateFeedServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create feed service unavailable response a status code equal to that given
func (o *CreateFeedServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateFeedServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateFeedServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /feeds/2021-06-30/feeds][%d] createFeedServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateFeedServiceUnavailable) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *CreateFeedServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
