// Code generated by go-swagger; DO NOT EDIT.

package feeds

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/feeds_2021-06-30/feeds_2021_06_30_models"
)

// GetFeedDocumentReader is a Reader for the GetFeedDocument structure.
type GetFeedDocumentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetFeedDocumentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetFeedDocumentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetFeedDocumentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetFeedDocumentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetFeedDocumentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetFeedDocumentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetFeedDocumentUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetFeedDocumentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetFeedDocumentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetFeedDocumentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetFeedDocumentOK creates a GetFeedDocumentOK with default headers values
func NewGetFeedDocumentOK() *GetFeedDocumentOK {
	return &GetFeedDocumentOK{}
}

/*
GetFeedDocumentOK describes a response with status code 200, with default header values.

Success.
*/
type GetFeedDocumentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.FeedDocument
}

// IsSuccess returns true when this get feed document o k response has a 2xx status code
func (o *GetFeedDocumentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get feed document o k response has a 3xx status code
func (o *GetFeedDocumentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document o k response has a 4xx status code
func (o *GetFeedDocumentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feed document o k response has a 5xx status code
func (o *GetFeedDocumentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document o k response a status code equal to that given
func (o *GetFeedDocumentOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetFeedDocumentOK) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentOK  %+v", 200, o.Payload)
}

func (o *GetFeedDocumentOK) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentOK  %+v", 200, o.Payload)
}

func (o *GetFeedDocumentOK) GetPayload() *feeds_2021_06_30_models.FeedDocument {
	return o.Payload
}

func (o *GetFeedDocumentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.FeedDocument)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentBadRequest creates a GetFeedDocumentBadRequest with default headers values
func NewGetFeedDocumentBadRequest() *GetFeedDocumentBadRequest {
	return &GetFeedDocumentBadRequest{}
}

/*
GetFeedDocumentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetFeedDocumentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document bad request response has a 2xx status code
func (o *GetFeedDocumentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document bad request response has a 3xx status code
func (o *GetFeedDocumentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document bad request response has a 4xx status code
func (o *GetFeedDocumentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feed document bad request response has a 5xx status code
func (o *GetFeedDocumentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document bad request response a status code equal to that given
func (o *GetFeedDocumentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetFeedDocumentBadRequest) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeedDocumentBadRequest) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentBadRequest  %+v", 400, o.Payload)
}

func (o *GetFeedDocumentBadRequest) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentUnauthorized creates a GetFeedDocumentUnauthorized with default headers values
func NewGetFeedDocumentUnauthorized() *GetFeedDocumentUnauthorized {
	return &GetFeedDocumentUnauthorized{}
}

/*
GetFeedDocumentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetFeedDocumentUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document unauthorized response has a 2xx status code
func (o *GetFeedDocumentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document unauthorized response has a 3xx status code
func (o *GetFeedDocumentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document unauthorized response has a 4xx status code
func (o *GetFeedDocumentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feed document unauthorized response has a 5xx status code
func (o *GetFeedDocumentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document unauthorized response a status code equal to that given
func (o *GetFeedDocumentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetFeedDocumentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeedDocumentUnauthorized) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentUnauthorized  %+v", 401, o.Payload)
}

func (o *GetFeedDocumentUnauthorized) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentForbidden creates a GetFeedDocumentForbidden with default headers values
func NewGetFeedDocumentForbidden() *GetFeedDocumentForbidden {
	return &GetFeedDocumentForbidden{}
}

/*
GetFeedDocumentForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetFeedDocumentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document forbidden response has a 2xx status code
func (o *GetFeedDocumentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document forbidden response has a 3xx status code
func (o *GetFeedDocumentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document forbidden response has a 4xx status code
func (o *GetFeedDocumentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feed document forbidden response has a 5xx status code
func (o *GetFeedDocumentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document forbidden response a status code equal to that given
func (o *GetFeedDocumentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetFeedDocumentForbidden) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GetFeedDocumentForbidden) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentForbidden  %+v", 403, o.Payload)
}

func (o *GetFeedDocumentForbidden) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentNotFound creates a GetFeedDocumentNotFound with default headers values
func NewGetFeedDocumentNotFound() *GetFeedDocumentNotFound {
	return &GetFeedDocumentNotFound{}
}

/*
GetFeedDocumentNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetFeedDocumentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document not found response has a 2xx status code
func (o *GetFeedDocumentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document not found response has a 3xx status code
func (o *GetFeedDocumentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document not found response has a 4xx status code
func (o *GetFeedDocumentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feed document not found response has a 5xx status code
func (o *GetFeedDocumentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document not found response a status code equal to that given
func (o *GetFeedDocumentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetFeedDocumentNotFound) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GetFeedDocumentNotFound) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentNotFound  %+v", 404, o.Payload)
}

func (o *GetFeedDocumentNotFound) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentUnsupportedMediaType creates a GetFeedDocumentUnsupportedMediaType with default headers values
func NewGetFeedDocumentUnsupportedMediaType() *GetFeedDocumentUnsupportedMediaType {
	return &GetFeedDocumentUnsupportedMediaType{}
}

/*
GetFeedDocumentUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type GetFeedDocumentUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document unsupported media type response has a 2xx status code
func (o *GetFeedDocumentUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document unsupported media type response has a 3xx status code
func (o *GetFeedDocumentUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document unsupported media type response has a 4xx status code
func (o *GetFeedDocumentUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feed document unsupported media type response has a 5xx status code
func (o *GetFeedDocumentUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document unsupported media type response a status code equal to that given
func (o *GetFeedDocumentUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetFeedDocumentUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetFeedDocumentUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetFeedDocumentUnsupportedMediaType) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentTooManyRequests creates a GetFeedDocumentTooManyRequests with default headers values
func NewGetFeedDocumentTooManyRequests() *GetFeedDocumentTooManyRequests {
	return &GetFeedDocumentTooManyRequests{}
}

/*
GetFeedDocumentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetFeedDocumentTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document too many requests response has a 2xx status code
func (o *GetFeedDocumentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document too many requests response has a 3xx status code
func (o *GetFeedDocumentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document too many requests response has a 4xx status code
func (o *GetFeedDocumentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get feed document too many requests response has a 5xx status code
func (o *GetFeedDocumentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get feed document too many requests response a status code equal to that given
func (o *GetFeedDocumentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetFeedDocumentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFeedDocumentTooManyRequests) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetFeedDocumentTooManyRequests) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentInternalServerError creates a GetFeedDocumentInternalServerError with default headers values
func NewGetFeedDocumentInternalServerError() *GetFeedDocumentInternalServerError {
	return &GetFeedDocumentInternalServerError{}
}

/*
GetFeedDocumentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetFeedDocumentInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document internal server error response has a 2xx status code
func (o *GetFeedDocumentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document internal server error response has a 3xx status code
func (o *GetFeedDocumentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document internal server error response has a 4xx status code
func (o *GetFeedDocumentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feed document internal server error response has a 5xx status code
func (o *GetFeedDocumentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get feed document internal server error response a status code equal to that given
func (o *GetFeedDocumentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetFeedDocumentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFeedDocumentInternalServerError) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentInternalServerError  %+v", 500, o.Payload)
}

func (o *GetFeedDocumentInternalServerError) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetFeedDocumentServiceUnavailable creates a GetFeedDocumentServiceUnavailable with default headers values
func NewGetFeedDocumentServiceUnavailable() *GetFeedDocumentServiceUnavailable {
	return &GetFeedDocumentServiceUnavailable{}
}

/*
GetFeedDocumentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetFeedDocumentServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *feeds_2021_06_30_models.ErrorList
}

// IsSuccess returns true when this get feed document service unavailable response has a 2xx status code
func (o *GetFeedDocumentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get feed document service unavailable response has a 3xx status code
func (o *GetFeedDocumentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get feed document service unavailable response has a 4xx status code
func (o *GetFeedDocumentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get feed document service unavailable response has a 5xx status code
func (o *GetFeedDocumentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get feed document service unavailable response a status code equal to that given
func (o *GetFeedDocumentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetFeedDocumentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeedDocumentServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /feeds/2021-06-30/documents/{feedDocumentId}][%d] getFeedDocumentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetFeedDocumentServiceUnavailable) GetPayload() *feeds_2021_06_30_models.ErrorList {
	return o.Payload
}

func (o *GetFeedDocumentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(feeds_2021_06_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
