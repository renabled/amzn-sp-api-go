// Code generated by go-swagger; DO NOT EDIT.

package feeds_2021_06_30_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FeedDocument Information required for the feed document.
//
// swagger:model FeedDocument
type FeedDocument struct {

	// If the feed document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the feed when you download. Otherwise, you can download the feed directly. Refer to [Step 7. Download the feed processing report](doc:feeds-api-v2021-06-30-use-case-guide#step-7-download-the-feed-processing-report) in the use case guide, where sample code is provided.
	// Enum: [GZIP]
	CompressionAlgorithm string `json:"compressionAlgorithm,omitempty"`

	// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
	// Required: true
	FeedDocumentID *string `json:"feedDocumentId"`

	// A presigned URL for the feed document. If `compressionAlgorithm` is not returned, you can download the feed directly from this URL. This URL expires after 5 minutes.
	// Required: true
	URL *string `json:"url"`
}

// Validate validates this feed document
func (m *FeedDocument) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompressionAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedDocumentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var feedDocumentTypeCompressionAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GZIP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		feedDocumentTypeCompressionAlgorithmPropEnum = append(feedDocumentTypeCompressionAlgorithmPropEnum, v)
	}
}

const (

	// FeedDocumentCompressionAlgorithmGZIP captures enum value "GZIP"
	FeedDocumentCompressionAlgorithmGZIP string = "GZIP"
)

// prop value enum
func (m *FeedDocument) validateCompressionAlgorithmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, feedDocumentTypeCompressionAlgorithmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FeedDocument) validateCompressionAlgorithm(formats strfmt.Registry) error {
	if swag.IsZero(m.CompressionAlgorithm) { // not required
		return nil
	}

	// value enum
	if err := m.validateCompressionAlgorithmEnum("compressionAlgorithm", "body", m.CompressionAlgorithm); err != nil {
		return err
	}

	return nil
}

func (m *FeedDocument) validateFeedDocumentID(formats strfmt.Registry) error {

	if err := validate.Required("feedDocumentId", "body", m.FeedDocumentID); err != nil {
		return err
	}

	return nil
}

func (m *FeedDocument) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this feed document based on context it is used
func (m *FeedDocument) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FeedDocument) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FeedDocument) UnmarshalBinary(b []byte) error {
	var res FeedDocument
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
