// Code generated by go-swagger; DO NOT EDIT.

package feeds_2021_06_30_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Feed Detailed information about the feed.
//
// swagger:model Feed
type Feed struct {

	// The date and time when the feed was created, in ISO 8601 date time format.
	// Required: true
	// Format: date-time
	CreatedTime *strfmt.DateTime `json:"createdTime"`

	// The identifier for the feed. This identifier is unique only in combination with a seller ID.
	// Required: true
	FeedID *string `json:"feedId"`

	// The feed type.
	// Required: true
	FeedType *string `json:"feedType"`

	// A list of identifiers for the marketplaces that the feed is applied to.
	MarketplaceIds []string `json:"marketplaceIds"`

	// The date and time when feed processing completed, in ISO 8601 date time format.
	// Format: date-time
	ProcessingEndTime strfmt.DateTime `json:"processingEndTime,omitempty"`

	// The date and time when feed processing started, in ISO 8601 date time format.
	// Format: date-time
	ProcessingStartTime strfmt.DateTime `json:"processingStartTime,omitempty"`

	// The processing status of the feed.
	// Required: true
	// Enum: [CANCELLED DONE FATAL IN_PROGRESS IN_QUEUE]
	ProcessingStatus *string `json:"processingStatus"`

	// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
	ResultFeedDocumentID string `json:"resultFeedDocumentId,omitempty"`
}

// Validate validates this feed
func (m *Feed) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFeedType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProcessingStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Feed) validateCreatedTime(formats strfmt.Registry) error {

	if err := validate.Required("createdTime", "body", m.CreatedTime); err != nil {
		return err
	}

	if err := validate.FormatOf("createdTime", "body", "date-time", m.CreatedTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateFeedID(formats strfmt.Registry) error {

	if err := validate.Required("feedId", "body", m.FeedID); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateFeedType(formats strfmt.Registry) error {

	if err := validate.Required("feedType", "body", m.FeedType); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateProcessingEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessingEndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("processingEndTime", "body", "date-time", m.ProcessingEndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Feed) validateProcessingStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessingStartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("processingStartTime", "body", "date-time", m.ProcessingStartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var feedTypeProcessingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CANCELLED","DONE","FATAL","IN_PROGRESS","IN_QUEUE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		feedTypeProcessingStatusPropEnum = append(feedTypeProcessingStatusPropEnum, v)
	}
}

const (

	// FeedProcessingStatusCANCELLED captures enum value "CANCELLED"
	FeedProcessingStatusCANCELLED string = "CANCELLED"

	// FeedProcessingStatusDONE captures enum value "DONE"
	FeedProcessingStatusDONE string = "DONE"

	// FeedProcessingStatusFATAL captures enum value "FATAL"
	FeedProcessingStatusFATAL string = "FATAL"

	// FeedProcessingStatusINPROGRESS captures enum value "IN_PROGRESS"
	FeedProcessingStatusINPROGRESS string = "IN_PROGRESS"

	// FeedProcessingStatusINQUEUE captures enum value "IN_QUEUE"
	FeedProcessingStatusINQUEUE string = "IN_QUEUE"
)

// prop value enum
func (m *Feed) validateProcessingStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, feedTypeProcessingStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Feed) validateProcessingStatus(formats strfmt.Registry) error {

	if err := validate.Required("processingStatus", "body", m.ProcessingStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateProcessingStatusEnum("processingStatus", "body", *m.ProcessingStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this feed based on context it is used
func (m *Feed) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Feed) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Feed) UnmarshalBinary(b []byte) error {
	var res Feed
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
