// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OutboundCapability The outbound capability of a supply source.
//
// swagger:model OutboundCapability
type OutboundCapability struct {

	// delivery channel
	DeliveryChannel *DeliveryChannel `json:"deliveryChannel,omitempty"`

	// is supported
	IsSupported bool `json:"isSupported,omitempty"`

	// operational configuration
	OperationalConfiguration *OperationalConfiguration `json:"operationalConfiguration,omitempty"`

	// pickup channel
	PickupChannel *PickupChannel `json:"pickupChannel,omitempty"`

	// return location
	ReturnLocation *ReturnLocation `json:"returnLocation,omitempty"`
}

// Validate validates this outbound capability
func (m *OutboundCapability) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeliveryChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationalConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePickupChannel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReturnLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundCapability) validateDeliveryChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.DeliveryChannel) { // not required
		return nil
	}

	if m.DeliveryChannel != nil {
		if err := m.DeliveryChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryChannel")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundCapability) validateOperationalConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationalConfiguration) { // not required
		return nil
	}

	if m.OperationalConfiguration != nil {
		if err := m.OperationalConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationalConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationalConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundCapability) validatePickupChannel(formats strfmt.Registry) error {
	if swag.IsZero(m.PickupChannel) { // not required
		return nil
	}

	if m.PickupChannel != nil {
		if err := m.PickupChannel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupChannel")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundCapability) validateReturnLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.ReturnLocation) { // not required
		return nil
	}

	if m.ReturnLocation != nil {
		if err := m.ReturnLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnLocation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this outbound capability based on the context it is used
func (m *OutboundCapability) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDeliveryChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationalConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePickupChannel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReturnLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OutboundCapability) contextValidateDeliveryChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.DeliveryChannel != nil {
		if err := m.DeliveryChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("deliveryChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("deliveryChannel")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundCapability) contextValidateOperationalConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationalConfiguration != nil {
		if err := m.OperationalConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationalConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationalConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundCapability) contextValidatePickupChannel(ctx context.Context, formats strfmt.Registry) error {

	if m.PickupChannel != nil {
		if err := m.PickupChannel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pickupChannel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pickupChannel")
			}
			return err
		}
	}

	return nil
}

func (m *OutboundCapability) contextValidateReturnLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.ReturnLocation != nil {
		if err := m.ReturnLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("returnLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("returnLocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OutboundCapability) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OutboundCapability) UnmarshalBinary(b []byte) error {
	var res OutboundCapability
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
