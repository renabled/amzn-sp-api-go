// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParkingConfiguration The parking configuration.
//
// swagger:model ParkingConfiguration
type ParkingConfiguration struct {

	// The number of parking spots.
	NumberOfParkingSpots *NonNegativeInteger `json:"numberOfParkingSpots,omitempty"`

	// The type of cost at parking location.
	ParkingCostType ParkingCostType `json:"parkingCostType,omitempty"`

	// The type of parking spot identification used at parking location.
	ParkingSpotIdentificationType ParkingSpotIdentificationType `json:"parkingSpotIdentificationType,omitempty"`
}

// Validate validates this parking configuration
func (m *ParkingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNumberOfParkingSpots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParkingCostType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParkingSpotIdentificationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingConfiguration) validateNumberOfParkingSpots(formats strfmt.Registry) error {
	if swag.IsZero(m.NumberOfParkingSpots) { // not required
		return nil
	}

	if m.NumberOfParkingSpots != nil {
		if err := m.NumberOfParkingSpots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberOfParkingSpots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("numberOfParkingSpots")
			}
			return err
		}
	}

	return nil
}

func (m *ParkingConfiguration) validateParkingCostType(formats strfmt.Registry) error {
	if swag.IsZero(m.ParkingCostType) { // not required
		return nil
	}

	if err := m.ParkingCostType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parkingCostType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parkingCostType")
		}
		return err
	}

	return nil
}

func (m *ParkingConfiguration) validateParkingSpotIdentificationType(formats strfmt.Registry) error {
	if swag.IsZero(m.ParkingSpotIdentificationType) { // not required
		return nil
	}

	if err := m.ParkingSpotIdentificationType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parkingSpotIdentificationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parkingSpotIdentificationType")
		}
		return err
	}

	return nil
}

// ContextValidate validate this parking configuration based on the context it is used
func (m *ParkingConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNumberOfParkingSpots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParkingCostType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParkingSpotIdentificationType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingConfiguration) contextValidateNumberOfParkingSpots(ctx context.Context, formats strfmt.Registry) error {

	if m.NumberOfParkingSpots != nil {
		if err := m.NumberOfParkingSpots.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberOfParkingSpots")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("numberOfParkingSpots")
			}
			return err
		}
	}

	return nil
}

func (m *ParkingConfiguration) contextValidateParkingCostType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ParkingCostType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parkingCostType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parkingCostType")
		}
		return err
	}

	return nil
}

func (m *ParkingConfiguration) contextValidateParkingSpotIdentificationType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ParkingSpotIdentificationType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("parkingSpotIdentificationType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("parkingSpotIdentificationType")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkingConfiguration) UnmarshalBinary(b []byte) error {
	var res ParkingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
