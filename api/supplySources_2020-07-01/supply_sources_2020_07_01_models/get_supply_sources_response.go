// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// GetSupplySourcesResponse The paginated list of supply sources.
//
// swagger:model GetSupplySourcesResponse
type GetSupplySourcesResponse struct {

	// If present, use this pagination token to retrieve the next page of supply sources.
	NextPageToken string `json:"nextPageToken,omitempty"`

	// supply sources
	SupplySources SupplySourceList `json:"supplySources,omitempty"`
}

// Validate validates this get supply sources response
func (m *GetSupplySourcesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupplySources(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSupplySourcesResponse) validateSupplySources(formats strfmt.Registry) error {
	if swag.IsZero(m.SupplySources) { // not required
		return nil
	}

	if err := m.SupplySources.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supplySources")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supplySources")
		}
		return err
	}

	return nil
}

// ContextValidate validate this get supply sources response based on the context it is used
func (m *GetSupplySourcesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupplySources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetSupplySourcesResponse) contextValidateSupplySources(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SupplySources.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supplySources")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supplySources")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetSupplySourcesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetSupplySourcesResponse) UnmarshalBinary(b []byte) error {
	var res GetSupplySourcesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
