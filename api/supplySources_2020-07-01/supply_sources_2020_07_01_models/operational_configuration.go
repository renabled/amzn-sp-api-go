// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OperationalConfiguration The operational configuration of `supplySources`.
//
// swagger:model OperationalConfiguration
type OperationalConfiguration struct {

	// contact details
	ContactDetails *ContactDetails `json:"contactDetails,omitempty"`

	// handling time
	HandlingTime *Duration `json:"handlingTime,omitempty"`

	// operating hours by day
	OperatingHoursByDay *OperatingHoursByDay `json:"operatingHoursByDay,omitempty"`

	// throughput config
	ThroughputConfig *ThroughputConfig `json:"throughputConfig,omitempty"`
}

// Validate validates this operational configuration
func (m *OperationalConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContactDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandlingTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingHoursByDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughputConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationalConfiguration) validateContactDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.ContactDetails) { // not required
		return nil
	}

	if m.ContactDetails != nil {
		if err := m.ContactDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OperationalConfiguration) validateHandlingTime(formats strfmt.Registry) error {
	if swag.IsZero(m.HandlingTime) { // not required
		return nil
	}

	if m.HandlingTime != nil {
		if err := m.HandlingTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handlingTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handlingTime")
			}
			return err
		}
	}

	return nil
}

func (m *OperationalConfiguration) validateOperatingHoursByDay(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatingHoursByDay) { // not required
		return nil
	}

	if m.OperatingHoursByDay != nil {
		if err := m.OperatingHoursByDay.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operatingHoursByDay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operatingHoursByDay")
			}
			return err
		}
	}

	return nil
}

func (m *OperationalConfiguration) validateThroughputConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.ThroughputConfig) { // not required
		return nil
	}

	if m.ThroughputConfig != nil {
		if err := m.ThroughputConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughputConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughputConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this operational configuration based on the context it is used
func (m *OperationalConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContactDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHandlingTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperatingHoursByDay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughputConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OperationalConfiguration) contextValidateContactDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ContactDetails != nil {
		if err := m.ContactDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("contactDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("contactDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OperationalConfiguration) contextValidateHandlingTime(ctx context.Context, formats strfmt.Registry) error {

	if m.HandlingTime != nil {
		if err := m.HandlingTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("handlingTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("handlingTime")
			}
			return err
		}
	}

	return nil
}

func (m *OperationalConfiguration) contextValidateOperatingHoursByDay(ctx context.Context, formats strfmt.Registry) error {

	if m.OperatingHoursByDay != nil {
		if err := m.OperatingHoursByDay.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operatingHoursByDay")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operatingHoursByDay")
			}
			return err
		}
	}

	return nil
}

func (m *OperationalConfiguration) contextValidateThroughputConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.ThroughputConfig != nil {
		if err := m.ThroughputConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughputConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughputConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationalConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationalConfiguration) UnmarshalBinary(b []byte) error {
	var res OperationalConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
