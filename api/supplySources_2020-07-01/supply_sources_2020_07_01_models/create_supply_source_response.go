// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSupplySourceResponse The result of creating a new supply source.
//
// swagger:model CreateSupplySourceResponse
type CreateSupplySourceResponse struct {

	// supply source code
	// Required: true
	SupplySourceCode *SupplySourceCode `json:"supplySourceCode"`

	// supply source Id
	// Required: true
	SupplySourceID *SupplySourceID `json:"supplySourceId"`
}

// Validate validates this create supply source response
func (m *CreateSupplySourceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupplySourceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplySourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSupplySourceResponse) validateSupplySourceCode(formats strfmt.Registry) error {

	if err := validate.Required("supplySourceCode", "body", m.SupplySourceCode); err != nil {
		return err
	}

	if err := validate.Required("supplySourceCode", "body", m.SupplySourceCode); err != nil {
		return err
	}

	if m.SupplySourceCode != nil {
		if err := m.SupplySourceCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplySourceCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supplySourceCode")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSupplySourceResponse) validateSupplySourceID(formats strfmt.Registry) error {

	if err := validate.Required("supplySourceId", "body", m.SupplySourceID); err != nil {
		return err
	}

	if err := validate.Required("supplySourceId", "body", m.SupplySourceID); err != nil {
		return err
	}

	if m.SupplySourceID != nil {
		if err := m.SupplySourceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplySourceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supplySourceId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create supply source response based on the context it is used
func (m *CreateSupplySourceResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSupplySourceCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplySourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSupplySourceResponse) contextValidateSupplySourceCode(ctx context.Context, formats strfmt.Registry) error {

	if m.SupplySourceCode != nil {
		if err := m.SupplySourceCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplySourceCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supplySourceCode")
			}
			return err
		}
	}

	return nil
}

func (m *CreateSupplySourceResponse) contextValidateSupplySourceID(ctx context.Context, formats strfmt.Registry) error {

	if m.SupplySourceID != nil {
		if err := m.SupplySourceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("supplySourceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("supplySourceId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSupplySourceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSupplySourceResponse) UnmarshalBinary(b []byte) error {
	var res CreateSupplySourceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
