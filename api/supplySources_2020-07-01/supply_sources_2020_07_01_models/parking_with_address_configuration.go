// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ParkingWithAddressConfiguration The parking configuration with the address.
//
// swagger:model ParkingWithAddressConfiguration
type ParkingWithAddressConfiguration struct {
	ParkingConfiguration

	// The address of the parking location.
	Address *Address `json:"address,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *ParkingWithAddressConfiguration) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 ParkingConfiguration
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.ParkingConfiguration = aO0

	// AO1
	var dataAO1 struct {
		Address *Address `json:"address,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Address = dataAO1.Address

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m ParkingWithAddressConfiguration) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.ParkingConfiguration)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Address *Address `json:"address,omitempty"`
	}

	dataAO1.Address = m.Address

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this parking with address configuration
func (m *ParkingWithAddressConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ParkingConfiguration
	if err := m.ParkingConfiguration.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingWithAddressConfiguration) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this parking with address configuration based on the context it is used
func (m *ParkingWithAddressConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with ParkingConfiguration
	if err := m.ParkingConfiguration.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ParkingWithAddressConfiguration) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ParkingWithAddressConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ParkingWithAddressConfiguration) UnmarshalBinary(b []byte) error {
	var res ParkingWithAddressConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
