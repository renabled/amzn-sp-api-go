// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ThroughputUnit The throughput unit
//
// swagger:model ThroughputUnit
type ThroughputUnit string

func NewThroughputUnit(value ThroughputUnit) *ThroughputUnit {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ThroughputUnit.
func (m ThroughputUnit) Pointer() *ThroughputUnit {
	return &m
}

const (

	// ThroughputUnitOrder captures enum value "Order"
	ThroughputUnitOrder ThroughputUnit = "Order"
)

// for schema
var throughputUnitEnum []interface{}

func init() {
	var res []ThroughputUnit
	if err := json.Unmarshal([]byte(`["Order"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		throughputUnitEnum = append(throughputUnitEnum, v)
	}
}

func (m ThroughputUnit) validateThroughputUnitEnum(path, location string, value ThroughputUnit) error {
	if err := validate.EnumCase(path, location, value, throughputUnitEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this throughput unit
func (m ThroughputUnit) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateThroughputUnitEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this throughput unit based on context it is used
func (m ThroughputUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
