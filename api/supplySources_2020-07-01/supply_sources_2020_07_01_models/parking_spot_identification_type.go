// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ParkingSpotIdentificationType The type of parking spot identification.
//
// swagger:model ParkingSpotIdentificationType
type ParkingSpotIdentificationType string

func NewParkingSpotIdentificationType(value ParkingSpotIdentificationType) *ParkingSpotIdentificationType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ParkingSpotIdentificationType.
func (m ParkingSpotIdentificationType) Pointer() *ParkingSpotIdentificationType {
	return &m
}

const (

	// ParkingSpotIdentificationTypeNumbered captures enum value "Numbered"
	ParkingSpotIdentificationTypeNumbered ParkingSpotIdentificationType = "Numbered"

	// ParkingSpotIdentificationTypeOther captures enum value "Other"
	ParkingSpotIdentificationTypeOther ParkingSpotIdentificationType = "Other"
)

// for schema
var parkingSpotIdentificationTypeEnum []interface{}

func init() {
	var res []ParkingSpotIdentificationType
	if err := json.Unmarshal([]byte(`["Numbered","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		parkingSpotIdentificationTypeEnum = append(parkingSpotIdentificationTypeEnum, v)
	}
}

func (m ParkingSpotIdentificationType) validateParkingSpotIdentificationTypeEnum(path, location string, value ParkingSpotIdentificationType) error {
	if err := validate.EnumCase(path, location, value, parkingSpotIdentificationTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this parking spot identification type
func (m ParkingSpotIdentificationType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateParkingSpotIdentificationTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this parking spot identification type based on context it is used
func (m ParkingSpotIdentificationType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
