// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PickupChannel The pick up channel of a supply source.
//
// swagger:model PickupChannel
type PickupChannel struct {

	// The configuration for supporting curbside pickup.
	CurbsidePickupConfiguration *CurbsidePickupConfiguration `json:"curbsidePickupConfiguration,omitempty"`

	// The configuration for supporting in-store pickup.
	InStorePickupConfiguration *InStorePickupConfiguration `json:"inStorePickupConfiguration,omitempty"`

	// inventory hold period
	InventoryHoldPeriod *Duration `json:"inventoryHoldPeriod,omitempty"`

	// is supported
	IsSupported bool `json:"isSupported,omitempty"`

	// operational configuration
	OperationalConfiguration *OperationalConfiguration `json:"operationalConfiguration,omitempty"`
}

// Validate validates this pickup channel
func (m *PickupChannel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurbsidePickupConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInStorePickupConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryHoldPeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationalConfiguration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PickupChannel) validateCurbsidePickupConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.CurbsidePickupConfiguration) { // not required
		return nil
	}

	if m.CurbsidePickupConfiguration != nil {
		if err := m.CurbsidePickupConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curbsidePickupConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curbsidePickupConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PickupChannel) validateInStorePickupConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.InStorePickupConfiguration) { // not required
		return nil
	}

	if m.InStorePickupConfiguration != nil {
		if err := m.InStorePickupConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inStorePickupConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inStorePickupConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PickupChannel) validateInventoryHoldPeriod(formats strfmt.Registry) error {
	if swag.IsZero(m.InventoryHoldPeriod) { // not required
		return nil
	}

	if m.InventoryHoldPeriod != nil {
		if err := m.InventoryHoldPeriod.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventoryHoldPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inventoryHoldPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *PickupChannel) validateOperationalConfiguration(formats strfmt.Registry) error {
	if swag.IsZero(m.OperationalConfiguration) { // not required
		return nil
	}

	if m.OperationalConfiguration != nil {
		if err := m.OperationalConfiguration.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationalConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationalConfiguration")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this pickup channel based on the context it is used
func (m *PickupChannel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurbsidePickupConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInStorePickupConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInventoryHoldPeriod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOperationalConfiguration(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PickupChannel) contextValidateCurbsidePickupConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.CurbsidePickupConfiguration != nil {
		if err := m.CurbsidePickupConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("curbsidePickupConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("curbsidePickupConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PickupChannel) contextValidateInStorePickupConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.InStorePickupConfiguration != nil {
		if err := m.InStorePickupConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inStorePickupConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inStorePickupConfiguration")
			}
			return err
		}
	}

	return nil
}

func (m *PickupChannel) contextValidateInventoryHoldPeriod(ctx context.Context, formats strfmt.Registry) error {

	if m.InventoryHoldPeriod != nil {
		if err := m.InventoryHoldPeriod.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("inventoryHoldPeriod")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("inventoryHoldPeriod")
			}
			return err
		}
	}

	return nil
}

func (m *PickupChannel) contextValidateOperationalConfiguration(ctx context.Context, formats strfmt.Registry) error {

	if m.OperationalConfiguration != nil {
		if err := m.OperationalConfiguration.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operationalConfiguration")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("operationalConfiguration")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PickupChannel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PickupChannel) UnmarshalBinary(b []byte) error {
	var res PickupChannel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
