// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SupplySourceList The list of `SupplySource`s.
//
// swagger:model SupplySourceList
type SupplySourceList []*SupplySourceListItems0

// Validate validates this supply source list
func (m SupplySourceList) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this supply source list based on the context it is used
func (m SupplySourceList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {
			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// SupplySourceListItems0 supply source list items0
//
// swagger:model SupplySourceListItems0
type SupplySourceListItems0 struct {

	// address
	Address *Address `json:"address,omitempty"`

	// alias
	Alias SupplySourceAlias `json:"alias,omitempty"`

	// supply source code
	SupplySourceCode SupplySourceCode `json:"supplySourceCode,omitempty"`

	// supply source Id
	SupplySourceID SupplySourceID `json:"supplySourceId,omitempty"`
}

// Validate validates this supply source list items0
func (m *SupplySourceListItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlias(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplySourceCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupplySourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupplySourceListItems0) validateAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *SupplySourceListItems0) validateAlias(formats strfmt.Registry) error {
	if swag.IsZero(m.Alias) { // not required
		return nil
	}

	if err := m.Alias.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alias")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alias")
		}
		return err
	}

	return nil
}

func (m *SupplySourceListItems0) validateSupplySourceCode(formats strfmt.Registry) error {
	if swag.IsZero(m.SupplySourceCode) { // not required
		return nil
	}

	if err := m.SupplySourceCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supplySourceCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supplySourceCode")
		}
		return err
	}

	return nil
}

func (m *SupplySourceListItems0) validateSupplySourceID(formats strfmt.Registry) error {
	if swag.IsZero(m.SupplySourceID) { // not required
		return nil
	}

	if err := m.SupplySourceID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supplySourceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supplySourceId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this supply source list items0 based on the context it is used
func (m *SupplySourceListItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAlias(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplySourceCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSupplySourceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SupplySourceListItems0) contextValidateAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.Address != nil {
		if err := m.Address.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *SupplySourceListItems0) contextValidateAlias(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Alias.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("alias")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("alias")
		}
		return err
	}

	return nil
}

func (m *SupplySourceListItems0) contextValidateSupplySourceCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SupplySourceCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supplySourceCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supplySourceCode")
		}
		return err
	}

	return nil
}

func (m *SupplySourceListItems0) contextValidateSupplySourceID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SupplySourceID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("supplySourceId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("supplySourceId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SupplySourceListItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupplySourceListItems0) UnmarshalBinary(b []byte) error {
	var res SupplySourceListItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
