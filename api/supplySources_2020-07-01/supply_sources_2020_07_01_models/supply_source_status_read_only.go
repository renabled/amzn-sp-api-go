// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SupplySourceStatusReadOnly The `SupplySource` status.
//
// swagger:model SupplySourceStatusReadOnly
type SupplySourceStatusReadOnly string

func NewSupplySourceStatusReadOnly(value SupplySourceStatusReadOnly) *SupplySourceStatusReadOnly {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SupplySourceStatusReadOnly.
func (m SupplySourceStatusReadOnly) Pointer() *SupplySourceStatusReadOnly {
	return &m
}

const (

	// SupplySourceStatusReadOnlyActive captures enum value "Active"
	SupplySourceStatusReadOnlyActive SupplySourceStatusReadOnly = "Active"

	// SupplySourceStatusReadOnlyInactive captures enum value "Inactive"
	SupplySourceStatusReadOnlyInactive SupplySourceStatusReadOnly = "Inactive"

	// SupplySourceStatusReadOnlyArchived captures enum value "Archived"
	SupplySourceStatusReadOnlyArchived SupplySourceStatusReadOnly = "Archived"
)

// for schema
var supplySourceStatusReadOnlyEnum []interface{}

func init() {
	var res []SupplySourceStatusReadOnly
	if err := json.Unmarshal([]byte(`["Active","Inactive","Archived"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		supplySourceStatusReadOnlyEnum = append(supplySourceStatusReadOnlyEnum, v)
	}
}

func (m SupplySourceStatusReadOnly) validateSupplySourceStatusReadOnlyEnum(path, location string, value SupplySourceStatusReadOnly) error {
	if err := validate.EnumCase(path, location, value, supplySourceStatusReadOnlyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this supply source status read only
func (m SupplySourceStatusReadOnly) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSupplySourceStatusReadOnlyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this supply source status read only based on context it is used
func (m SupplySourceStatusReadOnly) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
