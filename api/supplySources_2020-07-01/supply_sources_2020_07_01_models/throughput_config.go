// Code generated by go-swagger; DO NOT EDIT.

package supply_sources_2020_07_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ThroughputConfig The throughput configuration.
//
// swagger:model ThroughputConfig
type ThroughputConfig struct {

	// throughput cap
	ThroughputCap *ThroughputCap `json:"throughputCap,omitempty"`

	// throughput unit
	// Required: true
	ThroughputUnit *ThroughputUnit `json:"throughputUnit"`
}

// Validate validates this throughput config
func (m *ThroughputConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateThroughputCap(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThroughputUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThroughputConfig) validateThroughputCap(formats strfmt.Registry) error {
	if swag.IsZero(m.ThroughputCap) { // not required
		return nil
	}

	if m.ThroughputCap != nil {
		if err := m.ThroughputCap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughputCap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughputCap")
			}
			return err
		}
	}

	return nil
}

func (m *ThroughputConfig) validateThroughputUnit(formats strfmt.Registry) error {

	if err := validate.Required("throughputUnit", "body", m.ThroughputUnit); err != nil {
		return err
	}

	if err := validate.Required("throughputUnit", "body", m.ThroughputUnit); err != nil {
		return err
	}

	if m.ThroughputUnit != nil {
		if err := m.ThroughputUnit.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughputUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughputUnit")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this throughput config based on the context it is used
func (m *ThroughputConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateThroughputCap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateThroughputUnit(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ThroughputConfig) contextValidateThroughputCap(ctx context.Context, formats strfmt.Registry) error {

	if m.ThroughputCap != nil {
		if err := m.ThroughputCap.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughputCap")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughputCap")
			}
			return err
		}
	}

	return nil
}

func (m *ThroughputConfig) contextValidateThroughputUnit(ctx context.Context, formats strfmt.Registry) error {

	if m.ThroughputUnit != nil {
		if err := m.ThroughputUnit.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("throughputUnit")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("throughputUnit")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ThroughputConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ThroughputConfig) UnmarshalBinary(b []byte) error {
	var res ThroughputConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
