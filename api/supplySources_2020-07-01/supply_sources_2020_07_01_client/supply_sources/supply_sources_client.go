// Code generated by go-swagger; DO NOT EDIT.

package supply_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new supply sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for supply sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	ArchiveSupplySource(params *ArchiveSupplySourceParams, opts ...ClientOption) (*ArchiveSupplySourceNoContent, error)

	CreateSupplySource(params *CreateSupplySourceParams, opts ...ClientOption) (*CreateSupplySourceOK, error)

	GetSupplySource(params *GetSupplySourceParams, opts ...ClientOption) (*GetSupplySourceOK, error)

	GetSupplySources(params *GetSupplySourcesParams, opts ...ClientOption) (*GetSupplySourcesOK, error)

	UpdateSupplySource(params *UpdateSupplySourceParams, opts ...ClientOption) (*UpdateSupplySourceNoContent, error)

	UpdateSupplySourceStatus(params *UpdateSupplySourceStatusParams, opts ...ClientOption) (*UpdateSupplySourceStatusNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
ArchiveSupplySource Archive a supply source, making it inactive. Cannot be undone.
*/
func (a *Client) ArchiveSupplySource(params *ArchiveSupplySourceParams, opts ...ClientOption) (*ArchiveSupplySourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewArchiveSupplySourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "archiveSupplySource",
		Method:             "DELETE",
		PathPattern:        "/supplySources/2020-07-01/supplySources/{supplySourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ArchiveSupplySourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ArchiveSupplySourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for archiveSupplySource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
CreateSupplySource Create a new supply source.
*/
func (a *Client) CreateSupplySource(params *CreateSupplySourceParams, opts ...ClientOption) (*CreateSupplySourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSupplySourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createSupplySource",
		Method:             "POST",
		PathPattern:        "/supplySources/2020-07-01/supplySources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSupplySourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSupplySourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for createSupplySource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupplySource Retrieve a supply source.
*/
func (a *Client) GetSupplySource(params *GetSupplySourceParams, opts ...ClientOption) (*GetSupplySourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupplySourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSupplySource",
		Method:             "GET",
		PathPattern:        "/supplySources/2020-07-01/supplySources/{supplySourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupplySourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupplySourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupplySource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetSupplySources The path to retrieve paginated supply sources.
*/
func (a *Client) GetSupplySources(params *GetSupplySourcesParams, opts ...ClientOption) (*GetSupplySourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSupplySourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getSupplySources",
		Method:             "GET",
		PathPattern:        "/supplySources/2020-07-01/supplySources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSupplySourcesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSupplySourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getSupplySources: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSupplySource Update the configuration and capabilities of a supply source.
*/
func (a *Client) UpdateSupplySource(params *UpdateSupplySourceParams, opts ...ClientOption) (*UpdateSupplySourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSupplySourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSupplySource",
		Method:             "PUT",
		PathPattern:        "/supplySources/2020-07-01/supplySources/{supplySourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSupplySourceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSupplySourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSupplySource: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
UpdateSupplySourceStatus Update the status of a supply source.
*/
func (a *Client) UpdateSupplySourceStatus(params *UpdateSupplySourceStatusParams, opts ...ClientOption) (*UpdateSupplySourceStatusNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSupplySourceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateSupplySourceStatus",
		Method:             "PUT",
		PathPattern:        "/supplySources/2020-07-01/supplySources/{supplySourceId}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSupplySourceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSupplySourceStatusNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for updateSupplySourceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
