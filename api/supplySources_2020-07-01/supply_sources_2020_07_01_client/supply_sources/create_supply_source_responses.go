// Code generated by go-swagger; DO NOT EDIT.

package supply_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/supplySources_2020-07-01/supply_sources_2020_07_01_models"
)

// CreateSupplySourceReader is a Reader for the CreateSupplySource structure.
type CreateSupplySourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSupplySourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSupplySourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSupplySourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateSupplySourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSupplySourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateSupplySourceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateSupplySourceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateSupplySourceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSupplySourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateSupplySourceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateSupplySourceOK creates a CreateSupplySourceOK with default headers values
func NewCreateSupplySourceOK() *CreateSupplySourceOK {
	return &CreateSupplySourceOK{}
}

/*
CreateSupplySourceOK describes a response with status code 200, with default header values.

Success.
*/
type CreateSupplySourceOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.CreateSupplySourceResponse
}

// IsSuccess returns true when this create supply source o k response has a 2xx status code
func (o *CreateSupplySourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create supply source o k response has a 3xx status code
func (o *CreateSupplySourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source o k response has a 4xx status code
func (o *CreateSupplySourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create supply source o k response has a 5xx status code
func (o *CreateSupplySourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source o k response a status code equal to that given
func (o *CreateSupplySourceOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateSupplySourceOK) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceOK  %+v", 200, o.Payload)
}

func (o *CreateSupplySourceOK) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceOK  %+v", 200, o.Payload)
}

func (o *CreateSupplySourceOK) GetPayload() *supply_sources_2020_07_01_models.CreateSupplySourceResponse {
	return o.Payload
}

func (o *CreateSupplySourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.CreateSupplySourceResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceBadRequest creates a CreateSupplySourceBadRequest with default headers values
func NewCreateSupplySourceBadRequest() *CreateSupplySourceBadRequest {
	return &CreateSupplySourceBadRequest{}
}

/*
CreateSupplySourceBadRequest describes a response with status code 400, with default header values.

The request has missing or invalid parameters and cannot be parsed.
*/
type CreateSupplySourceBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source bad request response has a 2xx status code
func (o *CreateSupplySourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source bad request response has a 3xx status code
func (o *CreateSupplySourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source bad request response has a 4xx status code
func (o *CreateSupplySourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create supply source bad request response has a 5xx status code
func (o *CreateSupplySourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source bad request response a status code equal to that given
func (o *CreateSupplySourceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateSupplySourceBadRequest) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSupplySourceBadRequest) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceBadRequest  %+v", 400, o.Payload)
}

func (o *CreateSupplySourceBadRequest) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceForbidden creates a CreateSupplySourceForbidden with default headers values
func NewCreateSupplySourceForbidden() *CreateSupplySourceForbidden {
	return &CreateSupplySourceForbidden{}
}

/*
CreateSupplySourceForbidden describes a response with status code 403, with default header values.

An error that indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateSupplySourceForbidden struct {

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source forbidden response has a 2xx status code
func (o *CreateSupplySourceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source forbidden response has a 3xx status code
func (o *CreateSupplySourceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source forbidden response has a 4xx status code
func (o *CreateSupplySourceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create supply source forbidden response has a 5xx status code
func (o *CreateSupplySourceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source forbidden response a status code equal to that given
func (o *CreateSupplySourceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateSupplySourceForbidden) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceForbidden  %+v", 403, o.Payload)
}

func (o *CreateSupplySourceForbidden) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceForbidden  %+v", 403, o.Payload)
}

func (o *CreateSupplySourceForbidden) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceNotFound creates a CreateSupplySourceNotFound with default headers values
func NewCreateSupplySourceNotFound() *CreateSupplySourceNotFound {
	return &CreateSupplySourceNotFound{}
}

/*
CreateSupplySourceNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateSupplySourceNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source not found response has a 2xx status code
func (o *CreateSupplySourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source not found response has a 3xx status code
func (o *CreateSupplySourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source not found response has a 4xx status code
func (o *CreateSupplySourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create supply source not found response has a 5xx status code
func (o *CreateSupplySourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source not found response a status code equal to that given
func (o *CreateSupplySourceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateSupplySourceNotFound) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceNotFound  %+v", 404, o.Payload)
}

func (o *CreateSupplySourceNotFound) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceNotFound  %+v", 404, o.Payload)
}

func (o *CreateSupplySourceNotFound) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceRequestEntityTooLarge creates a CreateSupplySourceRequestEntityTooLarge with default headers values
func NewCreateSupplySourceRequestEntityTooLarge() *CreateSupplySourceRequestEntityTooLarge {
	return &CreateSupplySourceRequestEntityTooLarge{}
}

/*
CreateSupplySourceRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateSupplySourceRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source request entity too large response has a 2xx status code
func (o *CreateSupplySourceRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source request entity too large response has a 3xx status code
func (o *CreateSupplySourceRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source request entity too large response has a 4xx status code
func (o *CreateSupplySourceRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create supply source request entity too large response has a 5xx status code
func (o *CreateSupplySourceRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source request entity too large response a status code equal to that given
func (o *CreateSupplySourceRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateSupplySourceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateSupplySourceRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateSupplySourceRequestEntityTooLarge) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceUnsupportedMediaType creates a CreateSupplySourceUnsupportedMediaType with default headers values
func NewCreateSupplySourceUnsupportedMediaType() *CreateSupplySourceUnsupportedMediaType {
	return &CreateSupplySourceUnsupportedMediaType{}
}

/*
CreateSupplySourceUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateSupplySourceUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source unsupported media type response has a 2xx status code
func (o *CreateSupplySourceUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source unsupported media type response has a 3xx status code
func (o *CreateSupplySourceUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source unsupported media type response has a 4xx status code
func (o *CreateSupplySourceUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create supply source unsupported media type response has a 5xx status code
func (o *CreateSupplySourceUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source unsupported media type response a status code equal to that given
func (o *CreateSupplySourceUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateSupplySourceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateSupplySourceUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateSupplySourceUnsupportedMediaType) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceTooManyRequests creates a CreateSupplySourceTooManyRequests with default headers values
func NewCreateSupplySourceTooManyRequests() *CreateSupplySourceTooManyRequests {
	return &CreateSupplySourceTooManyRequests{}
}

/*
CreateSupplySourceTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateSupplySourceTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source too many requests response has a 2xx status code
func (o *CreateSupplySourceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source too many requests response has a 3xx status code
func (o *CreateSupplySourceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source too many requests response has a 4xx status code
func (o *CreateSupplySourceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create supply source too many requests response has a 5xx status code
func (o *CreateSupplySourceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create supply source too many requests response a status code equal to that given
func (o *CreateSupplySourceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateSupplySourceTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateSupplySourceTooManyRequests) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateSupplySourceTooManyRequests) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceInternalServerError creates a CreateSupplySourceInternalServerError with default headers values
func NewCreateSupplySourceInternalServerError() *CreateSupplySourceInternalServerError {
	return &CreateSupplySourceInternalServerError{}
}

/*
CreateSupplySourceInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateSupplySourceInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source internal server error response has a 2xx status code
func (o *CreateSupplySourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source internal server error response has a 3xx status code
func (o *CreateSupplySourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source internal server error response has a 4xx status code
func (o *CreateSupplySourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create supply source internal server error response has a 5xx status code
func (o *CreateSupplySourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create supply source internal server error response a status code equal to that given
func (o *CreateSupplySourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateSupplySourceInternalServerError) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSupplySourceInternalServerError) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateSupplySourceInternalServerError) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSupplySourceServiceUnavailable creates a CreateSupplySourceServiceUnavailable with default headers values
func NewCreateSupplySourceServiceUnavailable() *CreateSupplySourceServiceUnavailable {
	return &CreateSupplySourceServiceUnavailable{}
}

/*
CreateSupplySourceServiceUnavailable describes a response with status code 503, with default header values.

The temporary overloading or maintenance of the server.
*/
type CreateSupplySourceServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this create supply source service unavailable response has a 2xx status code
func (o *CreateSupplySourceServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create supply source service unavailable response has a 3xx status code
func (o *CreateSupplySourceServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create supply source service unavailable response has a 4xx status code
func (o *CreateSupplySourceServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create supply source service unavailable response has a 5xx status code
func (o *CreateSupplySourceServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create supply source service unavailable response a status code equal to that given
func (o *CreateSupplySourceServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateSupplySourceServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateSupplySourceServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /supplySources/2020-07-01/supplySources][%d] createSupplySourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateSupplySourceServiceUnavailable) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *CreateSupplySourceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
