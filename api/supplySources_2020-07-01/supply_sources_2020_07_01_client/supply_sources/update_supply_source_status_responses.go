// Code generated by go-swagger; DO NOT EDIT.

package supply_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/supplySources_2020-07-01/supply_sources_2020_07_01_models"
)

// UpdateSupplySourceStatusReader is a Reader for the UpdateSupplySourceStatus structure.
type UpdateSupplySourceStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSupplySourceStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateSupplySourceStatusNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSupplySourceStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSupplySourceStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSupplySourceStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateSupplySourceStatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateSupplySourceStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSupplySourceStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSupplySourceStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateSupplySourceStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSupplySourceStatusNoContent creates a UpdateSupplySourceStatusNoContent with default headers values
func NewUpdateSupplySourceStatusNoContent() *UpdateSupplySourceStatusNoContent {
	return &UpdateSupplySourceStatusNoContent{}
}

/*
UpdateSupplySourceStatusNoContent describes a response with status code 204, with default header values.

Success.
*/
type UpdateSupplySourceStatusNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status no content response has a 2xx status code
func (o *UpdateSupplySourceStatusNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update supply source status no content response has a 3xx status code
func (o *UpdateSupplySourceStatusNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status no content response has a 4xx status code
func (o *UpdateSupplySourceStatusNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update supply source status no content response has a 5xx status code
func (o *UpdateSupplySourceStatusNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status no content response a status code equal to that given
func (o *UpdateSupplySourceStatusNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateSupplySourceStatusNoContent) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusNoContent  %+v", 204, o.Payload)
}

func (o *UpdateSupplySourceStatusNoContent) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusNoContent  %+v", 204, o.Payload)
}

func (o *UpdateSupplySourceStatusNoContent) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusBadRequest creates a UpdateSupplySourceStatusBadRequest with default headers values
func NewUpdateSupplySourceStatusBadRequest() *UpdateSupplySourceStatusBadRequest {
	return &UpdateSupplySourceStatusBadRequest{}
}

/*
UpdateSupplySourceStatusBadRequest describes a response with status code 400, with default header values.

The request has missing or invalid parameters and cannot be parsed.
*/
type UpdateSupplySourceStatusBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status bad request response has a 2xx status code
func (o *UpdateSupplySourceStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status bad request response has a 3xx status code
func (o *UpdateSupplySourceStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status bad request response has a 4xx status code
func (o *UpdateSupplySourceStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source status bad request response has a 5xx status code
func (o *UpdateSupplySourceStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status bad request response a status code equal to that given
func (o *UpdateSupplySourceStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateSupplySourceStatusBadRequest) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSupplySourceStatusBadRequest) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSupplySourceStatusBadRequest) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusForbidden creates a UpdateSupplySourceStatusForbidden with default headers values
func NewUpdateSupplySourceStatusForbidden() *UpdateSupplySourceStatusForbidden {
	return &UpdateSupplySourceStatusForbidden{}
}

/*
UpdateSupplySourceStatusForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateSupplySourceStatusForbidden struct {

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status forbidden response has a 2xx status code
func (o *UpdateSupplySourceStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status forbidden response has a 3xx status code
func (o *UpdateSupplySourceStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status forbidden response has a 4xx status code
func (o *UpdateSupplySourceStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source status forbidden response has a 5xx status code
func (o *UpdateSupplySourceStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status forbidden response a status code equal to that given
func (o *UpdateSupplySourceStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateSupplySourceStatusForbidden) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSupplySourceStatusForbidden) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSupplySourceStatusForbidden) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusNotFound creates a UpdateSupplySourceStatusNotFound with default headers values
func NewUpdateSupplySourceStatusNotFound() *UpdateSupplySourceStatusNotFound {
	return &UpdateSupplySourceStatusNotFound{}
}

/*
UpdateSupplySourceStatusNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateSupplySourceStatusNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status not found response has a 2xx status code
func (o *UpdateSupplySourceStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status not found response has a 3xx status code
func (o *UpdateSupplySourceStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status not found response has a 4xx status code
func (o *UpdateSupplySourceStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source status not found response has a 5xx status code
func (o *UpdateSupplySourceStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status not found response a status code equal to that given
func (o *UpdateSupplySourceStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateSupplySourceStatusNotFound) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSupplySourceStatusNotFound) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSupplySourceStatusNotFound) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusRequestEntityTooLarge creates a UpdateSupplySourceStatusRequestEntityTooLarge with default headers values
func NewUpdateSupplySourceStatusRequestEntityTooLarge() *UpdateSupplySourceStatusRequestEntityTooLarge {
	return &UpdateSupplySourceStatusRequestEntityTooLarge{}
}

/*
UpdateSupplySourceStatusRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateSupplySourceStatusRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status request entity too large response has a 2xx status code
func (o *UpdateSupplySourceStatusRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status request entity too large response has a 3xx status code
func (o *UpdateSupplySourceStatusRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status request entity too large response has a 4xx status code
func (o *UpdateSupplySourceStatusRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source status request entity too large response has a 5xx status code
func (o *UpdateSupplySourceStatusRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status request entity too large response a status code equal to that given
func (o *UpdateSupplySourceStatusRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateSupplySourceStatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateSupplySourceStatusRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateSupplySourceStatusRequestEntityTooLarge) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusUnsupportedMediaType creates a UpdateSupplySourceStatusUnsupportedMediaType with default headers values
func NewUpdateSupplySourceStatusUnsupportedMediaType() *UpdateSupplySourceStatusUnsupportedMediaType {
	return &UpdateSupplySourceStatusUnsupportedMediaType{}
}

/*
UpdateSupplySourceStatusUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateSupplySourceStatusUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status unsupported media type response has a 2xx status code
func (o *UpdateSupplySourceStatusUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status unsupported media type response has a 3xx status code
func (o *UpdateSupplySourceStatusUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status unsupported media type response has a 4xx status code
func (o *UpdateSupplySourceStatusUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source status unsupported media type response has a 5xx status code
func (o *UpdateSupplySourceStatusUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status unsupported media type response a status code equal to that given
func (o *UpdateSupplySourceStatusUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateSupplySourceStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateSupplySourceStatusUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateSupplySourceStatusUnsupportedMediaType) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusTooManyRequests creates a UpdateSupplySourceStatusTooManyRequests with default headers values
func NewUpdateSupplySourceStatusTooManyRequests() *UpdateSupplySourceStatusTooManyRequests {
	return &UpdateSupplySourceStatusTooManyRequests{}
}

/*
UpdateSupplySourceStatusTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateSupplySourceStatusTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status too many requests response has a 2xx status code
func (o *UpdateSupplySourceStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status too many requests response has a 3xx status code
func (o *UpdateSupplySourceStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status too many requests response has a 4xx status code
func (o *UpdateSupplySourceStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source status too many requests response has a 5xx status code
func (o *UpdateSupplySourceStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source status too many requests response a status code equal to that given
func (o *UpdateSupplySourceStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateSupplySourceStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSupplySourceStatusTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSupplySourceStatusTooManyRequests) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusInternalServerError creates a UpdateSupplySourceStatusInternalServerError with default headers values
func NewUpdateSupplySourceStatusInternalServerError() *UpdateSupplySourceStatusInternalServerError {
	return &UpdateSupplySourceStatusInternalServerError{}
}

/*
UpdateSupplySourceStatusInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateSupplySourceStatusInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status internal server error response has a 2xx status code
func (o *UpdateSupplySourceStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status internal server error response has a 3xx status code
func (o *UpdateSupplySourceStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status internal server error response has a 4xx status code
func (o *UpdateSupplySourceStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update supply source status internal server error response has a 5xx status code
func (o *UpdateSupplySourceStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update supply source status internal server error response a status code equal to that given
func (o *UpdateSupplySourceStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateSupplySourceStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSupplySourceStatusInternalServerError) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSupplySourceStatusInternalServerError) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceStatusServiceUnavailable creates a UpdateSupplySourceStatusServiceUnavailable with default headers values
func NewUpdateSupplySourceStatusServiceUnavailable() *UpdateSupplySourceStatusServiceUnavailable {
	return &UpdateSupplySourceStatusServiceUnavailable{}
}

/*
UpdateSupplySourceStatusServiceUnavailable describes a response with status code 503, with default header values.

The temporary overloading or maintenance of the server.
*/
type UpdateSupplySourceStatusServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source status service unavailable response has a 2xx status code
func (o *UpdateSupplySourceStatusServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source status service unavailable response has a 3xx status code
func (o *UpdateSupplySourceStatusServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source status service unavailable response has a 4xx status code
func (o *UpdateSupplySourceStatusServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update supply source status service unavailable response has a 5xx status code
func (o *UpdateSupplySourceStatusServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update supply source status service unavailable response a status code equal to that given
func (o *UpdateSupplySourceStatusServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateSupplySourceStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateSupplySourceStatusServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}/status][%d] updateSupplySourceStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateSupplySourceStatusServiceUnavailable) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
