// Code generated by go-swagger; DO NOT EDIT.

package supply_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/supplySources_2020-07-01/supply_sources_2020_07_01_models"
)

// UpdateSupplySourceReader is a Reader for the UpdateSupplySource structure.
type UpdateSupplySourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateSupplySourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateSupplySourceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateSupplySourceBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateSupplySourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateSupplySourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateSupplySourceRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateSupplySourceUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateSupplySourceTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateSupplySourceInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateSupplySourceServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateSupplySourceNoContent creates a UpdateSupplySourceNoContent with default headers values
func NewUpdateSupplySourceNoContent() *UpdateSupplySourceNoContent {
	return &UpdateSupplySourceNoContent{}
}

/*
UpdateSupplySourceNoContent describes a response with status code 204, with default header values.

Success.
*/
type UpdateSupplySourceNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source no content response has a 2xx status code
func (o *UpdateSupplySourceNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update supply source no content response has a 3xx status code
func (o *UpdateSupplySourceNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source no content response has a 4xx status code
func (o *UpdateSupplySourceNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this update supply source no content response has a 5xx status code
func (o *UpdateSupplySourceNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source no content response a status code equal to that given
func (o *UpdateSupplySourceNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *UpdateSupplySourceNoContent) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceNoContent  %+v", 204, o.Payload)
}

func (o *UpdateSupplySourceNoContent) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceNoContent  %+v", 204, o.Payload)
}

func (o *UpdateSupplySourceNoContent) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceBadRequest creates a UpdateSupplySourceBadRequest with default headers values
func NewUpdateSupplySourceBadRequest() *UpdateSupplySourceBadRequest {
	return &UpdateSupplySourceBadRequest{}
}

/*
UpdateSupplySourceBadRequest describes a response with status code 400, with default header values.

The request has missing or invalid parameters and cannot be parsed.
*/
type UpdateSupplySourceBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source bad request response has a 2xx status code
func (o *UpdateSupplySourceBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source bad request response has a 3xx status code
func (o *UpdateSupplySourceBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source bad request response has a 4xx status code
func (o *UpdateSupplySourceBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source bad request response has a 5xx status code
func (o *UpdateSupplySourceBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source bad request response a status code equal to that given
func (o *UpdateSupplySourceBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateSupplySourceBadRequest) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSupplySourceBadRequest) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateSupplySourceBadRequest) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceForbidden creates a UpdateSupplySourceForbidden with default headers values
func NewUpdateSupplySourceForbidden() *UpdateSupplySourceForbidden {
	return &UpdateSupplySourceForbidden{}
}

/*
UpdateSupplySourceForbidden describes a response with status code 403, with default header values.

An error that indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateSupplySourceForbidden struct {

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source forbidden response has a 2xx status code
func (o *UpdateSupplySourceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source forbidden response has a 3xx status code
func (o *UpdateSupplySourceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source forbidden response has a 4xx status code
func (o *UpdateSupplySourceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source forbidden response has a 5xx status code
func (o *UpdateSupplySourceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source forbidden response a status code equal to that given
func (o *UpdateSupplySourceForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateSupplySourceForbidden) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSupplySourceForbidden) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceForbidden  %+v", 403, o.Payload)
}

func (o *UpdateSupplySourceForbidden) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceNotFound creates a UpdateSupplySourceNotFound with default headers values
func NewUpdateSupplySourceNotFound() *UpdateSupplySourceNotFound {
	return &UpdateSupplySourceNotFound{}
}

/*
UpdateSupplySourceNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateSupplySourceNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source not found response has a 2xx status code
func (o *UpdateSupplySourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source not found response has a 3xx status code
func (o *UpdateSupplySourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source not found response has a 4xx status code
func (o *UpdateSupplySourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source not found response has a 5xx status code
func (o *UpdateSupplySourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source not found response a status code equal to that given
func (o *UpdateSupplySourceNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateSupplySourceNotFound) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSupplySourceNotFound) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceNotFound  %+v", 404, o.Payload)
}

func (o *UpdateSupplySourceNotFound) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceRequestEntityTooLarge creates a UpdateSupplySourceRequestEntityTooLarge with default headers values
func NewUpdateSupplySourceRequestEntityTooLarge() *UpdateSupplySourceRequestEntityTooLarge {
	return &UpdateSupplySourceRequestEntityTooLarge{}
}

/*
UpdateSupplySourceRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateSupplySourceRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source request entity too large response has a 2xx status code
func (o *UpdateSupplySourceRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source request entity too large response has a 3xx status code
func (o *UpdateSupplySourceRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source request entity too large response has a 4xx status code
func (o *UpdateSupplySourceRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source request entity too large response has a 5xx status code
func (o *UpdateSupplySourceRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source request entity too large response a status code equal to that given
func (o *UpdateSupplySourceRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateSupplySourceRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateSupplySourceRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateSupplySourceRequestEntityTooLarge) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceUnsupportedMediaType creates a UpdateSupplySourceUnsupportedMediaType with default headers values
func NewUpdateSupplySourceUnsupportedMediaType() *UpdateSupplySourceUnsupportedMediaType {
	return &UpdateSupplySourceUnsupportedMediaType{}
}

/*
UpdateSupplySourceUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateSupplySourceUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source unsupported media type response has a 2xx status code
func (o *UpdateSupplySourceUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source unsupported media type response has a 3xx status code
func (o *UpdateSupplySourceUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source unsupported media type response has a 4xx status code
func (o *UpdateSupplySourceUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source unsupported media type response has a 5xx status code
func (o *UpdateSupplySourceUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source unsupported media type response a status code equal to that given
func (o *UpdateSupplySourceUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateSupplySourceUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateSupplySourceUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateSupplySourceUnsupportedMediaType) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceTooManyRequests creates a UpdateSupplySourceTooManyRequests with default headers values
func NewUpdateSupplySourceTooManyRequests() *UpdateSupplySourceTooManyRequests {
	return &UpdateSupplySourceTooManyRequests{}
}

/*
UpdateSupplySourceTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateSupplySourceTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source too many requests response has a 2xx status code
func (o *UpdateSupplySourceTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source too many requests response has a 3xx status code
func (o *UpdateSupplySourceTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source too many requests response has a 4xx status code
func (o *UpdateSupplySourceTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update supply source too many requests response has a 5xx status code
func (o *UpdateSupplySourceTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update supply source too many requests response a status code equal to that given
func (o *UpdateSupplySourceTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateSupplySourceTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSupplySourceTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateSupplySourceTooManyRequests) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceInternalServerError creates a UpdateSupplySourceInternalServerError with default headers values
func NewUpdateSupplySourceInternalServerError() *UpdateSupplySourceInternalServerError {
	return &UpdateSupplySourceInternalServerError{}
}

/*
UpdateSupplySourceInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateSupplySourceInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source internal server error response has a 2xx status code
func (o *UpdateSupplySourceInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source internal server error response has a 3xx status code
func (o *UpdateSupplySourceInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source internal server error response has a 4xx status code
func (o *UpdateSupplySourceInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update supply source internal server error response has a 5xx status code
func (o *UpdateSupplySourceInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update supply source internal server error response a status code equal to that given
func (o *UpdateSupplySourceInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateSupplySourceInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSupplySourceInternalServerError) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateSupplySourceInternalServerError) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateSupplySourceServiceUnavailable creates a UpdateSupplySourceServiceUnavailable with default headers values
func NewUpdateSupplySourceServiceUnavailable() *UpdateSupplySourceServiceUnavailable {
	return &UpdateSupplySourceServiceUnavailable{}
}

/*
UpdateSupplySourceServiceUnavailable describes a response with status code 503, with default header values.

The temporary overloading or maintenance of the server.
*/
type UpdateSupplySourceServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* The unique request reference ID.
	 */
	XAmznRequestID string

	Payload *supply_sources_2020_07_01_models.ErrorList
}

// IsSuccess returns true when this update supply source service unavailable response has a 2xx status code
func (o *UpdateSupplySourceServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update supply source service unavailable response has a 3xx status code
func (o *UpdateSupplySourceServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update supply source service unavailable response has a 4xx status code
func (o *UpdateSupplySourceServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update supply source service unavailable response has a 5xx status code
func (o *UpdateSupplySourceServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update supply source service unavailable response a status code equal to that given
func (o *UpdateSupplySourceServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateSupplySourceServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateSupplySourceServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /supplySources/2020-07-01/supplySources/{supplySourceId}][%d] updateSupplySourceServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateSupplySourceServiceUnavailable) GetPayload() *supply_sources_2020_07_01_models.ErrorList {
	return o.Payload
}

func (o *UpdateSupplySourceServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(supply_sources_2020_07_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
