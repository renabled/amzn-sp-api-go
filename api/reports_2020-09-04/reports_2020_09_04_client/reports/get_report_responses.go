// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/reports_2020-09-04/reports_2020_09_04_models"
)

// GetReportReader is a Reader for the GetReport structure.
type GetReportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetReportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetReportOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetReportBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetReportUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetReportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetReportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetReportUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetReportTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetReportInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetReportServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetReportOK creates a GetReportOK with default headers values
func NewGetReportOK() *GetReportOK {
	return &GetReportOK{}
}

/*
GetReportOK describes a response with status code 200, with default header values.

Success.
*/
type GetReportOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report o k response has a 2xx status code
func (o *GetReportOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get report o k response has a 3xx status code
func (o *GetReportOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report o k response has a 4xx status code
func (o *GetReportOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report o k response has a 5xx status code
func (o *GetReportOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get report o k response a status code equal to that given
func (o *GetReportOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetReportOK) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportOK  %+v", 200, o.Payload)
}

func (o *GetReportOK) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportOK  %+v", 200, o.Payload)
}

func (o *GetReportOK) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportBadRequest creates a GetReportBadRequest with default headers values
func NewGetReportBadRequest() *GetReportBadRequest {
	return &GetReportBadRequest{}
}

/*
GetReportBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetReportBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report bad request response has a 2xx status code
func (o *GetReportBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report bad request response has a 3xx status code
func (o *GetReportBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report bad request response has a 4xx status code
func (o *GetReportBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report bad request response has a 5xx status code
func (o *GetReportBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get report bad request response a status code equal to that given
func (o *GetReportBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetReportBadRequest) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportBadRequest) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportBadRequest  %+v", 400, o.Payload)
}

func (o *GetReportBadRequest) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportUnauthorized creates a GetReportUnauthorized with default headers values
func NewGetReportUnauthorized() *GetReportUnauthorized {
	return &GetReportUnauthorized{}
}

/*
GetReportUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetReportUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report unauthorized response has a 2xx status code
func (o *GetReportUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report unauthorized response has a 3xx status code
func (o *GetReportUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report unauthorized response has a 4xx status code
func (o *GetReportUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report unauthorized response has a 5xx status code
func (o *GetReportUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get report unauthorized response a status code equal to that given
func (o *GetReportUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetReportUnauthorized) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportUnauthorized  %+v", 401, o.Payload)
}

func (o *GetReportUnauthorized) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportUnauthorized  %+v", 401, o.Payload)
}

func (o *GetReportUnauthorized) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportForbidden creates a GetReportForbidden with default headers values
func NewGetReportForbidden() *GetReportForbidden {
	return &GetReportForbidden{}
}

/*
GetReportForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetReportForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report forbidden response has a 2xx status code
func (o *GetReportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report forbidden response has a 3xx status code
func (o *GetReportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report forbidden response has a 4xx status code
func (o *GetReportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report forbidden response has a 5xx status code
func (o *GetReportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get report forbidden response a status code equal to that given
func (o *GetReportForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetReportForbidden) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportForbidden  %+v", 403, o.Payload)
}

func (o *GetReportForbidden) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportForbidden  %+v", 403, o.Payload)
}

func (o *GetReportForbidden) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportNotFound creates a GetReportNotFound with default headers values
func NewGetReportNotFound() *GetReportNotFound {
	return &GetReportNotFound{}
}

/*
GetReportNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type GetReportNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report not found response has a 2xx status code
func (o *GetReportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report not found response has a 3xx status code
func (o *GetReportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report not found response has a 4xx status code
func (o *GetReportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report not found response has a 5xx status code
func (o *GetReportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get report not found response a status code equal to that given
func (o *GetReportNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetReportNotFound) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportNotFound  %+v", 404, o.Payload)
}

func (o *GetReportNotFound) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportNotFound  %+v", 404, o.Payload)
}

func (o *GetReportNotFound) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportUnsupportedMediaType creates a GetReportUnsupportedMediaType with default headers values
func NewGetReportUnsupportedMediaType() *GetReportUnsupportedMediaType {
	return &GetReportUnsupportedMediaType{}
}

/*
GetReportUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type GetReportUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report unsupported media type response has a 2xx status code
func (o *GetReportUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report unsupported media type response has a 3xx status code
func (o *GetReportUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report unsupported media type response has a 4xx status code
func (o *GetReportUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report unsupported media type response has a 5xx status code
func (o *GetReportUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get report unsupported media type response a status code equal to that given
func (o *GetReportUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetReportUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetReportUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetReportUnsupportedMediaType) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportTooManyRequests creates a GetReportTooManyRequests with default headers values
func NewGetReportTooManyRequests() *GetReportTooManyRequests {
	return &GetReportTooManyRequests{}
}

/*
GetReportTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetReportTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report too many requests response has a 2xx status code
func (o *GetReportTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report too many requests response has a 3xx status code
func (o *GetReportTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report too many requests response has a 4xx status code
func (o *GetReportTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get report too many requests response has a 5xx status code
func (o *GetReportTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get report too many requests response a status code equal to that given
func (o *GetReportTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetReportTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetReportTooManyRequests) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetReportTooManyRequests) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportInternalServerError creates a GetReportInternalServerError with default headers values
func NewGetReportInternalServerError() *GetReportInternalServerError {
	return &GetReportInternalServerError{}
}

/*
GetReportInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetReportInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report internal server error response has a 2xx status code
func (o *GetReportInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report internal server error response has a 3xx status code
func (o *GetReportInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report internal server error response has a 4xx status code
func (o *GetReportInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report internal server error response has a 5xx status code
func (o *GetReportInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get report internal server error response a status code equal to that given
func (o *GetReportInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetReportInternalServerError) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReportInternalServerError) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportInternalServerError  %+v", 500, o.Payload)
}

func (o *GetReportInternalServerError) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetReportServiceUnavailable creates a GetReportServiceUnavailable with default headers values
func NewGetReportServiceUnavailable() *GetReportServiceUnavailable {
	return &GetReportServiceUnavailable{}
}

/*
GetReportServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetReportServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.GetReportResponse
}

// IsSuccess returns true when this get report service unavailable response has a 2xx status code
func (o *GetReportServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get report service unavailable response has a 3xx status code
func (o *GetReportServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get report service unavailable response has a 4xx status code
func (o *GetReportServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get report service unavailable response has a 5xx status code
func (o *GetReportServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get report service unavailable response a status code equal to that given
func (o *GetReportServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetReportServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetReportServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /reports/2020-09-04/reports/{reportId}][%d] getReportServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetReportServiceUnavailable) GetPayload() *reports_2020_09_04_models.GetReportResponse {
	return o.Payload
}

func (o *GetReportServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.GetReportResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
