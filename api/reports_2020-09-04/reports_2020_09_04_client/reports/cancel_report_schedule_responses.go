// Code generated by go-swagger; DO NOT EDIT.

package reports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/reports_2020-09-04/reports_2020_09_04_models"
)

// CancelReportScheduleReader is a Reader for the CancelReportSchedule structure.
type CancelReportScheduleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelReportScheduleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelReportScheduleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelReportScheduleBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelReportScheduleUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelReportScheduleForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelReportScheduleNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCancelReportScheduleUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelReportScheduleTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelReportScheduleInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelReportScheduleServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelReportScheduleOK creates a CancelReportScheduleOK with default headers values
func NewCancelReportScheduleOK() *CancelReportScheduleOK {
	return &CancelReportScheduleOK{}
}

/* CancelReportScheduleOK describes a response with status code 200, with default header values.

Success.
*/
type CancelReportScheduleOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleOK) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleOK  %+v", 200, o.Payload)
}
func (o *CancelReportScheduleOK) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleBadRequest creates a CancelReportScheduleBadRequest with default headers values
func NewCancelReportScheduleBadRequest() *CancelReportScheduleBadRequest {
	return &CancelReportScheduleBadRequest{}
}

/* CancelReportScheduleBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelReportScheduleBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleBadRequest  %+v", 400, o.Payload)
}
func (o *CancelReportScheduleBadRequest) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleUnauthorized creates a CancelReportScheduleUnauthorized with default headers values
func NewCancelReportScheduleUnauthorized() *CancelReportScheduleUnauthorized {
	return &CancelReportScheduleUnauthorized{}
}

/* CancelReportScheduleUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CancelReportScheduleUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleUnauthorized  %+v", 401, o.Payload)
}
func (o *CancelReportScheduleUnauthorized) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleForbidden creates a CancelReportScheduleForbidden with default headers values
func NewCancelReportScheduleForbidden() *CancelReportScheduleForbidden {
	return &CancelReportScheduleForbidden{}
}

/* CancelReportScheduleForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CancelReportScheduleForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleForbidden) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleForbidden  %+v", 403, o.Payload)
}
func (o *CancelReportScheduleForbidden) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleNotFound creates a CancelReportScheduleNotFound with default headers values
func NewCancelReportScheduleNotFound() *CancelReportScheduleNotFound {
	return &CancelReportScheduleNotFound{}
}

/* CancelReportScheduleNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CancelReportScheduleNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleNotFound) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleNotFound  %+v", 404, o.Payload)
}
func (o *CancelReportScheduleNotFound) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleUnsupportedMediaType creates a CancelReportScheduleUnsupportedMediaType with default headers values
func NewCancelReportScheduleUnsupportedMediaType() *CancelReportScheduleUnsupportedMediaType {
	return &CancelReportScheduleUnsupportedMediaType{}
}

/* CancelReportScheduleUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type CancelReportScheduleUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *CancelReportScheduleUnsupportedMediaType) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleTooManyRequests creates a CancelReportScheduleTooManyRequests with default headers values
func NewCancelReportScheduleTooManyRequests() *CancelReportScheduleTooManyRequests {
	return &CancelReportScheduleTooManyRequests{}
}

/* CancelReportScheduleTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelReportScheduleTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleTooManyRequests  %+v", 429, o.Payload)
}
func (o *CancelReportScheduleTooManyRequests) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleInternalServerError creates a CancelReportScheduleInternalServerError with default headers values
func NewCancelReportScheduleInternalServerError() *CancelReportScheduleInternalServerError {
	return &CancelReportScheduleInternalServerError{}
}

/* CancelReportScheduleInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CancelReportScheduleInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleInternalServerError  %+v", 500, o.Payload)
}
func (o *CancelReportScheduleInternalServerError) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReportScheduleServiceUnavailable creates a CancelReportScheduleServiceUnavailable with default headers values
func NewCancelReportScheduleServiceUnavailable() *CancelReportScheduleServiceUnavailable {
	return &CancelReportScheduleServiceUnavailable{}
}

/* CancelReportScheduleServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelReportScheduleServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *reports_2020_09_04_models.CancelReportScheduleResponse
}

func (o *CancelReportScheduleServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /reports/2020-09-04/schedules/{reportScheduleId}][%d] cancelReportScheduleServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CancelReportScheduleServiceUnavailable) GetPayload() *reports_2020_09_04_models.CancelReportScheduleResponse {
	return o.Payload
}

func (o *CancelReportScheduleServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(reports_2020_09_04_models.CancelReportScheduleResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
