// Code generated by go-swagger; DO NOT EDIT.

package reports_2021_06_30_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportSchedule Detailed information about a report schedule.
//
// swagger:model ReportSchedule
type ReportSchedule struct {

	// A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
	MarketplaceIds []string `json:"marketplaceIds"`

	// The date and time when the schedule will create its next report, in ISO 8601 date time format.
	// Format: date-time
	NextReportCreationTime strfmt.DateTime `json:"nextReportCreationTime,omitempty"`

	// An ISO 8601 period value that indicates how often a report should be created.
	// Required: true
	Period *string `json:"period"`

	// report options
	ReportOptions ReportOptions `json:"reportOptions,omitempty"`

	// The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
	// Required: true
	ReportScheduleID *string `json:"reportScheduleId"`

	// The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
	// Required: true
	ReportType *string `json:"reportType"`
}

// Validate validates this report schedule
func (m *ReportSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNextReportCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportScheduleID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportSchedule) validateNextReportCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.NextReportCreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("nextReportCreationTime", "body", "date-time", m.NextReportCreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ReportSchedule) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	return nil
}

func (m *ReportSchedule) validateReportOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportOptions) { // not required
		return nil
	}

	if m.ReportOptions != nil {
		if err := m.ReportOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reportOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reportOptions")
			}
			return err
		}
	}

	return nil
}

func (m *ReportSchedule) validateReportScheduleID(formats strfmt.Registry) error {

	if err := validate.Required("reportScheduleId", "body", m.ReportScheduleID); err != nil {
		return err
	}

	return nil
}

func (m *ReportSchedule) validateReportType(formats strfmt.Registry) error {

	if err := validate.Required("reportType", "body", m.ReportType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this report schedule based on the context it is used
func (m *ReportSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReportOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReportSchedule) contextValidateReportOptions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReportOptions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reportOptions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reportOptions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportSchedule) UnmarshalBinary(b []byte) error {
	var res ReportSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
