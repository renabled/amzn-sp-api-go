// Code generated by go-swagger; DO NOT EDIT.

package reports_2021_06_30_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateReportScheduleSpecification Information required to create the report schedule.
//
// swagger:model CreateReportScheduleSpecification
type CreateReportScheduleSpecification struct {

	// A list of marketplace identifiers for the report schedule.
	// Required: true
	// Max Items: 25
	// Min Items: 1
	MarketplaceIds []string `json:"marketplaceIds"`

	// The date and time when the schedule will create its next report, in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> date time format.
	// Format: date-time
	NextReportCreationTime strfmt.DateTime `json:"nextReportCreationTime,omitempty"`

	// One of a set of predefined <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> periods that specifies how often a report should be created.
	// Required: true
	// Enum: [PT5M PT15M PT30M PT1H PT2H PT4H PT8H PT12H P1D P2D P3D PT84H P7D P14D P15D P18D P30D P1M]
	Period *string `json:"period"`

	// report options
	ReportOptions ReportOptions `json:"reportOptions,omitempty"`

	// The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information.
	// Required: true
	ReportType *string `json:"reportType"`
}

// Validate validates this create report schedule specification
func (m *CreateReportScheduleSpecification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketplaceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNextReportCreationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReportScheduleSpecification) validateMarketplaceIds(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceIds", "body", m.MarketplaceIds); err != nil {
		return err
	}

	iMarketplaceIdsSize := int64(len(m.MarketplaceIds))

	if err := validate.MinItems("marketplaceIds", "body", iMarketplaceIdsSize, 1); err != nil {
		return err
	}

	if err := validate.MaxItems("marketplaceIds", "body", iMarketplaceIdsSize, 25); err != nil {
		return err
	}

	return nil
}

func (m *CreateReportScheduleSpecification) validateNextReportCreationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.NextReportCreationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("nextReportCreationTime", "body", "date-time", m.NextReportCreationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

var createReportScheduleSpecificationTypePeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PT5M","PT15M","PT30M","PT1H","PT2H","PT4H","PT8H","PT12H","P1D","P2D","P3D","PT84H","P7D","P14D","P15D","P18D","P30D","P1M"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createReportScheduleSpecificationTypePeriodPropEnum = append(createReportScheduleSpecificationTypePeriodPropEnum, v)
	}
}

const (

	// CreateReportScheduleSpecificationPeriodPT5M captures enum value "PT5M"
	CreateReportScheduleSpecificationPeriodPT5M string = "PT5M"

	// CreateReportScheduleSpecificationPeriodPT15M captures enum value "PT15M"
	CreateReportScheduleSpecificationPeriodPT15M string = "PT15M"

	// CreateReportScheduleSpecificationPeriodPT30M captures enum value "PT30M"
	CreateReportScheduleSpecificationPeriodPT30M string = "PT30M"

	// CreateReportScheduleSpecificationPeriodPT1H captures enum value "PT1H"
	CreateReportScheduleSpecificationPeriodPT1H string = "PT1H"

	// CreateReportScheduleSpecificationPeriodPT2H captures enum value "PT2H"
	CreateReportScheduleSpecificationPeriodPT2H string = "PT2H"

	// CreateReportScheduleSpecificationPeriodPT4H captures enum value "PT4H"
	CreateReportScheduleSpecificationPeriodPT4H string = "PT4H"

	// CreateReportScheduleSpecificationPeriodPT8H captures enum value "PT8H"
	CreateReportScheduleSpecificationPeriodPT8H string = "PT8H"

	// CreateReportScheduleSpecificationPeriodPT12H captures enum value "PT12H"
	CreateReportScheduleSpecificationPeriodPT12H string = "PT12H"

	// CreateReportScheduleSpecificationPeriodP1D captures enum value "P1D"
	CreateReportScheduleSpecificationPeriodP1D string = "P1D"

	// CreateReportScheduleSpecificationPeriodP2D captures enum value "P2D"
	CreateReportScheduleSpecificationPeriodP2D string = "P2D"

	// CreateReportScheduleSpecificationPeriodP3D captures enum value "P3D"
	CreateReportScheduleSpecificationPeriodP3D string = "P3D"

	// CreateReportScheduleSpecificationPeriodPT84H captures enum value "PT84H"
	CreateReportScheduleSpecificationPeriodPT84H string = "PT84H"

	// CreateReportScheduleSpecificationPeriodP7D captures enum value "P7D"
	CreateReportScheduleSpecificationPeriodP7D string = "P7D"

	// CreateReportScheduleSpecificationPeriodP14D captures enum value "P14D"
	CreateReportScheduleSpecificationPeriodP14D string = "P14D"

	// CreateReportScheduleSpecificationPeriodP15D captures enum value "P15D"
	CreateReportScheduleSpecificationPeriodP15D string = "P15D"

	// CreateReportScheduleSpecificationPeriodP18D captures enum value "P18D"
	CreateReportScheduleSpecificationPeriodP18D string = "P18D"

	// CreateReportScheduleSpecificationPeriodP30D captures enum value "P30D"
	CreateReportScheduleSpecificationPeriodP30D string = "P30D"

	// CreateReportScheduleSpecificationPeriodP1M captures enum value "P1M"
	CreateReportScheduleSpecificationPeriodP1M string = "P1M"
)

// prop value enum
func (m *CreateReportScheduleSpecification) validatePeriodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createReportScheduleSpecificationTypePeriodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateReportScheduleSpecification) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeriodEnum("period", "body", *m.Period); err != nil {
		return err
	}

	return nil
}

func (m *CreateReportScheduleSpecification) validateReportOptions(formats strfmt.Registry) error {
	if swag.IsZero(m.ReportOptions) { // not required
		return nil
	}

	if m.ReportOptions != nil {
		if err := m.ReportOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reportOptions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reportOptions")
			}
			return err
		}
	}

	return nil
}

func (m *CreateReportScheduleSpecification) validateReportType(formats strfmt.Registry) error {

	if err := validate.Required("reportType", "body", m.ReportType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create report schedule specification based on the context it is used
func (m *CreateReportScheduleSpecification) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReportOptions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateReportScheduleSpecification) contextValidateReportOptions(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ReportOptions.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("reportOptions")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("reportOptions")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateReportScheduleSpecification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateReportScheduleSpecification) UnmarshalBinary(b []byte) error {
	var res CreateReportScheduleSpecification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
