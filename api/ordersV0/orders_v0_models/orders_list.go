// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrdersList A list of orders along with additional information to make subsequent API calls.
//
// swagger:model OrdersList
type OrdersList struct {

	// A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
	CreatedBefore string `json:"CreatedBefore,omitempty"`

	// A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format.
	LastUpdatedBefore string `json:"LastUpdatedBefore,omitempty"`

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken string `json:"NextToken,omitempty"`

	// orders
	// Required: true
	Orders OrderList `json:"Orders"`
}

// Validate validates this orders list
func (m *OrdersList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersList) validateOrders(formats strfmt.Registry) error {

	if err := validate.Required("Orders", "body", m.Orders); err != nil {
		return err
	}

	if err := m.Orders.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Orders")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Orders")
		}
		return err
	}

	return nil
}

// ContextValidate validate this orders list based on the context it is used
func (m *OrdersList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrdersList) contextValidateOrders(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Orders.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("Orders")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("Orders")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrdersList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrdersList) UnmarshalBinary(b []byte) error {
	var res OrdersList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
