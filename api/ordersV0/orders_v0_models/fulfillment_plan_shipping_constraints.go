// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FulfillmentPlanShippingConstraints Delivery constraints applicable to this order.
//
// swagger:model FulfillmentPlanShippingConstraints
type FulfillmentPlanShippingConstraints struct {

	// Indicates if the line item needs to be delivered by pallet.
	PalletDelivery FulfillmentPlanConstraintType `json:"PalletDelivery,omitempty"`

	// Indicates that the recipient of the line item needs to sign to confirm its delivery.
	SignatureConfirmation FulfillmentPlanConstraintType `json:"SignatureConfirmation,omitempty"`
}

// Validate validates this fulfillment plan shipping constraints
func (m *FulfillmentPlanShippingConstraints) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePalletDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatureConfirmation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPlanShippingConstraints) validatePalletDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.PalletDelivery) { // not required
		return nil
	}

	if err := m.PalletDelivery.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PalletDelivery")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PalletDelivery")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPlanShippingConstraints) validateSignatureConfirmation(formats strfmt.Registry) error {
	if swag.IsZero(m.SignatureConfirmation) { // not required
		return nil
	}

	if err := m.SignatureConfirmation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SignatureConfirmation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SignatureConfirmation")
		}
		return err
	}

	return nil
}

// ContextValidate validate this fulfillment plan shipping constraints based on the context it is used
func (m *FulfillmentPlanShippingConstraints) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePalletDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignatureConfirmation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPlanShippingConstraints) contextValidatePalletDelivery(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PalletDelivery.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PalletDelivery")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PalletDelivery")
		}
		return err
	}

	return nil
}

func (m *FulfillmentPlanShippingConstraints) contextValidateSignatureConfirmation(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SignatureConfirmation.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SignatureConfirmation")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SignatureConfirmation")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentPlanShippingConstraints) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentPlanShippingConstraints) UnmarshalBinary(b []byte) error {
	var res FulfillmentPlanShippingConstraints
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
