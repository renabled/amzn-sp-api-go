// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Measurement measurement
//
// swagger:model Measurement
type Measurement struct {

	// The unit of measure for this measurement.
	// Required: true
	// Enum: [OUNCES POUNDS KILOGRAMS GRAMS MILLIGRAMS INCHES FEET METERS CENTIMETERS MILLIMETERS SQUARE_METERS SQUARE_CENTIMETERS SQUARE_FEET SQUARE_INCHES GALLONS PINTS QUARTS FLUID_OUNCES LITERS CUBIC_METERS CUBIC_FEET CUBIC_INCHES CUBIC_CENTIMETERS COUNT]
	Unit *string `json:"Unit"`

	// The value of the measurement.
	// Required: true
	Value *float64 `json:"Value"`
}

// Validate validates this measurement
func (m *Measurement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var measurementTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OUNCES","POUNDS","KILOGRAMS","GRAMS","MILLIGRAMS","INCHES","FEET","METERS","CENTIMETERS","MILLIMETERS","SQUARE_METERS","SQUARE_CENTIMETERS","SQUARE_FEET","SQUARE_INCHES","GALLONS","PINTS","QUARTS","FLUID_OUNCES","LITERS","CUBIC_METERS","CUBIC_FEET","CUBIC_INCHES","CUBIC_CENTIMETERS","COUNT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		measurementTypeUnitPropEnum = append(measurementTypeUnitPropEnum, v)
	}
}

const (

	// MeasurementUnitOUNCES captures enum value "OUNCES"
	MeasurementUnitOUNCES string = "OUNCES"

	// MeasurementUnitPOUNDS captures enum value "POUNDS"
	MeasurementUnitPOUNDS string = "POUNDS"

	// MeasurementUnitKILOGRAMS captures enum value "KILOGRAMS"
	MeasurementUnitKILOGRAMS string = "KILOGRAMS"

	// MeasurementUnitGRAMS captures enum value "GRAMS"
	MeasurementUnitGRAMS string = "GRAMS"

	// MeasurementUnitMILLIGRAMS captures enum value "MILLIGRAMS"
	MeasurementUnitMILLIGRAMS string = "MILLIGRAMS"

	// MeasurementUnitINCHES captures enum value "INCHES"
	MeasurementUnitINCHES string = "INCHES"

	// MeasurementUnitFEET captures enum value "FEET"
	MeasurementUnitFEET string = "FEET"

	// MeasurementUnitMETERS captures enum value "METERS"
	MeasurementUnitMETERS string = "METERS"

	// MeasurementUnitCENTIMETERS captures enum value "CENTIMETERS"
	MeasurementUnitCENTIMETERS string = "CENTIMETERS"

	// MeasurementUnitMILLIMETERS captures enum value "MILLIMETERS"
	MeasurementUnitMILLIMETERS string = "MILLIMETERS"

	// MeasurementUnitSQUAREMETERS captures enum value "SQUARE_METERS"
	MeasurementUnitSQUAREMETERS string = "SQUARE_METERS"

	// MeasurementUnitSQUARECENTIMETERS captures enum value "SQUARE_CENTIMETERS"
	MeasurementUnitSQUARECENTIMETERS string = "SQUARE_CENTIMETERS"

	// MeasurementUnitSQUAREFEET captures enum value "SQUARE_FEET"
	MeasurementUnitSQUAREFEET string = "SQUARE_FEET"

	// MeasurementUnitSQUAREINCHES captures enum value "SQUARE_INCHES"
	MeasurementUnitSQUAREINCHES string = "SQUARE_INCHES"

	// MeasurementUnitGALLONS captures enum value "GALLONS"
	MeasurementUnitGALLONS string = "GALLONS"

	// MeasurementUnitPINTS captures enum value "PINTS"
	MeasurementUnitPINTS string = "PINTS"

	// MeasurementUnitQUARTS captures enum value "QUARTS"
	MeasurementUnitQUARTS string = "QUARTS"

	// MeasurementUnitFLUIDOUNCES captures enum value "FLUID_OUNCES"
	MeasurementUnitFLUIDOUNCES string = "FLUID_OUNCES"

	// MeasurementUnitLITERS captures enum value "LITERS"
	MeasurementUnitLITERS string = "LITERS"

	// MeasurementUnitCUBICMETERS captures enum value "CUBIC_METERS"
	MeasurementUnitCUBICMETERS string = "CUBIC_METERS"

	// MeasurementUnitCUBICFEET captures enum value "CUBIC_FEET"
	MeasurementUnitCUBICFEET string = "CUBIC_FEET"

	// MeasurementUnitCUBICINCHES captures enum value "CUBIC_INCHES"
	MeasurementUnitCUBICINCHES string = "CUBIC_INCHES"

	// MeasurementUnitCUBICCENTIMETERS captures enum value "CUBIC_CENTIMETERS"
	MeasurementUnitCUBICCENTIMETERS string = "CUBIC_CENTIMETERS"

	// MeasurementUnitCOUNT captures enum value "COUNT"
	MeasurementUnitCOUNT string = "COUNT"
)

// prop value enum
func (m *Measurement) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, measurementTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Measurement) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("Unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("Unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *Measurement) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("Value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this measurement based on context it is used
func (m *Measurement) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Measurement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Measurement) UnmarshalBinary(b []byte) error {
	var res Measurement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
