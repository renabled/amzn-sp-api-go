// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RejectionReason The reason for rejecting the order's regulated information. Not present if the order isn't rejected.
//
// swagger:model RejectionReason
type RejectionReason struct {

	// The description of this rejection reason.
	// Required: true
	RejectionReasonDescription *string `json:"RejectionReasonDescription"`

	// The unique identifier for the rejection reason.
	// Required: true
	RejectionReasonID *string `json:"RejectionReasonId"`
}

// Validate validates this rejection reason
func (m *RejectionReason) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRejectionReasonDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectionReasonID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RejectionReason) validateRejectionReasonDescription(formats strfmt.Registry) error {

	if err := validate.Required("RejectionReasonDescription", "body", m.RejectionReasonDescription); err != nil {
		return err
	}

	return nil
}

func (m *RejectionReason) validateRejectionReasonID(formats strfmt.Registry) error {

	if err := validate.Required("RejectionReasonId", "body", m.RejectionReasonID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rejection reason based on context it is used
func (m *RejectionReason) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RejectionReason) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RejectionReason) UnmarshalBinary(b []byte) error {
	var res RejectionReason
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
