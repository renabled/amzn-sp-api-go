// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateShipmentStatusRequest The request body for the `updateShipmentStatus` operation.
//
// swagger:model UpdateShipmentStatusRequest
type UpdateShipmentStatusRequest struct {

	// marketplace Id
	// Required: true
	MarketplaceID *MarketplaceID `json:"marketplaceId"`

	// order items
	OrderItems OrderItems `json:"orderItems,omitempty"`

	// shipment status
	// Required: true
	ShipmentStatus *ShipmentStatus `json:"shipmentStatus"`
}

// Validate validates this update shipment status request
func (m *UpdateShipmentStatusRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipmentStatusRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipmentStatusRequest) validateOrderItems(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderItems) { // not required
		return nil
	}

	if err := m.OrderItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderItems")
		}
		return err
	}

	return nil
}

func (m *UpdateShipmentStatusRequest) validateShipmentStatus(formats strfmt.Registry) error {

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if err := validate.Required("shipmentStatus", "body", m.ShipmentStatus); err != nil {
		return err
	}

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update shipment status request based on the context it is used
func (m *UpdateShipmentStatusRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateShipmentStatusRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateShipmentStatusRequest) contextValidateOrderItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderItems")
		}
		return err
	}

	return nil
}

func (m *UpdateShipmentStatusRequest) contextValidateShipmentStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentStatus != nil {
		if err := m.ShipmentStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateShipmentStatusRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateShipmentStatusRequest) UnmarshalBinary(b []byte) error {
	var res UpdateShipmentStatusRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
