// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TaxCollection Information about withheld taxes.
//
// swagger:model TaxCollection
type TaxCollection struct {

	// The tax collection model applied to the item.
	// Enum: [MarketplaceFacilitator]
	Model string `json:"Model,omitempty"`

	// The party responsible for withholding the taxes and remitting them to the taxing authority.
	// Enum: [Amazon Services, Inc.]
	ResponsibleParty string `json:"ResponsibleParty,omitempty"`
}

// Validate validates this tax collection
func (m *TaxCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateModel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResponsibleParty(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var taxCollectionTypeModelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MarketplaceFacilitator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taxCollectionTypeModelPropEnum = append(taxCollectionTypeModelPropEnum, v)
	}
}

const (

	// TaxCollectionModelMarketplaceFacilitator captures enum value "MarketplaceFacilitator"
	TaxCollectionModelMarketplaceFacilitator string = "MarketplaceFacilitator"
)

// prop value enum
func (m *TaxCollection) validateModelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taxCollectionTypeModelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaxCollection) validateModel(formats strfmt.Registry) error {
	if swag.IsZero(m.Model) { // not required
		return nil
	}

	// value enum
	if err := m.validateModelEnum("Model", "body", m.Model); err != nil {
		return err
	}

	return nil
}

var taxCollectionTypeResponsiblePartyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Amazon Services, Inc."]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		taxCollectionTypeResponsiblePartyPropEnum = append(taxCollectionTypeResponsiblePartyPropEnum, v)
	}
}

const (

	// TaxCollectionResponsiblePartyAmazonServicesIncDot captures enum value "Amazon Services, Inc."
	TaxCollectionResponsiblePartyAmazonServicesIncDot string = "Amazon Services, Inc."
)

// prop value enum
func (m *TaxCollection) validateResponsiblePartyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, taxCollectionTypeResponsiblePartyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TaxCollection) validateResponsibleParty(formats strfmt.Registry) error {
	if swag.IsZero(m.ResponsibleParty) { // not required
		return nil
	}

	// value enum
	if err := m.validateResponsiblePartyEnum("ResponsibleParty", "body", m.ResponsibleParty); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tax collection based on context it is used
func (m *TaxCollection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TaxCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TaxCollection) UnmarshalBinary(b []byte) error {
	var res TaxCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
