// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BuyerTaxInfo Tax information about the buyer.
//
// swagger:model BuyerTaxInfo
type BuyerTaxInfo struct {

	// The legal name of the company.
	CompanyLegalName string `json:"CompanyLegalName,omitempty"`

	// A list of tax classifications that apply to the order.
	TaxClassifications []*TaxClassification `json:"TaxClassifications"`

	// The country or region imposing the tax.
	TaxingRegion string `json:"TaxingRegion,omitempty"`
}

// Validate validates this buyer tax info
func (m *BuyerTaxInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTaxClassifications(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuyerTaxInfo) validateTaxClassifications(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxClassifications) { // not required
		return nil
	}

	for i := 0; i < len(m.TaxClassifications); i++ {
		if swag.IsZero(m.TaxClassifications[i]) { // not required
			continue
		}

		if m.TaxClassifications[i] != nil {
			if err := m.TaxClassifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaxClassifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TaxClassifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this buyer tax info based on the context it is used
func (m *BuyerTaxInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTaxClassifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BuyerTaxInfo) contextValidateTaxClassifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TaxClassifications); i++ {

		if m.TaxClassifications[i] != nil {
			if err := m.TaxClassifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TaxClassifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("TaxClassifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BuyerTaxInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BuyerTaxInfo) UnmarshalBinary(b []byte) error {
	var res BuyerTaxInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
