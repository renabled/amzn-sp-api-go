// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentInstructions Contains all fulfillment plans for the order
//
// swagger:model FulfillmentInstructions
type FulfillmentInstructions struct {

	// An Amazon-defined order identifier, in 3-7-7 format.
	// Required: true
	AmazonOrderID *string `json:"AmazonOrderId"`

	// List of all fulfillment plans for the given order id
	FulfillmentPlans []*FulfillmentPlan `json:"FulfillmentPlans"`
}

// Validate validates this fulfillment instructions
func (m *FulfillmentInstructions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentPlans(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentInstructions) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("AmazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentInstructions) validateFulfillmentPlans(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentPlans) { // not required
		return nil
	}

	for i := 0; i < len(m.FulfillmentPlans); i++ {
		if swag.IsZero(m.FulfillmentPlans[i]) { // not required
			continue
		}

		if m.FulfillmentPlans[i] != nil {
			if err := m.FulfillmentPlans[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FulfillmentPlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FulfillmentPlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this fulfillment instructions based on the context it is used
func (m *FulfillmentInstructions) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFulfillmentPlans(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentInstructions) contextValidateFulfillmentPlans(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FulfillmentPlans); i++ {

		if m.FulfillmentPlans[i] != nil {
			if err := m.FulfillmentPlans[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FulfillmentPlans" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FulfillmentPlans" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentInstructions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentInstructions) UnmarshalBinary(b []byte) error {
	var res FulfillmentInstructions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
