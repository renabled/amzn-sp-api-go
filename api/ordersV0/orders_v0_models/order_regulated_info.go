// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderRegulatedInfo The order's regulated information along with its verification status.
//
// swagger:model OrderRegulatedInfo
type OrderRegulatedInfo struct {

	// An Amazon-defined order identifier, in 3-7-7 format.
	// Required: true
	AmazonOrderID *string `json:"AmazonOrderId"`

	// The regulated information collected during purchase and used to verify the order.
	// Required: true
	RegulatedInformation *RegulatedInformation `json:"RegulatedInformation"`

	// The order's verification status.
	// Required: true
	RegulatedOrderVerificationStatus *RegulatedOrderVerificationStatus `json:"RegulatedOrderVerificationStatus"`

	// Whether the order requires attaching a dosage information label when shipped.
	// Required: true
	RequiresDosageLabel *bool `json:"RequiresDosageLabel"`
}

// Validate validates this order regulated info
func (m *OrderRegulatedInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegulatedInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegulatedOrderVerificationStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiresDosageLabel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderRegulatedInfo) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("AmazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	return nil
}

func (m *OrderRegulatedInfo) validateRegulatedInformation(formats strfmt.Registry) error {

	if err := validate.Required("RegulatedInformation", "body", m.RegulatedInformation); err != nil {
		return err
	}

	if m.RegulatedInformation != nil {
		if err := m.RegulatedInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegulatedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegulatedInformation")
			}
			return err
		}
	}

	return nil
}

func (m *OrderRegulatedInfo) validateRegulatedOrderVerificationStatus(formats strfmt.Registry) error {

	if err := validate.Required("RegulatedOrderVerificationStatus", "body", m.RegulatedOrderVerificationStatus); err != nil {
		return err
	}

	if m.RegulatedOrderVerificationStatus != nil {
		if err := m.RegulatedOrderVerificationStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegulatedOrderVerificationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegulatedOrderVerificationStatus")
			}
			return err
		}
	}

	return nil
}

func (m *OrderRegulatedInfo) validateRequiresDosageLabel(formats strfmt.Registry) error {

	if err := validate.Required("RequiresDosageLabel", "body", m.RequiresDosageLabel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order regulated info based on the context it is used
func (m *OrderRegulatedInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegulatedInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRegulatedOrderVerificationStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderRegulatedInfo) contextValidateRegulatedInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.RegulatedInformation != nil {
		if err := m.RegulatedInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegulatedInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegulatedInformation")
			}
			return err
		}
	}

	return nil
}

func (m *OrderRegulatedInfo) contextValidateRegulatedOrderVerificationStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.RegulatedOrderVerificationStatus != nil {
		if err := m.RegulatedOrderVerificationStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RegulatedOrderVerificationStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("RegulatedOrderVerificationStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderRegulatedInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderRegulatedInfo) UnmarshalBinary(b []byte) error {
	var res OrderRegulatedInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
