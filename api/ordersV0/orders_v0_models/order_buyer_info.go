// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderBuyerInfo Buyer information for an order.
//
// swagger:model OrderBuyerInfo
type OrderBuyerInfo struct {

	// An Amazon-defined order identifier, in 3-7-7 format.
	// Required: true
	AmazonOrderID *string `json:"AmazonOrderId"`

	// The county of the buyer.
	BuyerCounty string `json:"BuyerCounty,omitempty"`

	// The anonymized email address of the buyer.
	BuyerEmail string `json:"BuyerEmail,omitempty"`

	// The name of the buyer.
	BuyerName string `json:"BuyerName,omitempty"`

	// Tax information about the buyer.
	BuyerTaxInfo *BuyerTaxInfo `json:"BuyerTaxInfo,omitempty"`

	// The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
	PurchaseOrderNumber string `json:"PurchaseOrderNumber,omitempty"`
}

// Validate validates this order buyer info
func (m *OrderBuyerInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyerTaxInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderBuyerInfo) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("AmazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	return nil
}

func (m *OrderBuyerInfo) validateBuyerTaxInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BuyerTaxInfo) { // not required
		return nil
	}

	if m.BuyerTaxInfo != nil {
		if err := m.BuyerTaxInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuyerTaxInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BuyerTaxInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order buyer info based on the context it is used
func (m *OrderBuyerInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuyerTaxInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderBuyerInfo) contextValidateBuyerTaxInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BuyerTaxInfo != nil {
		if err := m.BuyerTaxInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuyerTaxInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BuyerTaxInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderBuyerInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderBuyerInfo) UnmarshalBinary(b []byte) error {
	var res OrderBuyerInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
