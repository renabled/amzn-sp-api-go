// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentPlanItem The order items associated with this fulfillment plan.
//
// swagger:model FulfillmentPlanItem
type FulfillmentPlanItem struct {

	// Measurement information for the order item.
	// Required: true
	Measurement *Measurement `json:"Measurement"`

	// An Amazon-defined associated order item's order item identifier.
	// Required: true
	OrderItemID *string `json:"OrderItemId"`
}

// Validate validates this fulfillment plan item
func (m *FulfillmentPlanItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMeasurement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPlanItem) validateMeasurement(formats strfmt.Registry) error {

	if err := validate.Required("Measurement", "body", m.Measurement); err != nil {
		return err
	}

	if m.Measurement != nil {
		if err := m.Measurement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Measurement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Measurement")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPlanItem) validateOrderItemID(formats strfmt.Registry) error {

	if err := validate.Required("OrderItemId", "body", m.OrderItemID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fulfillment plan item based on the context it is used
func (m *FulfillmentPlanItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMeasurement(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPlanItem) contextValidateMeasurement(ctx context.Context, formats strfmt.Registry) error {

	if m.Measurement != nil {
		if err := m.Measurement.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Measurement")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Measurement")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentPlanItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentPlanItem) UnmarshalBinary(b []byte) error {
	var res FulfillmentPlanItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
