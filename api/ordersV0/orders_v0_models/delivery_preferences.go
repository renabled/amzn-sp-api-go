// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// DeliveryPreferences Contains all of the delivery instructions provided by the customer for the shipping address.
//
// swagger:model DeliveryPreferences
type DeliveryPreferences struct {

	// Building instructions, nearby landmark or navigation instructions.
	AddressInstructions string `json:"AddressInstructions,omitempty"`

	// Drop-off location selected by the customer.
	DropOffLocation string `json:"DropOffLocation,omitempty"`

	// Enumerated list of miscellaneous delivery attributes associated with the shipping address.
	OtherAttributes []OtherDeliveryAttributes `json:"OtherAttributes"`

	// Business hours and days when the delivery is preferred.
	PreferredDeliveryTime *PreferredDeliveryTime `json:"PreferredDeliveryTime,omitempty"`
}

// Validate validates this delivery preferences
func (m *DeliveryPreferences) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOtherAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredDeliveryTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryPreferences) validateOtherAttributes(formats strfmt.Registry) error {
	if swag.IsZero(m.OtherAttributes) { // not required
		return nil
	}

	for i := 0; i < len(m.OtherAttributes); i++ {

		if err := m.OtherAttributes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherAttributes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OtherAttributes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DeliveryPreferences) validatePreferredDeliveryTime(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredDeliveryTime) { // not required
		return nil
	}

	if m.PreferredDeliveryTime != nil {
		if err := m.PreferredDeliveryTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreferredDeliveryTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreferredDeliveryTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this delivery preferences based on the context it is used
func (m *DeliveryPreferences) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOtherAttributes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreferredDeliveryTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DeliveryPreferences) contextValidateOtherAttributes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OtherAttributes); i++ {

		if err := m.OtherAttributes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OtherAttributes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("OtherAttributes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *DeliveryPreferences) contextValidatePreferredDeliveryTime(ctx context.Context, formats strfmt.Registry) error {

	if m.PreferredDeliveryTime != nil {
		if err := m.PreferredDeliveryTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PreferredDeliveryTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PreferredDeliveryTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeliveryPreferences) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeliveryPreferences) UnmarshalBinary(b []byte) error {
	var res DeliveryPreferences
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
