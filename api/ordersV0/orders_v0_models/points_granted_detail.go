// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PointsGrantedDetail The number of Amazon Points offered with the purchase of an item, and their monetary value.
//
// swagger:model PointsGrantedDetail
type PointsGrantedDetail struct {

	// The monetary value of the Amazon Points granted.
	PointsMonetaryValue *Money `json:"PointsMonetaryValue,omitempty"`

	// The number of Amazon Points granted with the purchase of an item.
	PointsNumber int64 `json:"PointsNumber,omitempty"`
}

// Validate validates this points granted detail
func (m *PointsGrantedDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePointsMonetaryValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PointsGrantedDetail) validatePointsMonetaryValue(formats strfmt.Registry) error {
	if swag.IsZero(m.PointsMonetaryValue) { // not required
		return nil
	}

	if m.PointsMonetaryValue != nil {
		if err := m.PointsMonetaryValue.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PointsMonetaryValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PointsMonetaryValue")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this points granted detail based on the context it is used
func (m *PointsGrantedDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePointsMonetaryValue(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PointsGrantedDetail) contextValidatePointsMonetaryValue(ctx context.Context, formats strfmt.Registry) error {

	if m.PointsMonetaryValue != nil {
		if err := m.PointsMonetaryValue.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PointsMonetaryValue")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PointsMonetaryValue")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PointsGrantedDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PointsGrantedDetail) UnmarshalBinary(b []byte) error {
	var res PointsGrantedDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
