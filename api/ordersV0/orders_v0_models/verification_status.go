// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VerificationStatus The verification status of the order.
//
// swagger:model VerificationStatus
type VerificationStatus string

func NewVerificationStatus(value VerificationStatus) *VerificationStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VerificationStatus.
func (m VerificationStatus) Pointer() *VerificationStatus {
	return &m
}

const (

	// VerificationStatusPending captures enum value "Pending"
	VerificationStatusPending VerificationStatus = "Pending"

	// VerificationStatusApproved captures enum value "Approved"
	VerificationStatusApproved VerificationStatus = "Approved"

	// VerificationStatusRejected captures enum value "Rejected"
	VerificationStatusRejected VerificationStatus = "Rejected"

	// VerificationStatusExpired captures enum value "Expired"
	VerificationStatusExpired VerificationStatus = "Expired"

	// VerificationStatusCancelled captures enum value "Cancelled"
	VerificationStatusCancelled VerificationStatus = "Cancelled"
)

// for schema
var verificationStatusEnum []interface{}

func init() {
	var res []VerificationStatus
	if err := json.Unmarshal([]byte(`["Pending","Approved","Rejected","Expired","Cancelled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		verificationStatusEnum = append(verificationStatusEnum, v)
	}
}

func (m VerificationStatus) validateVerificationStatusEnum(path, location string, value VerificationStatus) error {
	if err := validate.EnumCase(path, location, value, verificationStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this verification status
func (m VerificationStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVerificationStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this verification status based on context it is used
func (m VerificationStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
