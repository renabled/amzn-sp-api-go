// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// FulfillmentPlanConstraintType Details the importance of the constraint present on the item.
//
// swagger:model FulfillmentPlanConstraintType
type FulfillmentPlanConstraintType string

func NewFulfillmentPlanConstraintType(value FulfillmentPlanConstraintType) *FulfillmentPlanConstraintType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated FulfillmentPlanConstraintType.
func (m FulfillmentPlanConstraintType) Pointer() *FulfillmentPlanConstraintType {
	return &m
}

const (

	// FulfillmentPlanConstraintTypeMANDATORY captures enum value "MANDATORY"
	FulfillmentPlanConstraintTypeMANDATORY FulfillmentPlanConstraintType = "MANDATORY"

	// FulfillmentPlanConstraintTypeRECOMMENDED captures enum value "RECOMMENDED"
	FulfillmentPlanConstraintTypeRECOMMENDED FulfillmentPlanConstraintType = "RECOMMENDED"
)

// for schema
var fulfillmentPlanConstraintTypeEnum []interface{}

func init() {
	var res []FulfillmentPlanConstraintType
	if err := json.Unmarshal([]byte(`["MANDATORY","RECOMMENDED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentPlanConstraintTypeEnum = append(fulfillmentPlanConstraintTypeEnum, v)
	}
}

func (m FulfillmentPlanConstraintType) validateFulfillmentPlanConstraintTypeEnum(path, location string, value FulfillmentPlanConstraintType) error {
	if err := validate.EnumCase(path, location, value, fulfillmentPlanConstraintTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this fulfillment plan constraint type
func (m FulfillmentPlanConstraintType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateFulfillmentPlanConstraintTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this fulfillment plan constraint type based on context it is used
func (m FulfillmentPlanConstraintType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
