// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateVerificationStatusRequestBody The updated values of the `VerificationStatus` field.
//
// swagger:model UpdateVerificationStatusRequestBody
type UpdateVerificationStatusRequestBody struct {

	// The identifier of the order's regulated information reviewer.
	// Required: true
	ExternalReviewerID *string `json:"externalReviewerId"`

	// The unique identifier of the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected.
	RejectionReasonID string `json:"rejectionReasonId,omitempty"`

	// The new verification status of the order.
	Status VerificationStatus `json:"status,omitempty"`

	// Additional information regarding the verification of the order.
	VerificationDetails *VerificationDetails `json:"verificationDetails,omitempty"`
}

// Validate validates this update verification status request body
func (m *UpdateVerificationStatusRequestBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExternalReviewerID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerificationDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVerificationStatusRequestBody) validateExternalReviewerID(formats strfmt.Registry) error {

	if err := validate.Required("externalReviewerId", "body", m.ExternalReviewerID); err != nil {
		return err
	}

	return nil
}

func (m *UpdateVerificationStatusRequestBody) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.Status.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *UpdateVerificationStatusRequestBody) validateVerificationDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.VerificationDetails) { // not required
		return nil
	}

	if m.VerificationDetails != nil {
		if err := m.VerificationDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update verification status request body based on the context it is used
func (m *UpdateVerificationStatusRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVerificationDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateVerificationStatusRequestBody) contextValidateStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Status.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("status")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("status")
		}
		return err
	}

	return nil
}

func (m *UpdateVerificationStatusRequestBody) contextValidateVerificationDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.VerificationDetails != nil {
		if err := m.VerificationDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("verificationDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("verificationDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateVerificationStatusRequestBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateVerificationStatusRequestBody) UnmarshalBinary(b []byte) error {
	var res UpdateVerificationStatusRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
