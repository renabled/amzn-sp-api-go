// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FulfillmentPlan A collection of order items that are to be fulfilled from the same location with the same shipping, pickup, and service instructions
//
// swagger:model FulfillmentPlan
type FulfillmentPlan struct {

	// Time when the fulfillment plan was created in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> format
	// Required: true
	CreationDate *string `json:"CreationDate"`

	// Represents a location from which the plan is to be fulfilled
	FulfillmentLocation *FulfillmentLocation `json:"FulfillmentLocation,omitempty"`

	// Unique identifier of a fulfillment plan
	// Required: true
	FulfillmentPlanID *string `json:"FulfillmentPlanId"`

	// Represents the details of order items that are included in the fulfillment plan
	// Required: true
	FulfillmentPlanItems []*FulfillmentPlanItem `json:"FulfillmentPlanItems"`

	// Status of the fulfillment plan
	// Required: true
	// Enum: [ACTIVE ABORTED COMPLETED PARTIALLY_FULFILLED]
	FulfillmentPlanStatus *string `json:"FulfillmentPlanStatus"`

	// Type of fulfillment
	// Required: true
	// Enum: [INSTORE_PICKUP SERVICE SHIP]
	FulfillmentType *string `json:"FulfillmentType"`

	// Time when the fulfillment plan's status was last updated in <a href='https://developer-docs.amazon.com/sp-api/docs/iso-8601'>ISO 8601</a> Format
	// Required: true
	LastStatusUpdateDate *string `json:"LastStatusUpdateDate"`

	// Represents shipping related information of a delivery
	ShippingInstructions *ShippingInstructions `json:"ShippingInstructions,omitempty"`
}

// Validate validates this fulfillment plan
func (m *FulfillmentPlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentPlanID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentPlanItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentPlanStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastStatusUpdateDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingInstructions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPlan) validateCreationDate(formats strfmt.Registry) error {

	if err := validate.Required("CreationDate", "body", m.CreationDate); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPlan) validateFulfillmentLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentLocation) { // not required
		return nil
	}

	if m.FulfillmentLocation != nil {
		if err := m.FulfillmentLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FulfillmentLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FulfillmentLocation")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPlan) validateFulfillmentPlanID(formats strfmt.Registry) error {

	if err := validate.Required("FulfillmentPlanId", "body", m.FulfillmentPlanID); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPlan) validateFulfillmentPlanItems(formats strfmt.Registry) error {

	if err := validate.Required("FulfillmentPlanItems", "body", m.FulfillmentPlanItems); err != nil {
		return err
	}

	for i := 0; i < len(m.FulfillmentPlanItems); i++ {
		if swag.IsZero(m.FulfillmentPlanItems[i]) { // not required
			continue
		}

		if m.FulfillmentPlanItems[i] != nil {
			if err := m.FulfillmentPlanItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FulfillmentPlanItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FulfillmentPlanItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var fulfillmentPlanTypeFulfillmentPlanStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","ABORTED","COMPLETED","PARTIALLY_FULFILLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentPlanTypeFulfillmentPlanStatusPropEnum = append(fulfillmentPlanTypeFulfillmentPlanStatusPropEnum, v)
	}
}

const (

	// FulfillmentPlanFulfillmentPlanStatusACTIVE captures enum value "ACTIVE"
	FulfillmentPlanFulfillmentPlanStatusACTIVE string = "ACTIVE"

	// FulfillmentPlanFulfillmentPlanStatusABORTED captures enum value "ABORTED"
	FulfillmentPlanFulfillmentPlanStatusABORTED string = "ABORTED"

	// FulfillmentPlanFulfillmentPlanStatusCOMPLETED captures enum value "COMPLETED"
	FulfillmentPlanFulfillmentPlanStatusCOMPLETED string = "COMPLETED"

	// FulfillmentPlanFulfillmentPlanStatusPARTIALLYFULFILLED captures enum value "PARTIALLY_FULFILLED"
	FulfillmentPlanFulfillmentPlanStatusPARTIALLYFULFILLED string = "PARTIALLY_FULFILLED"
)

// prop value enum
func (m *FulfillmentPlan) validateFulfillmentPlanStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fulfillmentPlanTypeFulfillmentPlanStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FulfillmentPlan) validateFulfillmentPlanStatus(formats strfmt.Registry) error {

	if err := validate.Required("FulfillmentPlanStatus", "body", m.FulfillmentPlanStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateFulfillmentPlanStatusEnum("FulfillmentPlanStatus", "body", *m.FulfillmentPlanStatus); err != nil {
		return err
	}

	return nil
}

var fulfillmentPlanTypeFulfillmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INSTORE_PICKUP","SERVICE","SHIP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fulfillmentPlanTypeFulfillmentTypePropEnum = append(fulfillmentPlanTypeFulfillmentTypePropEnum, v)
	}
}

const (

	// FulfillmentPlanFulfillmentTypeINSTOREPICKUP captures enum value "INSTORE_PICKUP"
	FulfillmentPlanFulfillmentTypeINSTOREPICKUP string = "INSTORE_PICKUP"

	// FulfillmentPlanFulfillmentTypeSERVICE captures enum value "SERVICE"
	FulfillmentPlanFulfillmentTypeSERVICE string = "SERVICE"

	// FulfillmentPlanFulfillmentTypeSHIP captures enum value "SHIP"
	FulfillmentPlanFulfillmentTypeSHIP string = "SHIP"
)

// prop value enum
func (m *FulfillmentPlan) validateFulfillmentTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fulfillmentPlanTypeFulfillmentTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FulfillmentPlan) validateFulfillmentType(formats strfmt.Registry) error {

	if err := validate.Required("FulfillmentType", "body", m.FulfillmentType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFulfillmentTypeEnum("FulfillmentType", "body", *m.FulfillmentType); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPlan) validateLastStatusUpdateDate(formats strfmt.Registry) error {

	if err := validate.Required("LastStatusUpdateDate", "body", m.LastStatusUpdateDate); err != nil {
		return err
	}

	return nil
}

func (m *FulfillmentPlan) validateShippingInstructions(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingInstructions) { // not required
		return nil
	}

	if m.ShippingInstructions != nil {
		if err := m.ShippingInstructions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingInstructions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingInstructions")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this fulfillment plan based on the context it is used
func (m *FulfillmentPlan) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFulfillmentLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentPlanItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingInstructions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FulfillmentPlan) contextValidateFulfillmentLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.FulfillmentLocation != nil {
		if err := m.FulfillmentLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("FulfillmentLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("FulfillmentLocation")
			}
			return err
		}
	}

	return nil
}

func (m *FulfillmentPlan) contextValidateFulfillmentPlanItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.FulfillmentPlanItems); i++ {

		if m.FulfillmentPlanItems[i] != nil {
			if err := m.FulfillmentPlanItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("FulfillmentPlanItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("FulfillmentPlanItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FulfillmentPlan) contextValidateShippingInstructions(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingInstructions != nil {
		if err := m.ShippingInstructions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingInstructions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingInstructions")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FulfillmentPlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FulfillmentPlan) UnmarshalBinary(b []byte) error {
	var res FulfillmentPlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
