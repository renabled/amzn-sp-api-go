// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address The shipping address for the order.
//
// swagger:model Address
type Address struct {

	// The street address.
	AddressLine1 string `json:"AddressLine1,omitempty"`

	// Additional street address information, if required.
	AddressLine2 string `json:"AddressLine2,omitempty"`

	// Additional street address information, if required.
	AddressLine3 string `json:"AddressLine3,omitempty"`

	// The address type of the shipping address.
	// Enum: [Residential Commercial]
	AddressType string `json:"AddressType,omitempty"`

	// The city
	City string `json:"City,omitempty"`

	// The country code. A two-character country code, in ISO 3166-1 alpha-2 format.
	CountryCode string `json:"CountryCode,omitempty"`

	// The county.
	County string `json:"County,omitempty"`

	// The district.
	District string `json:"District,omitempty"`

	// The municipality.
	Municipality string `json:"Municipality,omitempty"`

	// The name.
	// Required: true
	Name *string `json:"Name"`

	// The phone number. Not returned for Fulfillment by Amazon (FBA) orders.
	Phone string `json:"Phone,omitempty"`

	// The postal code.
	PostalCode string `json:"PostalCode,omitempty"`

	// The state or region.
	StateOrRegion string `json:"StateOrRegion,omitempty"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var addressTypeAddressTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Residential","Commercial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressTypeAddressTypePropEnum = append(addressTypeAddressTypePropEnum, v)
	}
}

const (

	// AddressAddressTypeResidential captures enum value "Residential"
	AddressAddressTypeResidential string = "Residential"

	// AddressAddressTypeCommercial captures enum value "Commercial"
	AddressAddressTypeCommercial string = "Commercial"
)

// prop value enum
func (m *Address) validateAddressTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, addressTypeAddressTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Address) validateAddressType(formats strfmt.Registry) error {
	if swag.IsZero(m.AddressType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddressTypeEnum("AddressType", "body", m.AddressType); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateName(formats strfmt.Registry) error {

	if err := validate.Required("Name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
