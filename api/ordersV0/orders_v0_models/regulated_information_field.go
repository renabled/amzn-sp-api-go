// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegulatedInformationField A field collected from the regulatory form.
//
// swagger:model RegulatedInformationField
type RegulatedInformationField struct {

	// The unique identifier for the field.
	// Required: true
	FieldID *string `json:"FieldId"`

	// The name for the field.
	// Required: true
	FieldLabel *string `json:"FieldLabel"`

	// The type of field.
	// Required: true
	// Enum: [Text FileAttachment]
	FieldType *string `json:"FieldType"`

	// The content of the field as collected in regulatory form. Note that `FileAttachment` type fields will contain a URL to download the attachment here.
	// Required: true
	FieldValue *string `json:"FieldValue"`
}

// Validate validates this regulated information field
func (m *RegulatedInformationField) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFieldID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFieldValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegulatedInformationField) validateFieldID(formats strfmt.Registry) error {

	if err := validate.Required("FieldId", "body", m.FieldID); err != nil {
		return err
	}

	return nil
}

func (m *RegulatedInformationField) validateFieldLabel(formats strfmt.Registry) error {

	if err := validate.Required("FieldLabel", "body", m.FieldLabel); err != nil {
		return err
	}

	return nil
}

var regulatedInformationFieldTypeFieldTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Text","FileAttachment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		regulatedInformationFieldTypeFieldTypePropEnum = append(regulatedInformationFieldTypeFieldTypePropEnum, v)
	}
}

const (

	// RegulatedInformationFieldFieldTypeText captures enum value "Text"
	RegulatedInformationFieldFieldTypeText string = "Text"

	// RegulatedInformationFieldFieldTypeFileAttachment captures enum value "FileAttachment"
	RegulatedInformationFieldFieldTypeFileAttachment string = "FileAttachment"
)

// prop value enum
func (m *RegulatedInformationField) validateFieldTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, regulatedInformationFieldTypeFieldTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RegulatedInformationField) validateFieldType(formats strfmt.Registry) error {

	if err := validate.Required("FieldType", "body", m.FieldType); err != nil {
		return err
	}

	// value enum
	if err := m.validateFieldTypeEnum("FieldType", "body", *m.FieldType); err != nil {
		return err
	}

	return nil
}

func (m *RegulatedInformationField) validateFieldValue(formats strfmt.Registry) error {

	if err := validate.Required("FieldValue", "body", m.FieldValue); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this regulated information field based on context it is used
func (m *RegulatedInformationField) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RegulatedInformationField) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegulatedInformationField) UnmarshalBinary(b []byte) error {
	var res RegulatedInformationField
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
