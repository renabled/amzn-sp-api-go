// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BusinessHours Business days and hours when the destination is open for deliveries.
//
// swagger:model BusinessHours
type BusinessHours struct {

	// Day of the week.
	// Enum: [SUN MON TUE WED THU FRI SAT]
	DayOfWeek string `json:"DayOfWeek,omitempty"`

	// Time window during the day when the business is open.
	OpenIntervals []*OpenInterval `json:"OpenIntervals"`
}

// Validate validates this business hours
func (m *BusinessHours) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDayOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenIntervals(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var businessHoursTypeDayOfWeekPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SUN","MON","TUE","WED","THU","FRI","SAT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		businessHoursTypeDayOfWeekPropEnum = append(businessHoursTypeDayOfWeekPropEnum, v)
	}
}

const (

	// BusinessHoursDayOfWeekSUN captures enum value "SUN"
	BusinessHoursDayOfWeekSUN string = "SUN"

	// BusinessHoursDayOfWeekMON captures enum value "MON"
	BusinessHoursDayOfWeekMON string = "MON"

	// BusinessHoursDayOfWeekTUE captures enum value "TUE"
	BusinessHoursDayOfWeekTUE string = "TUE"

	// BusinessHoursDayOfWeekWED captures enum value "WED"
	BusinessHoursDayOfWeekWED string = "WED"

	// BusinessHoursDayOfWeekTHU captures enum value "THU"
	BusinessHoursDayOfWeekTHU string = "THU"

	// BusinessHoursDayOfWeekFRI captures enum value "FRI"
	BusinessHoursDayOfWeekFRI string = "FRI"

	// BusinessHoursDayOfWeekSAT captures enum value "SAT"
	BusinessHoursDayOfWeekSAT string = "SAT"
)

// prop value enum
func (m *BusinessHours) validateDayOfWeekEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, businessHoursTypeDayOfWeekPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BusinessHours) validateDayOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DayOfWeek) { // not required
		return nil
	}

	// value enum
	if err := m.validateDayOfWeekEnum("DayOfWeek", "body", m.DayOfWeek); err != nil {
		return err
	}

	return nil
}

func (m *BusinessHours) validateOpenIntervals(formats strfmt.Registry) error {
	if swag.IsZero(m.OpenIntervals) { // not required
		return nil
	}

	for i := 0; i < len(m.OpenIntervals); i++ {
		if swag.IsZero(m.OpenIntervals[i]) { // not required
			continue
		}

		if m.OpenIntervals[i] != nil {
			if err := m.OpenIntervals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OpenIntervals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OpenIntervals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this business hours based on the context it is used
func (m *BusinessHours) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOpenIntervals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BusinessHours) contextValidateOpenIntervals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OpenIntervals); i++ {

		if m.OpenIntervals[i] != nil {
			if err := m.OpenIntervals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OpenIntervals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("OpenIntervals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *BusinessHours) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BusinessHours) UnmarshalBinary(b []byte) error {
	var res BusinessHours
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
