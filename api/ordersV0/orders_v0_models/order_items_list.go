// Code generated by go-swagger; DO NOT EDIT.

package orders_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItemsList The order items list along with the order ID.
//
// swagger:model OrderItemsList
type OrderItemsList struct {

	// An Amazon-defined order identifier, in 3-7-7 format.
	// Required: true
	AmazonOrderID *string `json:"AmazonOrderId"`

	// When present and not empty, pass this string token in the next request to return the next response page.
	NextToken string `json:"NextToken,omitempty"`

	// order items
	// Required: true
	OrderItems OrderItemList `json:"OrderItems"`
}

// Validate validates this order items list
func (m *OrderItemsList) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemsList) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("AmazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	return nil
}

func (m *OrderItemsList) validateOrderItems(formats strfmt.Registry) error {

	if err := validate.Required("OrderItems", "body", m.OrderItems); err != nil {
		return err
	}

	if err := m.OrderItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OrderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("OrderItems")
		}
		return err
	}

	return nil
}

// ContextValidate validate this order items list based on the context it is used
func (m *OrderItemsList) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItemsList) contextValidateOrderItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("OrderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("OrderItems")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItemsList) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItemsList) UnmarshalBinary(b []byte) error {
	var res OrderItemsList
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
