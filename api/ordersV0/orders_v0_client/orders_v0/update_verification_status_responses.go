// Code generated by go-swagger; DO NOT EDIT.

package orders_v0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/ordersV0/orders_v0_models"
)

// UpdateVerificationStatusReader is a Reader for the UpdateVerificationStatus structure.
type UpdateVerificationStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateVerificationStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateVerificationStatusNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateVerificationStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateVerificationStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateVerificationStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateVerificationStatusRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateVerificationStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateVerificationStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateVerificationStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateVerificationStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateVerificationStatusNoContent creates a UpdateVerificationStatusNoContent with default headers values
func NewUpdateVerificationStatusNoContent() *UpdateVerificationStatusNoContent {
	return &UpdateVerificationStatusNoContent{}
}

/* UpdateVerificationStatusNoContent describes a response with status code 204, with default header values.

Success.
*/
type UpdateVerificationStatusNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string
}

func (o *UpdateVerificationStatusNoContent) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusNoContent ", 204)
}

func (o *UpdateVerificationStatusNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewUpdateVerificationStatusBadRequest creates a UpdateVerificationStatusBadRequest with default headers values
func NewUpdateVerificationStatusBadRequest() *UpdateVerificationStatusBadRequest {
	return &UpdateVerificationStatusBadRequest{}
}

/* UpdateVerificationStatusBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateVerificationStatusBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusBadRequest) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusBadRequest  %+v", 400, o.Payload)
}
func (o *UpdateVerificationStatusBadRequest) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusForbidden creates a UpdateVerificationStatusForbidden with default headers values
func NewUpdateVerificationStatusForbidden() *UpdateVerificationStatusForbidden {
	return &UpdateVerificationStatusForbidden{}
}

/* UpdateVerificationStatusForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateVerificationStatusForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusForbidden) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusForbidden  %+v", 403, o.Payload)
}
func (o *UpdateVerificationStatusForbidden) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusNotFound creates a UpdateVerificationStatusNotFound with default headers values
func NewUpdateVerificationStatusNotFound() *UpdateVerificationStatusNotFound {
	return &UpdateVerificationStatusNotFound{}
}

/* UpdateVerificationStatusNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type UpdateVerificationStatusNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusNotFound) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusNotFound  %+v", 404, o.Payload)
}
func (o *UpdateVerificationStatusNotFound) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusRequestEntityTooLarge creates a UpdateVerificationStatusRequestEntityTooLarge with default headers values
func NewUpdateVerificationStatusRequestEntityTooLarge() *UpdateVerificationStatusRequestEntityTooLarge {
	return &UpdateVerificationStatusRequestEntityTooLarge{}
}

/* UpdateVerificationStatusRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateVerificationStatusRequestEntityTooLarge struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *UpdateVerificationStatusRequestEntityTooLarge) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusUnsupportedMediaType creates a UpdateVerificationStatusUnsupportedMediaType with default headers values
func NewUpdateVerificationStatusUnsupportedMediaType() *UpdateVerificationStatusUnsupportedMediaType {
	return &UpdateVerificationStatusUnsupportedMediaType{}
}

/* UpdateVerificationStatusUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateVerificationStatusUnsupportedMediaType struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *UpdateVerificationStatusUnsupportedMediaType) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusTooManyRequests creates a UpdateVerificationStatusTooManyRequests with default headers values
func NewUpdateVerificationStatusTooManyRequests() *UpdateVerificationStatusTooManyRequests {
	return &UpdateVerificationStatusTooManyRequests{}
}

/* UpdateVerificationStatusTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateVerificationStatusTooManyRequests struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusTooManyRequests  %+v", 429, o.Payload)
}
func (o *UpdateVerificationStatusTooManyRequests) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusInternalServerError creates a UpdateVerificationStatusInternalServerError with default headers values
func NewUpdateVerificationStatusInternalServerError() *UpdateVerificationStatusInternalServerError {
	return &UpdateVerificationStatusInternalServerError{}
}

/* UpdateVerificationStatusInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type UpdateVerificationStatusInternalServerError struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusInternalServerError) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusInternalServerError  %+v", 500, o.Payload)
}
func (o *UpdateVerificationStatusInternalServerError) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateVerificationStatusServiceUnavailable creates a UpdateVerificationStatusServiceUnavailable with default headers values
func NewUpdateVerificationStatusServiceUnavailable() *UpdateVerificationStatusServiceUnavailable {
	return &UpdateVerificationStatusServiceUnavailable{}
}

/* UpdateVerificationStatusServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateVerificationStatusServiceUnavailable struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.UpdateVerificationStatusErrorResponse
}

func (o *UpdateVerificationStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[PATCH /orders/v0/orders/{orderId}/regulatedInfo][%d] updateVerificationStatusServiceUnavailable  %+v", 503, o.Payload)
}
func (o *UpdateVerificationStatusServiceUnavailable) GetPayload() *orders_v0_models.UpdateVerificationStatusErrorResponse {
	return o.Payload
}

func (o *UpdateVerificationStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.UpdateVerificationStatusErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
