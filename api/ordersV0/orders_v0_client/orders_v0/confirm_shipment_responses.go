// Code generated by go-swagger; DO NOT EDIT.

package orders_v0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/ordersV0/orders_v0_models"
)

// ConfirmShipmentReader is a Reader for the ConfirmShipment structure.
type ConfirmShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConfirmShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewConfirmShipmentNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewConfirmShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewConfirmShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewConfirmShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewConfirmShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewConfirmShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewConfirmShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewConfirmShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewConfirmShipmentNoContent creates a ConfirmShipmentNoContent with default headers values
func NewConfirmShipmentNoContent() *ConfirmShipmentNoContent {
	return &ConfirmShipmentNoContent{}
}

/*
ConfirmShipmentNoContent describes a response with status code 204, with default header values.

Success.
*/
type ConfirmShipmentNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this confirm shipment no content response has a 2xx status code
func (o *ConfirmShipmentNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this confirm shipment no content response has a 3xx status code
func (o *ConfirmShipmentNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment no content response has a 4xx status code
func (o *ConfirmShipmentNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm shipment no content response has a 5xx status code
func (o *ConfirmShipmentNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment no content response a status code equal to that given
func (o *ConfirmShipmentNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *ConfirmShipmentNoContent) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentNoContent ", 204)
}

func (o *ConfirmShipmentNoContent) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentNoContent ", 204)
}

func (o *ConfirmShipmentNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewConfirmShipmentBadRequest creates a ConfirmShipmentBadRequest with default headers values
func NewConfirmShipmentBadRequest() *ConfirmShipmentBadRequest {
	return &ConfirmShipmentBadRequest{}
}

/*
ConfirmShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type ConfirmShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment bad request response has a 2xx status code
func (o *ConfirmShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment bad request response has a 3xx status code
func (o *ConfirmShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment bad request response has a 4xx status code
func (o *ConfirmShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment bad request response has a 5xx status code
func (o *ConfirmShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment bad request response a status code equal to that given
func (o *ConfirmShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *ConfirmShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmShipmentBadRequest) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *ConfirmShipmentBadRequest) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentUnauthorized creates a ConfirmShipmentUnauthorized with default headers values
func NewConfirmShipmentUnauthorized() *ConfirmShipmentUnauthorized {
	return &ConfirmShipmentUnauthorized{}
}

/*
ConfirmShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type ConfirmShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment unauthorized response has a 2xx status code
func (o *ConfirmShipmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment unauthorized response has a 3xx status code
func (o *ConfirmShipmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment unauthorized response has a 4xx status code
func (o *ConfirmShipmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment unauthorized response has a 5xx status code
func (o *ConfirmShipmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment unauthorized response a status code equal to that given
func (o *ConfirmShipmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ConfirmShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfirmShipmentUnauthorized) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *ConfirmShipmentUnauthorized) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentForbidden creates a ConfirmShipmentForbidden with default headers values
func NewConfirmShipmentForbidden() *ConfirmShipmentForbidden {
	return &ConfirmShipmentForbidden{}
}

/*
ConfirmShipmentForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type ConfirmShipmentForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment forbidden response has a 2xx status code
func (o *ConfirmShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment forbidden response has a 3xx status code
func (o *ConfirmShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment forbidden response has a 4xx status code
func (o *ConfirmShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment forbidden response has a 5xx status code
func (o *ConfirmShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment forbidden response a status code equal to that given
func (o *ConfirmShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *ConfirmShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmShipmentForbidden) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentForbidden  %+v", 403, o.Payload)
}

func (o *ConfirmShipmentForbidden) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentNotFound creates a ConfirmShipmentNotFound with default headers values
func NewConfirmShipmentNotFound() *ConfirmShipmentNotFound {
	return &ConfirmShipmentNotFound{}
}

/*
ConfirmShipmentNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type ConfirmShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment not found response has a 2xx status code
func (o *ConfirmShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment not found response has a 3xx status code
func (o *ConfirmShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment not found response has a 4xx status code
func (o *ConfirmShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment not found response has a 5xx status code
func (o *ConfirmShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment not found response a status code equal to that given
func (o *ConfirmShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *ConfirmShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmShipmentNotFound) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentNotFound  %+v", 404, o.Payload)
}

func (o *ConfirmShipmentNotFound) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentTooManyRequests creates a ConfirmShipmentTooManyRequests with default headers values
func NewConfirmShipmentTooManyRequests() *ConfirmShipmentTooManyRequests {
	return &ConfirmShipmentTooManyRequests{}
}

/*
ConfirmShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type ConfirmShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment too many requests response has a 2xx status code
func (o *ConfirmShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment too many requests response has a 3xx status code
func (o *ConfirmShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment too many requests response has a 4xx status code
func (o *ConfirmShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this confirm shipment too many requests response has a 5xx status code
func (o *ConfirmShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this confirm shipment too many requests response a status code equal to that given
func (o *ConfirmShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *ConfirmShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *ConfirmShipmentTooManyRequests) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentInternalServerError creates a ConfirmShipmentInternalServerError with default headers values
func NewConfirmShipmentInternalServerError() *ConfirmShipmentInternalServerError {
	return &ConfirmShipmentInternalServerError{}
}

/*
ConfirmShipmentInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type ConfirmShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment internal server error response has a 2xx status code
func (o *ConfirmShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment internal server error response has a 3xx status code
func (o *ConfirmShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment internal server error response has a 4xx status code
func (o *ConfirmShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm shipment internal server error response has a 5xx status code
func (o *ConfirmShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm shipment internal server error response a status code equal to that given
func (o *ConfirmShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *ConfirmShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmShipmentInternalServerError) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *ConfirmShipmentInternalServerError) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConfirmShipmentServiceUnavailable creates a ConfirmShipmentServiceUnavailable with default headers values
func NewConfirmShipmentServiceUnavailable() *ConfirmShipmentServiceUnavailable {
	return &ConfirmShipmentServiceUnavailable{}
}

/*
ConfirmShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type ConfirmShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.ConfirmShipmentErrorResponse
}

// IsSuccess returns true when this confirm shipment service unavailable response has a 2xx status code
func (o *ConfirmShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this confirm shipment service unavailable response has a 3xx status code
func (o *ConfirmShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this confirm shipment service unavailable response has a 4xx status code
func (o *ConfirmShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this confirm shipment service unavailable response has a 5xx status code
func (o *ConfirmShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this confirm shipment service unavailable response a status code equal to that given
func (o *ConfirmShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *ConfirmShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /orders/v0/orders/{orderId}/shipmentConfirmation][%d] confirmShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *ConfirmShipmentServiceUnavailable) GetPayload() *orders_v0_models.ConfirmShipmentErrorResponse {
	return o.Payload
}

func (o *ConfirmShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.ConfirmShipmentErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
