// Code generated by go-swagger; DO NOT EDIT.

package orders_v0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrdersParams creates a new GetOrdersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrdersParams() *GetOrdersParams {
	return &GetOrdersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrdersParamsWithTimeout creates a new GetOrdersParams object
// with the ability to set a timeout on a request.
func NewGetOrdersParamsWithTimeout(timeout time.Duration) *GetOrdersParams {
	return &GetOrdersParams{
		timeout: timeout,
	}
}

// NewGetOrdersParamsWithContext creates a new GetOrdersParams object
// with the ability to set a context for a request.
func NewGetOrdersParamsWithContext(ctx context.Context) *GetOrdersParams {
	return &GetOrdersParams{
		Context: ctx,
	}
}

// NewGetOrdersParamsWithHTTPClient creates a new GetOrdersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrdersParamsWithHTTPClient(client *http.Client) *GetOrdersParams {
	return &GetOrdersParams{
		HTTPClient: client,
	}
}

/*
GetOrdersParams contains all the parameters to send to the API endpoint

	for the get orders operation.

	Typically these are written to a http.Request.
*/
type GetOrdersParams struct {

	/* ActualFulfillmentSupplySourceID.

	   Denotes the recommended sourceId where the order should be fulfilled from.
	*/
	ActualFulfillmentSupplySourceID *string

	/* AmazonOrderIds.

	   A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format.
	*/
	AmazonOrderIds []string

	/* BuyerEmail.

	   The email address of a buyer. Used to select orders that contain the specified email address.
	*/
	BuyerEmail *string

	/* CreatedAfter.

	   A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format.
	*/
	CreatedAfter *string

	/* CreatedBefore.

	   A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
	*/
	CreatedBefore *string

	/* EarliestDeliveryDateAfter.

	   A date used for selecting orders with a earliest delivery date after (or at) a specified time. The date must be in ISO 8601 format.
	*/
	EarliestDeliveryDateAfter *string

	/* EarliestDeliveryDateBefore.

	   A date used for selecting orders with a earliest delivery date before (or at) a specified time. The date must be in ISO 8601 format.
	*/
	EarliestDeliveryDateBefore *string

	/* EasyShipShipmentStatuses.

	     A list of `EasyShipShipmentStatus` values. Used to select Easy Ship orders with statuses that match the specified values. If `EasyShipShipmentStatus` is specified, only Amazon Easy Ship orders are returned.

	**Possible values:**
	- `PendingSchedule` (The package is awaiting the schedule for pick-up.)
	- `PendingPickUp` (Amazon has not yet picked up the package from the seller.)
	- `PendingDropOff` (The seller will deliver the package to the carrier.)
	- `LabelCanceled` (The seller canceled the pickup.)
	- `PickedUp` (Amazon has picked up the package from the seller.)
	- `DroppedOff` (The package is delivered to the carrier by the seller.)
	- `AtOriginFC` (The packaged is at the origin fulfillment center.)
	- `AtDestinationFC` (The package is at the destination fulfillment center.)
	- `Delivered` (The package has been delivered.)
	- `RejectedByBuyer` (The package has been rejected by the buyer.)
	- `Undeliverable` (The package cannot be delivered.)
	- `ReturningToSeller` (The package was not delivered and is being returned to the seller.)
	- `ReturnedToSeller` (The package was not delivered and was returned to the seller.)
	- `Lost` (The package is lost.)
	- `OutForDelivery` (The package is out for delivery.)
	- `Damaged` (The package was damaged by the carrier.)
	*/
	EasyShipShipmentStatuses []string

	/* ElectronicInvoiceStatuses.

	     A list of `ElectronicInvoiceStatus` values. Used to select orders with electronic invoice statuses that match the specified values.

	**Possible values:**
	- `NotRequired` (Electronic invoice submission is not required for this order.)
	- `NotFound` (The electronic invoice was not submitted for this order.)
	- `Processing` (The electronic invoice is being processed for this order.)
	- `Errored` (The last submitted electronic invoice was rejected for this order.)
	- `Accepted` (The last submitted electronic invoice was submitted and accepted.)
	*/
	ElectronicInvoiceStatuses []string

	/* FulfillmentChannels.

	   A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller).
	*/
	FulfillmentChannels []string

	/* IsISPU.

	   When true, this order is marked to be picked up from a store rather than delivered.
	*/
	IsISPU *bool

	/* LastUpdatedAfter.

	   A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
	*/
	LastUpdatedAfter *string

	/* LastUpdatedBefore.

	   A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format.
	*/
	LastUpdatedBefore *string

	/* LatestDeliveryDateAfter.

	   A date used for selecting orders with a latest delivery date after (or at) a specified time. The date must be in ISO 8601 format.
	*/
	LatestDeliveryDateAfter *string

	/* LatestDeliveryDateBefore.

	   A date used for selecting orders with a latest delivery date before (or at) a specified time. The date must be in ISO 8601 format.
	*/
	LatestDeliveryDateBefore *string

	/* MarketplaceIds.

	     A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.

	Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of marketplaceId values.
	*/
	MarketplaceIds []string

	/* MaxResultsPerPage.

	   A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
	*/
	MaxResultsPerPage *int64

	/* NextToken.

	   A string token returned in the response of your previous request.
	*/
	NextToken *string

	/* OrderStatuses.

	     A list of `OrderStatus` values used to filter the results.

	**Possible values:**
	- `PendingAvailability` (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.)
	- `Pending` (The order has been placed but payment has not been authorized.)
	- `Unshipped` (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.)
	- `PartiallyShipped` (One or more, but not all, items in the order have been shipped.)
	- `Shipped` (All items in the order have been shipped.)
	- `InvoiceUnconfirmed` (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.)
	- `Canceled` (The order has been canceled.)
	- `Unfulfillable` (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
	*/
	OrderStatuses []string

	/* PaymentMethods.

	   A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS).
	*/
	PaymentMethods []string

	/* SellerOrderID.

	   An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified.
	*/
	SellerOrderID *string

	/* StoreChainStoreID.

	   The store chain store identifier. Linked to a specific store in a store chain.
	*/
	StoreChainStoreID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrdersParams) WithDefaults() *GetOrdersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get orders params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrdersParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get orders params
func (o *GetOrdersParams) WithTimeout(timeout time.Duration) *GetOrdersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get orders params
func (o *GetOrdersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get orders params
func (o *GetOrdersParams) WithContext(ctx context.Context) *GetOrdersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get orders params
func (o *GetOrdersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get orders params
func (o *GetOrdersParams) WithHTTPClient(client *http.Client) *GetOrdersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get orders params
func (o *GetOrdersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActualFulfillmentSupplySourceID adds the actualFulfillmentSupplySourceID to the get orders params
func (o *GetOrdersParams) WithActualFulfillmentSupplySourceID(actualFulfillmentSupplySourceID *string) *GetOrdersParams {
	o.SetActualFulfillmentSupplySourceID(actualFulfillmentSupplySourceID)
	return o
}

// SetActualFulfillmentSupplySourceID adds the actualFulfillmentSupplySourceId to the get orders params
func (o *GetOrdersParams) SetActualFulfillmentSupplySourceID(actualFulfillmentSupplySourceID *string) {
	o.ActualFulfillmentSupplySourceID = actualFulfillmentSupplySourceID
}

// WithAmazonOrderIds adds the amazonOrderIds to the get orders params
func (o *GetOrdersParams) WithAmazonOrderIds(amazonOrderIds []string) *GetOrdersParams {
	o.SetAmazonOrderIds(amazonOrderIds)
	return o
}

// SetAmazonOrderIds adds the amazonOrderIds to the get orders params
func (o *GetOrdersParams) SetAmazonOrderIds(amazonOrderIds []string) {
	o.AmazonOrderIds = amazonOrderIds
}

// WithBuyerEmail adds the buyerEmail to the get orders params
func (o *GetOrdersParams) WithBuyerEmail(buyerEmail *string) *GetOrdersParams {
	o.SetBuyerEmail(buyerEmail)
	return o
}

// SetBuyerEmail adds the buyerEmail to the get orders params
func (o *GetOrdersParams) SetBuyerEmail(buyerEmail *string) {
	o.BuyerEmail = buyerEmail
}

// WithCreatedAfter adds the createdAfter to the get orders params
func (o *GetOrdersParams) WithCreatedAfter(createdAfter *string) *GetOrdersParams {
	o.SetCreatedAfter(createdAfter)
	return o
}

// SetCreatedAfter adds the createdAfter to the get orders params
func (o *GetOrdersParams) SetCreatedAfter(createdAfter *string) {
	o.CreatedAfter = createdAfter
}

// WithCreatedBefore adds the createdBefore to the get orders params
func (o *GetOrdersParams) WithCreatedBefore(createdBefore *string) *GetOrdersParams {
	o.SetCreatedBefore(createdBefore)
	return o
}

// SetCreatedBefore adds the createdBefore to the get orders params
func (o *GetOrdersParams) SetCreatedBefore(createdBefore *string) {
	o.CreatedBefore = createdBefore
}

// WithEarliestDeliveryDateAfter adds the earliestDeliveryDateAfter to the get orders params
func (o *GetOrdersParams) WithEarliestDeliveryDateAfter(earliestDeliveryDateAfter *string) *GetOrdersParams {
	o.SetEarliestDeliveryDateAfter(earliestDeliveryDateAfter)
	return o
}

// SetEarliestDeliveryDateAfter adds the earliestDeliveryDateAfter to the get orders params
func (o *GetOrdersParams) SetEarliestDeliveryDateAfter(earliestDeliveryDateAfter *string) {
	o.EarliestDeliveryDateAfter = earliestDeliveryDateAfter
}

// WithEarliestDeliveryDateBefore adds the earliestDeliveryDateBefore to the get orders params
func (o *GetOrdersParams) WithEarliestDeliveryDateBefore(earliestDeliveryDateBefore *string) *GetOrdersParams {
	o.SetEarliestDeliveryDateBefore(earliestDeliveryDateBefore)
	return o
}

// SetEarliestDeliveryDateBefore adds the earliestDeliveryDateBefore to the get orders params
func (o *GetOrdersParams) SetEarliestDeliveryDateBefore(earliestDeliveryDateBefore *string) {
	o.EarliestDeliveryDateBefore = earliestDeliveryDateBefore
}

// WithEasyShipShipmentStatuses adds the easyShipShipmentStatuses to the get orders params
func (o *GetOrdersParams) WithEasyShipShipmentStatuses(easyShipShipmentStatuses []string) *GetOrdersParams {
	o.SetEasyShipShipmentStatuses(easyShipShipmentStatuses)
	return o
}

// SetEasyShipShipmentStatuses adds the easyShipShipmentStatuses to the get orders params
func (o *GetOrdersParams) SetEasyShipShipmentStatuses(easyShipShipmentStatuses []string) {
	o.EasyShipShipmentStatuses = easyShipShipmentStatuses
}

// WithElectronicInvoiceStatuses adds the electronicInvoiceStatuses to the get orders params
func (o *GetOrdersParams) WithElectronicInvoiceStatuses(electronicInvoiceStatuses []string) *GetOrdersParams {
	o.SetElectronicInvoiceStatuses(electronicInvoiceStatuses)
	return o
}

// SetElectronicInvoiceStatuses adds the electronicInvoiceStatuses to the get orders params
func (o *GetOrdersParams) SetElectronicInvoiceStatuses(electronicInvoiceStatuses []string) {
	o.ElectronicInvoiceStatuses = electronicInvoiceStatuses
}

// WithFulfillmentChannels adds the fulfillmentChannels to the get orders params
func (o *GetOrdersParams) WithFulfillmentChannels(fulfillmentChannels []string) *GetOrdersParams {
	o.SetFulfillmentChannels(fulfillmentChannels)
	return o
}

// SetFulfillmentChannels adds the fulfillmentChannels to the get orders params
func (o *GetOrdersParams) SetFulfillmentChannels(fulfillmentChannels []string) {
	o.FulfillmentChannels = fulfillmentChannels
}

// WithIsISPU adds the isISPU to the get orders params
func (o *GetOrdersParams) WithIsISPU(isISPU *bool) *GetOrdersParams {
	o.SetIsISPU(isISPU)
	return o
}

// SetIsISPU adds the isISPU to the get orders params
func (o *GetOrdersParams) SetIsISPU(isISPU *bool) {
	o.IsISPU = isISPU
}

// WithLastUpdatedAfter adds the lastUpdatedAfter to the get orders params
func (o *GetOrdersParams) WithLastUpdatedAfter(lastUpdatedAfter *string) *GetOrdersParams {
	o.SetLastUpdatedAfter(lastUpdatedAfter)
	return o
}

// SetLastUpdatedAfter adds the lastUpdatedAfter to the get orders params
func (o *GetOrdersParams) SetLastUpdatedAfter(lastUpdatedAfter *string) {
	o.LastUpdatedAfter = lastUpdatedAfter
}

// WithLastUpdatedBefore adds the lastUpdatedBefore to the get orders params
func (o *GetOrdersParams) WithLastUpdatedBefore(lastUpdatedBefore *string) *GetOrdersParams {
	o.SetLastUpdatedBefore(lastUpdatedBefore)
	return o
}

// SetLastUpdatedBefore adds the lastUpdatedBefore to the get orders params
func (o *GetOrdersParams) SetLastUpdatedBefore(lastUpdatedBefore *string) {
	o.LastUpdatedBefore = lastUpdatedBefore
}

// WithLatestDeliveryDateAfter adds the latestDeliveryDateAfter to the get orders params
func (o *GetOrdersParams) WithLatestDeliveryDateAfter(latestDeliveryDateAfter *string) *GetOrdersParams {
	o.SetLatestDeliveryDateAfter(latestDeliveryDateAfter)
	return o
}

// SetLatestDeliveryDateAfter adds the latestDeliveryDateAfter to the get orders params
func (o *GetOrdersParams) SetLatestDeliveryDateAfter(latestDeliveryDateAfter *string) {
	o.LatestDeliveryDateAfter = latestDeliveryDateAfter
}

// WithLatestDeliveryDateBefore adds the latestDeliveryDateBefore to the get orders params
func (o *GetOrdersParams) WithLatestDeliveryDateBefore(latestDeliveryDateBefore *string) *GetOrdersParams {
	o.SetLatestDeliveryDateBefore(latestDeliveryDateBefore)
	return o
}

// SetLatestDeliveryDateBefore adds the latestDeliveryDateBefore to the get orders params
func (o *GetOrdersParams) SetLatestDeliveryDateBefore(latestDeliveryDateBefore *string) {
	o.LatestDeliveryDateBefore = latestDeliveryDateBefore
}

// WithMarketplaceIds adds the marketplaceIds to the get orders params
func (o *GetOrdersParams) WithMarketplaceIds(marketplaceIds []string) *GetOrdersParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the get orders params
func (o *GetOrdersParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithMaxResultsPerPage adds the maxResultsPerPage to the get orders params
func (o *GetOrdersParams) WithMaxResultsPerPage(maxResultsPerPage *int64) *GetOrdersParams {
	o.SetMaxResultsPerPage(maxResultsPerPage)
	return o
}

// SetMaxResultsPerPage adds the maxResultsPerPage to the get orders params
func (o *GetOrdersParams) SetMaxResultsPerPage(maxResultsPerPage *int64) {
	o.MaxResultsPerPage = maxResultsPerPage
}

// WithNextToken adds the nextToken to the get orders params
func (o *GetOrdersParams) WithNextToken(nextToken *string) *GetOrdersParams {
	o.SetNextToken(nextToken)
	return o
}

// SetNextToken adds the nextToken to the get orders params
func (o *GetOrdersParams) SetNextToken(nextToken *string) {
	o.NextToken = nextToken
}

// WithOrderStatuses adds the orderStatuses to the get orders params
func (o *GetOrdersParams) WithOrderStatuses(orderStatuses []string) *GetOrdersParams {
	o.SetOrderStatuses(orderStatuses)
	return o
}

// SetOrderStatuses adds the orderStatuses to the get orders params
func (o *GetOrdersParams) SetOrderStatuses(orderStatuses []string) {
	o.OrderStatuses = orderStatuses
}

// WithPaymentMethods adds the paymentMethods to the get orders params
func (o *GetOrdersParams) WithPaymentMethods(paymentMethods []string) *GetOrdersParams {
	o.SetPaymentMethods(paymentMethods)
	return o
}

// SetPaymentMethods adds the paymentMethods to the get orders params
func (o *GetOrdersParams) SetPaymentMethods(paymentMethods []string) {
	o.PaymentMethods = paymentMethods
}

// WithSellerOrderID adds the sellerOrderID to the get orders params
func (o *GetOrdersParams) WithSellerOrderID(sellerOrderID *string) *GetOrdersParams {
	o.SetSellerOrderID(sellerOrderID)
	return o
}

// SetSellerOrderID adds the sellerOrderId to the get orders params
func (o *GetOrdersParams) SetSellerOrderID(sellerOrderID *string) {
	o.SellerOrderID = sellerOrderID
}

// WithStoreChainStoreID adds the storeChainStoreID to the get orders params
func (o *GetOrdersParams) WithStoreChainStoreID(storeChainStoreID *string) *GetOrdersParams {
	o.SetStoreChainStoreID(storeChainStoreID)
	return o
}

// SetStoreChainStoreID adds the storeChainStoreId to the get orders params
func (o *GetOrdersParams) SetStoreChainStoreID(storeChainStoreID *string) {
	o.StoreChainStoreID = storeChainStoreID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrdersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActualFulfillmentSupplySourceID != nil {

		// query param ActualFulfillmentSupplySourceId
		var qrActualFulfillmentSupplySourceID string

		if o.ActualFulfillmentSupplySourceID != nil {
			qrActualFulfillmentSupplySourceID = *o.ActualFulfillmentSupplySourceID
		}
		qActualFulfillmentSupplySourceID := qrActualFulfillmentSupplySourceID
		if qActualFulfillmentSupplySourceID != "" {

			if err := r.SetQueryParam("ActualFulfillmentSupplySourceId", qActualFulfillmentSupplySourceID); err != nil {
				return err
			}
		}
	}

	if o.AmazonOrderIds != nil {

		// binding items for AmazonOrderIds
		joinedAmazonOrderIds := o.bindParamAmazonOrderIds(reg)

		// query array param AmazonOrderIds
		if err := r.SetQueryParam("AmazonOrderIds", joinedAmazonOrderIds...); err != nil {
			return err
		}
	}

	if o.BuyerEmail != nil {

		// query param BuyerEmail
		var qrBuyerEmail string

		if o.BuyerEmail != nil {
			qrBuyerEmail = *o.BuyerEmail
		}
		qBuyerEmail := qrBuyerEmail
		if qBuyerEmail != "" {

			if err := r.SetQueryParam("BuyerEmail", qBuyerEmail); err != nil {
				return err
			}
		}
	}

	if o.CreatedAfter != nil {

		// query param CreatedAfter
		var qrCreatedAfter string

		if o.CreatedAfter != nil {
			qrCreatedAfter = *o.CreatedAfter
		}
		qCreatedAfter := qrCreatedAfter
		if qCreatedAfter != "" {

			if err := r.SetQueryParam("CreatedAfter", qCreatedAfter); err != nil {
				return err
			}
		}
	}

	if o.CreatedBefore != nil {

		// query param CreatedBefore
		var qrCreatedBefore string

		if o.CreatedBefore != nil {
			qrCreatedBefore = *o.CreatedBefore
		}
		qCreatedBefore := qrCreatedBefore
		if qCreatedBefore != "" {

			if err := r.SetQueryParam("CreatedBefore", qCreatedBefore); err != nil {
				return err
			}
		}
	}

	if o.EarliestDeliveryDateAfter != nil {

		// query param EarliestDeliveryDateAfter
		var qrEarliestDeliveryDateAfter string

		if o.EarliestDeliveryDateAfter != nil {
			qrEarliestDeliveryDateAfter = *o.EarliestDeliveryDateAfter
		}
		qEarliestDeliveryDateAfter := qrEarliestDeliveryDateAfter
		if qEarliestDeliveryDateAfter != "" {

			if err := r.SetQueryParam("EarliestDeliveryDateAfter", qEarliestDeliveryDateAfter); err != nil {
				return err
			}
		}
	}

	if o.EarliestDeliveryDateBefore != nil {

		// query param EarliestDeliveryDateBefore
		var qrEarliestDeliveryDateBefore string

		if o.EarliestDeliveryDateBefore != nil {
			qrEarliestDeliveryDateBefore = *o.EarliestDeliveryDateBefore
		}
		qEarliestDeliveryDateBefore := qrEarliestDeliveryDateBefore
		if qEarliestDeliveryDateBefore != "" {

			if err := r.SetQueryParam("EarliestDeliveryDateBefore", qEarliestDeliveryDateBefore); err != nil {
				return err
			}
		}
	}

	if o.EasyShipShipmentStatuses != nil {

		// binding items for EasyShipShipmentStatuses
		joinedEasyShipShipmentStatuses := o.bindParamEasyShipShipmentStatuses(reg)

		// query array param EasyShipShipmentStatuses
		if err := r.SetQueryParam("EasyShipShipmentStatuses", joinedEasyShipShipmentStatuses...); err != nil {
			return err
		}
	}

	if o.ElectronicInvoiceStatuses != nil {

		// binding items for ElectronicInvoiceStatuses
		joinedElectronicInvoiceStatuses := o.bindParamElectronicInvoiceStatuses(reg)

		// query array param ElectronicInvoiceStatuses
		if err := r.SetQueryParam("ElectronicInvoiceStatuses", joinedElectronicInvoiceStatuses...); err != nil {
			return err
		}
	}

	if o.FulfillmentChannels != nil {

		// binding items for FulfillmentChannels
		joinedFulfillmentChannels := o.bindParamFulfillmentChannels(reg)

		// query array param FulfillmentChannels
		if err := r.SetQueryParam("FulfillmentChannels", joinedFulfillmentChannels...); err != nil {
			return err
		}
	}

	if o.IsISPU != nil {

		// query param IsISPU
		var qrIsISPU bool

		if o.IsISPU != nil {
			qrIsISPU = *o.IsISPU
		}
		qIsISPU := swag.FormatBool(qrIsISPU)
		if qIsISPU != "" {

			if err := r.SetQueryParam("IsISPU", qIsISPU); err != nil {
				return err
			}
		}
	}

	if o.LastUpdatedAfter != nil {

		// query param LastUpdatedAfter
		var qrLastUpdatedAfter string

		if o.LastUpdatedAfter != nil {
			qrLastUpdatedAfter = *o.LastUpdatedAfter
		}
		qLastUpdatedAfter := qrLastUpdatedAfter
		if qLastUpdatedAfter != "" {

			if err := r.SetQueryParam("LastUpdatedAfter", qLastUpdatedAfter); err != nil {
				return err
			}
		}
	}

	if o.LastUpdatedBefore != nil {

		// query param LastUpdatedBefore
		var qrLastUpdatedBefore string

		if o.LastUpdatedBefore != nil {
			qrLastUpdatedBefore = *o.LastUpdatedBefore
		}
		qLastUpdatedBefore := qrLastUpdatedBefore
		if qLastUpdatedBefore != "" {

			if err := r.SetQueryParam("LastUpdatedBefore", qLastUpdatedBefore); err != nil {
				return err
			}
		}
	}

	if o.LatestDeliveryDateAfter != nil {

		// query param LatestDeliveryDateAfter
		var qrLatestDeliveryDateAfter string

		if o.LatestDeliveryDateAfter != nil {
			qrLatestDeliveryDateAfter = *o.LatestDeliveryDateAfter
		}
		qLatestDeliveryDateAfter := qrLatestDeliveryDateAfter
		if qLatestDeliveryDateAfter != "" {

			if err := r.SetQueryParam("LatestDeliveryDateAfter", qLatestDeliveryDateAfter); err != nil {
				return err
			}
		}
	}

	if o.LatestDeliveryDateBefore != nil {

		// query param LatestDeliveryDateBefore
		var qrLatestDeliveryDateBefore string

		if o.LatestDeliveryDateBefore != nil {
			qrLatestDeliveryDateBefore = *o.LatestDeliveryDateBefore
		}
		qLatestDeliveryDateBefore := qrLatestDeliveryDateBefore
		if qLatestDeliveryDateBefore != "" {

			if err := r.SetQueryParam("LatestDeliveryDateBefore", qLatestDeliveryDateBefore); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for MarketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param MarketplaceIds
		if err := r.SetQueryParam("MarketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.MaxResultsPerPage != nil {

		// query param MaxResultsPerPage
		var qrMaxResultsPerPage int64

		if o.MaxResultsPerPage != nil {
			qrMaxResultsPerPage = *o.MaxResultsPerPage
		}
		qMaxResultsPerPage := swag.FormatInt64(qrMaxResultsPerPage)
		if qMaxResultsPerPage != "" {

			if err := r.SetQueryParam("MaxResultsPerPage", qMaxResultsPerPage); err != nil {
				return err
			}
		}
	}

	if o.NextToken != nil {

		// query param NextToken
		var qrNextToken string

		if o.NextToken != nil {
			qrNextToken = *o.NextToken
		}
		qNextToken := qrNextToken
		if qNextToken != "" {

			if err := r.SetQueryParam("NextToken", qNextToken); err != nil {
				return err
			}
		}
	}

	if o.OrderStatuses != nil {

		// binding items for OrderStatuses
		joinedOrderStatuses := o.bindParamOrderStatuses(reg)

		// query array param OrderStatuses
		if err := r.SetQueryParam("OrderStatuses", joinedOrderStatuses...); err != nil {
			return err
		}
	}

	if o.PaymentMethods != nil {

		// binding items for PaymentMethods
		joinedPaymentMethods := o.bindParamPaymentMethods(reg)

		// query array param PaymentMethods
		if err := r.SetQueryParam("PaymentMethods", joinedPaymentMethods...); err != nil {
			return err
		}
	}

	if o.SellerOrderID != nil {

		// query param SellerOrderId
		var qrSellerOrderID string

		if o.SellerOrderID != nil {
			qrSellerOrderID = *o.SellerOrderID
		}
		qSellerOrderID := qrSellerOrderID
		if qSellerOrderID != "" {

			if err := r.SetQueryParam("SellerOrderId", qSellerOrderID); err != nil {
				return err
			}
		}
	}

	if o.StoreChainStoreID != nil {

		// query param StoreChainStoreId
		var qrStoreChainStoreID string

		if o.StoreChainStoreID != nil {
			qrStoreChainStoreID = *o.StoreChainStoreID
		}
		qStoreChainStoreID := qrStoreChainStoreID
		if qStoreChainStoreID != "" {

			if err := r.SetQueryParam("StoreChainStoreId", qStoreChainStoreID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetOrders binds the parameter AmazonOrderIds
func (o *GetOrdersParams) bindParamAmazonOrderIds(formats strfmt.Registry) []string {
	amazonOrderIdsIR := o.AmazonOrderIds

	var amazonOrderIdsIC []string
	for _, amazonOrderIdsIIR := range amazonOrderIdsIR { // explode []string

		amazonOrderIdsIIV := amazonOrderIdsIIR // string as string
		amazonOrderIdsIC = append(amazonOrderIdsIC, amazonOrderIdsIIV)
	}

	// items.CollectionFormat: ""
	amazonOrderIdsIS := swag.JoinByFormat(amazonOrderIdsIC, "")

	return amazonOrderIdsIS
}

// bindParamGetOrders binds the parameter EasyShipShipmentStatuses
func (o *GetOrdersParams) bindParamEasyShipShipmentStatuses(formats strfmt.Registry) []string {
	easyShipShipmentStatusesIR := o.EasyShipShipmentStatuses

	var easyShipShipmentStatusesIC []string
	for _, easyShipShipmentStatusesIIR := range easyShipShipmentStatusesIR { // explode []string

		easyShipShipmentStatusesIIV := easyShipShipmentStatusesIIR // string as string
		easyShipShipmentStatusesIC = append(easyShipShipmentStatusesIC, easyShipShipmentStatusesIIV)
	}

	// items.CollectionFormat: ""
	easyShipShipmentStatusesIS := swag.JoinByFormat(easyShipShipmentStatusesIC, "")

	return easyShipShipmentStatusesIS
}

// bindParamGetOrders binds the parameter ElectronicInvoiceStatuses
func (o *GetOrdersParams) bindParamElectronicInvoiceStatuses(formats strfmt.Registry) []string {
	electronicInvoiceStatusesIR := o.ElectronicInvoiceStatuses

	var electronicInvoiceStatusesIC []string
	for _, electronicInvoiceStatusesIIR := range electronicInvoiceStatusesIR { // explode []string

		electronicInvoiceStatusesIIV := electronicInvoiceStatusesIIR // string as string
		electronicInvoiceStatusesIC = append(electronicInvoiceStatusesIC, electronicInvoiceStatusesIIV)
	}

	// items.CollectionFormat: ""
	electronicInvoiceStatusesIS := swag.JoinByFormat(electronicInvoiceStatusesIC, "")

	return electronicInvoiceStatusesIS
}

// bindParamGetOrders binds the parameter FulfillmentChannels
func (o *GetOrdersParams) bindParamFulfillmentChannels(formats strfmt.Registry) []string {
	fulfillmentChannelsIR := o.FulfillmentChannels

	var fulfillmentChannelsIC []string
	for _, fulfillmentChannelsIIR := range fulfillmentChannelsIR { // explode []string

		fulfillmentChannelsIIV := fulfillmentChannelsIIR // string as string
		fulfillmentChannelsIC = append(fulfillmentChannelsIC, fulfillmentChannelsIIV)
	}

	// items.CollectionFormat: ""
	fulfillmentChannelsIS := swag.JoinByFormat(fulfillmentChannelsIC, "")

	return fulfillmentChannelsIS
}

// bindParamGetOrders binds the parameter MarketplaceIds
func (o *GetOrdersParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: ""
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "")

	return marketplaceIdsIS
}

// bindParamGetOrders binds the parameter OrderStatuses
func (o *GetOrdersParams) bindParamOrderStatuses(formats strfmt.Registry) []string {
	orderStatusesIR := o.OrderStatuses

	var orderStatusesIC []string
	for _, orderStatusesIIR := range orderStatusesIR { // explode []string

		orderStatusesIIV := orderStatusesIIR // string as string
		orderStatusesIC = append(orderStatusesIC, orderStatusesIIV)
	}

	// items.CollectionFormat: ""
	orderStatusesIS := swag.JoinByFormat(orderStatusesIC, "")

	return orderStatusesIS
}

// bindParamGetOrders binds the parameter PaymentMethods
func (o *GetOrdersParams) bindParamPaymentMethods(formats strfmt.Registry) []string {
	paymentMethodsIR := o.PaymentMethods

	var paymentMethodsIC []string
	for _, paymentMethodsIIR := range paymentMethodsIR { // explode []string

		paymentMethodsIIV := paymentMethodsIIR // string as string
		paymentMethodsIC = append(paymentMethodsIC, paymentMethodsIIV)
	}

	// items.CollectionFormat: ""
	paymentMethodsIS := swag.JoinByFormat(paymentMethodsIC, "")

	return paymentMethodsIS
}
