// Code generated by go-swagger; DO NOT EDIT.

package orders_v0

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/ordersV0/orders_v0_models"
)

// GetOrderReader is a Reader for the GetOrder structure.
type GetOrderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOrderBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrderNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOrderTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrderInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOrderServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrderOK creates a GetOrderOK with default headers values
func NewGetOrderOK() *GetOrderOK {
	return &GetOrderOK{}
}

/*
GetOrderOK describes a response with status code 200, with default header values.

Success.
*/
type GetOrderOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order o k response has a 2xx status code
func (o *GetOrderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get order o k response has a 3xx status code
func (o *GetOrderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order o k response has a 4xx status code
func (o *GetOrderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order o k response has a 5xx status code
func (o *GetOrderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get order o k response a status code equal to that given
func (o *GetOrderOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOrderOK) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderOK  %+v", 200, o.Payload)
}

func (o *GetOrderOK) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderOK  %+v", 200, o.Payload)
}

func (o *GetOrderOK) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderBadRequest creates a GetOrderBadRequest with default headers values
func NewGetOrderBadRequest() *GetOrderBadRequest {
	return &GetOrderBadRequest{}
}

/*
GetOrderBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetOrderBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order bad request response has a 2xx status code
func (o *GetOrderBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order bad request response has a 3xx status code
func (o *GetOrderBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order bad request response has a 4xx status code
func (o *GetOrderBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order bad request response has a 5xx status code
func (o *GetOrderBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get order bad request response a status code equal to that given
func (o *GetOrderBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOrderBadRequest) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrderBadRequest) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrderBadRequest) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderForbidden creates a GetOrderForbidden with default headers values
func NewGetOrderForbidden() *GetOrderForbidden {
	return &GetOrderForbidden{}
}

/*
GetOrderForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetOrderForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order forbidden response has a 2xx status code
func (o *GetOrderForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order forbidden response has a 3xx status code
func (o *GetOrderForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order forbidden response has a 4xx status code
func (o *GetOrderForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order forbidden response has a 5xx status code
func (o *GetOrderForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get order forbidden response a status code equal to that given
func (o *GetOrderForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOrderForbidden) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderForbidden  %+v", 403, o.Payload)
}

func (o *GetOrderForbidden) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderForbidden  %+v", 403, o.Payload)
}

func (o *GetOrderForbidden) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderNotFound creates a GetOrderNotFound with default headers values
func NewGetOrderNotFound() *GetOrderNotFound {
	return &GetOrderNotFound{}
}

/*
GetOrderNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetOrderNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order not found response has a 2xx status code
func (o *GetOrderNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order not found response has a 3xx status code
func (o *GetOrderNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order not found response has a 4xx status code
func (o *GetOrderNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order not found response has a 5xx status code
func (o *GetOrderNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get order not found response a status code equal to that given
func (o *GetOrderNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOrderNotFound) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderNotFound) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderNotFound) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderTooManyRequests creates a GetOrderTooManyRequests with default headers values
func NewGetOrderTooManyRequests() *GetOrderTooManyRequests {
	return &GetOrderTooManyRequests{}
}

/*
GetOrderTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetOrderTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order too many requests response has a 2xx status code
func (o *GetOrderTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order too many requests response has a 3xx status code
func (o *GetOrderTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order too many requests response has a 4xx status code
func (o *GetOrderTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order too many requests response has a 5xx status code
func (o *GetOrderTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get order too many requests response a status code equal to that given
func (o *GetOrderTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOrderTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOrderTooManyRequests) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOrderTooManyRequests) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderInternalServerError creates a GetOrderInternalServerError with default headers values
func NewGetOrderInternalServerError() *GetOrderInternalServerError {
	return &GetOrderInternalServerError{}
}

/*
GetOrderInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetOrderInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order internal server error response has a 2xx status code
func (o *GetOrderInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order internal server error response has a 3xx status code
func (o *GetOrderInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order internal server error response has a 4xx status code
func (o *GetOrderInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order internal server error response has a 5xx status code
func (o *GetOrderInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get order internal server error response a status code equal to that given
func (o *GetOrderInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOrderInternalServerError) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOrderInternalServerError) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOrderInternalServerError) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderServiceUnavailable creates a GetOrderServiceUnavailable with default headers values
func NewGetOrderServiceUnavailable() *GetOrderServiceUnavailable {
	return &GetOrderServiceUnavailable{}
}

/*
GetOrderServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetOrderServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *orders_v0_models.GetOrderResponse
}

// IsSuccess returns true when this get order service unavailable response has a 2xx status code
func (o *GetOrderServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order service unavailable response has a 3xx status code
func (o *GetOrderServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order service unavailable response has a 4xx status code
func (o *GetOrderServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order service unavailable response has a 5xx status code
func (o *GetOrderServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get order service unavailable response a status code equal to that given
func (o *GetOrderServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOrderServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOrderServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /orders/v0/orders/{orderId}][%d] getOrderServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOrderServiceUnavailable) GetPayload() *orders_v0_models.GetOrderResponse {
	return o.Payload
}

func (o *GetOrderServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(orders_v0_models.GetOrderResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
