// Code generated by go-swagger; DO NOT EDIT.

package sellers_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Business Information about the seller's business. Certain fields may be omitted depending on the seller's `businessType`.
//
// swagger:model Business
type Business struct {

	// The seller's company registration number, if applicable. This field will be absent for individual sellers and sole proprietorships.
	CompanyRegistrationNumber string `json:"companyRegistrationNumber,omitempty"`

	// The seller's company tax identification number, if applicable. This field will be present for certain business types only, such as sole proprietorships.
	CompanyTaxIdentificationNumber string `json:"companyTaxIdentificationNumber,omitempty"`

	// The registered business name.
	// Required: true
	Name *string `json:"name"`

	// The non-Latin script version of the registered business name, if applicable.
	NonLatinName string `json:"nonLatinName,omitempty"`

	// The registered business address.
	// Required: true
	RegisteredBusinessAddress *Address `json:"registeredBusinessAddress"`
}

// Validate validates this business
func (m *Business) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegisteredBusinessAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Business) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Business) validateRegisteredBusinessAddress(formats strfmt.Registry) error {

	if err := validate.Required("registeredBusinessAddress", "body", m.RegisteredBusinessAddress); err != nil {
		return err
	}

	if m.RegisteredBusinessAddress != nil {
		if err := m.RegisteredBusinessAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredBusinessAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredBusinessAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this business based on the context it is used
func (m *Business) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegisteredBusinessAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Business) contextValidateRegisteredBusinessAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.RegisteredBusinessAddress != nil {
		if err := m.RegisteredBusinessAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("registeredBusinessAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("registeredBusinessAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Business) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Business) UnmarshalBinary(b []byte) error {
	var res Business
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
