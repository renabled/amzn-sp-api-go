// Code generated by go-swagger; DO NOT EDIT.

package sellers_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MarketplaceLevelAttributes Attributes that define the seller's presence and status within a specific marketplace. These attributes include the marketplace details, store name, listing status, and the selling plan the seller is subscribed to.
//
// swagger:model MarketplaceLevelAttributes
type MarketplaceLevelAttributes struct {

	// The current status of the seller's listings.
	// Required: true
	// Enum: [ACTIVE INACTIVE]
	ListingStatus *string `json:"listingStatus"`

	// marketplace
	// Required: true
	Marketplace *Marketplace `json:"marketplace"`

	// The selling plan details.
	// Required: true
	// Enum: [PROFESSIONAL INDIVIDUAL]
	SellingPlan *string `json:"sellingPlan"`

	// The name of the seller's store as displayed in the marketplace.
	// Required: true
	StoreName *string `json:"storeName"`
}

// Validate validates this marketplace level attributes
func (m *MarketplaceLevelAttributes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateListingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplace(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingPlan(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStoreName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var marketplaceLevelAttributesTypeListingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","INACTIVE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketplaceLevelAttributesTypeListingStatusPropEnum = append(marketplaceLevelAttributesTypeListingStatusPropEnum, v)
	}
}

const (

	// MarketplaceLevelAttributesListingStatusACTIVE captures enum value "ACTIVE"
	MarketplaceLevelAttributesListingStatusACTIVE string = "ACTIVE"

	// MarketplaceLevelAttributesListingStatusINACTIVE captures enum value "INACTIVE"
	MarketplaceLevelAttributesListingStatusINACTIVE string = "INACTIVE"
)

// prop value enum
func (m *MarketplaceLevelAttributes) validateListingStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, marketplaceLevelAttributesTypeListingStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MarketplaceLevelAttributes) validateListingStatus(formats strfmt.Registry) error {

	if err := validate.Required("listingStatus", "body", m.ListingStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateListingStatusEnum("listingStatus", "body", *m.ListingStatus); err != nil {
		return err
	}

	return nil
}

func (m *MarketplaceLevelAttributes) validateMarketplace(formats strfmt.Registry) error {

	if err := validate.Required("marketplace", "body", m.Marketplace); err != nil {
		return err
	}

	if m.Marketplace != nil {
		if err := m.Marketplace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplace")
			}
			return err
		}
	}

	return nil
}

var marketplaceLevelAttributesTypeSellingPlanPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROFESSIONAL","INDIVIDUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		marketplaceLevelAttributesTypeSellingPlanPropEnum = append(marketplaceLevelAttributesTypeSellingPlanPropEnum, v)
	}
}

const (

	// MarketplaceLevelAttributesSellingPlanPROFESSIONAL captures enum value "PROFESSIONAL"
	MarketplaceLevelAttributesSellingPlanPROFESSIONAL string = "PROFESSIONAL"

	// MarketplaceLevelAttributesSellingPlanINDIVIDUAL captures enum value "INDIVIDUAL"
	MarketplaceLevelAttributesSellingPlanINDIVIDUAL string = "INDIVIDUAL"
)

// prop value enum
func (m *MarketplaceLevelAttributes) validateSellingPlanEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, marketplaceLevelAttributesTypeSellingPlanPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MarketplaceLevelAttributes) validateSellingPlan(formats strfmt.Registry) error {

	if err := validate.Required("sellingPlan", "body", m.SellingPlan); err != nil {
		return err
	}

	// value enum
	if err := m.validateSellingPlanEnum("sellingPlan", "body", *m.SellingPlan); err != nil {
		return err
	}

	return nil
}

func (m *MarketplaceLevelAttributes) validateStoreName(formats strfmt.Registry) error {

	if err := validate.Required("storeName", "body", m.StoreName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this marketplace level attributes based on the context it is used
func (m *MarketplaceLevelAttributes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarketplace(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MarketplaceLevelAttributes) contextValidateMarketplace(ctx context.Context, formats strfmt.Registry) error {

	if m.Marketplace != nil {
		if err := m.Marketplace.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplace")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MarketplaceLevelAttributes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MarketplaceLevelAttributes) UnmarshalBinary(b []byte) error {
	var res MarketplaceLevelAttributes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
