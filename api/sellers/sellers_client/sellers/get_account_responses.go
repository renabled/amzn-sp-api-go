// Code generated by go-swagger; DO NOT EDIT.

package sellers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/sellers/sellers_models"
)

// GetAccountReader is a Reader for the GetAccount structure.
type GetAccountReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAccountReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAccountOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAccountBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAccountForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAccountNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetAccountRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAccountUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAccountTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAccountInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAccountServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAccountOK creates a GetAccountOK with default headers values
func NewGetAccountOK() *GetAccountOK {
	return &GetAccountOK{}
}

/*
GetAccountOK describes a response with status code 200, with default header values.

Success.
*/
type GetAccountOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account o k response has a 2xx status code
func (o *GetAccountOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get account o k response has a 3xx status code
func (o *GetAccountOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account o k response has a 4xx status code
func (o *GetAccountOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account o k response has a 5xx status code
func (o *GetAccountOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get account o k response a status code equal to that given
func (o *GetAccountOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAccountOK) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountOK  %+v", 200, o.Payload)
}

func (o *GetAccountOK) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountOK  %+v", 200, o.Payload)
}

func (o *GetAccountOK) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountBadRequest creates a GetAccountBadRequest with default headers values
func NewGetAccountBadRequest() *GetAccountBadRequest {
	return &GetAccountBadRequest{}
}

/*
GetAccountBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAccountBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account bad request response has a 2xx status code
func (o *GetAccountBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account bad request response has a 3xx status code
func (o *GetAccountBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account bad request response has a 4xx status code
func (o *GetAccountBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account bad request response has a 5xx status code
func (o *GetAccountBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get account bad request response a status code equal to that given
func (o *GetAccountBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAccountBadRequest) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccountBadRequest) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountBadRequest  %+v", 400, o.Payload)
}

func (o *GetAccountBadRequest) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountForbidden creates a GetAccountForbidden with default headers values
func NewGetAccountForbidden() *GetAccountForbidden {
	return &GetAccountForbidden{}
}

/*
GetAccountForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAccountForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account forbidden response has a 2xx status code
func (o *GetAccountForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account forbidden response has a 3xx status code
func (o *GetAccountForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account forbidden response has a 4xx status code
func (o *GetAccountForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account forbidden response has a 5xx status code
func (o *GetAccountForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get account forbidden response a status code equal to that given
func (o *GetAccountForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAccountForbidden) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountForbidden  %+v", 403, o.Payload)
}

func (o *GetAccountForbidden) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountForbidden  %+v", 403, o.Payload)
}

func (o *GetAccountForbidden) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountNotFound creates a GetAccountNotFound with default headers values
func NewGetAccountNotFound() *GetAccountNotFound {
	return &GetAccountNotFound{}
}

/*
GetAccountNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetAccountNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account not found response has a 2xx status code
func (o *GetAccountNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account not found response has a 3xx status code
func (o *GetAccountNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account not found response has a 4xx status code
func (o *GetAccountNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account not found response has a 5xx status code
func (o *GetAccountNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get account not found response a status code equal to that given
func (o *GetAccountNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAccountNotFound) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountNotFound  %+v", 404, o.Payload)
}

func (o *GetAccountNotFound) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountNotFound  %+v", 404, o.Payload)
}

func (o *GetAccountNotFound) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountRequestEntityTooLarge creates a GetAccountRequestEntityTooLarge with default headers values
func NewGetAccountRequestEntityTooLarge() *GetAccountRequestEntityTooLarge {
	return &GetAccountRequestEntityTooLarge{}
}

/*
GetAccountRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetAccountRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account request entity too large response has a 2xx status code
func (o *GetAccountRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account request entity too large response has a 3xx status code
func (o *GetAccountRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account request entity too large response has a 4xx status code
func (o *GetAccountRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account request entity too large response has a 5xx status code
func (o *GetAccountRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get account request entity too large response a status code equal to that given
func (o *GetAccountRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetAccountRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAccountRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetAccountRequestEntityTooLarge) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountUnsupportedMediaType creates a GetAccountUnsupportedMediaType with default headers values
func NewGetAccountUnsupportedMediaType() *GetAccountUnsupportedMediaType {
	return &GetAccountUnsupportedMediaType{}
}

/*
GetAccountUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetAccountUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account unsupported media type response has a 2xx status code
func (o *GetAccountUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account unsupported media type response has a 3xx status code
func (o *GetAccountUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account unsupported media type response has a 4xx status code
func (o *GetAccountUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account unsupported media type response has a 5xx status code
func (o *GetAccountUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get account unsupported media type response a status code equal to that given
func (o *GetAccountUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAccountUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAccountUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAccountUnsupportedMediaType) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountTooManyRequests creates a GetAccountTooManyRequests with default headers values
func NewGetAccountTooManyRequests() *GetAccountTooManyRequests {
	return &GetAccountTooManyRequests{}
}

/*
GetAccountTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAccountTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account too many requests response has a 2xx status code
func (o *GetAccountTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account too many requests response has a 3xx status code
func (o *GetAccountTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account too many requests response has a 4xx status code
func (o *GetAccountTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get account too many requests response has a 5xx status code
func (o *GetAccountTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get account too many requests response a status code equal to that given
func (o *GetAccountTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAccountTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAccountTooManyRequests) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAccountTooManyRequests) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountInternalServerError creates a GetAccountInternalServerError with default headers values
func NewGetAccountInternalServerError() *GetAccountInternalServerError {
	return &GetAccountInternalServerError{}
}

/*
GetAccountInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAccountInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account internal server error response has a 2xx status code
func (o *GetAccountInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account internal server error response has a 3xx status code
func (o *GetAccountInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account internal server error response has a 4xx status code
func (o *GetAccountInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account internal server error response has a 5xx status code
func (o *GetAccountInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get account internal server error response a status code equal to that given
func (o *GetAccountInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAccountInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccountInternalServerError) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAccountInternalServerError) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAccountServiceUnavailable creates a GetAccountServiceUnavailable with default headers values
func NewGetAccountServiceUnavailable() *GetAccountServiceUnavailable {
	return &GetAccountServiceUnavailable{}
}

/*
GetAccountServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAccountServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetAccountResponse
}

// IsSuccess returns true when this get account service unavailable response has a 2xx status code
func (o *GetAccountServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get account service unavailable response has a 3xx status code
func (o *GetAccountServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get account service unavailable response has a 4xx status code
func (o *GetAccountServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get account service unavailable response has a 5xx status code
func (o *GetAccountServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get account service unavailable response a status code equal to that given
func (o *GetAccountServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAccountServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAccountServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /sellers/v1/account][%d] getAccountServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAccountServiceUnavailable) GetPayload() *sellers_models.GetAccountResponse {
	return o.Payload
}

func (o *GetAccountServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetAccountResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
