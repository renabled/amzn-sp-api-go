// Code generated by go-swagger; DO NOT EDIT.

package sellers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/sellers/sellers_models"
)

// GetMarketplaceParticipationsReader is a Reader for the GetMarketplaceParticipations structure.
type GetMarketplaceParticipationsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetMarketplaceParticipationsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetMarketplaceParticipationsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetMarketplaceParticipationsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetMarketplaceParticipationsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetMarketplaceParticipationsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetMarketplaceParticipationsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetMarketplaceParticipationsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetMarketplaceParticipationsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetMarketplaceParticipationsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetMarketplaceParticipationsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetMarketplaceParticipationsOK creates a GetMarketplaceParticipationsOK with default headers values
func NewGetMarketplaceParticipationsOK() *GetMarketplaceParticipationsOK {
	return &GetMarketplaceParticipationsOK{}
}

/*
GetMarketplaceParticipationsOK describes a response with status code 200, with default header values.

Marketplace participations successfully retrieved.
*/
type GetMarketplaceParticipationsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations o k response has a 2xx status code
func (o *GetMarketplaceParticipationsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get marketplace participations o k response has a 3xx status code
func (o *GetMarketplaceParticipationsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations o k response has a 4xx status code
func (o *GetMarketplaceParticipationsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get marketplace participations o k response has a 5xx status code
func (o *GetMarketplaceParticipationsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations o k response a status code equal to that given
func (o *GetMarketplaceParticipationsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetMarketplaceParticipationsOK) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsOK  %+v", 200, o.Payload)
}

func (o *GetMarketplaceParticipationsOK) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsOK  %+v", 200, o.Payload)
}

func (o *GetMarketplaceParticipationsOK) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsBadRequest creates a GetMarketplaceParticipationsBadRequest with default headers values
func NewGetMarketplaceParticipationsBadRequest() *GetMarketplaceParticipationsBadRequest {
	return &GetMarketplaceParticipationsBadRequest{}
}

/*
GetMarketplaceParticipationsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetMarketplaceParticipationsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations bad request response has a 2xx status code
func (o *GetMarketplaceParticipationsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations bad request response has a 3xx status code
func (o *GetMarketplaceParticipationsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations bad request response has a 4xx status code
func (o *GetMarketplaceParticipationsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get marketplace participations bad request response has a 5xx status code
func (o *GetMarketplaceParticipationsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations bad request response a status code equal to that given
func (o *GetMarketplaceParticipationsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetMarketplaceParticipationsBadRequest) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetMarketplaceParticipationsBadRequest) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsBadRequest  %+v", 400, o.Payload)
}

func (o *GetMarketplaceParticipationsBadRequest) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsForbidden creates a GetMarketplaceParticipationsForbidden with default headers values
func NewGetMarketplaceParticipationsForbidden() *GetMarketplaceParticipationsForbidden {
	return &GetMarketplaceParticipationsForbidden{}
}

/*
GetMarketplaceParticipationsForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type GetMarketplaceParticipationsForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations forbidden response has a 2xx status code
func (o *GetMarketplaceParticipationsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations forbidden response has a 3xx status code
func (o *GetMarketplaceParticipationsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations forbidden response has a 4xx status code
func (o *GetMarketplaceParticipationsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get marketplace participations forbidden response has a 5xx status code
func (o *GetMarketplaceParticipationsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations forbidden response a status code equal to that given
func (o *GetMarketplaceParticipationsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetMarketplaceParticipationsForbidden) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsForbidden  %+v", 403, o.Payload)
}

func (o *GetMarketplaceParticipationsForbidden) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsForbidden  %+v", 403, o.Payload)
}

func (o *GetMarketplaceParticipationsForbidden) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsNotFound creates a GetMarketplaceParticipationsNotFound with default headers values
func NewGetMarketplaceParticipationsNotFound() *GetMarketplaceParticipationsNotFound {
	return &GetMarketplaceParticipationsNotFound{}
}

/*
GetMarketplaceParticipationsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetMarketplaceParticipationsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations not found response has a 2xx status code
func (o *GetMarketplaceParticipationsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations not found response has a 3xx status code
func (o *GetMarketplaceParticipationsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations not found response has a 4xx status code
func (o *GetMarketplaceParticipationsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get marketplace participations not found response has a 5xx status code
func (o *GetMarketplaceParticipationsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations not found response a status code equal to that given
func (o *GetMarketplaceParticipationsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetMarketplaceParticipationsNotFound) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsNotFound  %+v", 404, o.Payload)
}

func (o *GetMarketplaceParticipationsNotFound) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsNotFound  %+v", 404, o.Payload)
}

func (o *GetMarketplaceParticipationsNotFound) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsRequestEntityTooLarge creates a GetMarketplaceParticipationsRequestEntityTooLarge with default headers values
func NewGetMarketplaceParticipationsRequestEntityTooLarge() *GetMarketplaceParticipationsRequestEntityTooLarge {
	return &GetMarketplaceParticipationsRequestEntityTooLarge{}
}

/*
GetMarketplaceParticipationsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetMarketplaceParticipationsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations request entity too large response has a 2xx status code
func (o *GetMarketplaceParticipationsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations request entity too large response has a 3xx status code
func (o *GetMarketplaceParticipationsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations request entity too large response has a 4xx status code
func (o *GetMarketplaceParticipationsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get marketplace participations request entity too large response has a 5xx status code
func (o *GetMarketplaceParticipationsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations request entity too large response a status code equal to that given
func (o *GetMarketplaceParticipationsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetMarketplaceParticipationsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetMarketplaceParticipationsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetMarketplaceParticipationsRequestEntityTooLarge) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsUnsupportedMediaType creates a GetMarketplaceParticipationsUnsupportedMediaType with default headers values
func NewGetMarketplaceParticipationsUnsupportedMediaType() *GetMarketplaceParticipationsUnsupportedMediaType {
	return &GetMarketplaceParticipationsUnsupportedMediaType{}
}

/*
GetMarketplaceParticipationsUnsupportedMediaType describes a response with status code 415, with default header values.

The entity of the request is in a format not supported by the requested resource.
*/
type GetMarketplaceParticipationsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations unsupported media type response has a 2xx status code
func (o *GetMarketplaceParticipationsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations unsupported media type response has a 3xx status code
func (o *GetMarketplaceParticipationsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations unsupported media type response has a 4xx status code
func (o *GetMarketplaceParticipationsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get marketplace participations unsupported media type response has a 5xx status code
func (o *GetMarketplaceParticipationsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations unsupported media type response a status code equal to that given
func (o *GetMarketplaceParticipationsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetMarketplaceParticipationsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetMarketplaceParticipationsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetMarketplaceParticipationsUnsupportedMediaType) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsTooManyRequests creates a GetMarketplaceParticipationsTooManyRequests with default headers values
func NewGetMarketplaceParticipationsTooManyRequests() *GetMarketplaceParticipationsTooManyRequests {
	return &GetMarketplaceParticipationsTooManyRequests{}
}

/*
GetMarketplaceParticipationsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetMarketplaceParticipationsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations too many requests response has a 2xx status code
func (o *GetMarketplaceParticipationsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations too many requests response has a 3xx status code
func (o *GetMarketplaceParticipationsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations too many requests response has a 4xx status code
func (o *GetMarketplaceParticipationsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get marketplace participations too many requests response has a 5xx status code
func (o *GetMarketplaceParticipationsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get marketplace participations too many requests response a status code equal to that given
func (o *GetMarketplaceParticipationsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetMarketplaceParticipationsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMarketplaceParticipationsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetMarketplaceParticipationsTooManyRequests) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsInternalServerError creates a GetMarketplaceParticipationsInternalServerError with default headers values
func NewGetMarketplaceParticipationsInternalServerError() *GetMarketplaceParticipationsInternalServerError {
	return &GetMarketplaceParticipationsInternalServerError{}
}

/*
GetMarketplaceParticipationsInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type GetMarketplaceParticipationsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations internal server error response has a 2xx status code
func (o *GetMarketplaceParticipationsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations internal server error response has a 3xx status code
func (o *GetMarketplaceParticipationsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations internal server error response has a 4xx status code
func (o *GetMarketplaceParticipationsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get marketplace participations internal server error response has a 5xx status code
func (o *GetMarketplaceParticipationsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get marketplace participations internal server error response a status code equal to that given
func (o *GetMarketplaceParticipationsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetMarketplaceParticipationsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMarketplaceParticipationsInternalServerError) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetMarketplaceParticipationsInternalServerError) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetMarketplaceParticipationsServiceUnavailable creates a GetMarketplaceParticipationsServiceUnavailable with default headers values
func NewGetMarketplaceParticipationsServiceUnavailable() *GetMarketplaceParticipationsServiceUnavailable {
	return &GetMarketplaceParticipationsServiceUnavailable{}
}

/*
GetMarketplaceParticipationsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetMarketplaceParticipationsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sellers_models.GetMarketplaceParticipationsResponse
}

// IsSuccess returns true when this get marketplace participations service unavailable response has a 2xx status code
func (o *GetMarketplaceParticipationsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get marketplace participations service unavailable response has a 3xx status code
func (o *GetMarketplaceParticipationsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get marketplace participations service unavailable response has a 4xx status code
func (o *GetMarketplaceParticipationsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get marketplace participations service unavailable response has a 5xx status code
func (o *GetMarketplaceParticipationsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get marketplace participations service unavailable response a status code equal to that given
func (o *GetMarketplaceParticipationsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetMarketplaceParticipationsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMarketplaceParticipationsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /sellers/v1/marketplaceParticipations][%d] getMarketplaceParticipationsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetMarketplaceParticipationsServiceUnavailable) GetPayload() *sellers_models.GetMarketplaceParticipationsResponse {
	return o.Payload
}

func (o *GetMarketplaceParticipationsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sellers_models.GetMarketplaceParticipationsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
