// Code generated by go-swagger; DO NOT EDIT.

package notifications_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderChangeTypeEnum The supported order change type of ORDER_CHANGE notification.
//
// swagger:model OrderChangeTypeEnum
type OrderChangeTypeEnum string

func NewOrderChangeTypeEnum(value OrderChangeTypeEnum) *OrderChangeTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated OrderChangeTypeEnum.
func (m OrderChangeTypeEnum) Pointer() *OrderChangeTypeEnum {
	return &m
}

const (

	// OrderChangeTypeEnumOrderStatusChange captures enum value "OrderStatusChange"
	OrderChangeTypeEnumOrderStatusChange OrderChangeTypeEnum = "OrderStatusChange"

	// OrderChangeTypeEnumBuyerRequestedChange captures enum value "BuyerRequestedChange"
	OrderChangeTypeEnumBuyerRequestedChange OrderChangeTypeEnum = "BuyerRequestedChange"
)

// for schema
var orderChangeTypeEnumEnum []interface{}

func init() {
	var res []OrderChangeTypeEnum
	if err := json.Unmarshal([]byte(`["OrderStatusChange","BuyerRequestedChange"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderChangeTypeEnumEnum = append(orderChangeTypeEnumEnum, v)
	}
}

func (m OrderChangeTypeEnum) validateOrderChangeTypeEnumEnum(path, location string, value OrderChangeTypeEnum) error {
	if err := validate.EnumCase(path, location, value, orderChangeTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order change type enum
func (m OrderChangeTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderChangeTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this order change type enum based on context it is used
func (m OrderChangeTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
