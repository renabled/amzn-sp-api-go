// Code generated by go-swagger; DO NOT EDIT.

package notifications_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProcessingDirective Additional information passed to the subscription to control the processing of notifications. For example, you can use an `eventFilter` to customize your subscription to send notifications for only the specified `marketplaceId`s, or select the aggregation time period at which to send notifications (for example: limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the `notificationType`.
//
// This feature is currently only supported by the `ANY_OFFER_CHANGED` and `ORDER_CHANGE` `notificationType`s.
//
// swagger:model ProcessingDirective
type ProcessingDirective struct {

	// A `notificationType` specific filter.
	EventFilter *EventFilter `json:"eventFilter,omitempty"`
}

// Validate validates this processing directive
func (m *ProcessingDirective) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventFilter(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessingDirective) validateEventFilter(formats strfmt.Registry) error {
	if swag.IsZero(m.EventFilter) { // not required
		return nil
	}

	if m.EventFilter != nil {
		if err := m.EventFilter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventFilter")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this processing directive based on the context it is used
func (m *ProcessingDirective) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventFilter(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProcessingDirective) contextValidateEventFilter(ctx context.Context, formats strfmt.Registry) error {

	if m.EventFilter != nil {
		if err := m.EventFilter.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eventFilter")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("eventFilter")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProcessingDirective) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProcessingDirective) UnmarshalBinary(b []byte) error {
	var res ProcessingDirective
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
