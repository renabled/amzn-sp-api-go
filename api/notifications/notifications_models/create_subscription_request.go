// Code generated by go-swagger; DO NOT EDIT.

package notifications_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateSubscriptionRequest The request schema for the createSubscription operation.
//
// swagger:model CreateSubscriptionRequest
type CreateSubscriptionRequest struct {

	// The identifier for the destination where notifications will be delivered.
	DestinationID string `json:"destinationId,omitempty"`

	// The version of the payload object to be used in the notification.
	PayloadVersion string `json:"payloadVersion,omitempty"`

	// processing directive
	ProcessingDirective *ProcessingDirective `json:"processingDirective,omitempty"`
}

// Validate validates this create subscription request
func (m *CreateSubscriptionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProcessingDirective(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSubscriptionRequest) validateProcessingDirective(formats strfmt.Registry) error {
	if swag.IsZero(m.ProcessingDirective) { // not required
		return nil
	}

	if m.ProcessingDirective != nil {
		if err := m.ProcessingDirective.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingDirective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingDirective")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create subscription request based on the context it is used
func (m *CreateSubscriptionRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProcessingDirective(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSubscriptionRequest) contextValidateProcessingDirective(ctx context.Context, formats strfmt.Registry) error {

	if m.ProcessingDirective != nil {
		if err := m.ProcessingDirective.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("processingDirective")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("processingDirective")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSubscriptionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSubscriptionRequest) UnmarshalBinary(b []byte) error {
	var res CreateSubscriptionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
