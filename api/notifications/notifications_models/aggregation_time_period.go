// Code generated by go-swagger; DO NOT EDIT.

package notifications_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AggregationTimePeriod The supported aggregation time periods. For example, if FiveMinutes is the value chosen, and 50 price updates occur for an ASIN within 5 minutes, Amazon will send only two notifications; one for the first event, and then a subsequent notification 5 minutes later with the final end state of the data. The 48 interim events will be dropped.
//
// swagger:model AggregationTimePeriod
type AggregationTimePeriod string

func NewAggregationTimePeriod(value AggregationTimePeriod) *AggregationTimePeriod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AggregationTimePeriod.
func (m AggregationTimePeriod) Pointer() *AggregationTimePeriod {
	return &m
}

const (

	// AggregationTimePeriodFiveMinutes captures enum value "FiveMinutes"
	AggregationTimePeriodFiveMinutes AggregationTimePeriod = "FiveMinutes"

	// AggregationTimePeriodTenMinutes captures enum value "TenMinutes"
	AggregationTimePeriodTenMinutes AggregationTimePeriod = "TenMinutes"
)

// for schema
var aggregationTimePeriodEnum []interface{}

func init() {
	var res []AggregationTimePeriod
	if err := json.Unmarshal([]byte(`["FiveMinutes","TenMinutes"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aggregationTimePeriodEnum = append(aggregationTimePeriodEnum, v)
	}
}

func (m AggregationTimePeriod) validateAggregationTimePeriodEnum(path, location string, value AggregationTimePeriod) error {
	if err := validate.EnumCase(path, location, value, aggregationTimePeriodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this aggregation time period
func (m AggregationTimePeriod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAggregationTimePeriodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this aggregation time period based on context it is used
func (m AggregationTimePeriod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
