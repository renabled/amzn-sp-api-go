// Code generated by go-swagger; DO NOT EDIT.

package notifications_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// OrderChangeTypeFilter Use this event filter to customize your subscription to send notifications for only the specified orderChangeType.
//
// swagger:model OrderChangeTypeFilter
type OrderChangeTypeFilter struct {

	// order change types
	OrderChangeTypes OrderChangeTypes `json:"orderChangeTypes,omitempty"`
}

// Validate validates this order change type filter
func (m *OrderChangeTypeFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOrderChangeTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderChangeTypeFilter) validateOrderChangeTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderChangeTypes) { // not required
		return nil
	}

	if err := m.OrderChangeTypes.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderChangeTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderChangeTypes")
		}
		return err
	}

	return nil
}

// ContextValidate validate this order change type filter based on the context it is used
func (m *OrderChangeTypeFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateOrderChangeTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderChangeTypeFilter) contextValidateOrderChangeTypes(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderChangeTypes.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderChangeTypes")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderChangeTypes")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderChangeTypeFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderChangeTypeFilter) UnmarshalBinary(b []byte) error {
	var res OrderChangeTypeFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
