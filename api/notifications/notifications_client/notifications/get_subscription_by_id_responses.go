// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/notifications/notifications_models"
)

// GetSubscriptionByIDReader is a Reader for the GetSubscriptionByID structure.
type GetSubscriptionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSubscriptionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSubscriptionByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetSubscriptionByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSubscriptionByIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSubscriptionByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSubscriptionByIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSubscriptionByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSubscriptionByIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSubscriptionByIDOK creates a GetSubscriptionByIDOK with default headers values
func NewGetSubscriptionByIDOK() *GetSubscriptionByIDOK {
	return &GetSubscriptionByIDOK{}
}

/* GetSubscriptionByIDOK describes a response with status code 200, with default header values.

Success.
*/
type GetSubscriptionByIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDOK) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdOK  %+v", 200, o.Payload)
}
func (o *GetSubscriptionByIDOK) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDBadRequest creates a GetSubscriptionByIDBadRequest with default headers values
func NewGetSubscriptionByIDBadRequest() *GetSubscriptionByIDBadRequest {
	return &GetSubscriptionByIDBadRequest{}
}

/* GetSubscriptionByIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSubscriptionByIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdBadRequest  %+v", 400, o.Payload)
}
func (o *GetSubscriptionByIDBadRequest) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDForbidden creates a GetSubscriptionByIDForbidden with default headers values
func NewGetSubscriptionByIDForbidden() *GetSubscriptionByIDForbidden {
	return &GetSubscriptionByIDForbidden{}
}

/* GetSubscriptionByIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSubscriptionByIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDForbidden) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdForbidden  %+v", 403, o.Payload)
}
func (o *GetSubscriptionByIDForbidden) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDNotFound creates a GetSubscriptionByIDNotFound with default headers values
func NewGetSubscriptionByIDNotFound() *GetSubscriptionByIDNotFound {
	return &GetSubscriptionByIDNotFound{}
}

/* GetSubscriptionByIDNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetSubscriptionByIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionByIDNotFound) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdNotFound  %+v", 404, o.Payload)
}
func (o *GetSubscriptionByIDNotFound) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDConflict creates a GetSubscriptionByIDConflict with default headers values
func NewGetSubscriptionByIDConflict() *GetSubscriptionByIDConflict {
	return &GetSubscriptionByIDConflict{}
}

/* GetSubscriptionByIDConflict describes a response with status code 409, with default header values.

The resource specified conflicts with the current state.
*/
type GetSubscriptionByIDConflict struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDConflict) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdConflict  %+v", 409, o.Payload)
}
func (o *GetSubscriptionByIDConflict) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDRequestEntityTooLarge creates a GetSubscriptionByIDRequestEntityTooLarge with default headers values
func NewGetSubscriptionByIDRequestEntityTooLarge() *GetSubscriptionByIDRequestEntityTooLarge {
	return &GetSubscriptionByIDRequestEntityTooLarge{}
}

/* GetSubscriptionByIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetSubscriptionByIDRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetSubscriptionByIDRequestEntityTooLarge) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDUnsupportedMediaType creates a GetSubscriptionByIDUnsupportedMediaType with default headers values
func NewGetSubscriptionByIDUnsupportedMediaType() *GetSubscriptionByIDUnsupportedMediaType {
	return &GetSubscriptionByIDUnsupportedMediaType{}
}

/* GetSubscriptionByIDUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetSubscriptionByIDUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetSubscriptionByIDUnsupportedMediaType) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDTooManyRequests creates a GetSubscriptionByIDTooManyRequests with default headers values
func NewGetSubscriptionByIDTooManyRequests() *GetSubscriptionByIDTooManyRequests {
	return &GetSubscriptionByIDTooManyRequests{}
}

/* GetSubscriptionByIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSubscriptionByIDTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetSubscriptionByIDTooManyRequests) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDInternalServerError creates a GetSubscriptionByIDInternalServerError with default headers values
func NewGetSubscriptionByIDInternalServerError() *GetSubscriptionByIDInternalServerError {
	return &GetSubscriptionByIDInternalServerError{}
}

/* GetSubscriptionByIDInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSubscriptionByIDInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSubscriptionByIDInternalServerError) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionByIDServiceUnavailable creates a GetSubscriptionByIDServiceUnavailable with default headers values
func NewGetSubscriptionByIDServiceUnavailable() *GetSubscriptionByIDServiceUnavailable {
	return &GetSubscriptionByIDServiceUnavailable{}
}

/* GetSubscriptionByIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSubscriptionByIDServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionByIDResponse
}

func (o *GetSubscriptionByIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] getSubscriptionByIdServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetSubscriptionByIDServiceUnavailable) GetPayload() *notifications_models.GetSubscriptionByIDResponse {
	return o.Payload
}

func (o *GetSubscriptionByIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
