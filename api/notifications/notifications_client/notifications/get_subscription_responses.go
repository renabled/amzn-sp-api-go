// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/notifications/notifications_models"
)

// GetSubscriptionReader is a Reader for the GetSubscription structure.
type GetSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetSubscriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetSubscriptionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetSubscriptionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetSubscriptionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetSubscriptionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetSubscriptionOK creates a GetSubscriptionOK with default headers values
func NewGetSubscriptionOK() *GetSubscriptionOK {
	return &GetSubscriptionOK{}
}

/* GetSubscriptionOK describes a response with status code 200, with default header values.

Success.
*/
type GetSubscriptionOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionOK) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionOK  %+v", 200, o.Payload)
}
func (o *GetSubscriptionOK) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionBadRequest creates a GetSubscriptionBadRequest with default headers values
func NewGetSubscriptionBadRequest() *GetSubscriptionBadRequest {
	return &GetSubscriptionBadRequest{}
}

/* GetSubscriptionBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetSubscriptionBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionBadRequest  %+v", 400, o.Payload)
}
func (o *GetSubscriptionBadRequest) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionForbidden creates a GetSubscriptionForbidden with default headers values
func NewGetSubscriptionForbidden() *GetSubscriptionForbidden {
	return &GetSubscriptionForbidden{}
}

/* GetSubscriptionForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetSubscriptionForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionForbidden) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionForbidden  %+v", 403, o.Payload)
}
func (o *GetSubscriptionForbidden) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionNotFound creates a GetSubscriptionNotFound with default headers values
func NewGetSubscriptionNotFound() *GetSubscriptionNotFound {
	return &GetSubscriptionNotFound{}
}

/* GetSubscriptionNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetSubscriptionNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionNotFound  %+v", 404, o.Payload)
}
func (o *GetSubscriptionNotFound) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionRequestEntityTooLarge creates a GetSubscriptionRequestEntityTooLarge with default headers values
func NewGetSubscriptionRequestEntityTooLarge() *GetSubscriptionRequestEntityTooLarge {
	return &GetSubscriptionRequestEntityTooLarge{}
}

/* GetSubscriptionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetSubscriptionRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetSubscriptionRequestEntityTooLarge) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionUnsupportedMediaType creates a GetSubscriptionUnsupportedMediaType with default headers values
func NewGetSubscriptionUnsupportedMediaType() *GetSubscriptionUnsupportedMediaType {
	return &GetSubscriptionUnsupportedMediaType{}
}

/* GetSubscriptionUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetSubscriptionUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetSubscriptionUnsupportedMediaType) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionTooManyRequests creates a GetSubscriptionTooManyRequests with default headers values
func NewGetSubscriptionTooManyRequests() *GetSubscriptionTooManyRequests {
	return &GetSubscriptionTooManyRequests{}
}

/* GetSubscriptionTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetSubscriptionTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetSubscriptionTooManyRequests) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionInternalServerError creates a GetSubscriptionInternalServerError with default headers values
func NewGetSubscriptionInternalServerError() *GetSubscriptionInternalServerError {
	return &GetSubscriptionInternalServerError{}
}

/* GetSubscriptionInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetSubscriptionInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionInternalServerError  %+v", 500, o.Payload)
}
func (o *GetSubscriptionInternalServerError) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSubscriptionServiceUnavailable creates a GetSubscriptionServiceUnavailable with default headers values
func NewGetSubscriptionServiceUnavailable() *GetSubscriptionServiceUnavailable {
	return &GetSubscriptionServiceUnavailable{}
}

/* GetSubscriptionServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetSubscriptionServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetSubscriptionResponse
}

func (o *GetSubscriptionServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/subscriptions/{notificationType}][%d] getSubscriptionServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetSubscriptionServiceUnavailable) GetPayload() *notifications_models.GetSubscriptionResponse {
	return o.Payload
}

func (o *GetSubscriptionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
