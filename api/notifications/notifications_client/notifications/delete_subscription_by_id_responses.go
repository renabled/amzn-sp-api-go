// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/notifications/notifications_models"
)

// DeleteSubscriptionByIDReader is a Reader for the DeleteSubscriptionByID structure.
type DeleteSubscriptionByIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteSubscriptionByIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDeleteSubscriptionByIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewDeleteSubscriptionByIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewDeleteSubscriptionByIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteSubscriptionByIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewDeleteSubscriptionByIDConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewDeleteSubscriptionByIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewDeleteSubscriptionByIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewDeleteSubscriptionByIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewDeleteSubscriptionByIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewDeleteSubscriptionByIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewDeleteSubscriptionByIDOK creates a DeleteSubscriptionByIDOK with default headers values
func NewDeleteSubscriptionByIDOK() *DeleteSubscriptionByIDOK {
	return &DeleteSubscriptionByIDOK{}
}

/*
DeleteSubscriptionByIDOK describes a response with status code 200, with default header values.

Success.
*/
type DeleteSubscriptionByIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id o k response has a 2xx status code
func (o *DeleteSubscriptionByIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this delete subscription by Id o k response has a 3xx status code
func (o *DeleteSubscriptionByIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id o k response has a 4xx status code
func (o *DeleteSubscriptionByIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription by Id o k response has a 5xx status code
func (o *DeleteSubscriptionByIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id o k response a status code equal to that given
func (o *DeleteSubscriptionByIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *DeleteSubscriptionByIDOK) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdOK  %+v", 200, o.Payload)
}

func (o *DeleteSubscriptionByIDOK) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdOK  %+v", 200, o.Payload)
}

func (o *DeleteSubscriptionByIDOK) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDBadRequest creates a DeleteSubscriptionByIDBadRequest with default headers values
func NewDeleteSubscriptionByIDBadRequest() *DeleteSubscriptionByIDBadRequest {
	return &DeleteSubscriptionByIDBadRequest{}
}

/*
DeleteSubscriptionByIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type DeleteSubscriptionByIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id bad request response has a 2xx status code
func (o *DeleteSubscriptionByIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id bad request response has a 3xx status code
func (o *DeleteSubscriptionByIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id bad request response has a 4xx status code
func (o *DeleteSubscriptionByIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id bad request response has a 5xx status code
func (o *DeleteSubscriptionByIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id bad request response a status code equal to that given
func (o *DeleteSubscriptionByIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *DeleteSubscriptionByIDBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSubscriptionByIDBadRequest) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteSubscriptionByIDBadRequest) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDForbidden creates a DeleteSubscriptionByIDForbidden with default headers values
func NewDeleteSubscriptionByIDForbidden() *DeleteSubscriptionByIDForbidden {
	return &DeleteSubscriptionByIDForbidden{}
}

/*
DeleteSubscriptionByIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type DeleteSubscriptionByIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id forbidden response has a 2xx status code
func (o *DeleteSubscriptionByIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id forbidden response has a 3xx status code
func (o *DeleteSubscriptionByIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id forbidden response has a 4xx status code
func (o *DeleteSubscriptionByIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id forbidden response has a 5xx status code
func (o *DeleteSubscriptionByIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id forbidden response a status code equal to that given
func (o *DeleteSubscriptionByIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *DeleteSubscriptionByIDForbidden) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSubscriptionByIDForbidden) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdForbidden  %+v", 403, o.Payload)
}

func (o *DeleteSubscriptionByIDForbidden) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDNotFound creates a DeleteSubscriptionByIDNotFound with default headers values
func NewDeleteSubscriptionByIDNotFound() *DeleteSubscriptionByIDNotFound {
	return &DeleteSubscriptionByIDNotFound{}
}

/*
DeleteSubscriptionByIDNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type DeleteSubscriptionByIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id not found response has a 2xx status code
func (o *DeleteSubscriptionByIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id not found response has a 3xx status code
func (o *DeleteSubscriptionByIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id not found response has a 4xx status code
func (o *DeleteSubscriptionByIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id not found response has a 5xx status code
func (o *DeleteSubscriptionByIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id not found response a status code equal to that given
func (o *DeleteSubscriptionByIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *DeleteSubscriptionByIDNotFound) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSubscriptionByIDNotFound) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdNotFound  %+v", 404, o.Payload)
}

func (o *DeleteSubscriptionByIDNotFound) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDConflict creates a DeleteSubscriptionByIDConflict with default headers values
func NewDeleteSubscriptionByIDConflict() *DeleteSubscriptionByIDConflict {
	return &DeleteSubscriptionByIDConflict{}
}

/*
DeleteSubscriptionByIDConflict describes a response with status code 409, with default header values.

The resource specified conflicts with the current state.
*/
type DeleteSubscriptionByIDConflict struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id conflict response has a 2xx status code
func (o *DeleteSubscriptionByIDConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id conflict response has a 3xx status code
func (o *DeleteSubscriptionByIDConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id conflict response has a 4xx status code
func (o *DeleteSubscriptionByIDConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id conflict response has a 5xx status code
func (o *DeleteSubscriptionByIDConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id conflict response a status code equal to that given
func (o *DeleteSubscriptionByIDConflict) IsCode(code int) bool {
	return code == 409
}

func (o *DeleteSubscriptionByIDConflict) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdConflict  %+v", 409, o.Payload)
}

func (o *DeleteSubscriptionByIDConflict) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdConflict  %+v", 409, o.Payload)
}

func (o *DeleteSubscriptionByIDConflict) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDRequestEntityTooLarge creates a DeleteSubscriptionByIDRequestEntityTooLarge with default headers values
func NewDeleteSubscriptionByIDRequestEntityTooLarge() *DeleteSubscriptionByIDRequestEntityTooLarge {
	return &DeleteSubscriptionByIDRequestEntityTooLarge{}
}

/*
DeleteSubscriptionByIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type DeleteSubscriptionByIDRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id request entity too large response has a 2xx status code
func (o *DeleteSubscriptionByIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id request entity too large response has a 3xx status code
func (o *DeleteSubscriptionByIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id request entity too large response has a 4xx status code
func (o *DeleteSubscriptionByIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id request entity too large response has a 5xx status code
func (o *DeleteSubscriptionByIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id request entity too large response a status code equal to that given
func (o *DeleteSubscriptionByIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *DeleteSubscriptionByIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSubscriptionByIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *DeleteSubscriptionByIDRequestEntityTooLarge) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDUnsupportedMediaType creates a DeleteSubscriptionByIDUnsupportedMediaType with default headers values
func NewDeleteSubscriptionByIDUnsupportedMediaType() *DeleteSubscriptionByIDUnsupportedMediaType {
	return &DeleteSubscriptionByIDUnsupportedMediaType{}
}

/*
DeleteSubscriptionByIDUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type DeleteSubscriptionByIDUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id unsupported media type response has a 2xx status code
func (o *DeleteSubscriptionByIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id unsupported media type response has a 3xx status code
func (o *DeleteSubscriptionByIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id unsupported media type response has a 4xx status code
func (o *DeleteSubscriptionByIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id unsupported media type response has a 5xx status code
func (o *DeleteSubscriptionByIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id unsupported media type response a status code equal to that given
func (o *DeleteSubscriptionByIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *DeleteSubscriptionByIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSubscriptionByIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *DeleteSubscriptionByIDUnsupportedMediaType) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDTooManyRequests creates a DeleteSubscriptionByIDTooManyRequests with default headers values
func NewDeleteSubscriptionByIDTooManyRequests() *DeleteSubscriptionByIDTooManyRequests {
	return &DeleteSubscriptionByIDTooManyRequests{}
}

/*
DeleteSubscriptionByIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type DeleteSubscriptionByIDTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id too many requests response has a 2xx status code
func (o *DeleteSubscriptionByIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id too many requests response has a 3xx status code
func (o *DeleteSubscriptionByIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id too many requests response has a 4xx status code
func (o *DeleteSubscriptionByIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this delete subscription by Id too many requests response has a 5xx status code
func (o *DeleteSubscriptionByIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this delete subscription by Id too many requests response a status code equal to that given
func (o *DeleteSubscriptionByIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *DeleteSubscriptionByIDTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSubscriptionByIDTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *DeleteSubscriptionByIDTooManyRequests) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDInternalServerError creates a DeleteSubscriptionByIDInternalServerError with default headers values
func NewDeleteSubscriptionByIDInternalServerError() *DeleteSubscriptionByIDInternalServerError {
	return &DeleteSubscriptionByIDInternalServerError{}
}

/*
DeleteSubscriptionByIDInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type DeleteSubscriptionByIDInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id internal server error response has a 2xx status code
func (o *DeleteSubscriptionByIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id internal server error response has a 3xx status code
func (o *DeleteSubscriptionByIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id internal server error response has a 4xx status code
func (o *DeleteSubscriptionByIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription by Id internal server error response has a 5xx status code
func (o *DeleteSubscriptionByIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this delete subscription by Id internal server error response a status code equal to that given
func (o *DeleteSubscriptionByIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *DeleteSubscriptionByIDInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSubscriptionByIDInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteSubscriptionByIDInternalServerError) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteSubscriptionByIDServiceUnavailable creates a DeleteSubscriptionByIDServiceUnavailable with default headers values
func NewDeleteSubscriptionByIDServiceUnavailable() *DeleteSubscriptionByIDServiceUnavailable {
	return &DeleteSubscriptionByIDServiceUnavailable{}
}

/*
DeleteSubscriptionByIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type DeleteSubscriptionByIDServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.DeleteSubscriptionByIDResponse
}

// IsSuccess returns true when this delete subscription by Id service unavailable response has a 2xx status code
func (o *DeleteSubscriptionByIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this delete subscription by Id service unavailable response has a 3xx status code
func (o *DeleteSubscriptionByIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this delete subscription by Id service unavailable response has a 4xx status code
func (o *DeleteSubscriptionByIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this delete subscription by Id service unavailable response has a 5xx status code
func (o *DeleteSubscriptionByIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this delete subscription by Id service unavailable response a status code equal to that given
func (o *DeleteSubscriptionByIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *DeleteSubscriptionByIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSubscriptionByIDServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /notifications/v1/subscriptions/{notificationType}/{subscriptionId}][%d] deleteSubscriptionByIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *DeleteSubscriptionByIDServiceUnavailable) GetPayload() *notifications_models.DeleteSubscriptionByIDResponse {
	return o.Payload
}

func (o *DeleteSubscriptionByIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.DeleteSubscriptionByIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
