// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/notifications/notifications_models"
)

// GetDestinationReader is a Reader for the GetDestination structure.
type GetDestinationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDestinationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDestinationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDestinationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDestinationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDestinationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewGetDestinationConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetDestinationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetDestinationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDestinationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDestinationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDestinationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDestinationOK creates a GetDestinationOK with default headers values
func NewGetDestinationOK() *GetDestinationOK {
	return &GetDestinationOK{}
}

/*
GetDestinationOK describes a response with status code 200, with default header values.

Success.
*/
type GetDestinationOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination o k response has a 2xx status code
func (o *GetDestinationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get destination o k response has a 3xx status code
func (o *GetDestinationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination o k response has a 4xx status code
func (o *GetDestinationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get destination o k response has a 5xx status code
func (o *GetDestinationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination o k response a status code equal to that given
func (o *GetDestinationOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetDestinationOK) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationOK  %+v", 200, o.Payload)
}

func (o *GetDestinationOK) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationOK  %+v", 200, o.Payload)
}

func (o *GetDestinationOK) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationBadRequest creates a GetDestinationBadRequest with default headers values
func NewGetDestinationBadRequest() *GetDestinationBadRequest {
	return &GetDestinationBadRequest{}
}

/*
GetDestinationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetDestinationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination bad request response has a 2xx status code
func (o *GetDestinationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination bad request response has a 3xx status code
func (o *GetDestinationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination bad request response has a 4xx status code
func (o *GetDestinationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination bad request response has a 5xx status code
func (o *GetDestinationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination bad request response a status code equal to that given
func (o *GetDestinationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetDestinationBadRequest) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *GetDestinationBadRequest) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *GetDestinationBadRequest) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationForbidden creates a GetDestinationForbidden with default headers values
func NewGetDestinationForbidden() *GetDestinationForbidden {
	return &GetDestinationForbidden{}
}

/*
GetDestinationForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetDestinationForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination forbidden response has a 2xx status code
func (o *GetDestinationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination forbidden response has a 3xx status code
func (o *GetDestinationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination forbidden response has a 4xx status code
func (o *GetDestinationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination forbidden response has a 5xx status code
func (o *GetDestinationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination forbidden response a status code equal to that given
func (o *GetDestinationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetDestinationForbidden) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationForbidden  %+v", 403, o.Payload)
}

func (o *GetDestinationForbidden) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationForbidden  %+v", 403, o.Payload)
}

func (o *GetDestinationForbidden) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationNotFound creates a GetDestinationNotFound with default headers values
func NewGetDestinationNotFound() *GetDestinationNotFound {
	return &GetDestinationNotFound{}
}

/*
GetDestinationNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetDestinationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination not found response has a 2xx status code
func (o *GetDestinationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination not found response has a 3xx status code
func (o *GetDestinationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination not found response has a 4xx status code
func (o *GetDestinationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination not found response has a 5xx status code
func (o *GetDestinationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination not found response a status code equal to that given
func (o *GetDestinationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetDestinationNotFound) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationNotFound  %+v", 404, o.Payload)
}

func (o *GetDestinationNotFound) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationNotFound  %+v", 404, o.Payload)
}

func (o *GetDestinationNotFound) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationConflict creates a GetDestinationConflict with default headers values
func NewGetDestinationConflict() *GetDestinationConflict {
	return &GetDestinationConflict{}
}

/*
GetDestinationConflict describes a response with status code 409, with default header values.

The resource specified conflicts with the current state.
*/
type GetDestinationConflict struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination conflict response has a 2xx status code
func (o *GetDestinationConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination conflict response has a 3xx status code
func (o *GetDestinationConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination conflict response has a 4xx status code
func (o *GetDestinationConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination conflict response has a 5xx status code
func (o *GetDestinationConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination conflict response a status code equal to that given
func (o *GetDestinationConflict) IsCode(code int) bool {
	return code == 409
}

func (o *GetDestinationConflict) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationConflict  %+v", 409, o.Payload)
}

func (o *GetDestinationConflict) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationConflict  %+v", 409, o.Payload)
}

func (o *GetDestinationConflict) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationRequestEntityTooLarge creates a GetDestinationRequestEntityTooLarge with default headers values
func NewGetDestinationRequestEntityTooLarge() *GetDestinationRequestEntityTooLarge {
	return &GetDestinationRequestEntityTooLarge{}
}

/*
GetDestinationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetDestinationRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination request entity too large response has a 2xx status code
func (o *GetDestinationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination request entity too large response has a 3xx status code
func (o *GetDestinationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination request entity too large response has a 4xx status code
func (o *GetDestinationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination request entity too large response has a 5xx status code
func (o *GetDestinationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination request entity too large response a status code equal to that given
func (o *GetDestinationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetDestinationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDestinationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetDestinationRequestEntityTooLarge) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationUnsupportedMediaType creates a GetDestinationUnsupportedMediaType with default headers values
func NewGetDestinationUnsupportedMediaType() *GetDestinationUnsupportedMediaType {
	return &GetDestinationUnsupportedMediaType{}
}

/*
GetDestinationUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetDestinationUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination unsupported media type response has a 2xx status code
func (o *GetDestinationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination unsupported media type response has a 3xx status code
func (o *GetDestinationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination unsupported media type response has a 4xx status code
func (o *GetDestinationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination unsupported media type response has a 5xx status code
func (o *GetDestinationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination unsupported media type response a status code equal to that given
func (o *GetDestinationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetDestinationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDestinationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetDestinationUnsupportedMediaType) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationTooManyRequests creates a GetDestinationTooManyRequests with default headers values
func NewGetDestinationTooManyRequests() *GetDestinationTooManyRequests {
	return &GetDestinationTooManyRequests{}
}

/*
GetDestinationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetDestinationTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination too many requests response has a 2xx status code
func (o *GetDestinationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination too many requests response has a 3xx status code
func (o *GetDestinationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination too many requests response has a 4xx status code
func (o *GetDestinationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get destination too many requests response has a 5xx status code
func (o *GetDestinationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get destination too many requests response a status code equal to that given
func (o *GetDestinationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetDestinationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDestinationTooManyRequests) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetDestinationTooManyRequests) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationInternalServerError creates a GetDestinationInternalServerError with default headers values
func NewGetDestinationInternalServerError() *GetDestinationInternalServerError {
	return &GetDestinationInternalServerError{}
}

/*
GetDestinationInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetDestinationInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination internal server error response has a 2xx status code
func (o *GetDestinationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination internal server error response has a 3xx status code
func (o *GetDestinationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination internal server error response has a 4xx status code
func (o *GetDestinationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get destination internal server error response has a 5xx status code
func (o *GetDestinationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get destination internal server error response a status code equal to that given
func (o *GetDestinationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetDestinationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDestinationInternalServerError) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *GetDestinationInternalServerError) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDestinationServiceUnavailable creates a GetDestinationServiceUnavailable with default headers values
func NewGetDestinationServiceUnavailable() *GetDestinationServiceUnavailable {
	return &GetDestinationServiceUnavailable{}
}

/*
GetDestinationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetDestinationServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.GetDestinationResponse
}

// IsSuccess returns true when this get destination service unavailable response has a 2xx status code
func (o *GetDestinationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get destination service unavailable response has a 3xx status code
func (o *GetDestinationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get destination service unavailable response has a 4xx status code
func (o *GetDestinationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get destination service unavailable response has a 5xx status code
func (o *GetDestinationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get destination service unavailable response a status code equal to that given
func (o *GetDestinationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetDestinationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDestinationServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /notifications/v1/destinations/{destinationId}][%d] getDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetDestinationServiceUnavailable) GetPayload() *notifications_models.GetDestinationResponse {
	return o.Payload
}

func (o *GetDestinationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.GetDestinationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
