// Code generated by go-swagger; DO NOT EDIT.

package notifications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/notifications/notifications_models"
)

// CreateSubscriptionReader is a Reader for the CreateSubscription structure.
type CreateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateSubscriptionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateSubscriptionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateSubscriptionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewCreateSubscriptionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateSubscriptionRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateSubscriptionUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateSubscriptionTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateSubscriptionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateSubscriptionServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateSubscriptionOK creates a CreateSubscriptionOK with default headers values
func NewCreateSubscriptionOK() *CreateSubscriptionOK {
	return &CreateSubscriptionOK{}
}

/* CreateSubscriptionOK describes a response with status code 200, with default header values.

Success.
*/
type CreateSubscriptionOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionOK) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionOK  %+v", 200, o.Payload)
}
func (o *CreateSubscriptionOK) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionBadRequest creates a CreateSubscriptionBadRequest with default headers values
func NewCreateSubscriptionBadRequest() *CreateSubscriptionBadRequest {
	return &CreateSubscriptionBadRequest{}
}

/* CreateSubscriptionBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateSubscriptionBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionBadRequest) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionBadRequest  %+v", 400, o.Payload)
}
func (o *CreateSubscriptionBadRequest) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionForbidden creates a CreateSubscriptionForbidden with default headers values
func NewCreateSubscriptionForbidden() *CreateSubscriptionForbidden {
	return &CreateSubscriptionForbidden{}
}

/* CreateSubscriptionForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateSubscriptionForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionForbidden) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionForbidden  %+v", 403, o.Payload)
}
func (o *CreateSubscriptionForbidden) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionNotFound creates a CreateSubscriptionNotFound with default headers values
func NewCreateSubscriptionNotFound() *CreateSubscriptionNotFound {
	return &CreateSubscriptionNotFound{}
}

/* CreateSubscriptionNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateSubscriptionNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionNotFound) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionNotFound  %+v", 404, o.Payload)
}
func (o *CreateSubscriptionNotFound) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionConflict creates a CreateSubscriptionConflict with default headers values
func NewCreateSubscriptionConflict() *CreateSubscriptionConflict {
	return &CreateSubscriptionConflict{}
}

/* CreateSubscriptionConflict describes a response with status code 409, with default header values.

The resource specified conflicts with the current state.
*/
type CreateSubscriptionConflict struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionConflict) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionConflict  %+v", 409, o.Payload)
}
func (o *CreateSubscriptionConflict) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionRequestEntityTooLarge creates a CreateSubscriptionRequestEntityTooLarge with default headers values
func NewCreateSubscriptionRequestEntityTooLarge() *CreateSubscriptionRequestEntityTooLarge {
	return &CreateSubscriptionRequestEntityTooLarge{}
}

/* CreateSubscriptionRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateSubscriptionRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *CreateSubscriptionRequestEntityTooLarge) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionUnsupportedMediaType creates a CreateSubscriptionUnsupportedMediaType with default headers values
func NewCreateSubscriptionUnsupportedMediaType() *CreateSubscriptionUnsupportedMediaType {
	return &CreateSubscriptionUnsupportedMediaType{}
}

/* CreateSubscriptionUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateSubscriptionUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *CreateSubscriptionUnsupportedMediaType) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionTooManyRequests creates a CreateSubscriptionTooManyRequests with default headers values
func NewCreateSubscriptionTooManyRequests() *CreateSubscriptionTooManyRequests {
	return &CreateSubscriptionTooManyRequests{}
}

/* CreateSubscriptionTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateSubscriptionTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionTooManyRequests  %+v", 429, o.Payload)
}
func (o *CreateSubscriptionTooManyRequests) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionInternalServerError creates a CreateSubscriptionInternalServerError with default headers values
func NewCreateSubscriptionInternalServerError() *CreateSubscriptionInternalServerError {
	return &CreateSubscriptionInternalServerError{}
}

/* CreateSubscriptionInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateSubscriptionInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateSubscriptionInternalServerError) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionServiceUnavailable creates a CreateSubscriptionServiceUnavailable with default headers values
func NewCreateSubscriptionServiceUnavailable() *CreateSubscriptionServiceUnavailable {
	return &CreateSubscriptionServiceUnavailable{}
}

/* CreateSubscriptionServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateSubscriptionServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *notifications_models.CreateSubscriptionResponse
}

func (o *CreateSubscriptionServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /notifications/v1/subscriptions/{notificationType}][%d] createSubscriptionServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CreateSubscriptionServiceUnavailable) GetPayload() *notifications_models.CreateSubscriptionResponse {
	return o.Payload
}

func (o *CreateSubscriptionServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(notifications_models.CreateSubscriptionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
