// Code generated by go-swagger; DO NOT EDIT.

package easy_ship

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/easyShip_2022-03-23/easy_ship_2022_03_23_models"
)

// CreateScheduledPackageReader is a Reader for the CreateScheduledPackage structure.
type CreateScheduledPackageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScheduledPackageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateScheduledPackageOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScheduledPackageBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScheduledPackageUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScheduledPackageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateScheduledPackageNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateScheduledPackageUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateScheduledPackageTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateScheduledPackageInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateScheduledPackageServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateScheduledPackageOK creates a CreateScheduledPackageOK with default headers values
func NewCreateScheduledPackageOK() *CreateScheduledPackageOK {
	return &CreateScheduledPackageOK{}
}

/*
CreateScheduledPackageOK describes a response with status code 200, with default header values.

Success.
*/
type CreateScheduledPackageOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.Package
}

// IsSuccess returns true when this create scheduled package o k response has a 2xx status code
func (o *CreateScheduledPackageOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create scheduled package o k response has a 3xx status code
func (o *CreateScheduledPackageOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package o k response has a 4xx status code
func (o *CreateScheduledPackageOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scheduled package o k response has a 5xx status code
func (o *CreateScheduledPackageOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package o k response a status code equal to that given
func (o *CreateScheduledPackageOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateScheduledPackageOK) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageOK  %+v", 200, o.Payload)
}

func (o *CreateScheduledPackageOK) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageOK  %+v", 200, o.Payload)
}

func (o *CreateScheduledPackageOK) GetPayload() *easy_ship_2022_03_23_models.Package {
	return o.Payload
}

func (o *CreateScheduledPackageOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.Package)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBadRequest creates a CreateScheduledPackageBadRequest with default headers values
func NewCreateScheduledPackageBadRequest() *CreateScheduledPackageBadRequest {
	return &CreateScheduledPackageBadRequest{}
}

/*
CreateScheduledPackageBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateScheduledPackageBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package bad request response has a 2xx status code
func (o *CreateScheduledPackageBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package bad request response has a 3xx status code
func (o *CreateScheduledPackageBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package bad request response has a 4xx status code
func (o *CreateScheduledPackageBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scheduled package bad request response has a 5xx status code
func (o *CreateScheduledPackageBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package bad request response a status code equal to that given
func (o *CreateScheduledPackageBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateScheduledPackageBadRequest) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScheduledPackageBadRequest) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageBadRequest  %+v", 400, o.Payload)
}

func (o *CreateScheduledPackageBadRequest) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageUnauthorized creates a CreateScheduledPackageUnauthorized with default headers values
func NewCreateScheduledPackageUnauthorized() *CreateScheduledPackageUnauthorized {
	return &CreateScheduledPackageUnauthorized{}
}

/*
CreateScheduledPackageUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateScheduledPackageUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package unauthorized response has a 2xx status code
func (o *CreateScheduledPackageUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package unauthorized response has a 3xx status code
func (o *CreateScheduledPackageUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package unauthorized response has a 4xx status code
func (o *CreateScheduledPackageUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scheduled package unauthorized response has a 5xx status code
func (o *CreateScheduledPackageUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package unauthorized response a status code equal to that given
func (o *CreateScheduledPackageUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *CreateScheduledPackageUnauthorized) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScheduledPackageUnauthorized) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateScheduledPackageUnauthorized) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageForbidden creates a CreateScheduledPackageForbidden with default headers values
func NewCreateScheduledPackageForbidden() *CreateScheduledPackageForbidden {
	return &CreateScheduledPackageForbidden{}
}

/*
CreateScheduledPackageForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateScheduledPackageForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package forbidden response has a 2xx status code
func (o *CreateScheduledPackageForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package forbidden response has a 3xx status code
func (o *CreateScheduledPackageForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package forbidden response has a 4xx status code
func (o *CreateScheduledPackageForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scheduled package forbidden response has a 5xx status code
func (o *CreateScheduledPackageForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package forbidden response a status code equal to that given
func (o *CreateScheduledPackageForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateScheduledPackageForbidden) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageForbidden  %+v", 403, o.Payload)
}

func (o *CreateScheduledPackageForbidden) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageForbidden  %+v", 403, o.Payload)
}

func (o *CreateScheduledPackageForbidden) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageNotFound creates a CreateScheduledPackageNotFound with default headers values
func NewCreateScheduledPackageNotFound() *CreateScheduledPackageNotFound {
	return &CreateScheduledPackageNotFound{}
}

/*
CreateScheduledPackageNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateScheduledPackageNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package not found response has a 2xx status code
func (o *CreateScheduledPackageNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package not found response has a 3xx status code
func (o *CreateScheduledPackageNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package not found response has a 4xx status code
func (o *CreateScheduledPackageNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scheduled package not found response has a 5xx status code
func (o *CreateScheduledPackageNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package not found response a status code equal to that given
func (o *CreateScheduledPackageNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateScheduledPackageNotFound) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageNotFound  %+v", 404, o.Payload)
}

func (o *CreateScheduledPackageNotFound) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageNotFound  %+v", 404, o.Payload)
}

func (o *CreateScheduledPackageNotFound) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageUnsupportedMediaType creates a CreateScheduledPackageUnsupportedMediaType with default headers values
func NewCreateScheduledPackageUnsupportedMediaType() *CreateScheduledPackageUnsupportedMediaType {
	return &CreateScheduledPackageUnsupportedMediaType{}
}

/*
CreateScheduledPackageUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateScheduledPackageUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package unsupported media type response has a 2xx status code
func (o *CreateScheduledPackageUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package unsupported media type response has a 3xx status code
func (o *CreateScheduledPackageUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package unsupported media type response has a 4xx status code
func (o *CreateScheduledPackageUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scheduled package unsupported media type response has a 5xx status code
func (o *CreateScheduledPackageUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package unsupported media type response a status code equal to that given
func (o *CreateScheduledPackageUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateScheduledPackageUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateScheduledPackageUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateScheduledPackageUnsupportedMediaType) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageTooManyRequests creates a CreateScheduledPackageTooManyRequests with default headers values
func NewCreateScheduledPackageTooManyRequests() *CreateScheduledPackageTooManyRequests {
	return &CreateScheduledPackageTooManyRequests{}
}

/*
CreateScheduledPackageTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateScheduledPackageTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package too many requests response has a 2xx status code
func (o *CreateScheduledPackageTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package too many requests response has a 3xx status code
func (o *CreateScheduledPackageTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package too many requests response has a 4xx status code
func (o *CreateScheduledPackageTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create scheduled package too many requests response has a 5xx status code
func (o *CreateScheduledPackageTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create scheduled package too many requests response a status code equal to that given
func (o *CreateScheduledPackageTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateScheduledPackageTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateScheduledPackageTooManyRequests) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateScheduledPackageTooManyRequests) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageInternalServerError creates a CreateScheduledPackageInternalServerError with default headers values
func NewCreateScheduledPackageInternalServerError() *CreateScheduledPackageInternalServerError {
	return &CreateScheduledPackageInternalServerError{}
}

/*
CreateScheduledPackageInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateScheduledPackageInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package internal server error response has a 2xx status code
func (o *CreateScheduledPackageInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package internal server error response has a 3xx status code
func (o *CreateScheduledPackageInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package internal server error response has a 4xx status code
func (o *CreateScheduledPackageInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scheduled package internal server error response has a 5xx status code
func (o *CreateScheduledPackageInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create scheduled package internal server error response a status code equal to that given
func (o *CreateScheduledPackageInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateScheduledPackageInternalServerError) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateScheduledPackageInternalServerError) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateScheduledPackageInternalServerError) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageServiceUnavailable creates a CreateScheduledPackageServiceUnavailable with default headers values
func NewCreateScheduledPackageServiceUnavailable() *CreateScheduledPackageServiceUnavailable {
	return &CreateScheduledPackageServiceUnavailable{}
}

/*
CreateScheduledPackageServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateScheduledPackageServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

// IsSuccess returns true when this create scheduled package service unavailable response has a 2xx status code
func (o *CreateScheduledPackageServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create scheduled package service unavailable response has a 3xx status code
func (o *CreateScheduledPackageServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create scheduled package service unavailable response has a 4xx status code
func (o *CreateScheduledPackageServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create scheduled package service unavailable response has a 5xx status code
func (o *CreateScheduledPackageServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create scheduled package service unavailable response a status code equal to that given
func (o *CreateScheduledPackageServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateScheduledPackageServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateScheduledPackageServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/package][%d] createScheduledPackageServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateScheduledPackageServiceUnavailable) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
