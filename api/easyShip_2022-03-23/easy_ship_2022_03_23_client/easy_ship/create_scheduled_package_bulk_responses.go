// Code generated by go-swagger; DO NOT EDIT.

package easy_ship

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/easyShip_2022-03-23/easy_ship_2022_03_23_models"
)

// CreateScheduledPackageBulkReader is a Reader for the CreateScheduledPackageBulk structure.
type CreateScheduledPackageBulkReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateScheduledPackageBulkReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateScheduledPackageBulkOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateScheduledPackageBulkBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCreateScheduledPackageBulkUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateScheduledPackageBulkForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateScheduledPackageBulkNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateScheduledPackageBulkUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateScheduledPackageBulkTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateScheduledPackageBulkInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateScheduledPackageBulkServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateScheduledPackageBulkOK creates a CreateScheduledPackageBulkOK with default headers values
func NewCreateScheduledPackageBulkOK() *CreateScheduledPackageBulkOK {
	return &CreateScheduledPackageBulkOK{}
}

/* CreateScheduledPackageBulkOK describes a response with status code 200, with default header values.

Success
*/
type CreateScheduledPackageBulkOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.CreateScheduledPackagesResponse
}

func (o *CreateScheduledPackageBulkOK) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkOK  %+v", 200, o.Payload)
}
func (o *CreateScheduledPackageBulkOK) GetPayload() *easy_ship_2022_03_23_models.CreateScheduledPackagesResponse {
	return o.Payload
}

func (o *CreateScheduledPackageBulkOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.CreateScheduledPackagesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkBadRequest creates a CreateScheduledPackageBulkBadRequest with default headers values
func NewCreateScheduledPackageBulkBadRequest() *CreateScheduledPackageBulkBadRequest {
	return &CreateScheduledPackageBulkBadRequest{}
}

/* CreateScheduledPackageBulkBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateScheduledPackageBulkBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkBadRequest) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkBadRequest  %+v", 400, o.Payload)
}
func (o *CreateScheduledPackageBulkBadRequest) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkUnauthorized creates a CreateScheduledPackageBulkUnauthorized with default headers values
func NewCreateScheduledPackageBulkUnauthorized() *CreateScheduledPackageBulkUnauthorized {
	return &CreateScheduledPackageBulkUnauthorized{}
}

/* CreateScheduledPackageBulkUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CreateScheduledPackageBulkUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkUnauthorized) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkUnauthorized  %+v", 401, o.Payload)
}
func (o *CreateScheduledPackageBulkUnauthorized) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkForbidden creates a CreateScheduledPackageBulkForbidden with default headers values
func NewCreateScheduledPackageBulkForbidden() *CreateScheduledPackageBulkForbidden {
	return &CreateScheduledPackageBulkForbidden{}
}

/* CreateScheduledPackageBulkForbidden describes a response with status code 403, with default header values.

Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateScheduledPackageBulkForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkForbidden) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkForbidden  %+v", 403, o.Payload)
}
func (o *CreateScheduledPackageBulkForbidden) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkNotFound creates a CreateScheduledPackageBulkNotFound with default headers values
func NewCreateScheduledPackageBulkNotFound() *CreateScheduledPackageBulkNotFound {
	return &CreateScheduledPackageBulkNotFound{}
}

/* CreateScheduledPackageBulkNotFound describes a response with status code 404, with default header values.

The specified resource does not exist.
*/
type CreateScheduledPackageBulkNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkNotFound) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkNotFound  %+v", 404, o.Payload)
}
func (o *CreateScheduledPackageBulkNotFound) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkUnsupportedMediaType creates a CreateScheduledPackageBulkUnsupportedMediaType with default headers values
func NewCreateScheduledPackageBulkUnsupportedMediaType() *CreateScheduledPackageBulkUnsupportedMediaType {
	return &CreateScheduledPackageBulkUnsupportedMediaType{}
}

/* CreateScheduledPackageBulkUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateScheduledPackageBulkUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *CreateScheduledPackageBulkUnsupportedMediaType) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkTooManyRequests creates a CreateScheduledPackageBulkTooManyRequests with default headers values
func NewCreateScheduledPackageBulkTooManyRequests() *CreateScheduledPackageBulkTooManyRequests {
	return &CreateScheduledPackageBulkTooManyRequests{}
}

/* CreateScheduledPackageBulkTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateScheduledPackageBulkTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkTooManyRequests  %+v", 429, o.Payload)
}
func (o *CreateScheduledPackageBulkTooManyRequests) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkInternalServerError creates a CreateScheduledPackageBulkInternalServerError with default headers values
func NewCreateScheduledPackageBulkInternalServerError() *CreateScheduledPackageBulkInternalServerError {
	return &CreateScheduledPackageBulkInternalServerError{}
}

/* CreateScheduledPackageBulkInternalServerError describes a response with status code 500, with default header values.

 Your rate limit (requests per second) for this operation.
_Note:_ For this status code, the rate limit header is deprecated and no longer returned..
*/
type CreateScheduledPackageBulkInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkInternalServerError) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateScheduledPackageBulkInternalServerError) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateScheduledPackageBulkServiceUnavailable creates a CreateScheduledPackageBulkServiceUnavailable with default headers values
func NewCreateScheduledPackageBulkServiceUnavailable() *CreateScheduledPackageBulkServiceUnavailable {
	return &CreateScheduledPackageBulkServiceUnavailable{}
}

/* CreateScheduledPackageBulkServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateScheduledPackageBulkServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *easy_ship_2022_03_23_models.ErrorList
}

func (o *CreateScheduledPackageBulkServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /easyShip/2022-03-23/packages/bulk][%d] createScheduledPackageBulkServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CreateScheduledPackageBulkServiceUnavailable) GetPayload() *easy_ship_2022_03_23_models.ErrorList {
	return o.Payload
}

func (o *CreateScheduledPackageBulkServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(easy_ship_2022_03_23_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
