// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// HandoverMethod Identifies the method by which a seller will hand a package over to Amazon Logistics.
//
// swagger:model HandoverMethod
type HandoverMethod string

func NewHandoverMethod(value HandoverMethod) *HandoverMethod {
	return &value
}

// Pointer returns a pointer to a freshly-allocated HandoverMethod.
func (m HandoverMethod) Pointer() *HandoverMethod {
	return &m
}

const (

	// HandoverMethodPickup captures enum value "Pickup"
	HandoverMethodPickup HandoverMethod = "Pickup"

	// HandoverMethodDropoff captures enum value "Dropoff"
	HandoverMethodDropoff HandoverMethod = "Dropoff"
)

// for schema
var handoverMethodEnum []interface{}

func init() {
	var res []HandoverMethod
	if err := json.Unmarshal([]byte(`["Pickup","Dropoff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		handoverMethodEnum = append(handoverMethodEnum, v)
	}
}

func (m HandoverMethod) validateHandoverMethodEnum(path, location string, value HandoverMethod) error {
	if err := validate.EnumCase(path, location, value, handoverMethodEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this handover method
func (m HandoverMethod) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateHandoverMethodEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this handover method based on context it is used
func (m HandoverMethod) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
