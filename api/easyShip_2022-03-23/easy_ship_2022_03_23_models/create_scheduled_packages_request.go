// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateScheduledPackagesRequest The request body for the POST /easyShip/2022-03-23/packages/bulk API.
//
// swagger:model CreateScheduledPackagesRequest
type CreateScheduledPackagesRequest struct {

	// label format
	// Required: true
	LabelFormat *LabelFormat `json:"labelFormat"`

	// marketplace Id
	// Required: true
	MarketplaceID *String `json:"marketplaceId"`

	// An array allowing users to specify orders to be scheduled.
	// Required: true
	// Min Items: 1
	OrderScheduleDetailsList []*OrderScheduleDetails `json:"orderScheduleDetailsList"`
}

// Validate validates this create scheduled packages request
func (m *CreateScheduledPackagesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelFormat(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderScheduleDetailsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScheduledPackagesRequest) validateLabelFormat(formats strfmt.Registry) error {

	if err := validate.Required("labelFormat", "body", m.LabelFormat); err != nil {
		return err
	}

	if err := validate.Required("labelFormat", "body", m.LabelFormat); err != nil {
		return err
	}

	if m.LabelFormat != nil {
		if err := m.LabelFormat.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelFormat")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackagesRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackagesRequest) validateOrderScheduleDetailsList(formats strfmt.Registry) error {

	if err := validate.Required("orderScheduleDetailsList", "body", m.OrderScheduleDetailsList); err != nil {
		return err
	}

	iOrderScheduleDetailsListSize := int64(len(m.OrderScheduleDetailsList))

	if err := validate.MinItems("orderScheduleDetailsList", "body", iOrderScheduleDetailsListSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.OrderScheduleDetailsList); i++ {
		if swag.IsZero(m.OrderScheduleDetailsList[i]) { // not required
			continue
		}

		if m.OrderScheduleDetailsList[i] != nil {
			if err := m.OrderScheduleDetailsList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderScheduleDetailsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderScheduleDetailsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create scheduled packages request based on the context it is used
func (m *CreateScheduledPackagesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelFormat(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderScheduleDetailsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScheduledPackagesRequest) contextValidateLabelFormat(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelFormat != nil {
		if err := m.LabelFormat.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelFormat")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelFormat")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackagesRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackagesRequest) contextValidateOrderScheduleDetailsList(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OrderScheduleDetailsList); i++ {

		if m.OrderScheduleDetailsList[i] != nil {
			if err := m.OrderScheduleDetailsList[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("orderScheduleDetailsList" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("orderScheduleDetailsList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateScheduledPackagesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateScheduledPackagesRequest) UnmarshalBinary(b []byte) error {
	var res CreateScheduledPackagesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
