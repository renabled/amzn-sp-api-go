// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateScheduledPackageRequest The request schema for the `createScheduledPackage` operation.
//
// swagger:model CreateScheduledPackageRequest
type CreateScheduledPackageRequest struct {

	// amazon order Id
	// Required: true
	AmazonOrderID *AmazonOrderID `json:"amazonOrderId"`

	// marketplace Id
	// Required: true
	MarketplaceID *String `json:"marketplaceId"`

	// package details
	// Required: true
	PackageDetails *PackageDetails `json:"packageDetails"`
}

// Validate validates this create scheduled package request
func (m *CreateScheduledPackageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScheduledPackageRequest) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("amazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if err := validate.Required("amazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackageRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackageRequest) validatePackageDetails(formats strfmt.Registry) error {

	if err := validate.Required("packageDetails", "body", m.PackageDetails); err != nil {
		return err
	}

	if m.PackageDetails != nil {
		if err := m.PackageDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create scheduled package request based on the context it is used
func (m *CreateScheduledPackageRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScheduledPackageRequest) contextValidateAmazonOrderID(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackageRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *CreateScheduledPackageRequest) contextValidatePackageDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageDetails != nil {
		if err := m.PackageDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateScheduledPackageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateScheduledPackageRequest) UnmarshalBinary(b []byte) error {
	var res CreateScheduledPackageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
