// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListHandoverSlotsRequest The request schema for the `listHandoverSlots` operation.
//
// swagger:model ListHandoverSlotsRequest
type ListHandoverSlotsRequest struct {

	// amazon order Id
	// Required: true
	AmazonOrderID *AmazonOrderID `json:"amazonOrderId"`

	// marketplace Id
	// Required: true
	MarketplaceID *String `json:"marketplaceId"`

	// package dimensions
	// Required: true
	PackageDimensions *Dimensions `json:"packageDimensions"`

	// package weight
	// Required: true
	PackageWeight *Weight `json:"packageWeight"`
}

// Validate validates this list handover slots request
func (m *ListHandoverSlotsRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListHandoverSlotsRequest) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("amazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if err := validate.Required("amazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *ListHandoverSlotsRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *ListHandoverSlotsRequest) validatePackageDimensions(formats strfmt.Registry) error {

	if err := validate.Required("packageDimensions", "body", m.PackageDimensions); err != nil {
		return err
	}

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *ListHandoverSlotsRequest) validatePackageWeight(formats strfmt.Registry) error {

	if err := validate.Required("packageWeight", "body", m.PackageWeight); err != nil {
		return err
	}

	if m.PackageWeight != nil {
		if err := m.PackageWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageWeight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list handover slots request based on the context it is used
func (m *ListHandoverSlotsRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListHandoverSlotsRequest) contextValidateAmazonOrderID(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *ListHandoverSlotsRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *ListHandoverSlotsRequest) contextValidatePackageDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *ListHandoverSlotsRequest) contextValidatePackageWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageWeight != nil {
		if err := m.PackageWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageWeight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListHandoverSlotsRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListHandoverSlotsRequest) UnmarshalBinary(b []byte) error {
	var res ListHandoverSlotsRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
