// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateScheduledPackagesResponse The response schema for the bulk scheduling API. It returns by the bulk scheduling API containing an array of the scheduled packtages, an optional list of orders we couldn't schedule with the reason, and a pre-signed URL for a ZIP file containing the associated shipping labels plus the documents enabled for your marketplace.
//
// swagger:model CreateScheduledPackagesResponse
type CreateScheduledPackagesResponse struct {

	// printable documents Url
	PrintableDocumentsURL URL `json:"printableDocumentsUrl,omitempty"`

	// A list of orders we couldn't scheduled on your behalf. Each element contains the reason and details on the error.
	RejectedOrders []*RejectedOrder `json:"rejectedOrders"`

	// A list of packages. Refer to the `Package` object.
	// Max Items: 100
	ScheduledPackages []*Package `json:"scheduledPackages"`
}

// Validate validates this create scheduled packages response
func (m *CreateScheduledPackagesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrintableDocumentsURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRejectedOrders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPackages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScheduledPackagesResponse) validatePrintableDocumentsURL(formats strfmt.Registry) error {
	if swag.IsZero(m.PrintableDocumentsURL) { // not required
		return nil
	}

	if err := m.PrintableDocumentsURL.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("printableDocumentsUrl")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("printableDocumentsUrl")
		}
		return err
	}

	return nil
}

func (m *CreateScheduledPackagesResponse) validateRejectedOrders(formats strfmt.Registry) error {
	if swag.IsZero(m.RejectedOrders) { // not required
		return nil
	}

	for i := 0; i < len(m.RejectedOrders); i++ {
		if swag.IsZero(m.RejectedOrders[i]) { // not required
			continue
		}

		if m.RejectedOrders[i] != nil {
			if err := m.RejectedOrders[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rejectedOrders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rejectedOrders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateScheduledPackagesResponse) validateScheduledPackages(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledPackages) { // not required
		return nil
	}

	iScheduledPackagesSize := int64(len(m.ScheduledPackages))

	if err := validate.MaxItems("scheduledPackages", "body", iScheduledPackagesSize, 100); err != nil {
		return err
	}

	for i := 0; i < len(m.ScheduledPackages); i++ {
		if swag.IsZero(m.ScheduledPackages[i]) { // not required
			continue
		}

		if m.ScheduledPackages[i] != nil {
			if err := m.ScheduledPackages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduledPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scheduledPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this create scheduled packages response based on the context it is used
func (m *CreateScheduledPackagesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePrintableDocumentsURL(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRejectedOrders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledPackages(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateScheduledPackagesResponse) contextValidatePrintableDocumentsURL(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PrintableDocumentsURL.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("printableDocumentsUrl")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("printableDocumentsUrl")
		}
		return err
	}

	return nil
}

func (m *CreateScheduledPackagesResponse) contextValidateRejectedOrders(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RejectedOrders); i++ {

		if m.RejectedOrders[i] != nil {
			if err := m.RejectedOrders[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rejectedOrders" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("rejectedOrders" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateScheduledPackagesResponse) contextValidateScheduledPackages(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ScheduledPackages); i++ {

		if m.ScheduledPackages[i] != nil {
			if err := m.ScheduledPackages[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scheduledPackages" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("scheduledPackages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateScheduledPackagesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateScheduledPackagesResponse) UnmarshalBinary(b []byte) error {
	var res CreateScheduledPackagesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
