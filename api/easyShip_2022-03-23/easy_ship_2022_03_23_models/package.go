// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Package A package. This object contains all the details of the scheduled Easy Ship package including the package identifier, physical attributes such as dimensions and weight, selected time slot to handover the package to carrier, status of the package, and tracking/invoice details.
//
// swagger:model Package
type Package struct {

	// invoice
	Invoice *InvoiceData `json:"invoice,omitempty"`

	// package dimensions
	// Required: true
	PackageDimensions *Dimensions `json:"packageDimensions"`

	// package identifier
	PackageIdentifier PackageIdentifier `json:"packageIdentifier,omitempty"`

	// package items
	PackageItems Items `json:"packageItems,omitempty"`

	// package status
	PackageStatus PackageStatus `json:"packageStatus,omitempty"`

	// package time slot
	// Required: true
	PackageTimeSlot *TimeSlot `json:"packageTimeSlot"`

	// package weight
	// Required: true
	PackageWeight *Weight `json:"packageWeight"`

	// scheduled package Id
	// Required: true
	ScheduledPackageID *ScheduledPackageID `json:"scheduledPackageId"`

	// tracking details
	TrackingDetails *TrackingDetails `json:"trackingDetails,omitempty"`
}

// Validate validates this package
func (m *Package) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvoice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageDimensions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageTimeSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPackageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Package) validateInvoice(formats strfmt.Registry) error {
	if swag.IsZero(m.Invoice) { // not required
		return nil
	}

	if m.Invoice != nil {
		if err := m.Invoice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoice")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validatePackageDimensions(formats strfmt.Registry) error {

	if err := validate.Required("packageDimensions", "body", m.PackageDimensions); err != nil {
		return err
	}

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validatePackageIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageIdentifier) { // not required
		return nil
	}

	if err := m.PackageIdentifier.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageIdentifier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageIdentifier")
		}
		return err
	}

	return nil
}

func (m *Package) validatePackageItems(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageItems) { // not required
		return nil
	}

	if err := m.PackageItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageItems")
		}
		return err
	}

	return nil
}

func (m *Package) validatePackageStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageStatus) { // not required
		return nil
	}

	if err := m.PackageStatus.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageStatus")
		}
		return err
	}

	return nil
}

func (m *Package) validatePackageTimeSlot(formats strfmt.Registry) error {

	if err := validate.Required("packageTimeSlot", "body", m.PackageTimeSlot); err != nil {
		return err
	}

	if m.PackageTimeSlot != nil {
		if err := m.PackageTimeSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageTimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageTimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validatePackageWeight(formats strfmt.Registry) error {

	if err := validate.Required("packageWeight", "body", m.PackageWeight); err != nil {
		return err
	}

	if m.PackageWeight != nil {
		if err := m.PackageWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageWeight")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validateScheduledPackageID(formats strfmt.Registry) error {

	if err := validate.Required("scheduledPackageId", "body", m.ScheduledPackageID); err != nil {
		return err
	}

	if m.ScheduledPackageID != nil {
		if err := m.ScheduledPackageID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledPackageId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledPackageId")
			}
			return err
		}
	}

	return nil
}

func (m *Package) validateTrackingDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TrackingDetails) { // not required
		return nil
	}

	if m.TrackingDetails != nil {
		if err := m.TrackingDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingDetails")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this package based on the context it is used
func (m *Package) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvoice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageDimensions(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageIdentifier(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageTimeSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledPackageID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Package) contextValidateInvoice(ctx context.Context, formats strfmt.Registry) error {

	if m.Invoice != nil {
		if err := m.Invoice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoice")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidatePackageDimensions(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageDimensions != nil {
		if err := m.PackageDimensions.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageDimensions")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageDimensions")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidatePackageIdentifier(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageIdentifier.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageIdentifier")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageIdentifier")
		}
		return err
	}

	return nil
}

func (m *Package) contextValidatePackageItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageItems")
		}
		return err
	}

	return nil
}

func (m *Package) contextValidatePackageStatus(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageStatus.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageStatus")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageStatus")
		}
		return err
	}

	return nil
}

func (m *Package) contextValidatePackageTimeSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageTimeSlot != nil {
		if err := m.PackageTimeSlot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageTimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageTimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidatePackageWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageWeight != nil {
		if err := m.PackageWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageWeight")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidateScheduledPackageID(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduledPackageID != nil {
		if err := m.ScheduledPackageID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledPackageId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledPackageId")
			}
			return err
		}
	}

	return nil
}

func (m *Package) contextValidateTrackingDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TrackingDetails != nil {
		if err := m.TrackingDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingDetails")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Package) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Package) UnmarshalBinary(b []byte) error {
	var res Package
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
