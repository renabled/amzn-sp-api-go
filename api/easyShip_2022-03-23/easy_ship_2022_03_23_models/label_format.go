// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// LabelFormat The file format in which the shipping label will be created.
//
// swagger:model LabelFormat
type LabelFormat string

func NewLabelFormat(value LabelFormat) *LabelFormat {
	return &value
}

// Pointer returns a pointer to a freshly-allocated LabelFormat.
func (m LabelFormat) Pointer() *LabelFormat {
	return &m
}

const (

	// LabelFormatPDF captures enum value "PDF"
	LabelFormatPDF LabelFormat = "PDF"

	// LabelFormatZPL captures enum value "ZPL"
	LabelFormatZPL LabelFormat = "ZPL"
)

// for schema
var labelFormatEnum []interface{}

func init() {
	var res []LabelFormat
	if err := json.Unmarshal([]byte(`["PDF","ZPL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		labelFormatEnum = append(labelFormatEnum, v)
	}
}

func (m LabelFormat) validateLabelFormatEnum(path, location string, value LabelFormat) error {
	if err := validate.EnumCase(path, location, value, labelFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this label format
func (m LabelFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateLabelFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this label format based on context it is used
func (m LabelFormat) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
