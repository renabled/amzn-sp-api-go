// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InvoiceData Invoice number and date.
//
// swagger:model InvoiceData
type InvoiceData struct {

	// The date that the invoice was generated.
	// Format: date-time
	InvoiceDate DateTime `json:"invoiceDate,omitempty"`

	// The invoice number.
	// Required: true
	InvoiceNumber *String `json:"invoiceNumber"`
}

// Validate validates this invoice data
func (m *InvoiceData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInvoiceDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceNumber(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceData) validateInvoiceDate(formats strfmt.Registry) error {
	if swag.IsZero(m.InvoiceDate) { // not required
		return nil
	}

	if err := m.InvoiceDate.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("invoiceDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("invoiceDate")
		}
		return err
	}

	return nil
}

func (m *InvoiceData) validateInvoiceNumber(formats strfmt.Registry) error {

	if err := validate.Required("invoiceNumber", "body", m.InvoiceNumber); err != nil {
		return err
	}

	if err := validate.Required("invoiceNumber", "body", m.InvoiceNumber); err != nil {
		return err
	}

	if m.InvoiceNumber != nil {
		if err := m.InvoiceNumber.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoiceNumber")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this invoice data based on the context it is used
func (m *InvoiceData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvoiceDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateInvoiceNumber(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InvoiceData) contextValidateInvoiceDate(ctx context.Context, formats strfmt.Registry) error {

	if err := m.InvoiceDate.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("invoiceDate")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("invoiceDate")
		}
		return err
	}

	return nil
}

func (m *InvoiceData) contextValidateInvoiceNumber(ctx context.Context, formats strfmt.Registry) error {

	if m.InvoiceNumber != nil {
		if err := m.InvoiceNumber.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invoiceNumber")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invoiceNumber")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InvoiceData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InvoiceData) UnmarshalBinary(b []byte) error {
	var res InvoiceData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
