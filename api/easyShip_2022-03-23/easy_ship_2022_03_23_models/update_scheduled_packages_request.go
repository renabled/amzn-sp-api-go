// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateScheduledPackagesRequest The request schema for the `updateScheduledPackages` operation.
//
// swagger:model UpdateScheduledPackagesRequest
type UpdateScheduledPackagesRequest struct {

	// marketplace Id
	// Required: true
	MarketplaceID *String `json:"marketplaceId"`

	// update package details list
	// Required: true
	UpdatePackageDetailsList UpdatePackageDetailsList `json:"updatePackageDetailsList"`
}

// Validate validates this update scheduled packages request
func (m *UpdateScheduledPackagesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatePackageDetailsList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateScheduledPackagesRequest) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateScheduledPackagesRequest) validateUpdatePackageDetailsList(formats strfmt.Registry) error {

	if err := validate.Required("updatePackageDetailsList", "body", m.UpdatePackageDetailsList); err != nil {
		return err
	}

	if err := m.UpdatePackageDetailsList.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updatePackageDetailsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updatePackageDetailsList")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update scheduled packages request based on the context it is used
func (m *UpdateScheduledPackagesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMarketplaceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpdatePackageDetailsList(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateScheduledPackagesRequest) contextValidateMarketplaceID(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceID != nil {
		if err := m.MarketplaceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("marketplaceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("marketplaceId")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateScheduledPackagesRequest) contextValidateUpdatePackageDetailsList(ctx context.Context, formats strfmt.Registry) error {

	if err := m.UpdatePackageDetailsList.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updatePackageDetailsList")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("updatePackageDetailsList")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateScheduledPackagesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateScheduledPackagesRequest) UnmarshalBinary(b []byte) error {
	var res UpdateScheduledPackagesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
