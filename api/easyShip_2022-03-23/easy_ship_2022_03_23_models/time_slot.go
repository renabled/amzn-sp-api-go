// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeSlot A time window to hand over an Easy Ship package to Amazon Logistics.
//
// swagger:model TimeSlot
type TimeSlot struct {

	// The end date and time of the time slot.
	// Format: date-time
	EndTime DateTime `json:"endTime,omitempty"`

	// The method by which a seller will hand a package over to Amazon Logistics.
	HandoverMethod HandoverMethod `json:"handoverMethod,omitempty"`

	// An Amazon-defined identifier for a time slot.
	// Required: true
	SlotID *String `json:"slotId"`

	// The start date and time of the time slot.
	// Format: date-time
	StartTime DateTime `json:"startTime,omitempty"`
}

// Validate validates this time slot
func (m *TimeSlot) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHandoverMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSlot) validateEndTime(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := m.EndTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("endTime")
		}
		return err
	}

	return nil
}

func (m *TimeSlot) validateHandoverMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.HandoverMethod) { // not required
		return nil
	}

	if err := m.HandoverMethod.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("handoverMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("handoverMethod")
		}
		return err
	}

	return nil
}

func (m *TimeSlot) validateSlotID(formats strfmt.Registry) error {

	if err := validate.Required("slotId", "body", m.SlotID); err != nil {
		return err
	}

	if err := validate.Required("slotId", "body", m.SlotID); err != nil {
		return err
	}

	if m.SlotID != nil {
		if err := m.SlotID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slotId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slotId")
			}
			return err
		}
	}

	return nil
}

func (m *TimeSlot) validateStartTime(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := m.StartTime.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("startTime")
		}
		return err
	}

	return nil
}

// ContextValidate validate this time slot based on the context it is used
func (m *TimeSlot) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHandoverMethod(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSlotID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TimeSlot) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("endTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("endTime")
		}
		return err
	}

	return nil
}

func (m *TimeSlot) contextValidateHandoverMethod(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HandoverMethod.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("handoverMethod")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("handoverMethod")
		}
		return err
	}

	return nil
}

func (m *TimeSlot) contextValidateSlotID(ctx context.Context, formats strfmt.Registry) error {

	if m.SlotID != nil {
		if err := m.SlotID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("slotId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("slotId")
			}
			return err
		}
	}

	return nil
}

func (m *TimeSlot) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("startTime")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("startTime")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TimeSlot) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeSlot) UnmarshalBinary(b []byte) error {
	var res TimeSlot
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
