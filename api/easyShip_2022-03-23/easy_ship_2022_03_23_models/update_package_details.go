// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdatePackageDetails Request to update the time slot of a package.
//
// swagger:model UpdatePackageDetails
type UpdatePackageDetails struct {

	// package time slot
	// Required: true
	PackageTimeSlot *TimeSlot `json:"packageTimeSlot"`

	// scheduled package Id
	// Required: true
	ScheduledPackageID *ScheduledPackageID `json:"scheduledPackageId"`
}

// Validate validates this update package details
func (m *UpdatePackageDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePackageTimeSlot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledPackageID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePackageDetails) validatePackageTimeSlot(formats strfmt.Registry) error {

	if err := validate.Required("packageTimeSlot", "body", m.PackageTimeSlot); err != nil {
		return err
	}

	if m.PackageTimeSlot != nil {
		if err := m.PackageTimeSlot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageTimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageTimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePackageDetails) validateScheduledPackageID(formats strfmt.Registry) error {

	if err := validate.Required("scheduledPackageId", "body", m.ScheduledPackageID); err != nil {
		return err
	}

	if m.ScheduledPackageID != nil {
		if err := m.ScheduledPackageID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledPackageId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledPackageId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update package details based on the context it is used
func (m *UpdatePackageDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePackageTimeSlot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledPackageID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdatePackageDetails) contextValidatePackageTimeSlot(ctx context.Context, formats strfmt.Registry) error {

	if m.PackageTimeSlot != nil {
		if err := m.PackageTimeSlot.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("packageTimeSlot")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("packageTimeSlot")
			}
			return err
		}
	}

	return nil
}

func (m *UpdatePackageDetails) contextValidateScheduledPackageID(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduledPackageID != nil {
		if err := m.ScheduledPackageID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledPackageId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledPackageId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdatePackageDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdatePackageDetails) UnmarshalBinary(b []byte) error {
	var res UpdatePackageDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
