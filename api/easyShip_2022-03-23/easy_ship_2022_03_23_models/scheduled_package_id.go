// Code generated by go-swagger; DO NOT EDIT.

package easy_ship_2022_03_23_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduledPackageID Identifies the scheduled package to be updated.
//
// swagger:model ScheduledPackageId
type ScheduledPackageID struct {

	// amazon order Id
	// Required: true
	AmazonOrderID *AmazonOrderID `json:"amazonOrderId"`

	// package Id
	PackageID PackageID `json:"packageId,omitempty"`
}

// Validate validates this scheduled package Id
func (m *ScheduledPackageID) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmazonOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackageID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledPackageID) validateAmazonOrderID(formats strfmt.Registry) error {

	if err := validate.Required("amazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if err := validate.Required("amazonOrderId", "body", m.AmazonOrderID); err != nil {
		return err
	}

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduledPackageID) validatePackageID(formats strfmt.Registry) error {
	if swag.IsZero(m.PackageID) { // not required
		return nil
	}

	if err := m.PackageID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this scheduled package Id based on the context it is used
func (m *ScheduledPackageID) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAmazonOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePackageID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScheduledPackageID) contextValidateAmazonOrderID(ctx context.Context, formats strfmt.Registry) error {

	if m.AmazonOrderID != nil {
		if err := m.AmazonOrderID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("amazonOrderId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("amazonOrderId")
			}
			return err
		}
	}

	return nil
}

func (m *ScheduledPackageID) contextValidatePackageID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PackageID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("packageId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("packageId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScheduledPackageID) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduledPackageID) UnmarshalBinary(b []byte) error {
	var res ScheduledPackageID
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
