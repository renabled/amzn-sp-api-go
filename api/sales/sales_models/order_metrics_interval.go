// Code generated by go-swagger; DO NOT EDIT.

package sales_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderMetricsInterval Contains order metrics.
//
// swagger:model OrderMetricsInterval
type OrderMetricsInterval struct {

	// The average price for an item based on the specified filters. Formula is totalSales/unitCount.
	// Required: true
	AverageUnitPrice *Money `json:"averageUnitPrice"`

	// The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn't align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z--2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data).
	// Required: true
	Interval *string `json:"interval"`

	// The number of orders based on the specified filters.
	// Required: true
	OrderCount *int64 `json:"orderCount"`

	// The number of order items based on the specified filters.
	// Required: true
	OrderItemCount *int64 `json:"orderItemCount"`

	// The total ordered product sales for all orders based on the specified filters.
	// Required: true
	TotalSales *Money `json:"totalSales"`

	// The number of units in orders based on the specified filters.
	// Required: true
	UnitCount *int64 `json:"unitCount"`
}

// Validate validates this order metrics interval
func (m *OrderMetricsInterval) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAverageUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderItemCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSales(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitCount(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderMetricsInterval) validateAverageUnitPrice(formats strfmt.Registry) error {

	if err := validate.Required("averageUnitPrice", "body", m.AverageUnitPrice); err != nil {
		return err
	}

	if m.AverageUnitPrice != nil {
		if err := m.AverageUnitPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("averageUnitPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("averageUnitPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderMetricsInterval) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *OrderMetricsInterval) validateOrderCount(formats strfmt.Registry) error {

	if err := validate.Required("orderCount", "body", m.OrderCount); err != nil {
		return err
	}

	return nil
}

func (m *OrderMetricsInterval) validateOrderItemCount(formats strfmt.Registry) error {

	if err := validate.Required("orderItemCount", "body", m.OrderItemCount); err != nil {
		return err
	}

	return nil
}

func (m *OrderMetricsInterval) validateTotalSales(formats strfmt.Registry) error {

	if err := validate.Required("totalSales", "body", m.TotalSales); err != nil {
		return err
	}

	if m.TotalSales != nil {
		if err := m.TotalSales.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalSales")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalSales")
			}
			return err
		}
	}

	return nil
}

func (m *OrderMetricsInterval) validateUnitCount(formats strfmt.Registry) error {

	if err := validate.Required("unitCount", "body", m.UnitCount); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this order metrics interval based on the context it is used
func (m *OrderMetricsInterval) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAverageUnitPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalSales(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderMetricsInterval) contextValidateAverageUnitPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.AverageUnitPrice != nil {
		if err := m.AverageUnitPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("averageUnitPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("averageUnitPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderMetricsInterval) contextValidateTotalSales(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalSales != nil {
		if err := m.TotalSales.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalSales")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalSales")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderMetricsInterval) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderMetricsInterval) UnmarshalBinary(b []byte) error {
	var res OrderMetricsInterval
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
