// Code generated by go-swagger; DO NOT EDIT.

package sales

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/sales/sales_models"
)

// GetOrderMetricsReader is a Reader for the GetOrderMetrics structure.
type GetOrderMetricsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrderMetricsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrderMetricsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOrderMetricsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrderMetricsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrderMetricsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetOrderMetricsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOrderMetricsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOrderMetricsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrderMetricsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOrderMetricsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrderMetricsOK creates a GetOrderMetricsOK with default headers values
func NewGetOrderMetricsOK() *GetOrderMetricsOK {
	return &GetOrderMetricsOK{}
}

/*
GetOrderMetricsOK describes a response with status code 200, with default header values.

OrderMetric action taken on the resource OrderMetrics.
*/
type GetOrderMetricsOK struct {

	/* Your rate limit (requests per second) for this operation..
	 */
	XAmznRateLimitLimit string

	/* unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics o k response has a 2xx status code
func (o *GetOrderMetricsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get order metrics o k response has a 3xx status code
func (o *GetOrderMetricsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics o k response has a 4xx status code
func (o *GetOrderMetricsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order metrics o k response has a 5xx status code
func (o *GetOrderMetricsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics o k response a status code equal to that given
func (o *GetOrderMetricsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOrderMetricsOK) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsOK  %+v", 200, o.Payload)
}

func (o *GetOrderMetricsOK) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsOK  %+v", 200, o.Payload)
}

func (o *GetOrderMetricsOK) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsBadRequest creates a GetOrderMetricsBadRequest with default headers values
func NewGetOrderMetricsBadRequest() *GetOrderMetricsBadRequest {
	return &GetOrderMetricsBadRequest{}
}

/*
GetOrderMetricsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetOrderMetricsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics bad request response has a 2xx status code
func (o *GetOrderMetricsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics bad request response has a 3xx status code
func (o *GetOrderMetricsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics bad request response has a 4xx status code
func (o *GetOrderMetricsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order metrics bad request response has a 5xx status code
func (o *GetOrderMetricsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics bad request response a status code equal to that given
func (o *GetOrderMetricsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOrderMetricsBadRequest) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrderMetricsBadRequest) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrderMetricsBadRequest) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsForbidden creates a GetOrderMetricsForbidden with default headers values
func NewGetOrderMetricsForbidden() *GetOrderMetricsForbidden {
	return &GetOrderMetricsForbidden{}
}

/*
GetOrderMetricsForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type GetOrderMetricsForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics forbidden response has a 2xx status code
func (o *GetOrderMetricsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics forbidden response has a 3xx status code
func (o *GetOrderMetricsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics forbidden response has a 4xx status code
func (o *GetOrderMetricsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order metrics forbidden response has a 5xx status code
func (o *GetOrderMetricsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics forbidden response a status code equal to that given
func (o *GetOrderMetricsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOrderMetricsForbidden) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsForbidden  %+v", 403, o.Payload)
}

func (o *GetOrderMetricsForbidden) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsForbidden  %+v", 403, o.Payload)
}

func (o *GetOrderMetricsForbidden) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsNotFound creates a GetOrderMetricsNotFound with default headers values
func NewGetOrderMetricsNotFound() *GetOrderMetricsNotFound {
	return &GetOrderMetricsNotFound{}
}

/*
GetOrderMetricsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetOrderMetricsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics not found response has a 2xx status code
func (o *GetOrderMetricsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics not found response has a 3xx status code
func (o *GetOrderMetricsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics not found response has a 4xx status code
func (o *GetOrderMetricsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order metrics not found response has a 5xx status code
func (o *GetOrderMetricsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics not found response a status code equal to that given
func (o *GetOrderMetricsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOrderMetricsNotFound) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderMetricsNotFound) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderMetricsNotFound) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsRequestEntityTooLarge creates a GetOrderMetricsRequestEntityTooLarge with default headers values
func NewGetOrderMetricsRequestEntityTooLarge() *GetOrderMetricsRequestEntityTooLarge {
	return &GetOrderMetricsRequestEntityTooLarge{}
}

/*
GetOrderMetricsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetOrderMetricsRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics request entity too large response has a 2xx status code
func (o *GetOrderMetricsRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics request entity too large response has a 3xx status code
func (o *GetOrderMetricsRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics request entity too large response has a 4xx status code
func (o *GetOrderMetricsRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order metrics request entity too large response has a 5xx status code
func (o *GetOrderMetricsRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics request entity too large response a status code equal to that given
func (o *GetOrderMetricsRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *GetOrderMetricsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOrderMetricsRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *GetOrderMetricsRequestEntityTooLarge) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsUnsupportedMediaType creates a GetOrderMetricsUnsupportedMediaType with default headers values
func NewGetOrderMetricsUnsupportedMediaType() *GetOrderMetricsUnsupportedMediaType {
	return &GetOrderMetricsUnsupportedMediaType{}
}

/*
GetOrderMetricsUnsupportedMediaType describes a response with status code 415, with default header values.

The entity of the request is in a format not supported by the requested resource.
*/
type GetOrderMetricsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics unsupported media type response has a 2xx status code
func (o *GetOrderMetricsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics unsupported media type response has a 3xx status code
func (o *GetOrderMetricsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics unsupported media type response has a 4xx status code
func (o *GetOrderMetricsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order metrics unsupported media type response has a 5xx status code
func (o *GetOrderMetricsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics unsupported media type response a status code equal to that given
func (o *GetOrderMetricsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOrderMetricsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOrderMetricsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOrderMetricsUnsupportedMediaType) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsTooManyRequests creates a GetOrderMetricsTooManyRequests with default headers values
func NewGetOrderMetricsTooManyRequests() *GetOrderMetricsTooManyRequests {
	return &GetOrderMetricsTooManyRequests{}
}

/*
GetOrderMetricsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetOrderMetricsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics too many requests response has a 2xx status code
func (o *GetOrderMetricsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics too many requests response has a 3xx status code
func (o *GetOrderMetricsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics too many requests response has a 4xx status code
func (o *GetOrderMetricsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order metrics too many requests response has a 5xx status code
func (o *GetOrderMetricsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get order metrics too many requests response a status code equal to that given
func (o *GetOrderMetricsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOrderMetricsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOrderMetricsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOrderMetricsTooManyRequests) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsInternalServerError creates a GetOrderMetricsInternalServerError with default headers values
func NewGetOrderMetricsInternalServerError() *GetOrderMetricsInternalServerError {
	return &GetOrderMetricsInternalServerError{}
}

/*
GetOrderMetricsInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type GetOrderMetricsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics internal server error response has a 2xx status code
func (o *GetOrderMetricsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics internal server error response has a 3xx status code
func (o *GetOrderMetricsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics internal server error response has a 4xx status code
func (o *GetOrderMetricsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order metrics internal server error response has a 5xx status code
func (o *GetOrderMetricsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get order metrics internal server error response a status code equal to that given
func (o *GetOrderMetricsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOrderMetricsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOrderMetricsInternalServerError) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOrderMetricsInternalServerError) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderMetricsServiceUnavailable creates a GetOrderMetricsServiceUnavailable with default headers values
func NewGetOrderMetricsServiceUnavailable() *GetOrderMetricsServiceUnavailable {
	return &GetOrderMetricsServiceUnavailable{}
}

/*
GetOrderMetricsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetOrderMetricsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *sales_models.GetOrderMetricsResponse
}

// IsSuccess returns true when this get order metrics service unavailable response has a 2xx status code
func (o *GetOrderMetricsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order metrics service unavailable response has a 3xx status code
func (o *GetOrderMetricsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order metrics service unavailable response has a 4xx status code
func (o *GetOrderMetricsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order metrics service unavailable response has a 5xx status code
func (o *GetOrderMetricsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get order metrics service unavailable response a status code equal to that given
func (o *GetOrderMetricsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOrderMetricsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOrderMetricsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /sales/v1/orderMetrics][%d] getOrderMetricsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOrderMetricsServiceUnavailable) GetPayload() *sales_models.GetOrderMetricsResponse {
	return o.Payload
}

func (o *GetOrderMetricsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(sales_models.GetOrderMetricsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
