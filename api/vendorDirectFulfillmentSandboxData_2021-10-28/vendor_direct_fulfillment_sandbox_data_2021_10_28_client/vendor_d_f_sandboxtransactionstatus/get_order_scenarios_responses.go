// Code generated by go-swagger; DO NOT EDIT.

package vendor_d_f_sandboxtransactionstatus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/vendorDirectFulfillmentSandboxData_2021-10-28/vendor_direct_fulfillment_sandbox_data_2021_10_28_models"
)

// GetOrderScenariosReader is a Reader for the GetOrderScenarios structure.
type GetOrderScenariosReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetOrderScenariosReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetOrderScenariosOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetOrderScenariosBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetOrderScenariosUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetOrderScenariosForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetOrderScenariosNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetOrderScenariosUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetOrderScenariosTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetOrderScenariosInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetOrderScenariosServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetOrderScenariosOK creates a GetOrderScenariosOK with default headers values
func NewGetOrderScenariosOK() *GetOrderScenariosOK {
	return &GetOrderScenariosOK{}
}

/*
GetOrderScenariosOK describes a response with status code 200, with default header values.

Success.
*/
type GetOrderScenariosOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.TransactionStatus
}

// IsSuccess returns true when this get order scenarios o k response has a 2xx status code
func (o *GetOrderScenariosOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get order scenarios o k response has a 3xx status code
func (o *GetOrderScenariosOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios o k response has a 4xx status code
func (o *GetOrderScenariosOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order scenarios o k response has a 5xx status code
func (o *GetOrderScenariosOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios o k response a status code equal to that given
func (o *GetOrderScenariosOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetOrderScenariosOK) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosOK  %+v", 200, o.Payload)
}

func (o *GetOrderScenariosOK) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosOK  %+v", 200, o.Payload)
}

func (o *GetOrderScenariosOK) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.TransactionStatus {
	return o.Payload
}

func (o *GetOrderScenariosOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.TransactionStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosBadRequest creates a GetOrderScenariosBadRequest with default headers values
func NewGetOrderScenariosBadRequest() *GetOrderScenariosBadRequest {
	return &GetOrderScenariosBadRequest{}
}

/*
GetOrderScenariosBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetOrderScenariosBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios bad request response has a 2xx status code
func (o *GetOrderScenariosBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios bad request response has a 3xx status code
func (o *GetOrderScenariosBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios bad request response has a 4xx status code
func (o *GetOrderScenariosBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order scenarios bad request response has a 5xx status code
func (o *GetOrderScenariosBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios bad request response a status code equal to that given
func (o *GetOrderScenariosBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetOrderScenariosBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrderScenariosBadRequest) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosBadRequest  %+v", 400, o.Payload)
}

func (o *GetOrderScenariosBadRequest) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosUnauthorized creates a GetOrderScenariosUnauthorized with default headers values
func NewGetOrderScenariosUnauthorized() *GetOrderScenariosUnauthorized {
	return &GetOrderScenariosUnauthorized{}
}

/*
GetOrderScenariosUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetOrderScenariosUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios unauthorized response has a 2xx status code
func (o *GetOrderScenariosUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios unauthorized response has a 3xx status code
func (o *GetOrderScenariosUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios unauthorized response has a 4xx status code
func (o *GetOrderScenariosUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order scenarios unauthorized response has a 5xx status code
func (o *GetOrderScenariosUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios unauthorized response a status code equal to that given
func (o *GetOrderScenariosUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetOrderScenariosUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOrderScenariosUnauthorized) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosUnauthorized  %+v", 401, o.Payload)
}

func (o *GetOrderScenariosUnauthorized) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosForbidden creates a GetOrderScenariosForbidden with default headers values
func NewGetOrderScenariosForbidden() *GetOrderScenariosForbidden {
	return &GetOrderScenariosForbidden{}
}

/*
GetOrderScenariosForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetOrderScenariosForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios forbidden response has a 2xx status code
func (o *GetOrderScenariosForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios forbidden response has a 3xx status code
func (o *GetOrderScenariosForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios forbidden response has a 4xx status code
func (o *GetOrderScenariosForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order scenarios forbidden response has a 5xx status code
func (o *GetOrderScenariosForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios forbidden response a status code equal to that given
func (o *GetOrderScenariosForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetOrderScenariosForbidden) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosForbidden  %+v", 403, o.Payload)
}

func (o *GetOrderScenariosForbidden) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosForbidden  %+v", 403, o.Payload)
}

func (o *GetOrderScenariosForbidden) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosNotFound creates a GetOrderScenariosNotFound with default headers values
func NewGetOrderScenariosNotFound() *GetOrderScenariosNotFound {
	return &GetOrderScenariosNotFound{}
}

/*
GetOrderScenariosNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetOrderScenariosNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios not found response has a 2xx status code
func (o *GetOrderScenariosNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios not found response has a 3xx status code
func (o *GetOrderScenariosNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios not found response has a 4xx status code
func (o *GetOrderScenariosNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order scenarios not found response has a 5xx status code
func (o *GetOrderScenariosNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios not found response a status code equal to that given
func (o *GetOrderScenariosNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetOrderScenariosNotFound) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderScenariosNotFound) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosNotFound  %+v", 404, o.Payload)
}

func (o *GetOrderScenariosNotFound) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosUnsupportedMediaType creates a GetOrderScenariosUnsupportedMediaType with default headers values
func NewGetOrderScenariosUnsupportedMediaType() *GetOrderScenariosUnsupportedMediaType {
	return &GetOrderScenariosUnsupportedMediaType{}
}

/*
GetOrderScenariosUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetOrderScenariosUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios unsupported media type response has a 2xx status code
func (o *GetOrderScenariosUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios unsupported media type response has a 3xx status code
func (o *GetOrderScenariosUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios unsupported media type response has a 4xx status code
func (o *GetOrderScenariosUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order scenarios unsupported media type response has a 5xx status code
func (o *GetOrderScenariosUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios unsupported media type response a status code equal to that given
func (o *GetOrderScenariosUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetOrderScenariosUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOrderScenariosUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetOrderScenariosUnsupportedMediaType) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosTooManyRequests creates a GetOrderScenariosTooManyRequests with default headers values
func NewGetOrderScenariosTooManyRequests() *GetOrderScenariosTooManyRequests {
	return &GetOrderScenariosTooManyRequests{}
}

/*
GetOrderScenariosTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetOrderScenariosTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios too many requests response has a 2xx status code
func (o *GetOrderScenariosTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios too many requests response has a 3xx status code
func (o *GetOrderScenariosTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios too many requests response has a 4xx status code
func (o *GetOrderScenariosTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get order scenarios too many requests response has a 5xx status code
func (o *GetOrderScenariosTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get order scenarios too many requests response a status code equal to that given
func (o *GetOrderScenariosTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetOrderScenariosTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOrderScenariosTooManyRequests) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetOrderScenariosTooManyRequests) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosInternalServerError creates a GetOrderScenariosInternalServerError with default headers values
func NewGetOrderScenariosInternalServerError() *GetOrderScenariosInternalServerError {
	return &GetOrderScenariosInternalServerError{}
}

/*
GetOrderScenariosInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetOrderScenariosInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios internal server error response has a 2xx status code
func (o *GetOrderScenariosInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios internal server error response has a 3xx status code
func (o *GetOrderScenariosInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios internal server error response has a 4xx status code
func (o *GetOrderScenariosInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order scenarios internal server error response has a 5xx status code
func (o *GetOrderScenariosInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get order scenarios internal server error response a status code equal to that given
func (o *GetOrderScenariosInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetOrderScenariosInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOrderScenariosInternalServerError) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosInternalServerError  %+v", 500, o.Payload)
}

func (o *GetOrderScenariosInternalServerError) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetOrderScenariosServiceUnavailable creates a GetOrderScenariosServiceUnavailable with default headers values
func NewGetOrderScenariosServiceUnavailable() *GetOrderScenariosServiceUnavailable {
	return &GetOrderScenariosServiceUnavailable{}
}

/*
GetOrderScenariosServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetOrderScenariosServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList
}

// IsSuccess returns true when this get order scenarios service unavailable response has a 2xx status code
func (o *GetOrderScenariosServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get order scenarios service unavailable response has a 3xx status code
func (o *GetOrderScenariosServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get order scenarios service unavailable response has a 4xx status code
func (o *GetOrderScenariosServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get order scenarios service unavailable response has a 5xx status code
func (o *GetOrderScenariosServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get order scenarios service unavailable response a status code equal to that given
func (o *GetOrderScenariosServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetOrderScenariosServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOrderScenariosServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/sandbox/2021-10-28/transactions/{transactionId}][%d] getOrderScenariosServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetOrderScenariosServiceUnavailable) GetPayload() *vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList {
	return o.Payload
}

func (o *GetOrderScenariosServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_sandbox_data_2021_10_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
