// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_sandbox_data_2021_10_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Transaction The transaction details including the status. If the transaction was successful, also includes the requested test order data.
//
// swagger:model Transaction
type Transaction struct {

	// The current processing status of the transaction.
	// Required: true
	// Enum: [FAILURE PROCESSING SUCCESS]
	Status *string `json:"status"`

	// Test case data for the transaction. Only available when the transaction status is SUCCESS.
	TestCaseData *TestCaseData `json:"testCaseData,omitempty"`

	// The unique identifier returned in the response to the generateOrderScenarios request.
	// Required: true
	TransactionID *string `json:"transactionId"`
}

// Validate validates this transaction
func (m *Transaction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestCaseData(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var transactionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAILURE","PROCESSING","SUCCESS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transactionTypeStatusPropEnum = append(transactionTypeStatusPropEnum, v)
	}
}

const (

	// TransactionStatusFAILURE captures enum value "FAILURE"
	TransactionStatusFAILURE string = "FAILURE"

	// TransactionStatusPROCESSING captures enum value "PROCESSING"
	TransactionStatusPROCESSING string = "PROCESSING"

	// TransactionStatusSUCCESS captures enum value "SUCCESS"
	TransactionStatusSUCCESS string = "SUCCESS"
)

// prop value enum
func (m *Transaction) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, transactionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Transaction) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Transaction) validateTestCaseData(formats strfmt.Registry) error {
	if swag.IsZero(m.TestCaseData) { // not required
		return nil
	}

	if m.TestCaseData != nil {
		if err := m.TestCaseData.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testCaseData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("testCaseData")
			}
			return err
		}
	}

	return nil
}

func (m *Transaction) validateTransactionID(formats strfmt.Registry) error {

	if err := validate.Required("transactionId", "body", m.TransactionID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this transaction based on the context it is used
func (m *Transaction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTestCaseData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Transaction) contextValidateTestCaseData(ctx context.Context, formats strfmt.Registry) error {

	if m.TestCaseData != nil {
		if err := m.TestCaseData.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("testCaseData")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("testCaseData")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Transaction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Transaction) UnmarshalBinary(b []byte) error {
	var res Transaction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
