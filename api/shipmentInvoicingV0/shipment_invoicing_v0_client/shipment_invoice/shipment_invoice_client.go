// Code generated by go-swagger; DO NOT EDIT.

package shipment_invoice

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new shipment invoice API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for shipment invoice API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	GetInvoiceStatus(params *GetInvoiceStatusParams, opts ...ClientOption) (*GetInvoiceStatusOK, error)

	GetShipmentDetails(params *GetShipmentDetailsParams, opts ...ClientOption) (*GetShipmentDetailsOK, error)

	SubmitInvoice(params *SubmitInvoiceParams, opts ...ClientOption) (*SubmitInvoiceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
	GetInvoiceStatus Returns the invoice status for the shipment you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1.133 | 25 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetInvoiceStatus(params *GetInvoiceStatusParams, opts ...ClientOption) (*GetInvoiceStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInvoiceStatusParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInvoiceStatus",
		Method:             "GET",
		PathPattern:        "/fba/outbound/brazil/v0/shipments/{shipmentId}/invoice/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInvoiceStatusReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInvoiceStatusOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getInvoiceStatus: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	GetShipmentDetails Returns the shipment details required to issue an invoice for the specified shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1.133 | 25 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) GetShipmentDetails(params *GetShipmentDetailsParams, opts ...ClientOption) (*GetShipmentDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetShipmentDetailsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getShipmentDetails",
		Method:             "GET",
		PathPattern:        "/fba/outbound/brazil/v0/shipments/{shipmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetShipmentDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetShipmentDetailsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getShipmentDetails: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
	SubmitInvoice Submits a shipment invoice document for a given shipment.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 1.133 | 25 |

The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
*/
func (a *Client) SubmitInvoice(params *SubmitInvoiceParams, opts ...ClientOption) (*SubmitInvoiceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubmitInvoiceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "submitInvoice",
		Method:             "POST",
		PathPattern:        "/fba/outbound/brazil/v0/shipments/{shipmentId}/invoice",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SubmitInvoiceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubmitInvoiceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for submitInvoice: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
