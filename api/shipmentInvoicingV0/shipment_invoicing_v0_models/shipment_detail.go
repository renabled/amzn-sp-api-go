// Code generated by go-swagger; DO NOT EDIT.

package shipment_invoicing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentDetail The information required by a selling partner to issue a shipment invoice.
//
// swagger:model ShipmentDetail
type ShipmentDetail struct {

	// The Amazon-defined identifier for the order.
	AmazonOrderID string `json:"AmazonOrderId,omitempty"`

	// The Amazon-defined identifier for the shipment.
	AmazonShipmentID string `json:"AmazonShipmentId,omitempty"`

	// The county of the buyer.
	BuyerCounty string `json:"BuyerCounty,omitempty"`

	// The name of the buyer.
	BuyerName string `json:"BuyerName,omitempty"`

	// buyer tax info
	BuyerTaxInfo *BuyerTaxInfo `json:"BuyerTaxInfo,omitempty"`

	// The identifier for the marketplace where the order was placed.
	MarketplaceID string `json:"MarketplaceId,omitempty"`

	// marketplace tax info
	MarketplaceTaxInfo *MarketplaceTaxInfo `json:"MarketplaceTaxInfo,omitempty"`

	// payment method details
	PaymentMethodDetails PaymentMethodDetailItemList `json:"PaymentMethodDetails,omitempty"`

	// The date and time when the order was created.
	// Format: date-time
	PurchaseDate strfmt.DateTime `json:"PurchaseDate,omitempty"`

	// The sellerâ€™s friendly name registered in the marketplace.
	SellerDisplayName string `json:"SellerDisplayName,omitempty"`

	// The seller identifier.
	SellerID string `json:"SellerId,omitempty"`

	// shipment items
	ShipmentItems ShipmentItems `json:"ShipmentItems,omitempty"`

	// shipping address
	ShippingAddress *Address `json:"ShippingAddress,omitempty"`

	// The Amazon-defined identifier for the warehouse.
	WarehouseID string `json:"WarehouseId,omitempty"`
}

// Validate validates this shipment detail
func (m *ShipmentDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyerTaxInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceTaxInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaymentMethodDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingAddress(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentDetail) validateBuyerTaxInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BuyerTaxInfo) { // not required
		return nil
	}

	if m.BuyerTaxInfo != nil {
		if err := m.BuyerTaxInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuyerTaxInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BuyerTaxInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentDetail) validateMarketplaceTaxInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketplaceTaxInfo) { // not required
		return nil
	}

	if m.MarketplaceTaxInfo != nil {
		if err := m.MarketplaceTaxInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MarketplaceTaxInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MarketplaceTaxInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentDetail) validatePaymentMethodDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.PaymentMethodDetails) { // not required
		return nil
	}

	if err := m.PaymentMethodDetails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PaymentMethodDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PaymentMethodDetails")
		}
		return err
	}

	return nil
}

func (m *ShipmentDetail) validatePurchaseDate(formats strfmt.Registry) error {
	if swag.IsZero(m.PurchaseDate) { // not required
		return nil
	}

	if err := validate.FormatOf("PurchaseDate", "body", "date-time", m.PurchaseDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDetail) validateShipmentItems(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipmentItems) { // not required
		return nil
	}

	if err := m.ShipmentItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentItems")
		}
		return err
	}

	return nil
}

func (m *ShipmentDetail) validateShippingAddress(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingAddress) { // not required
		return nil
	}

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingAddress")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment detail based on the context it is used
func (m *ShipmentDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuyerTaxInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMarketplaceTaxInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePaymentMethodDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingAddress(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentDetail) contextValidateBuyerTaxInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BuyerTaxInfo != nil {
		if err := m.BuyerTaxInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("BuyerTaxInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("BuyerTaxInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentDetail) contextValidateMarketplaceTaxInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MarketplaceTaxInfo != nil {
		if err := m.MarketplaceTaxInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MarketplaceTaxInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("MarketplaceTaxInfo")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentDetail) contextValidatePaymentMethodDetails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PaymentMethodDetails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("PaymentMethodDetails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("PaymentMethodDetails")
		}
		return err
	}

	return nil
}

func (m *ShipmentDetail) contextValidateShipmentItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ShipmentItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("ShipmentItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("ShipmentItems")
		}
		return err
	}

	return nil
}

func (m *ShipmentDetail) contextValidateShippingAddress(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingAddress != nil {
		if err := m.ShippingAddress.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingAddress")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingAddress")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentDetail) UnmarshalBinary(b []byte) error {
	var res ShipmentDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
