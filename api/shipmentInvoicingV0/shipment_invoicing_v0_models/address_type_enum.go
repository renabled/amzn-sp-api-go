// Code generated by go-swagger; DO NOT EDIT.

package shipment_invoicing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AddressTypeEnum The shipping address type.
//
// swagger:model AddressTypeEnum
type AddressTypeEnum string

func NewAddressTypeEnum(value AddressTypeEnum) *AddressTypeEnum {
	return &value
}

// Pointer returns a pointer to a freshly-allocated AddressTypeEnum.
func (m AddressTypeEnum) Pointer() *AddressTypeEnum {
	return &m
}

const (

	// AddressTypeEnumResidential captures enum value "Residential"
	AddressTypeEnumResidential AddressTypeEnum = "Residential"

	// AddressTypeEnumCommercial captures enum value "Commercial"
	AddressTypeEnumCommercial AddressTypeEnum = "Commercial"
)

// for schema
var addressTypeEnumEnum []interface{}

func init() {
	var res []AddressTypeEnum
	if err := json.Unmarshal([]byte(`["Residential","Commercial"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		addressTypeEnumEnum = append(addressTypeEnumEnum, v)
	}
}

func (m AddressTypeEnum) validateAddressTypeEnumEnum(path, location string, value AddressTypeEnum) error {
	if err := validate.EnumCase(path, location, value, addressTypeEnumEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this address type enum
func (m AddressTypeEnum) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateAddressTypeEnumEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this address type enum based on context it is used
func (m AddressTypeEnum) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
