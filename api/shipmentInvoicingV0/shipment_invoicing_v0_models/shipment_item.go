// Code generated by go-swagger; DO NOT EDIT.

package shipment_invoicing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ShipmentItem The shipment item information required by a seller to issue a shipment invoice.
//
// swagger:model ShipmentItem
type ShipmentItem struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	ASIN string `json:"ASIN,omitempty"`

	// The gift wrap price of the item.
	GiftWrapPrice *Money `json:"GiftWrapPrice,omitempty"`

	// The selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
	ItemPrice *Money `json:"ItemPrice,omitempty"`

	// The Amazon-defined identifier for the order item.
	OrderItemID string `json:"OrderItemId,omitempty"`

	// The total of all promotional discounts in the offer.
	PromotionDiscount *Money `json:"PromotionDiscount,omitempty"`

	// The number of items ordered.
	QuantityOrdered float64 `json:"QuantityOrdered,omitempty"`

	// The seller SKU of the item.
	SellerSKU string `json:"SellerSKU,omitempty"`

	// The list of serial numbers.
	SerialNumbers SerialNumbersList `json:"SerialNumbers,omitempty"`

	// The discount on the shipping price.
	ShippingDiscount *Money `json:"ShippingDiscount,omitempty"`

	// The shipping price of the item.
	ShippingPrice *Money `json:"ShippingPrice,omitempty"`

	// The name of the item.
	Title string `json:"Title,omitempty"`
}

// Validate validates this shipment item
func (m *ShipmentItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGiftWrapPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromotionDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSerialNumbers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingDiscount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShippingPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentItem) validateGiftWrapPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.GiftWrapPrice) { // not required
		return nil
	}

	if m.GiftWrapPrice != nil {
		if err := m.GiftWrapPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GiftWrapPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GiftWrapPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) validateItemPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemPrice) { // not required
		return nil
	}

	if m.ItemPrice != nil {
		if err := m.ItemPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) validatePromotionDiscount(formats strfmt.Registry) error {
	if swag.IsZero(m.PromotionDiscount) { // not required
		return nil
	}

	if m.PromotionDiscount != nil {
		if err := m.PromotionDiscount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PromotionDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PromotionDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) validateSerialNumbers(formats strfmt.Registry) error {
	if swag.IsZero(m.SerialNumbers) { // not required
		return nil
	}

	if err := m.SerialNumbers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SerialNumbers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SerialNumbers")
		}
		return err
	}

	return nil
}

func (m *ShipmentItem) validateShippingDiscount(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingDiscount) { // not required
		return nil
	}

	if m.ShippingDiscount != nil {
		if err := m.ShippingDiscount.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) validateShippingPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.ShippingPrice) { // not required
		return nil
	}

	if m.ShippingPrice != nil {
		if err := m.ShippingPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingPrice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment item based on the context it is used
func (m *ShipmentItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGiftWrapPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItemPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromotionDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSerialNumbers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingDiscount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShippingPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentItem) contextValidateGiftWrapPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.GiftWrapPrice != nil {
		if err := m.GiftWrapPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GiftWrapPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("GiftWrapPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) contextValidateItemPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemPrice != nil {
		if err := m.ItemPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ItemPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ItemPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) contextValidatePromotionDiscount(ctx context.Context, formats strfmt.Registry) error {

	if m.PromotionDiscount != nil {
		if err := m.PromotionDiscount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PromotionDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("PromotionDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) contextValidateSerialNumbers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.SerialNumbers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("SerialNumbers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("SerialNumbers")
		}
		return err
	}

	return nil
}

func (m *ShipmentItem) contextValidateShippingDiscount(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingDiscount != nil {
		if err := m.ShippingDiscount.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingDiscount")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingDiscount")
			}
			return err
		}
	}

	return nil
}

func (m *ShipmentItem) contextValidateShippingPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.ShippingPrice != nil {
		if err := m.ShippingPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ShippingPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ShippingPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentItem) UnmarshalBinary(b []byte) error {
	var res ShipmentItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
