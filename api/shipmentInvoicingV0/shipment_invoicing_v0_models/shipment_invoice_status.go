// Code generated by go-swagger; DO NOT EDIT.

package shipment_invoicing_v0_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ShipmentInvoiceStatus The shipment invoice status.
//
// swagger:model ShipmentInvoiceStatus
type ShipmentInvoiceStatus string

func NewShipmentInvoiceStatus(value ShipmentInvoiceStatus) *ShipmentInvoiceStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ShipmentInvoiceStatus.
func (m ShipmentInvoiceStatus) Pointer() *ShipmentInvoiceStatus {
	return &m
}

const (

	// ShipmentInvoiceStatusProcessing captures enum value "Processing"
	ShipmentInvoiceStatusProcessing ShipmentInvoiceStatus = "Processing"

	// ShipmentInvoiceStatusAccepted captures enum value "Accepted"
	ShipmentInvoiceStatusAccepted ShipmentInvoiceStatus = "Accepted"

	// ShipmentInvoiceStatusErrored captures enum value "Errored"
	ShipmentInvoiceStatusErrored ShipmentInvoiceStatus = "Errored"

	// ShipmentInvoiceStatusNotFound captures enum value "NotFound"
	ShipmentInvoiceStatusNotFound ShipmentInvoiceStatus = "NotFound"
)

// for schema
var shipmentInvoiceStatusEnum []interface{}

func init() {
	var res []ShipmentInvoiceStatus
	if err := json.Unmarshal([]byte(`["Processing","Accepted","Errored","NotFound"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		shipmentInvoiceStatusEnum = append(shipmentInvoiceStatusEnum, v)
	}
}

func (m ShipmentInvoiceStatus) validateShipmentInvoiceStatusEnum(path, location string, value ShipmentInvoiceStatus) error {
	if err := validate.EnumCase(path, location, value, shipmentInvoiceStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this shipment invoice status
func (m ShipmentInvoiceStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateShipmentInvoiceStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this shipment invoice status based on context it is used
func (m ShipmentInvoiceStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
