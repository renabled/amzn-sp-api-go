// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetListingsRestrictionsParams creates a new GetListingsRestrictionsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetListingsRestrictionsParams() *GetListingsRestrictionsParams {
	return &GetListingsRestrictionsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetListingsRestrictionsParamsWithTimeout creates a new GetListingsRestrictionsParams object
// with the ability to set a timeout on a request.
func NewGetListingsRestrictionsParamsWithTimeout(timeout time.Duration) *GetListingsRestrictionsParams {
	return &GetListingsRestrictionsParams{
		timeout: timeout,
	}
}

// NewGetListingsRestrictionsParamsWithContext creates a new GetListingsRestrictionsParams object
// with the ability to set a context for a request.
func NewGetListingsRestrictionsParamsWithContext(ctx context.Context) *GetListingsRestrictionsParams {
	return &GetListingsRestrictionsParams{
		Context: ctx,
	}
}

// NewGetListingsRestrictionsParamsWithHTTPClient creates a new GetListingsRestrictionsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetListingsRestrictionsParamsWithHTTPClient(client *http.Client) *GetListingsRestrictionsParams {
	return &GetListingsRestrictionsParams{
		HTTPClient: client,
	}
}

/* GetListingsRestrictionsParams contains all the parameters to send to the API endpoint
   for the get listings restrictions operation.

   Typically these are written to a http.Request.
*/
type GetListingsRestrictionsParams struct {

	/* Asin.

	   The Amazon Standard Identification Number (ASIN) of the item.
	*/
	Asin string

	/* ConditionType.

	   The condition used to filter restrictions.
	*/
	ConditionType *string

	/* MarketplaceIds.

	   A comma-delimited list of Amazon marketplace identifiers for the request.
	*/
	MarketplaceIds []string

	/* ReasonLocale.

	   A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
	*/
	ReasonLocale *string

	/* SellerID.

	   A selling partner identifier, such as a merchant account.
	*/
	SellerID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get listings restrictions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListingsRestrictionsParams) WithDefaults() *GetListingsRestrictionsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get listings restrictions params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetListingsRestrictionsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithTimeout(timeout time.Duration) *GetListingsRestrictionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithContext(ctx context.Context) *GetListingsRestrictionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithHTTPClient(client *http.Client) *GetListingsRestrictionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsin adds the asin to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithAsin(asin string) *GetListingsRestrictionsParams {
	o.SetAsin(asin)
	return o
}

// SetAsin adds the asin to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetAsin(asin string) {
	o.Asin = asin
}

// WithConditionType adds the conditionType to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithConditionType(conditionType *string) *GetListingsRestrictionsParams {
	o.SetConditionType(conditionType)
	return o
}

// SetConditionType adds the conditionType to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetConditionType(conditionType *string) {
	o.ConditionType = conditionType
}

// WithMarketplaceIds adds the marketplaceIds to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithMarketplaceIds(marketplaceIds []string) *GetListingsRestrictionsParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithReasonLocale adds the reasonLocale to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithReasonLocale(reasonLocale *string) *GetListingsRestrictionsParams {
	o.SetReasonLocale(reasonLocale)
	return o
}

// SetReasonLocale adds the reasonLocale to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetReasonLocale(reasonLocale *string) {
	o.ReasonLocale = reasonLocale
}

// WithSellerID adds the sellerID to the get listings restrictions params
func (o *GetListingsRestrictionsParams) WithSellerID(sellerID string) *GetListingsRestrictionsParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the get listings restrictions params
func (o *GetListingsRestrictionsParams) SetSellerID(sellerID string) {
	o.SellerID = sellerID
}

// WriteToRequest writes these params to a swagger request
func (o *GetListingsRestrictionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param asin
	qrAsin := o.Asin
	qAsin := qrAsin
	if qAsin != "" {

		if err := r.SetQueryParam("asin", qAsin); err != nil {
			return err
		}
	}

	if o.ConditionType != nil {

		// query param conditionType
		var qrConditionType string

		if o.ConditionType != nil {
			qrConditionType = *o.ConditionType
		}
		qConditionType := qrConditionType
		if qConditionType != "" {

			if err := r.SetQueryParam("conditionType", qConditionType); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.ReasonLocale != nil {

		// query param reasonLocale
		var qrReasonLocale string

		if o.ReasonLocale != nil {
			qrReasonLocale = *o.ReasonLocale
		}
		qReasonLocale := qrReasonLocale
		if qReasonLocale != "" {

			if err := r.SetQueryParam("reasonLocale", qReasonLocale); err != nil {
				return err
			}
		}
	}

	// query param sellerId
	qrSellerID := o.SellerID
	qSellerID := qrSellerID
	if qSellerID != "" {

		if err := r.SetQueryParam("sellerId", qSellerID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetListingsRestrictions binds the parameter marketplaceIds
func (o *GetListingsRestrictionsParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "csv")

	return marketplaceIdsIS
}
