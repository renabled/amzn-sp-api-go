// Code generated by go-swagger; DO NOT EDIT.

package listings_restrictions_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Restriction A listing restriction, optionally qualified by a condition, with a list of reasons for the restriction.
//
// swagger:model Restriction
type Restriction struct {

	// The condition that applies to the restriction.
	// Enum: [new_new new_open_box new_oem refurbished_refurbished used_like_new used_very_good used_good used_acceptable collectible_like_new collectible_very_good collectible_good collectible_acceptable club_club]
	ConditionType string `json:"conditionType,omitempty"`

	// A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`

	// A list of reasons for the restriction.
	Reasons []*Reason `json:"reasons"`
}

// Validate validates this restriction
func (m *Restriction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReasons(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var restrictionTypeConditionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["new_new","new_open_box","new_oem","refurbished_refurbished","used_like_new","used_very_good","used_good","used_acceptable","collectible_like_new","collectible_very_good","collectible_good","collectible_acceptable","club_club"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		restrictionTypeConditionTypePropEnum = append(restrictionTypeConditionTypePropEnum, v)
	}
}

const (

	// RestrictionConditionTypeNewNew captures enum value "new_new"
	RestrictionConditionTypeNewNew string = "new_new"

	// RestrictionConditionTypeNewOpenBox captures enum value "new_open_box"
	RestrictionConditionTypeNewOpenBox string = "new_open_box"

	// RestrictionConditionTypeNewOem captures enum value "new_oem"
	RestrictionConditionTypeNewOem string = "new_oem"

	// RestrictionConditionTypeRefurbishedRefurbished captures enum value "refurbished_refurbished"
	RestrictionConditionTypeRefurbishedRefurbished string = "refurbished_refurbished"

	// RestrictionConditionTypeUsedLikeNew captures enum value "used_like_new"
	RestrictionConditionTypeUsedLikeNew string = "used_like_new"

	// RestrictionConditionTypeUsedVeryGood captures enum value "used_very_good"
	RestrictionConditionTypeUsedVeryGood string = "used_very_good"

	// RestrictionConditionTypeUsedGood captures enum value "used_good"
	RestrictionConditionTypeUsedGood string = "used_good"

	// RestrictionConditionTypeUsedAcceptable captures enum value "used_acceptable"
	RestrictionConditionTypeUsedAcceptable string = "used_acceptable"

	// RestrictionConditionTypeCollectibleLikeNew captures enum value "collectible_like_new"
	RestrictionConditionTypeCollectibleLikeNew string = "collectible_like_new"

	// RestrictionConditionTypeCollectibleVeryGood captures enum value "collectible_very_good"
	RestrictionConditionTypeCollectibleVeryGood string = "collectible_very_good"

	// RestrictionConditionTypeCollectibleGood captures enum value "collectible_good"
	RestrictionConditionTypeCollectibleGood string = "collectible_good"

	// RestrictionConditionTypeCollectibleAcceptable captures enum value "collectible_acceptable"
	RestrictionConditionTypeCollectibleAcceptable string = "collectible_acceptable"

	// RestrictionConditionTypeClubClub captures enum value "club_club"
	RestrictionConditionTypeClubClub string = "club_club"
)

// prop value enum
func (m *Restriction) validateConditionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, restrictionTypeConditionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Restriction) validateConditionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ConditionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionTypeEnum("conditionType", "body", m.ConditionType); err != nil {
		return err
	}

	return nil
}

func (m *Restriction) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

func (m *Restriction) validateReasons(formats strfmt.Registry) error {
	if swag.IsZero(m.Reasons) { // not required
		return nil
	}

	for i := 0; i < len(m.Reasons); i++ {
		if swag.IsZero(m.Reasons[i]) { // not required
			continue
		}

		if m.Reasons[i] != nil {
			if err := m.Reasons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this restriction based on the context it is used
func (m *Restriction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReasons(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Restriction) contextValidateReasons(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Reasons); i++ {

		if m.Reasons[i] != nil {
			if err := m.Reasons[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("reasons" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("reasons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Restriction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Restriction) UnmarshalBinary(b []byte) error {
	var res Restriction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
