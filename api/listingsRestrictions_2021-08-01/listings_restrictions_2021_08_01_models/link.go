// Code generated by go-swagger; DO NOT EDIT.

package listings_restrictions_2021_08_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Link A link to resources related to a listing restriction.
//
// swagger:model Link
type Link struct {

	// The URI of the related resource.
	// Required: true
	// Format: uri
	Resource *strfmt.URI `json:"resource"`

	// The title of the related resource.
	Title string `json:"title,omitempty"`

	// The media type of the related resource.
	Type string `json:"type,omitempty"`

	// The HTTP verb used to interact with the related resource.
	// Required: true
	// Enum: [GET]
	Verb *string `json:"verb"`
}

// Validate validates this link
func (m *Link) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVerb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Link) validateResource(formats strfmt.Registry) error {

	if err := validate.Required("resource", "body", m.Resource); err != nil {
		return err
	}

	if err := validate.FormatOf("resource", "body", "uri", m.Resource.String(), formats); err != nil {
		return err
	}

	return nil
}

var linkTypeVerbPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["GET"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		linkTypeVerbPropEnum = append(linkTypeVerbPropEnum, v)
	}
}

const (

	// LinkVerbGET captures enum value "GET"
	LinkVerbGET string = "GET"
)

// prop value enum
func (m *Link) validateVerbEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, linkTypeVerbPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Link) validateVerb(formats strfmt.Registry) error {

	if err := validate.Required("verb", "body", m.Verb); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerbEnum("verb", "body", *m.Verb); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this link based on context it is used
func (m *Link) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Link) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Link) UnmarshalBinary(b []byte) error {
	var res Link
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
