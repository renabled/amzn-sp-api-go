// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_orders_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderDetails Details of an order.
//
// swagger:model OrderDetails
type OrderDetails struct {

	// Name/Address and tax details of the bill to party.
	// Required: true
	BillToParty *PartyIdentification `json:"billToParty"`

	// The customer order number.
	// Required: true
	CustomerOrderNumber *string `json:"customerOrderNumber"`

	// A list of items in this purchase order.
	// Required: true
	Items []*OrderItem `json:"items"`

	// The date the order was placed. This  field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
	// Required: true
	// Format: date-time
	OrderDate *strfmt.DateTime `json:"orderDate"`

	// Current status of the order.
	// Enum: [NEW SHIPPED ACCEPTED CANCELLED]
	OrderStatus string `json:"orderStatus,omitempty"`

	// PartyID of vendor code.
	// Required: true
	SellingParty *PartyIdentification `json:"sellingParty"`

	// PartyID of vendor's warehouse.
	// Required: true
	ShipFromParty *PartyIdentification `json:"shipFromParty"`

	// Name/Address and tax details of the ship to party.
	// Required: true
	ShipToParty *Address `json:"shipToParty"`

	// shipment details
	// Required: true
	ShipmentDetails *ShipmentDetails `json:"shipmentDetails"`

	// tax total
	TaxTotal *TaxItemDetails `json:"taxTotal,omitempty"`
}

// Validate validates this order details
func (m *OrderDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillToParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerOrderNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSellingParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFromParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipToParty(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderDetails) validateBillToParty(formats strfmt.Registry) error {

	if err := validate.Required("billToParty", "body", m.BillToParty); err != nil {
		return err
	}

	if m.BillToParty != nil {
		if err := m.BillToParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billToParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateCustomerOrderNumber(formats strfmt.Registry) error {

	if err := validate.Required("customerOrderNumber", "body", m.CustomerOrderNumber); err != nil {
		return err
	}

	return nil
}

func (m *OrderDetails) validateItems(formats strfmt.Registry) error {

	if err := validate.Required("items", "body", m.Items); err != nil {
		return err
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) validateOrderDate(formats strfmt.Registry) error {

	if err := validate.Required("orderDate", "body", m.OrderDate); err != nil {
		return err
	}

	if err := validate.FormatOf("orderDate", "body", "date-time", m.OrderDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var orderDetailsTypeOrderStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","SHIPPED","ACCEPTED","CANCELLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderDetailsTypeOrderStatusPropEnum = append(orderDetailsTypeOrderStatusPropEnum, v)
	}
}

const (

	// OrderDetailsOrderStatusNEW captures enum value "NEW"
	OrderDetailsOrderStatusNEW string = "NEW"

	// OrderDetailsOrderStatusSHIPPED captures enum value "SHIPPED"
	OrderDetailsOrderStatusSHIPPED string = "SHIPPED"

	// OrderDetailsOrderStatusACCEPTED captures enum value "ACCEPTED"
	OrderDetailsOrderStatusACCEPTED string = "ACCEPTED"

	// OrderDetailsOrderStatusCANCELLED captures enum value "CANCELLED"
	OrderDetailsOrderStatusCANCELLED string = "CANCELLED"
)

// prop value enum
func (m *OrderDetails) validateOrderStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, orderDetailsTypeOrderStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrderDetails) validateOrderStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateOrderStatusEnum("orderStatus", "body", m.OrderStatus); err != nil {
		return err
	}

	return nil
}

func (m *OrderDetails) validateSellingParty(formats strfmt.Registry) error {

	if err := validate.Required("sellingParty", "body", m.SellingParty); err != nil {
		return err
	}

	if m.SellingParty != nil {
		if err := m.SellingParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateShipFromParty(formats strfmt.Registry) error {

	if err := validate.Required("shipFromParty", "body", m.ShipFromParty); err != nil {
		return err
	}

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateShipToParty(formats strfmt.Registry) error {

	if err := validate.Required("shipToParty", "body", m.ShipToParty); err != nil {
		return err
	}

	if m.ShipToParty != nil {
		if err := m.ShipToParty.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateShipmentDetails(formats strfmt.Registry) error {

	if err := validate.Required("shipmentDetails", "body", m.ShipmentDetails); err != nil {
		return err
	}

	if m.ShipmentDetails != nil {
		if err := m.ShipmentDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) validateTaxTotal(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxTotal) { // not required
		return nil
	}

	if m.TaxTotal != nil {
		if err := m.TaxTotal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxTotal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxTotal")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order details based on the context it is used
func (m *OrderDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillToParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSellingParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFromParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipToParty(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxTotal(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderDetails) contextValidateBillToParty(ctx context.Context, formats strfmt.Registry) error {

	if m.BillToParty != nil {
		if err := m.BillToParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billToParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Items); i++ {

		if m.Items[i] != nil {
			if err := m.Items[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("items" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrderDetails) contextValidateSellingParty(ctx context.Context, formats strfmt.Registry) error {

	if m.SellingParty != nil {
		if err := m.SellingParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sellingParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sellingParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateShipFromParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFromParty != nil {
		if err := m.ShipFromParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFromParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFromParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateShipToParty(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipToParty != nil {
		if err := m.ShipToParty.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipToParty")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipToParty")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateShipmentDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentDetails != nil {
		if err := m.ShipmentDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderDetails) contextValidateTaxTotal(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxTotal != nil {
		if err := m.TaxTotal.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxTotal")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxTotal")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderDetails) UnmarshalBinary(b []byte) error {
	var res OrderDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
