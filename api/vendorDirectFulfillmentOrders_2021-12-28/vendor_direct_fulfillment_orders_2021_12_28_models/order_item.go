// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_orders_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderItem An item within an order
//
// swagger:model OrderItem
type OrderItem struct {

	// The buyer information for products the vendor has configured as customizable, specifying the types of customizations or configurations along with types and ranges for their product. This provides the ability for buyers to customize multiple aspects of the products according to what the vendor allows.
	BuyerCustomizedInfo *BuyerCustomizedInfoDetail `json:"buyerCustomizedInfo,omitempty"`

	// Buyer's standard identification number (ASIN) of an item.
	BuyerProductIdentifier string `json:"buyerProductIdentifier,omitempty"`

	// Gift message and wrapId details.
	GiftDetails *GiftDetails `json:"giftDetails,omitempty"`

	// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
	// Required: true
	ItemSequenceNumber *string `json:"itemSequenceNumber"`

	// Net price (before tax) to vendor with currency details.
	// Required: true
	NetPrice *Money `json:"netPrice"`

	// Item quantity ordered.
	// Required: true
	OrderedQuantity *ItemQuantity `json:"orderedQuantity"`

	// Details for the scheduled delivery shipment.
	ScheduledDeliveryShipment *ScheduledDeliveryShipment `json:"scheduledDeliveryShipment,omitempty"`

	// Total tax details for the line item.
	TaxDetails *TaxItemDetails `json:"taxDetails,omitempty"`

	// Title for the item.
	Title string `json:"title,omitempty"`

	// The price to Amazon each (cost).
	TotalPrice *Money `json:"totalPrice,omitempty"`

	// The vendor selected product identification of the item.
	VendorProductIdentifier string `json:"vendorProductIdentifier,omitempty"`
}

// Validate validates this order item
func (m *OrderItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuyerCustomizedInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGiftDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemSequenceNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderedQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScheduledDeliveryShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) validateBuyerCustomizedInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.BuyerCustomizedInfo) { // not required
		return nil
	}

	if m.BuyerCustomizedInfo != nil {
		if err := m.BuyerCustomizedInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerCustomizedInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyerCustomizedInfo")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateGiftDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.GiftDetails) { // not required
		return nil
	}

	if m.GiftDetails != nil {
		if err := m.GiftDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("giftDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("giftDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateItemSequenceNumber(formats strfmt.Registry) error {

	if err := validate.Required("itemSequenceNumber", "body", m.ItemSequenceNumber); err != nil {
		return err
	}

	return nil
}

func (m *OrderItem) validateNetPrice(formats strfmt.Registry) error {

	if err := validate.Required("netPrice", "body", m.NetPrice); err != nil {
		return err
	}

	if m.NetPrice != nil {
		if err := m.NetPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateOrderedQuantity(formats strfmt.Registry) error {

	if err := validate.Required("orderedQuantity", "body", m.OrderedQuantity); err != nil {
		return err
	}

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateScheduledDeliveryShipment(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduledDeliveryShipment) { // not required
		return nil
	}

	if m.ScheduledDeliveryShipment != nil {
		if err := m.ScheduledDeliveryShipment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDeliveryShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDeliveryShipment")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateTaxDetails(formats strfmt.Registry) error {
	if swag.IsZero(m.TaxDetails) { // not required
		return nil
	}

	if m.TaxDetails != nil {
		if err := m.TaxDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) validateTotalPrice(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalPrice) { // not required
		return nil
	}

	if m.TotalPrice != nil {
		if err := m.TotalPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPrice")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this order item based on the context it is used
func (m *OrderItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBuyerCustomizedInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGiftDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderedQuantity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScheduledDeliveryShipment(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTaxDetails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderItem) contextValidateBuyerCustomizedInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.BuyerCustomizedInfo != nil {
		if err := m.BuyerCustomizedInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyerCustomizedInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyerCustomizedInfo")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateGiftDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.GiftDetails != nil {
		if err := m.GiftDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("giftDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("giftDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateNetPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.NetPrice != nil {
		if err := m.NetPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netPrice")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateOrderedQuantity(ctx context.Context, formats strfmt.Registry) error {

	if m.OrderedQuantity != nil {
		if err := m.OrderedQuantity.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("orderedQuantity")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("orderedQuantity")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateScheduledDeliveryShipment(ctx context.Context, formats strfmt.Registry) error {

	if m.ScheduledDeliveryShipment != nil {
		if err := m.ScheduledDeliveryShipment.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scheduledDeliveryShipment")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scheduledDeliveryShipment")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateTaxDetails(ctx context.Context, formats strfmt.Registry) error {

	if m.TaxDetails != nil {
		if err := m.TaxDetails.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taxDetails")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("taxDetails")
			}
			return err
		}
	}

	return nil
}

func (m *OrderItem) contextValidateTotalPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalPrice != nil {
		if err := m.TotalPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderItem) UnmarshalBinary(b []byte) error {
	var res OrderItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
