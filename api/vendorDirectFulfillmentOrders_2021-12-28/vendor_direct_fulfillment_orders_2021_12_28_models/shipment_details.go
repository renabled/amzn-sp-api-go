// Code generated by go-swagger; DO NOT EDIT.

package vendor_direct_fulfillment_orders_2021_12_28_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ShipmentDetails Shipment details required for the shipment.
//
// swagger:model ShipmentDetails
type ShipmentDetails struct {

	// When true, the order contain a gift. Include the gift message and gift wrap information.
	IsGift bool `json:"isGift,omitempty"`

	// When true, this is a priority shipment.
	// Required: true
	IsPriorityShipment *bool `json:"isPriorityShipment"`

	// When true, a packing slip is required to be sent to the customer.
	// Required: true
	IsPslipRequired *bool `json:"isPslipRequired"`

	// When true, this order is part of a scheduled delivery program.
	IsScheduledDeliveryShipment bool `json:"isScheduledDeliveryShipment,omitempty"`

	// Message to customer for order status.
	// Required: true
	MessageToCustomer *string `json:"messageToCustomer"`

	// Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the 'Help' section on Vendor Central for 'ship methods'.
	// Required: true
	ShipMethod *string `json:"shipMethod"`

	// shipment dates
	// Required: true
	ShipmentDates *ShipmentDates `json:"shipmentDates"`
}

// Validate validates this shipment details
func (m *ShipmentDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsPriorityShipment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPslipRequired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessageToCustomer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentDates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentDetails) validateIsPriorityShipment(formats strfmt.Registry) error {

	if err := validate.Required("isPriorityShipment", "body", m.IsPriorityShipment); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDetails) validateIsPslipRequired(formats strfmt.Registry) error {

	if err := validate.Required("isPslipRequired", "body", m.IsPslipRequired); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDetails) validateMessageToCustomer(formats strfmt.Registry) error {

	if err := validate.Required("messageToCustomer", "body", m.MessageToCustomer); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDetails) validateShipMethod(formats strfmt.Registry) error {

	if err := validate.Required("shipMethod", "body", m.ShipMethod); err != nil {
		return err
	}

	return nil
}

func (m *ShipmentDetails) validateShipmentDates(formats strfmt.Registry) error {

	if err := validate.Required("shipmentDates", "body", m.ShipmentDates); err != nil {
		return err
	}

	if m.ShipmentDates != nil {
		if err := m.ShipmentDates.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentDates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentDates")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this shipment details based on the context it is used
func (m *ShipmentDetails) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateShipmentDates(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ShipmentDetails) contextValidateShipmentDates(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentDates != nil {
		if err := m.ShipmentDates.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentDates")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentDates")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ShipmentDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ShipmentDetails) UnmarshalBinary(b []byte) error {
	var res ShipmentDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
