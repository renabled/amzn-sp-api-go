// Code generated by go-swagger; DO NOT EDIT.

package listings_items_2020_09_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListingsItemPutRequest The request body schema for the putListingsItem operation.
//
// swagger:model ListingsItemPutRequest
type ListingsItemPutRequest struct {

	// JSON object containing structured listings item attribute data keyed by attribute name.
	// Required: true
	Attributes interface{} `json:"attributes"`

	// The Amazon product type of the listings item.
	// Required: true
	ProductType *string `json:"productType"`

	// The name of the requirements set for the provided data.
	// Enum: [LISTING LISTING_PRODUCT_ONLY LISTING_OFFER_ONLY]
	Requirements string `json:"requirements,omitempty"`
}

// Validate validates this listings item put request
func (m *ListingsItemPutRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListingsItemPutRequest) validateAttributes(formats strfmt.Registry) error {

	if m.Attributes == nil {
		return errors.Required("attributes", "body", nil)
	}

	return nil
}

func (m *ListingsItemPutRequest) validateProductType(formats strfmt.Registry) error {

	if err := validate.Required("productType", "body", m.ProductType); err != nil {
		return err
	}

	return nil
}

var listingsItemPutRequestTypeRequirementsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LISTING","LISTING_PRODUCT_ONLY","LISTING_OFFER_ONLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listingsItemPutRequestTypeRequirementsPropEnum = append(listingsItemPutRequestTypeRequirementsPropEnum, v)
	}
}

const (

	// ListingsItemPutRequestRequirementsLISTING captures enum value "LISTING"
	ListingsItemPutRequestRequirementsLISTING string = "LISTING"

	// ListingsItemPutRequestRequirementsLISTINGPRODUCTONLY captures enum value "LISTING_PRODUCT_ONLY"
	ListingsItemPutRequestRequirementsLISTINGPRODUCTONLY string = "LISTING_PRODUCT_ONLY"

	// ListingsItemPutRequestRequirementsLISTINGOFFERONLY captures enum value "LISTING_OFFER_ONLY"
	ListingsItemPutRequestRequirementsLISTINGOFFERONLY string = "LISTING_OFFER_ONLY"
)

// prop value enum
func (m *ListingsItemPutRequest) validateRequirementsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listingsItemPutRequestTypeRequirementsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListingsItemPutRequest) validateRequirements(formats strfmt.Registry) error {
	if swag.IsZero(m.Requirements) { // not required
		return nil
	}

	// value enum
	if err := m.validateRequirementsEnum("requirements", "body", m.Requirements); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this listings item put request based on context it is used
func (m *ListingsItemPutRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ListingsItemPutRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListingsItemPutRequest) UnmarshalBinary(b []byte) error {
	var res ListingsItemPutRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
