// Code generated by go-swagger; DO NOT EDIT.

package listings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/listingsItems_2020-09-01/listings_items_2020_09_01_models"
)

// PutListingsItemReader is a Reader for the PutListingsItem structure.
type PutListingsItemReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutListingsItemReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPutListingsItemOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPutListingsItemBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPutListingsItemForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewPutListingsItemRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewPutListingsItemUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPutListingsItemTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPutListingsItemInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPutListingsItemServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPutListingsItemOK creates a PutListingsItemOK with default headers values
func NewPutListingsItemOK() *PutListingsItemOK {
	return &PutListingsItemOK{}
}

/* PutListingsItemOK describes a response with status code 200, with default header values.

Successfully understood the request to create or fully-update a listings item. See the response to determine if the submission has been accepted.
*/
type PutListingsItemOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ListingsItemSubmissionResponse
}

func (o *PutListingsItemOK) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemOK  %+v", 200, o.Payload)
}
func (o *PutListingsItemOK) GetPayload() *listings_items_2020_09_01_models.ListingsItemSubmissionResponse {
	return o.Payload
}

func (o *PutListingsItemOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ListingsItemSubmissionResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemBadRequest creates a PutListingsItemBadRequest with default headers values
func NewPutListingsItemBadRequest() *PutListingsItemBadRequest {
	return &PutListingsItemBadRequest{}
}

/* PutListingsItemBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PutListingsItemBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemBadRequest) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemBadRequest  %+v", 400, o.Payload)
}
func (o *PutListingsItemBadRequest) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemForbidden creates a PutListingsItemForbidden with default headers values
func NewPutListingsItemForbidden() *PutListingsItemForbidden {
	return &PutListingsItemForbidden{}
}

/* PutListingsItemForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type PutListingsItemForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemForbidden) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemForbidden  %+v", 403, o.Payload)
}
func (o *PutListingsItemForbidden) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemRequestEntityTooLarge creates a PutListingsItemRequestEntityTooLarge with default headers values
func NewPutListingsItemRequestEntityTooLarge() *PutListingsItemRequestEntityTooLarge {
	return &PutListingsItemRequestEntityTooLarge{}
}

/* PutListingsItemRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type PutListingsItemRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *PutListingsItemRequestEntityTooLarge) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemUnsupportedMediaType creates a PutListingsItemUnsupportedMediaType with default headers values
func NewPutListingsItemUnsupportedMediaType() *PutListingsItemUnsupportedMediaType {
	return &PutListingsItemUnsupportedMediaType{}
}

/* PutListingsItemUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type PutListingsItemUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *PutListingsItemUnsupportedMediaType) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemTooManyRequests creates a PutListingsItemTooManyRequests with default headers values
func NewPutListingsItemTooManyRequests() *PutListingsItemTooManyRequests {
	return &PutListingsItemTooManyRequests{}
}

/* PutListingsItemTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PutListingsItemTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemTooManyRequests  %+v", 429, o.Payload)
}
func (o *PutListingsItemTooManyRequests) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemInternalServerError creates a PutListingsItemInternalServerError with default headers values
func NewPutListingsItemInternalServerError() *PutListingsItemInternalServerError {
	return &PutListingsItemInternalServerError{}
}

/* PutListingsItemInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type PutListingsItemInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemInternalServerError  %+v", 500, o.Payload)
}
func (o *PutListingsItemInternalServerError) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPutListingsItemServiceUnavailable creates a PutListingsItemServiceUnavailable with default headers values
func NewPutListingsItemServiceUnavailable() *PutListingsItemServiceUnavailable {
	return &PutListingsItemServiceUnavailable{}
}

/* PutListingsItemServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PutListingsItemServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *listings_items_2020_09_01_models.ErrorList
}

func (o *PutListingsItemServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /listings/2020-09-01/items/{sellerId}/{sku}][%d] putListingsItemServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PutListingsItemServiceUnavailable) GetPayload() *listings_items_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *PutListingsItemServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(listings_items_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
