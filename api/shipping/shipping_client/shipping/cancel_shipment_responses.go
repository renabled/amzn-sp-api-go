// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/shipping/shipping_models"
)

// CancelShipmentReader is a Reader for the CancelShipment structure.
type CancelShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCancelShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewCancelShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelShipmentOK creates a CancelShipmentOK with default headers values
func NewCancelShipmentOK() *CancelShipmentOK {
	return &CancelShipmentOK{}
}

/* CancelShipmentOK describes a response with status code 200, with default header values.

Success.
*/
type CancelShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentOK) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentOK  %+v", 200, o.Payload)
}
func (o *CancelShipmentOK) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentBadRequest creates a CancelShipmentBadRequest with default headers values
func NewCancelShipmentBadRequest() *CancelShipmentBadRequest {
	return &CancelShipmentBadRequest{}
}

/* CancelShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentBadRequest  %+v", 400, o.Payload)
}
func (o *CancelShipmentBadRequest) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentUnauthorized creates a CancelShipmentUnauthorized with default headers values
func NewCancelShipmentUnauthorized() *CancelShipmentUnauthorized {
	return &CancelShipmentUnauthorized{}
}

/* CancelShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type CancelShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentUnauthorized  %+v", 401, o.Payload)
}
func (o *CancelShipmentUnauthorized) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentForbidden creates a CancelShipmentForbidden with default headers values
func NewCancelShipmentForbidden() *CancelShipmentForbidden {
	return &CancelShipmentForbidden{}
}

/* CancelShipmentForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type CancelShipmentForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentForbidden  %+v", 403, o.Payload)
}
func (o *CancelShipmentForbidden) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentNotFound creates a CancelShipmentNotFound with default headers values
func NewCancelShipmentNotFound() *CancelShipmentNotFound {
	return &CancelShipmentNotFound{}
}

/* CancelShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CancelShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentNotFound  %+v", 404, o.Payload)
}
func (o *CancelShipmentNotFound) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentTooManyRequests creates a CancelShipmentTooManyRequests with default headers values
func NewCancelShipmentTooManyRequests() *CancelShipmentTooManyRequests {
	return &CancelShipmentTooManyRequests{}
}

/* CancelShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentTooManyRequests  %+v", 429, o.Payload)
}
func (o *CancelShipmentTooManyRequests) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentInternalServerError creates a CancelShipmentInternalServerError with default headers values
func NewCancelShipmentInternalServerError() *CancelShipmentInternalServerError {
	return &CancelShipmentInternalServerError{}
}

/* CancelShipmentInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type CancelShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentInternalServerError  %+v", 500, o.Payload)
}
func (o *CancelShipmentInternalServerError) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelShipmentServiceUnavailable creates a CancelShipmentServiceUnavailable with default headers values
func NewCancelShipmentServiceUnavailable() *CancelShipmentServiceUnavailable {
	return &CancelShipmentServiceUnavailable{}
}

/* CancelShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.CancelShipmentResponse
}

func (o *CancelShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/cancel][%d] cancelShipmentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CancelShipmentServiceUnavailable) GetPayload() *shipping_models.CancelShipmentResponse {
	return o.Payload
}

func (o *CancelShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.CancelShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
