// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shipping/shipping_models"
)

// PurchaseShipmentReader is a Reader for the PurchaseShipment structure.
type PurchaseShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PurchaseShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPurchaseShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPurchaseShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPurchaseShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPurchaseShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPurchaseShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPurchaseShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPurchaseShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPurchaseShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPurchaseShipmentOK creates a PurchaseShipmentOK with default headers values
func NewPurchaseShipmentOK() *PurchaseShipmentOK {
	return &PurchaseShipmentOK{}
}

/*
PurchaseShipmentOK describes a response with status code 200, with default header values.

Success.
*/
type PurchaseShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment o k response has a 2xx status code
func (o *PurchaseShipmentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this purchase shipment o k response has a 3xx status code
func (o *PurchaseShipmentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment o k response has a 4xx status code
func (o *PurchaseShipmentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this purchase shipment o k response has a 5xx status code
func (o *PurchaseShipmentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this purchase shipment o k response a status code equal to that given
func (o *PurchaseShipmentOK) IsCode(code int) bool {
	return code == 200
}

func (o *PurchaseShipmentOK) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentOK  %+v", 200, o.Payload)
}

func (o *PurchaseShipmentOK) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentOK  %+v", 200, o.Payload)
}

func (o *PurchaseShipmentOK) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentBadRequest creates a PurchaseShipmentBadRequest with default headers values
func NewPurchaseShipmentBadRequest() *PurchaseShipmentBadRequest {
	return &PurchaseShipmentBadRequest{}
}

/*
PurchaseShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PurchaseShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment bad request response has a 2xx status code
func (o *PurchaseShipmentBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment bad request response has a 3xx status code
func (o *PurchaseShipmentBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment bad request response has a 4xx status code
func (o *PurchaseShipmentBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this purchase shipment bad request response has a 5xx status code
func (o *PurchaseShipmentBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this purchase shipment bad request response a status code equal to that given
func (o *PurchaseShipmentBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *PurchaseShipmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *PurchaseShipmentBadRequest) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentBadRequest  %+v", 400, o.Payload)
}

func (o *PurchaseShipmentBadRequest) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentUnauthorized creates a PurchaseShipmentUnauthorized with default headers values
func NewPurchaseShipmentUnauthorized() *PurchaseShipmentUnauthorized {
	return &PurchaseShipmentUnauthorized{}
}

/*
PurchaseShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type PurchaseShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment unauthorized response has a 2xx status code
func (o *PurchaseShipmentUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment unauthorized response has a 3xx status code
func (o *PurchaseShipmentUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment unauthorized response has a 4xx status code
func (o *PurchaseShipmentUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this purchase shipment unauthorized response has a 5xx status code
func (o *PurchaseShipmentUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this purchase shipment unauthorized response a status code equal to that given
func (o *PurchaseShipmentUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *PurchaseShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *PurchaseShipmentUnauthorized) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentUnauthorized  %+v", 401, o.Payload)
}

func (o *PurchaseShipmentUnauthorized) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentForbidden creates a PurchaseShipmentForbidden with default headers values
func NewPurchaseShipmentForbidden() *PurchaseShipmentForbidden {
	return &PurchaseShipmentForbidden{}
}

/*
PurchaseShipmentForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type PurchaseShipmentForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment forbidden response has a 2xx status code
func (o *PurchaseShipmentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment forbidden response has a 3xx status code
func (o *PurchaseShipmentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment forbidden response has a 4xx status code
func (o *PurchaseShipmentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this purchase shipment forbidden response has a 5xx status code
func (o *PurchaseShipmentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this purchase shipment forbidden response a status code equal to that given
func (o *PurchaseShipmentForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *PurchaseShipmentForbidden) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentForbidden  %+v", 403, o.Payload)
}

func (o *PurchaseShipmentForbidden) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentForbidden  %+v", 403, o.Payload)
}

func (o *PurchaseShipmentForbidden) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentNotFound creates a PurchaseShipmentNotFound with default headers values
func NewPurchaseShipmentNotFound() *PurchaseShipmentNotFound {
	return &PurchaseShipmentNotFound{}
}

/*
PurchaseShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type PurchaseShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment not found response has a 2xx status code
func (o *PurchaseShipmentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment not found response has a 3xx status code
func (o *PurchaseShipmentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment not found response has a 4xx status code
func (o *PurchaseShipmentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this purchase shipment not found response has a 5xx status code
func (o *PurchaseShipmentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this purchase shipment not found response a status code equal to that given
func (o *PurchaseShipmentNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *PurchaseShipmentNotFound) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentNotFound  %+v", 404, o.Payload)
}

func (o *PurchaseShipmentNotFound) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentNotFound  %+v", 404, o.Payload)
}

func (o *PurchaseShipmentNotFound) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentTooManyRequests creates a PurchaseShipmentTooManyRequests with default headers values
func NewPurchaseShipmentTooManyRequests() *PurchaseShipmentTooManyRequests {
	return &PurchaseShipmentTooManyRequests{}
}

/*
PurchaseShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PurchaseShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment too many requests response has a 2xx status code
func (o *PurchaseShipmentTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment too many requests response has a 3xx status code
func (o *PurchaseShipmentTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment too many requests response has a 4xx status code
func (o *PurchaseShipmentTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this purchase shipment too many requests response has a 5xx status code
func (o *PurchaseShipmentTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this purchase shipment too many requests response a status code equal to that given
func (o *PurchaseShipmentTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *PurchaseShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PurchaseShipmentTooManyRequests) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentTooManyRequests  %+v", 429, o.Payload)
}

func (o *PurchaseShipmentTooManyRequests) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentInternalServerError creates a PurchaseShipmentInternalServerError with default headers values
func NewPurchaseShipmentInternalServerError() *PurchaseShipmentInternalServerError {
	return &PurchaseShipmentInternalServerError{}
}

/*
PurchaseShipmentInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type PurchaseShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment internal server error response has a 2xx status code
func (o *PurchaseShipmentInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment internal server error response has a 3xx status code
func (o *PurchaseShipmentInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment internal server error response has a 4xx status code
func (o *PurchaseShipmentInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this purchase shipment internal server error response has a 5xx status code
func (o *PurchaseShipmentInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this purchase shipment internal server error response a status code equal to that given
func (o *PurchaseShipmentInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *PurchaseShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *PurchaseShipmentInternalServerError) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentInternalServerError  %+v", 500, o.Payload)
}

func (o *PurchaseShipmentInternalServerError) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseShipmentServiceUnavailable creates a PurchaseShipmentServiceUnavailable with default headers values
func NewPurchaseShipmentServiceUnavailable() *PurchaseShipmentServiceUnavailable {
	return &PurchaseShipmentServiceUnavailable{}
}

/*
PurchaseShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PurchaseShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseShipmentResponse
}

// IsSuccess returns true when this purchase shipment service unavailable response has a 2xx status code
func (o *PurchaseShipmentServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this purchase shipment service unavailable response has a 3xx status code
func (o *PurchaseShipmentServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this purchase shipment service unavailable response has a 4xx status code
func (o *PurchaseShipmentServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this purchase shipment service unavailable response has a 5xx status code
func (o *PurchaseShipmentServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this purchase shipment service unavailable response a status code equal to that given
func (o *PurchaseShipmentServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *PurchaseShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PurchaseShipmentServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /shipping/v1/purchaseShipment][%d] purchaseShipmentServiceUnavailable  %+v", 503, o.Payload)
}

func (o *PurchaseShipmentServiceUnavailable) GetPayload() *shipping_models.PurchaseShipmentResponse {
	return o.Payload
}

func (o *PurchaseShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
