// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/shipping/shipping_models"
)

// GetShipmentReader is a Reader for the GetShipment structure.
type GetShipmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetShipmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetShipmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetShipmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetShipmentUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetShipmentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetShipmentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetShipmentTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetShipmentInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetShipmentServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetShipmentOK creates a GetShipmentOK with default headers values
func NewGetShipmentOK() *GetShipmentOK {
	return &GetShipmentOK{}
}

/* GetShipmentOK describes a response with status code 200, with default header values.

Success.
*/
type GetShipmentOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentOK  %+v", 200, o.Payload)
}
func (o *GetShipmentOK) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentBadRequest creates a GetShipmentBadRequest with default headers values
func NewGetShipmentBadRequest() *GetShipmentBadRequest {
	return &GetShipmentBadRequest{}
}

/* GetShipmentBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetShipmentBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentBadRequest  %+v", 400, o.Payload)
}
func (o *GetShipmentBadRequest) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentUnauthorized creates a GetShipmentUnauthorized with default headers values
func NewGetShipmentUnauthorized() *GetShipmentUnauthorized {
	return &GetShipmentUnauthorized{}
}

/* GetShipmentUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetShipmentUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentUnauthorized  %+v", 401, o.Payload)
}
func (o *GetShipmentUnauthorized) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentForbidden creates a GetShipmentForbidden with default headers values
func NewGetShipmentForbidden() *GetShipmentForbidden {
	return &GetShipmentForbidden{}
}

/* GetShipmentForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type GetShipmentForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentForbidden  %+v", 403, o.Payload)
}
func (o *GetShipmentForbidden) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentNotFound creates a GetShipmentNotFound with default headers values
func NewGetShipmentNotFound() *GetShipmentNotFound {
	return &GetShipmentNotFound{}
}

/* GetShipmentNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetShipmentNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentNotFound  %+v", 404, o.Payload)
}
func (o *GetShipmentNotFound) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentTooManyRequests creates a GetShipmentTooManyRequests with default headers values
func NewGetShipmentTooManyRequests() *GetShipmentTooManyRequests {
	return &GetShipmentTooManyRequests{}
}

/* GetShipmentTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetShipmentTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetShipmentTooManyRequests) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentInternalServerError creates a GetShipmentInternalServerError with default headers values
func NewGetShipmentInternalServerError() *GetShipmentInternalServerError {
	return &GetShipmentInternalServerError{}
}

/* GetShipmentInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type GetShipmentInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentInternalServerError  %+v", 500, o.Payload)
}
func (o *GetShipmentInternalServerError) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetShipmentServiceUnavailable creates a GetShipmentServiceUnavailable with default headers values
func NewGetShipmentServiceUnavailable() *GetShipmentServiceUnavailable {
	return &GetShipmentServiceUnavailable{}
}

/* GetShipmentServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetShipmentServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetShipmentResponse
}

func (o *GetShipmentServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/shipments/{shipmentId}][%d] getShipmentServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetShipmentServiceUnavailable) GetPayload() *shipping_models.GetShipmentResponse {
	return o.Payload
}

func (o *GetShipmentServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetShipmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
