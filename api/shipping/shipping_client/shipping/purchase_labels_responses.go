// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/shipping/shipping_models"
)

// PurchaseLabelsReader is a Reader for the PurchaseLabels structure.
type PurchaseLabelsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PurchaseLabelsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewPurchaseLabelsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewPurchaseLabelsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewPurchaseLabelsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewPurchaseLabelsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewPurchaseLabelsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewPurchaseLabelsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewPurchaseLabelsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewPurchaseLabelsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewPurchaseLabelsOK creates a PurchaseLabelsOK with default headers values
func NewPurchaseLabelsOK() *PurchaseLabelsOK {
	return &PurchaseLabelsOK{}
}

/* PurchaseLabelsOK describes a response with status code 200, with default header values.

Success.
*/
type PurchaseLabelsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsOK) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsOK  %+v", 200, o.Payload)
}
func (o *PurchaseLabelsOK) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsBadRequest creates a PurchaseLabelsBadRequest with default headers values
func NewPurchaseLabelsBadRequest() *PurchaseLabelsBadRequest {
	return &PurchaseLabelsBadRequest{}
}

/* PurchaseLabelsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type PurchaseLabelsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsBadRequest) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsBadRequest  %+v", 400, o.Payload)
}
func (o *PurchaseLabelsBadRequest) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsUnauthorized creates a PurchaseLabelsUnauthorized with default headers values
func NewPurchaseLabelsUnauthorized() *PurchaseLabelsUnauthorized {
	return &PurchaseLabelsUnauthorized{}
}

/* PurchaseLabelsUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type PurchaseLabelsUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsUnauthorized  %+v", 401, o.Payload)
}
func (o *PurchaseLabelsUnauthorized) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsForbidden creates a PurchaseLabelsForbidden with default headers values
func NewPurchaseLabelsForbidden() *PurchaseLabelsForbidden {
	return &PurchaseLabelsForbidden{}
}

/* PurchaseLabelsForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type PurchaseLabelsForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsForbidden) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsForbidden  %+v", 403, o.Payload)
}
func (o *PurchaseLabelsForbidden) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsNotFound creates a PurchaseLabelsNotFound with default headers values
func NewPurchaseLabelsNotFound() *PurchaseLabelsNotFound {
	return &PurchaseLabelsNotFound{}
}

/* PurchaseLabelsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type PurchaseLabelsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsNotFound) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsNotFound  %+v", 404, o.Payload)
}
func (o *PurchaseLabelsNotFound) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsTooManyRequests creates a PurchaseLabelsTooManyRequests with default headers values
func NewPurchaseLabelsTooManyRequests() *PurchaseLabelsTooManyRequests {
	return &PurchaseLabelsTooManyRequests{}
}

/* PurchaseLabelsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type PurchaseLabelsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsTooManyRequests  %+v", 429, o.Payload)
}
func (o *PurchaseLabelsTooManyRequests) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsInternalServerError creates a PurchaseLabelsInternalServerError with default headers values
func NewPurchaseLabelsInternalServerError() *PurchaseLabelsInternalServerError {
	return &PurchaseLabelsInternalServerError{}
}

/* PurchaseLabelsInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type PurchaseLabelsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsInternalServerError  %+v", 500, o.Payload)
}
func (o *PurchaseLabelsInternalServerError) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPurchaseLabelsServiceUnavailable creates a PurchaseLabelsServiceUnavailable with default headers values
func NewPurchaseLabelsServiceUnavailable() *PurchaseLabelsServiceUnavailable {
	return &PurchaseLabelsServiceUnavailable{}
}

/* PurchaseLabelsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type PurchaseLabelsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.PurchaseLabelsResponse
}

func (o *PurchaseLabelsServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/purchaseLabels][%d] purchaseLabelsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *PurchaseLabelsServiceUnavailable) GetPayload() *shipping_models.PurchaseLabelsResponse {
	return o.Payload
}

func (o *PurchaseLabelsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.PurchaseLabelsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
