// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/shipping/shipping_models"
)

// GetTrackingInformationReader is a Reader for the GetTrackingInformation structure.
type GetTrackingInformationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTrackingInformationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTrackingInformationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTrackingInformationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTrackingInformationUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTrackingInformationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTrackingInformationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTrackingInformationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTrackingInformationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTrackingInformationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTrackingInformationOK creates a GetTrackingInformationOK with default headers values
func NewGetTrackingInformationOK() *GetTrackingInformationOK {
	return &GetTrackingInformationOK{}
}

/* GetTrackingInformationOK describes a response with status code 200, with default header values.

Success.
*/
type GetTrackingInformationOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationOK) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationOK  %+v", 200, o.Payload)
}
func (o *GetTrackingInformationOK) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationBadRequest creates a GetTrackingInformationBadRequest with default headers values
func NewGetTrackingInformationBadRequest() *GetTrackingInformationBadRequest {
	return &GetTrackingInformationBadRequest{}
}

/* GetTrackingInformationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetTrackingInformationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationBadRequest) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationBadRequest  %+v", 400, o.Payload)
}
func (o *GetTrackingInformationBadRequest) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationUnauthorized creates a GetTrackingInformationUnauthorized with default headers values
func NewGetTrackingInformationUnauthorized() *GetTrackingInformationUnauthorized {
	return &GetTrackingInformationUnauthorized{}
}

/* GetTrackingInformationUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetTrackingInformationUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationUnauthorized) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationUnauthorized  %+v", 401, o.Payload)
}
func (o *GetTrackingInformationUnauthorized) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationForbidden creates a GetTrackingInformationForbidden with default headers values
func NewGetTrackingInformationForbidden() *GetTrackingInformationForbidden {
	return &GetTrackingInformationForbidden{}
}

/* GetTrackingInformationForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type GetTrackingInformationForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationForbidden) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationForbidden  %+v", 403, o.Payload)
}
func (o *GetTrackingInformationForbidden) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationNotFound creates a GetTrackingInformationNotFound with default headers values
func NewGetTrackingInformationNotFound() *GetTrackingInformationNotFound {
	return &GetTrackingInformationNotFound{}
}

/* GetTrackingInformationNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetTrackingInformationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationNotFound) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationNotFound  %+v", 404, o.Payload)
}
func (o *GetTrackingInformationNotFound) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationTooManyRequests creates a GetTrackingInformationTooManyRequests with default headers values
func NewGetTrackingInformationTooManyRequests() *GetTrackingInformationTooManyRequests {
	return &GetTrackingInformationTooManyRequests{}
}

/* GetTrackingInformationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetTrackingInformationTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetTrackingInformationTooManyRequests) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationInternalServerError creates a GetTrackingInformationInternalServerError with default headers values
func NewGetTrackingInformationInternalServerError() *GetTrackingInformationInternalServerError {
	return &GetTrackingInformationInternalServerError{}
}

/* GetTrackingInformationInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type GetTrackingInformationInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationInternalServerError) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationInternalServerError  %+v", 500, o.Payload)
}
func (o *GetTrackingInformationInternalServerError) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTrackingInformationServiceUnavailable creates a GetTrackingInformationServiceUnavailable with default headers values
func NewGetTrackingInformationServiceUnavailable() *GetTrackingInformationServiceUnavailable {
	return &GetTrackingInformationServiceUnavailable{}
}

/* GetTrackingInformationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetTrackingInformationServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.GetTrackingInformationResponse
}

func (o *GetTrackingInformationServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /shipping/v1/tracking/{trackingId}][%d] getTrackingInformationServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetTrackingInformationServiceUnavailable) GetPayload() *shipping_models.GetTrackingInformationResponse {
	return o.Payload
}

func (o *GetTrackingInformationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.GetTrackingInformationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
