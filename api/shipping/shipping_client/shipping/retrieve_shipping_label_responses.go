// Code generated by go-swagger; DO NOT EDIT.

package shipping

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/shipping/shipping_models"
)

// RetrieveShippingLabelReader is a Reader for the RetrieveShippingLabel structure.
type RetrieveShippingLabelReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetrieveShippingLabelReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRetrieveShippingLabelOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRetrieveShippingLabelBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewRetrieveShippingLabelUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRetrieveShippingLabelForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetrieveShippingLabelNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRetrieveShippingLabelTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRetrieveShippingLabelInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRetrieveShippingLabelServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRetrieveShippingLabelOK creates a RetrieveShippingLabelOK with default headers values
func NewRetrieveShippingLabelOK() *RetrieveShippingLabelOK {
	return &RetrieveShippingLabelOK{}
}

/*
RetrieveShippingLabelOK describes a response with status code 200, with default header values.

Success.
*/
type RetrieveShippingLabelOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label o k response has a 2xx status code
func (o *RetrieveShippingLabelOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retrieve shipping label o k response has a 3xx status code
func (o *RetrieveShippingLabelOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label o k response has a 4xx status code
func (o *RetrieveShippingLabelOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this retrieve shipping label o k response has a 5xx status code
func (o *RetrieveShippingLabelOK) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve shipping label o k response a status code equal to that given
func (o *RetrieveShippingLabelOK) IsCode(code int) bool {
	return code == 200
}

func (o *RetrieveShippingLabelOK) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelOK  %+v", 200, o.Payload)
}

func (o *RetrieveShippingLabelOK) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelOK  %+v", 200, o.Payload)
}

func (o *RetrieveShippingLabelOK) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelBadRequest creates a RetrieveShippingLabelBadRequest with default headers values
func NewRetrieveShippingLabelBadRequest() *RetrieveShippingLabelBadRequest {
	return &RetrieveShippingLabelBadRequest{}
}

/*
RetrieveShippingLabelBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type RetrieveShippingLabelBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label bad request response has a 2xx status code
func (o *RetrieveShippingLabelBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label bad request response has a 3xx status code
func (o *RetrieveShippingLabelBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label bad request response has a 4xx status code
func (o *RetrieveShippingLabelBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve shipping label bad request response has a 5xx status code
func (o *RetrieveShippingLabelBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve shipping label bad request response a status code equal to that given
func (o *RetrieveShippingLabelBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RetrieveShippingLabelBadRequest) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelBadRequest  %+v", 400, o.Payload)
}

func (o *RetrieveShippingLabelBadRequest) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelBadRequest  %+v", 400, o.Payload)
}

func (o *RetrieveShippingLabelBadRequest) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelUnauthorized creates a RetrieveShippingLabelUnauthorized with default headers values
func NewRetrieveShippingLabelUnauthorized() *RetrieveShippingLabelUnauthorized {
	return &RetrieveShippingLabelUnauthorized{}
}

/*
RetrieveShippingLabelUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type RetrieveShippingLabelUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label unauthorized response has a 2xx status code
func (o *RetrieveShippingLabelUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label unauthorized response has a 3xx status code
func (o *RetrieveShippingLabelUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label unauthorized response has a 4xx status code
func (o *RetrieveShippingLabelUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve shipping label unauthorized response has a 5xx status code
func (o *RetrieveShippingLabelUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve shipping label unauthorized response a status code equal to that given
func (o *RetrieveShippingLabelUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *RetrieveShippingLabelUnauthorized) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelUnauthorized  %+v", 401, o.Payload)
}

func (o *RetrieveShippingLabelUnauthorized) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelUnauthorized  %+v", 401, o.Payload)
}

func (o *RetrieveShippingLabelUnauthorized) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelForbidden creates a RetrieveShippingLabelForbidden with default headers values
func NewRetrieveShippingLabelForbidden() *RetrieveShippingLabelForbidden {
	return &RetrieveShippingLabelForbidden{}
}

/*
RetrieveShippingLabelForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type RetrieveShippingLabelForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label forbidden response has a 2xx status code
func (o *RetrieveShippingLabelForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label forbidden response has a 3xx status code
func (o *RetrieveShippingLabelForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label forbidden response has a 4xx status code
func (o *RetrieveShippingLabelForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve shipping label forbidden response has a 5xx status code
func (o *RetrieveShippingLabelForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve shipping label forbidden response a status code equal to that given
func (o *RetrieveShippingLabelForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RetrieveShippingLabelForbidden) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelForbidden  %+v", 403, o.Payload)
}

func (o *RetrieveShippingLabelForbidden) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelForbidden  %+v", 403, o.Payload)
}

func (o *RetrieveShippingLabelForbidden) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelNotFound creates a RetrieveShippingLabelNotFound with default headers values
func NewRetrieveShippingLabelNotFound() *RetrieveShippingLabelNotFound {
	return &RetrieveShippingLabelNotFound{}
}

/*
RetrieveShippingLabelNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type RetrieveShippingLabelNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label not found response has a 2xx status code
func (o *RetrieveShippingLabelNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label not found response has a 3xx status code
func (o *RetrieveShippingLabelNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label not found response has a 4xx status code
func (o *RetrieveShippingLabelNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve shipping label not found response has a 5xx status code
func (o *RetrieveShippingLabelNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve shipping label not found response a status code equal to that given
func (o *RetrieveShippingLabelNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RetrieveShippingLabelNotFound) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelNotFound  %+v", 404, o.Payload)
}

func (o *RetrieveShippingLabelNotFound) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelNotFound  %+v", 404, o.Payload)
}

func (o *RetrieveShippingLabelNotFound) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelTooManyRequests creates a RetrieveShippingLabelTooManyRequests with default headers values
func NewRetrieveShippingLabelTooManyRequests() *RetrieveShippingLabelTooManyRequests {
	return &RetrieveShippingLabelTooManyRequests{}
}

/*
RetrieveShippingLabelTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type RetrieveShippingLabelTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label too many requests response has a 2xx status code
func (o *RetrieveShippingLabelTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label too many requests response has a 3xx status code
func (o *RetrieveShippingLabelTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label too many requests response has a 4xx status code
func (o *RetrieveShippingLabelTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this retrieve shipping label too many requests response has a 5xx status code
func (o *RetrieveShippingLabelTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this retrieve shipping label too many requests response a status code equal to that given
func (o *RetrieveShippingLabelTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *RetrieveShippingLabelTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelTooManyRequests  %+v", 429, o.Payload)
}

func (o *RetrieveShippingLabelTooManyRequests) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelTooManyRequests  %+v", 429, o.Payload)
}

func (o *RetrieveShippingLabelTooManyRequests) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelInternalServerError creates a RetrieveShippingLabelInternalServerError with default headers values
func NewRetrieveShippingLabelInternalServerError() *RetrieveShippingLabelInternalServerError {
	return &RetrieveShippingLabelInternalServerError{}
}

/*
RetrieveShippingLabelInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type RetrieveShippingLabelInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label internal server error response has a 2xx status code
func (o *RetrieveShippingLabelInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label internal server error response has a 3xx status code
func (o *RetrieveShippingLabelInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label internal server error response has a 4xx status code
func (o *RetrieveShippingLabelInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this retrieve shipping label internal server error response has a 5xx status code
func (o *RetrieveShippingLabelInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this retrieve shipping label internal server error response a status code equal to that given
func (o *RetrieveShippingLabelInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RetrieveShippingLabelInternalServerError) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelInternalServerError  %+v", 500, o.Payload)
}

func (o *RetrieveShippingLabelInternalServerError) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelInternalServerError  %+v", 500, o.Payload)
}

func (o *RetrieveShippingLabelInternalServerError) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetrieveShippingLabelServiceUnavailable creates a RetrieveShippingLabelServiceUnavailable with default headers values
func NewRetrieveShippingLabelServiceUnavailable() *RetrieveShippingLabelServiceUnavailable {
	return &RetrieveShippingLabelServiceUnavailable{}
}

/*
RetrieveShippingLabelServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type RetrieveShippingLabelServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *shipping_models.RetrieveShippingLabelResponse
}

// IsSuccess returns true when this retrieve shipping label service unavailable response has a 2xx status code
func (o *RetrieveShippingLabelServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retrieve shipping label service unavailable response has a 3xx status code
func (o *RetrieveShippingLabelServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retrieve shipping label service unavailable response has a 4xx status code
func (o *RetrieveShippingLabelServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this retrieve shipping label service unavailable response has a 5xx status code
func (o *RetrieveShippingLabelServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this retrieve shipping label service unavailable response a status code equal to that given
func (o *RetrieveShippingLabelServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *RetrieveShippingLabelServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RetrieveShippingLabelServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /shipping/v1/shipments/{shipmentId}/containers/{trackingId}/label][%d] retrieveShippingLabelServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RetrieveShippingLabelServiceUnavailable) GetPayload() *shipping_models.RetrieveShippingLabelResponse {
	return o.Payload
}

func (o *RetrieveShippingLabelServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(shipping_models.RetrieveShippingLabelResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
