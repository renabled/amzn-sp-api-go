// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Rate The available rate that can be used to send the shipment
//
// swagger:model Rate
type Rate struct {

	// The weight that was used to calculate the totalCharge.
	BilledWeight *Weight `json:"billedWeight,omitempty"`

	// The time after which the offering will expire.
	// Format: date-time
	ExpirationTime strfmt.DateTime `json:"expirationTime,omitempty"`

	// promise
	Promise *ShippingPromiseSet `json:"promise,omitempty"`

	// An identifier for the rate.
	RateID string `json:"rateId,omitempty"`

	// service type
	ServiceType ServiceType `json:"serviceType,omitempty"`

	// The total charge that will be billed for the rate.
	TotalCharge *Currency `json:"totalCharge,omitempty"`
}

// Validate validates this rate
func (m *Rate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBilledWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCharge(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rate) validateBilledWeight(formats strfmt.Registry) error {
	if swag.IsZero(m.BilledWeight) { // not required
		return nil
	}

	if m.BilledWeight != nil {
		if err := m.BilledWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billedWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billedWeight")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateExpirationTime(formats strfmt.Registry) error {
	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationTime", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Rate) validatePromise(formats strfmt.Registry) error {
	if swag.IsZero(m.Promise) { // not required
		return nil
	}

	if m.Promise != nil {
		if err := m.Promise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) validateServiceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceType) { // not required
		return nil
	}

	if err := m.ServiceType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceType")
		}
		return err
	}

	return nil
}

func (m *Rate) validateTotalCharge(formats strfmt.Registry) error {
	if swag.IsZero(m.TotalCharge) { // not required
		return nil
	}

	if m.TotalCharge != nil {
		if err := m.TotalCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rate based on the context it is used
func (m *Rate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBilledWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Rate) contextValidateBilledWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.BilledWeight != nil {
		if err := m.BilledWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billedWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billedWeight")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidatePromise(ctx context.Context, formats strfmt.Registry) error {

	if m.Promise != nil {
		if err := m.Promise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *Rate) contextValidateServiceType(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceType.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceType")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceType")
		}
		return err
	}

	return nil
}

func (m *Rate) contextValidateTotalCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalCharge != nil {
		if err := m.TotalCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Rate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Rate) UnmarshalBinary(b []byte) error {
	var res Rate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
