// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PurchaseShipmentRequest The payload schema for the purchaseShipment operation.
//
// swagger:model PurchaseShipmentRequest
type PurchaseShipmentRequest struct {

	// client reference Id
	// Required: true
	ClientReferenceID *ClientReferenceID `json:"clientReferenceId"`

	// containers
	// Required: true
	Containers ContainerList `json:"containers"`

	// label specification
	// Required: true
	LabelSpecification *LabelSpecification `json:"labelSpecification"`

	// service type
	// Required: true
	ServiceType *ServiceType `json:"serviceType"`

	// The start date and time. This defaults to the current date and time.
	// Format: date-time
	ShipDate strfmt.DateTime `json:"shipDate,omitempty"`

	// ship from
	// Required: true
	ShipFrom *Address `json:"shipFrom"`

	// ship to
	// Required: true
	ShipTo *Address `json:"shipTo"`
}

// Validate validates this purchase shipment request
func (m *PurchaseShipmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientReferenceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabelSpecification(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipTo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchaseShipmentRequest) validateClientReferenceID(formats strfmt.Registry) error {

	if err := validate.Required("clientReferenceId", "body", m.ClientReferenceID); err != nil {
		return err
	}

	if err := validate.Required("clientReferenceId", "body", m.ClientReferenceID); err != nil {
		return err
	}

	if m.ClientReferenceID != nil {
		if err := m.ClientReferenceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientReferenceId")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) validateContainers(formats strfmt.Registry) error {

	if err := validate.Required("containers", "body", m.Containers); err != nil {
		return err
	}

	if err := m.Containers.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("containers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("containers")
		}
		return err
	}

	return nil
}

func (m *PurchaseShipmentRequest) validateLabelSpecification(formats strfmt.Registry) error {

	if err := validate.Required("labelSpecification", "body", m.LabelSpecification); err != nil {
		return err
	}

	if m.LabelSpecification != nil {
		if err := m.LabelSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) validateServiceType(formats strfmt.Registry) error {

	if err := validate.Required("serviceType", "body", m.ServiceType); err != nil {
		return err
	}

	if err := validate.Required("serviceType", "body", m.ServiceType); err != nil {
		return err
	}

	if m.ServiceType != nil {
		if err := m.ServiceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceType")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) validateShipDate(formats strfmt.Registry) error {
	if swag.IsZero(m.ShipDate) { // not required
		return nil
	}

	if err := validate.FormatOf("shipDate", "body", "date-time", m.ShipDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *PurchaseShipmentRequest) validateShipFrom(formats strfmt.Registry) error {

	if err := validate.Required("shipFrom", "body", m.ShipFrom); err != nil {
		return err
	}

	if m.ShipFrom != nil {
		if err := m.ShipFrom.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFrom")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) validateShipTo(formats strfmt.Registry) error {

	if err := validate.Required("shipTo", "body", m.ShipTo); err != nil {
		return err
	}

	if m.ShipTo != nil {
		if err := m.ShipTo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this purchase shipment request based on the context it is used
func (m *PurchaseShipmentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClientReferenceID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateContainers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLabelSpecification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipTo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchaseShipmentRequest) contextValidateClientReferenceID(ctx context.Context, formats strfmt.Registry) error {

	if m.ClientReferenceID != nil {
		if err := m.ClientReferenceID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clientReferenceId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clientReferenceId")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) contextValidateContainers(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Containers.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("containers")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("containers")
		}
		return err
	}

	return nil
}

func (m *PurchaseShipmentRequest) contextValidateLabelSpecification(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelSpecification != nil {
		if err := m.LabelSpecification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecification")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) contextValidateServiceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceType != nil {
		if err := m.ServiceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceType")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) contextValidateShipFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipFrom != nil {
		if err := m.ShipFrom.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipFrom")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipFrom")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentRequest) contextValidateShipTo(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipTo != nil {
		if err := m.ShipTo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipTo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipTo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchaseShipmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchaseShipmentRequest) UnmarshalBinary(b []byte) error {
	var res PurchaseShipmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
