// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PurchaseShipmentResult The payload schema for the purchaseShipment operation.
//
// swagger:model PurchaseShipmentResult
type PurchaseShipmentResult struct {

	// label results
	// Required: true
	LabelResults LabelResultList `json:"labelResults"`

	// service rate
	// Required: true
	ServiceRate *ServiceRate `json:"serviceRate"`

	// shipment Id
	// Required: true
	ShipmentID *ShipmentID `json:"shipmentId"`
}

// Validate validates this purchase shipment result
func (m *PurchaseShipmentResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelResults(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShipmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchaseShipmentResult) validateLabelResults(formats strfmt.Registry) error {

	if err := validate.Required("labelResults", "body", m.LabelResults); err != nil {
		return err
	}

	if err := m.LabelResults.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("labelResults")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("labelResults")
		}
		return err
	}

	return nil
}

func (m *PurchaseShipmentResult) validateServiceRate(formats strfmt.Registry) error {

	if err := validate.Required("serviceRate", "body", m.ServiceRate); err != nil {
		return err
	}

	if m.ServiceRate != nil {
		if err := m.ServiceRate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceRate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceRate")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentResult) validateShipmentID(formats strfmt.Registry) error {

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if err := validate.Required("shipmentId", "body", m.ShipmentID); err != nil {
		return err
	}

	if m.ShipmentID != nil {
		if err := m.ShipmentID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this purchase shipment result based on the context it is used
func (m *PurchaseShipmentResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelResults(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceRate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateShipmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PurchaseShipmentResult) contextValidateLabelResults(ctx context.Context, formats strfmt.Registry) error {

	if err := m.LabelResults.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("labelResults")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("labelResults")
		}
		return err
	}

	return nil
}

func (m *PurchaseShipmentResult) contextValidateServiceRate(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceRate != nil {
		if err := m.ServiceRate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceRate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceRate")
			}
			return err
		}
	}

	return nil
}

func (m *PurchaseShipmentResult) contextValidateShipmentID(ctx context.Context, formats strfmt.Registry) error {

	if m.ShipmentID != nil {
		if err := m.ShipmentID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("shipmentId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("shipmentId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PurchaseShipmentResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PurchaseShipmentResult) UnmarshalBinary(b []byte) error {
	var res PurchaseShipmentResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
