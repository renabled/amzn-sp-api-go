// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TrackingInformation The payload schema for the getTrackingInformation operation.
//
// swagger:model TrackingInformation
type TrackingInformation struct {

	// event history
	// Required: true
	EventHistory EventList `json:"eventHistory"`

	// promised delivery date
	// Required: true
	// Format: date-time
	PromisedDeliveryDate *PromisedDeliveryDate `json:"promisedDeliveryDate"`

	// summary
	// Required: true
	Summary *TrackingSummary `json:"summary"`

	// tracking Id
	// Required: true
	TrackingID *TrackingID `json:"trackingId"`
}

// Validate validates this tracking information
func (m *TrackingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEventHistory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromisedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSummary(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrackingID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackingInformation) validateEventHistory(formats strfmt.Registry) error {

	if err := validate.Required("eventHistory", "body", m.EventHistory); err != nil {
		return err
	}

	if err := m.EventHistory.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventHistory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eventHistory")
		}
		return err
	}

	return nil
}

func (m *TrackingInformation) validatePromisedDeliveryDate(formats strfmt.Registry) error {

	if err := validate.Required("promisedDeliveryDate", "body", m.PromisedDeliveryDate); err != nil {
		return err
	}

	if err := validate.Required("promisedDeliveryDate", "body", m.PromisedDeliveryDate); err != nil {
		return err
	}

	if m.PromisedDeliveryDate != nil {
		if err := m.PromisedDeliveryDate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promisedDeliveryDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promisedDeliveryDate")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingInformation) validateSummary(formats strfmt.Registry) error {

	if err := validate.Required("summary", "body", m.Summary); err != nil {
		return err
	}

	if m.Summary != nil {
		if err := m.Summary.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingInformation) validateTrackingID(formats strfmt.Registry) error {

	if err := validate.Required("trackingId", "body", m.TrackingID); err != nil {
		return err
	}

	if err := validate.Required("trackingId", "body", m.TrackingID); err != nil {
		return err
	}

	if m.TrackingID != nil {
		if err := m.TrackingID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingId")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this tracking information based on the context it is used
func (m *TrackingInformation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEventHistory(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromisedDeliveryDate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSummary(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTrackingID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TrackingInformation) contextValidateEventHistory(ctx context.Context, formats strfmt.Registry) error {

	if err := m.EventHistory.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("eventHistory")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("eventHistory")
		}
		return err
	}

	return nil
}

func (m *TrackingInformation) contextValidatePromisedDeliveryDate(ctx context.Context, formats strfmt.Registry) error {

	if m.PromisedDeliveryDate != nil {
		if err := m.PromisedDeliveryDate.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promisedDeliveryDate")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promisedDeliveryDate")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingInformation) contextValidateSummary(ctx context.Context, formats strfmt.Registry) error {

	if m.Summary != nil {
		if err := m.Summary.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("summary")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("summary")
			}
			return err
		}
	}

	return nil
}

func (m *TrackingInformation) contextValidateTrackingID(ctx context.Context, formats strfmt.Registry) error {

	if m.TrackingID != nil {
		if err := m.TrackingID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trackingId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("trackingId")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TrackingInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TrackingInformation) UnmarshalBinary(b []byte) error {
	var res TrackingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
