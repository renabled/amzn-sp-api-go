// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RetrieveShippingLabelRequest The request schema for the retrieveShippingLabel operation.
//
// swagger:model RetrieveShippingLabelRequest
type RetrieveShippingLabelRequest struct {

	// label specification
	// Required: true
	LabelSpecification *LabelSpecification `json:"labelSpecification"`
}

// Validate validates this retrieve shipping label request
func (m *RetrieveShippingLabelRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabelSpecification(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveShippingLabelRequest) validateLabelSpecification(formats strfmt.Registry) error {

	if err := validate.Required("labelSpecification", "body", m.LabelSpecification); err != nil {
		return err
	}

	if m.LabelSpecification != nil {
		if err := m.LabelSpecification.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecification")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this retrieve shipping label request based on the context it is used
func (m *RetrieveShippingLabelRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLabelSpecification(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RetrieveShippingLabelRequest) contextValidateLabelSpecification(ctx context.Context, formats strfmt.Registry) error {

	if m.LabelSpecification != nil {
		if err := m.LabelSpecification.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("labelSpecification")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("labelSpecification")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RetrieveShippingLabelRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RetrieveShippingLabelRequest) UnmarshalBinary(b []byte) error {
	var res RetrieveShippingLabelRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
