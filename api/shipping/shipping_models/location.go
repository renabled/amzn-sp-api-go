// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Location The location where the person, business or institution is located.
//
// swagger:model Location
type Location struct {

	// city
	City City `json:"city,omitempty"`

	// country code
	CountryCode CountryCode `json:"countryCode,omitempty"`

	// postal code
	PostalCode PostalCode `json:"postalCode,omitempty"`

	// state or region
	StateOrRegion StateOrRegion `json:"stateOrRegion,omitempty"`
}

// Validate validates this location
func (m *Location) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePostalCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStateOrRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) validateCity(formats strfmt.Registry) error {
	if swag.IsZero(m.City) { // not required
		return nil
	}

	if err := m.City.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("city")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("city")
		}
		return err
	}

	return nil
}

func (m *Location) validateCountryCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := m.CountryCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("countryCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("countryCode")
		}
		return err
	}

	return nil
}

func (m *Location) validatePostalCode(formats strfmt.Registry) error {
	if swag.IsZero(m.PostalCode) { // not required
		return nil
	}

	if err := m.PostalCode.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("postalCode")
		}
		return err
	}

	return nil
}

func (m *Location) validateStateOrRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.StateOrRegion) { // not required
		return nil
	}

	if err := m.StateOrRegion.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stateOrRegion")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stateOrRegion")
		}
		return err
	}

	return nil
}

// ContextValidate validate this location based on the context it is used
func (m *Location) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCountryCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePostalCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStateOrRegion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Location) contextValidateCity(ctx context.Context, formats strfmt.Registry) error {

	if err := m.City.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("city")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("city")
		}
		return err
	}

	return nil
}

func (m *Location) contextValidateCountryCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CountryCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("countryCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("countryCode")
		}
		return err
	}

	return nil
}

func (m *Location) contextValidatePostalCode(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PostalCode.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("postalCode")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("postalCode")
		}
		return err
	}

	return nil
}

func (m *Location) contextValidateStateOrRegion(ctx context.Context, formats strfmt.Registry) error {

	if err := m.StateOrRegion.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stateOrRegion")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("stateOrRegion")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Location) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Location) UnmarshalBinary(b []byte) error {
	var res Location
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
