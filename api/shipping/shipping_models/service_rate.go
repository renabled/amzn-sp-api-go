// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceRate The specific rate for a shipping service, or null if no service available.
//
// swagger:model ServiceRate
type ServiceRate struct {

	// The weight that was used to calculate the totalCharge.
	// Required: true
	BillableWeight *Weight `json:"billableWeight"`

	// promise
	// Required: true
	Promise *ShippingPromiseSet `json:"promise"`

	// service type
	// Required: true
	ServiceType *ServiceType `json:"serviceType"`

	// The total charge that will be billed for the rate.
	// Required: true
	TotalCharge *Currency `json:"totalCharge"`
}

// Validate validates this service rate
func (m *ServiceRate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillableWeight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromise(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalCharge(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceRate) validateBillableWeight(formats strfmt.Registry) error {

	if err := validate.Required("billableWeight", "body", m.BillableWeight); err != nil {
		return err
	}

	if m.BillableWeight != nil {
		if err := m.BillableWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billableWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billableWeight")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRate) validatePromise(formats strfmt.Registry) error {

	if err := validate.Required("promise", "body", m.Promise); err != nil {
		return err
	}

	if m.Promise != nil {
		if err := m.Promise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRate) validateServiceType(formats strfmt.Registry) error {

	if err := validate.Required("serviceType", "body", m.ServiceType); err != nil {
		return err
	}

	if err := validate.Required("serviceType", "body", m.ServiceType); err != nil {
		return err
	}

	if m.ServiceType != nil {
		if err := m.ServiceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceType")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRate) validateTotalCharge(formats strfmt.Registry) error {

	if err := validate.Required("totalCharge", "body", m.TotalCharge); err != nil {
		return err
	}

	if m.TotalCharge != nil {
		if err := m.TotalCharge.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this service rate based on the context it is used
func (m *ServiceRate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBillableWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePromise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTotalCharge(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceRate) contextValidateBillableWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.BillableWeight != nil {
		if err := m.BillableWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("billableWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("billableWeight")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRate) contextValidatePromise(ctx context.Context, formats strfmt.Registry) error {

	if m.Promise != nil {
		if err := m.Promise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("promise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("promise")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRate) contextValidateServiceType(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceType != nil {
		if err := m.ServiceType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceType")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceRate) contextValidateTotalCharge(ctx context.Context, formats strfmt.Registry) error {

	if m.TotalCharge != nil {
		if err := m.TotalCharge.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("totalCharge")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("totalCharge")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceRate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceRate) UnmarshalBinary(b []byte) error {
	var res ServiceRate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
