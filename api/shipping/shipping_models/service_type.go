// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// ServiceType The type of shipping service that will be used for the service offering.
//
// swagger:model ServiceType
type ServiceType string

func NewServiceType(value ServiceType) *ServiceType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated ServiceType.
func (m ServiceType) Pointer() *ServiceType {
	return &m
}

const (

	// ServiceTypeAmazonShippingGround captures enum value "Amazon Shipping Ground"
	ServiceTypeAmazonShippingGround ServiceType = "Amazon Shipping Ground"

	// ServiceTypeAmazonShippingStandard captures enum value "Amazon Shipping Standard"
	ServiceTypeAmazonShippingStandard ServiceType = "Amazon Shipping Standard"

	// ServiceTypeAmazonShippingPremium captures enum value "Amazon Shipping Premium"
	ServiceTypeAmazonShippingPremium ServiceType = "Amazon Shipping Premium"
)

// for schema
var serviceTypeEnum []interface{}

func init() {
	var res []ServiceType
	if err := json.Unmarshal([]byte(`["Amazon Shipping Ground","Amazon Shipping Standard","Amazon Shipping Premium"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceTypeEnum = append(serviceTypeEnum, v)
	}
}

func (m ServiceType) validateServiceTypeEnum(path, location string, value ServiceType) error {
	if err := validate.EnumCase(path, location, value, serviceTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this service type
func (m ServiceType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateServiceTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this service type based on context it is used
func (m ServiceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
