// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Party The account related with the shipment.
//
// swagger:model Party
type Party struct {

	// account Id
	AccountID AccountID `json:"accountId,omitempty"`
}

// Validate validates this party
func (m *Party) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Party) validateAccountID(formats strfmt.Registry) error {
	if swag.IsZero(m.AccountID) { // not required
		return nil
	}

	if err := m.AccountID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accountId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this party based on the context it is used
func (m *Party) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccountID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Party) contextValidateAccountID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AccountID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("accountId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("accountId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Party) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Party) UnmarshalBinary(b []byte) error {
	var res Party
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
