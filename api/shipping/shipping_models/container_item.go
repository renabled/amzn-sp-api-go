// Code generated by go-swagger; DO NOT EDIT.

package shipping_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ContainerItem Item in the container.
//
// swagger:model ContainerItem
type ContainerItem struct {

	// The quantity of the items of this type in the container.
	// Required: true
	Quantity *float64 `json:"quantity"`

	// A descriptive title of the item.
	// Required: true
	// Max Length: 30
	Title *string `json:"title"`

	// The unit price of an item of this type (the total value of this item type in the container is unitPrice * quantity).
	// Required: true
	UnitPrice *Currency `json:"unitPrice"`

	// The unit weight of an item of this type (the total weight of this item type in the container is unitWeight * quantity).
	// Required: true
	UnitWeight *Weight `json:"unitWeight"`
}

// Validate validates this container item
func (m *ContainerItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnitWeight(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerItem) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *ContainerItem) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	if err := validate.MaxLength("title", "body", *m.Title, 30); err != nil {
		return err
	}

	return nil
}

func (m *ContainerItem) validateUnitPrice(formats strfmt.Registry) error {

	if err := validate.Required("unitPrice", "body", m.UnitPrice); err != nil {
		return err
	}

	if m.UnitPrice != nil {
		if err := m.UnitPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerItem) validateUnitWeight(formats strfmt.Registry) error {

	if err := validate.Required("unitWeight", "body", m.UnitWeight); err != nil {
		return err
	}

	if m.UnitWeight != nil {
		if err := m.UnitWeight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitWeight")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this container item based on the context it is used
func (m *ContainerItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUnitPrice(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUnitWeight(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ContainerItem) contextValidateUnitPrice(ctx context.Context, formats strfmt.Registry) error {

	if m.UnitPrice != nil {
		if err := m.UnitPrice.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitPrice")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ContainerItem) contextValidateUnitWeight(ctx context.Context, formats strfmt.Registry) error {

	if m.UnitWeight != nil {
		if err := m.UnitWeight.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("unitWeight")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("unitWeight")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ContainerItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ContainerItem) UnmarshalBinary(b []byte) error {
	var res ContainerItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
