// Code generated by go-swagger; DO NOT EDIT.

package catalog_items_2022_04_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemBrowseClassificationsByMarketplace Classifications (browse nodes) associated with the item in the Amazon catalog for the indicated Amazon marketplace.
//
// swagger:model ItemBrowseClassificationsByMarketplace
type ItemBrowseClassificationsByMarketplace struct {

	// Classifications (browse nodes) associated with the item in the Amazon catalog for the indicated Amazon marketplace.
	Classifications []*ItemBrowseClassification `json:"classifications"`

	// Amazon marketplace identifier.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`
}

// Validate validates this item browse classifications by marketplace
func (m *ItemBrowseClassificationsByMarketplace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemBrowseClassificationsByMarketplace) validateClassifications(formats strfmt.Registry) error {
	if swag.IsZero(m.Classifications) { // not required
		return nil
	}

	for i := 0; i < len(m.Classifications); i++ {
		if swag.IsZero(m.Classifications[i]) { // not required
			continue
		}

		if m.Classifications[i] != nil {
			if err := m.Classifications[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemBrowseClassificationsByMarketplace) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this item browse classifications by marketplace based on the context it is used
func (m *ItemBrowseClassificationsByMarketplace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassifications(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemBrowseClassificationsByMarketplace) contextValidateClassifications(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Classifications); i++ {

		if m.Classifications[i] != nil {
			if err := m.Classifications[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classifications" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classifications" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemBrowseClassificationsByMarketplace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemBrowseClassificationsByMarketplace) UnmarshalBinary(b []byte) error {
	var res ItemBrowseClassificationsByMarketplace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
