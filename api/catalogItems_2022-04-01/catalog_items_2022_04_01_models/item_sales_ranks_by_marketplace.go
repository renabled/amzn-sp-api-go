// Code generated by go-swagger; DO NOT EDIT.

package catalog_items_2022_04_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemSalesRanksByMarketplace Sales ranks of an Amazon catalog item for the indicated Amazon marketplace.
//
// swagger:model ItemSalesRanksByMarketplace
type ItemSalesRanksByMarketplace struct {

	// Sales ranks of an Amazon catalog item for an Amazon marketplace by classification.
	ClassificationRanks []*ItemClassificationSalesRank `json:"classificationRanks"`

	// Sales ranks of an Amazon catalog item for an Amazon marketplace by website display group.
	DisplayGroupRanks []*ItemDisplayGroupSalesRank `json:"displayGroupRanks"`

	// Amazon marketplace identifier.
	// Required: true
	MarketplaceID *string `json:"marketplaceId"`
}

// Validate validates this item sales ranks by marketplace
func (m *ItemSalesRanksByMarketplace) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClassificationRanks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayGroupRanks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemSalesRanksByMarketplace) validateClassificationRanks(formats strfmt.Registry) error {
	if swag.IsZero(m.ClassificationRanks) { // not required
		return nil
	}

	for i := 0; i < len(m.ClassificationRanks); i++ {
		if swag.IsZero(m.ClassificationRanks[i]) { // not required
			continue
		}

		if m.ClassificationRanks[i] != nil {
			if err := m.ClassificationRanks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classificationRanks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classificationRanks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemSalesRanksByMarketplace) validateDisplayGroupRanks(formats strfmt.Registry) error {
	if swag.IsZero(m.DisplayGroupRanks) { // not required
		return nil
	}

	for i := 0; i < len(m.DisplayGroupRanks); i++ {
		if swag.IsZero(m.DisplayGroupRanks[i]) { // not required
			continue
		}

		if m.DisplayGroupRanks[i] != nil {
			if err := m.DisplayGroupRanks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("displayGroupRanks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("displayGroupRanks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemSalesRanksByMarketplace) validateMarketplaceID(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceId", "body", m.MarketplaceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this item sales ranks by marketplace based on the context it is used
func (m *ItemSalesRanksByMarketplace) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClassificationRanks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisplayGroupRanks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemSalesRanksByMarketplace) contextValidateClassificationRanks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ClassificationRanks); i++ {

		if m.ClassificationRanks[i] != nil {
			if err := m.ClassificationRanks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("classificationRanks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("classificationRanks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemSalesRanksByMarketplace) contextValidateDisplayGroupRanks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DisplayGroupRanks); i++ {

		if m.DisplayGroupRanks[i] != nil {
			if err := m.DisplayGroupRanks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("displayGroupRanks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("displayGroupRanks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemSalesRanksByMarketplace) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemSalesRanksByMarketplace) UnmarshalBinary(b []byte) error {
	var res ItemSalesRanksByMarketplace
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
