// Code generated by go-swagger; DO NOT EDIT.

package catalog

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchCatalogItemsParams creates a new SearchCatalogItemsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchCatalogItemsParams() *SearchCatalogItemsParams {
	return &SearchCatalogItemsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchCatalogItemsParamsWithTimeout creates a new SearchCatalogItemsParams object
// with the ability to set a timeout on a request.
func NewSearchCatalogItemsParamsWithTimeout(timeout time.Duration) *SearchCatalogItemsParams {
	return &SearchCatalogItemsParams{
		timeout: timeout,
	}
}

// NewSearchCatalogItemsParamsWithContext creates a new SearchCatalogItemsParams object
// with the ability to set a context for a request.
func NewSearchCatalogItemsParamsWithContext(ctx context.Context) *SearchCatalogItemsParams {
	return &SearchCatalogItemsParams{
		Context: ctx,
	}
}

// NewSearchCatalogItemsParamsWithHTTPClient creates a new SearchCatalogItemsParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchCatalogItemsParamsWithHTTPClient(client *http.Client) *SearchCatalogItemsParams {
	return &SearchCatalogItemsParams{
		HTTPClient: client,
	}
}

/*
SearchCatalogItemsParams contains all the parameters to send to the API endpoint

	for the search catalog items operation.

	Typically these are written to a http.Request.
*/
type SearchCatalogItemsParams struct {

	/* BrandNames.

	   A comma-delimited list of brand names to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.
	*/
	BrandNames []string

	/* ClassificationIds.

	   A comma-delimited list of classification identifiers to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.
	*/
	ClassificationIds []string

	/* Identifiers.

	   A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with `keywords`.
	*/
	Identifiers []string

	/* IdentifiersType.

	   Type of product identifiers to search the Amazon catalog for. **Note:** Required when `identifiers` are provided.
	*/
	IdentifiersType *string

	/* IncludedData.

	   A comma-delimited list of data sets to include in the response. Default: `summaries`.

	   Default: ["summaries"]
	*/
	IncludedData []string

	/* Keywords.

	   A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with `identifiers`.
	*/
	Keywords []string

	/* KeywordsLocale.

	   The language of the keywords provided for `keywords`-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with `identifiers`.
	*/
	KeywordsLocale *string

	/* Locale.

	   Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
	*/
	Locale *string

	/* MarketplaceIds.

	   A comma-delimited list of Amazon marketplace identifiers for the request.
	*/
	MarketplaceIds []string

	/* PageSize.

	   Number of results to be returned per page.

	   Default: 10
	*/
	PageSize *int64

	/* PageToken.

	   A token to fetch a certain page when there are multiple pages worth of results.
	*/
	PageToken *string

	/* SellerID.

	   A selling partner identifier, such as a seller account or vendor code. **Note:** Required when `identifiersType` is `SKU`.
	*/
	SellerID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search catalog items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchCatalogItemsParams) WithDefaults() *SearchCatalogItemsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search catalog items params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchCatalogItemsParams) SetDefaults() {
	var (
		includedDataDefault = []string{"summaries"}

		pageSizeDefault = int64(10)
	)

	val := SearchCatalogItemsParams{
		IncludedData: includedDataDefault,
		PageSize:     &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the search catalog items params
func (o *SearchCatalogItemsParams) WithTimeout(timeout time.Duration) *SearchCatalogItemsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search catalog items params
func (o *SearchCatalogItemsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search catalog items params
func (o *SearchCatalogItemsParams) WithContext(ctx context.Context) *SearchCatalogItemsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search catalog items params
func (o *SearchCatalogItemsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search catalog items params
func (o *SearchCatalogItemsParams) WithHTTPClient(client *http.Client) *SearchCatalogItemsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search catalog items params
func (o *SearchCatalogItemsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBrandNames adds the brandNames to the search catalog items params
func (o *SearchCatalogItemsParams) WithBrandNames(brandNames []string) *SearchCatalogItemsParams {
	o.SetBrandNames(brandNames)
	return o
}

// SetBrandNames adds the brandNames to the search catalog items params
func (o *SearchCatalogItemsParams) SetBrandNames(brandNames []string) {
	o.BrandNames = brandNames
}

// WithClassificationIds adds the classificationIds to the search catalog items params
func (o *SearchCatalogItemsParams) WithClassificationIds(classificationIds []string) *SearchCatalogItemsParams {
	o.SetClassificationIds(classificationIds)
	return o
}

// SetClassificationIds adds the classificationIds to the search catalog items params
func (o *SearchCatalogItemsParams) SetClassificationIds(classificationIds []string) {
	o.ClassificationIds = classificationIds
}

// WithIdentifiers adds the identifiers to the search catalog items params
func (o *SearchCatalogItemsParams) WithIdentifiers(identifiers []string) *SearchCatalogItemsParams {
	o.SetIdentifiers(identifiers)
	return o
}

// SetIdentifiers adds the identifiers to the search catalog items params
func (o *SearchCatalogItemsParams) SetIdentifiers(identifiers []string) {
	o.Identifiers = identifiers
}

// WithIdentifiersType adds the identifiersType to the search catalog items params
func (o *SearchCatalogItemsParams) WithIdentifiersType(identifiersType *string) *SearchCatalogItemsParams {
	o.SetIdentifiersType(identifiersType)
	return o
}

// SetIdentifiersType adds the identifiersType to the search catalog items params
func (o *SearchCatalogItemsParams) SetIdentifiersType(identifiersType *string) {
	o.IdentifiersType = identifiersType
}

// WithIncludedData adds the includedData to the search catalog items params
func (o *SearchCatalogItemsParams) WithIncludedData(includedData []string) *SearchCatalogItemsParams {
	o.SetIncludedData(includedData)
	return o
}

// SetIncludedData adds the includedData to the search catalog items params
func (o *SearchCatalogItemsParams) SetIncludedData(includedData []string) {
	o.IncludedData = includedData
}

// WithKeywords adds the keywords to the search catalog items params
func (o *SearchCatalogItemsParams) WithKeywords(keywords []string) *SearchCatalogItemsParams {
	o.SetKeywords(keywords)
	return o
}

// SetKeywords adds the keywords to the search catalog items params
func (o *SearchCatalogItemsParams) SetKeywords(keywords []string) {
	o.Keywords = keywords
}

// WithKeywordsLocale adds the keywordsLocale to the search catalog items params
func (o *SearchCatalogItemsParams) WithKeywordsLocale(keywordsLocale *string) *SearchCatalogItemsParams {
	o.SetKeywordsLocale(keywordsLocale)
	return o
}

// SetKeywordsLocale adds the keywordsLocale to the search catalog items params
func (o *SearchCatalogItemsParams) SetKeywordsLocale(keywordsLocale *string) {
	o.KeywordsLocale = keywordsLocale
}

// WithLocale adds the locale to the search catalog items params
func (o *SearchCatalogItemsParams) WithLocale(locale *string) *SearchCatalogItemsParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the search catalog items params
func (o *SearchCatalogItemsParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithMarketplaceIds adds the marketplaceIds to the search catalog items params
func (o *SearchCatalogItemsParams) WithMarketplaceIds(marketplaceIds []string) *SearchCatalogItemsParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the search catalog items params
func (o *SearchCatalogItemsParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithPageSize adds the pageSize to the search catalog items params
func (o *SearchCatalogItemsParams) WithPageSize(pageSize *int64) *SearchCatalogItemsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the search catalog items params
func (o *SearchCatalogItemsParams) SetPageSize(pageSize *int64) {
	o.PageSize = pageSize
}

// WithPageToken adds the pageToken to the search catalog items params
func (o *SearchCatalogItemsParams) WithPageToken(pageToken *string) *SearchCatalogItemsParams {
	o.SetPageToken(pageToken)
	return o
}

// SetPageToken adds the pageToken to the search catalog items params
func (o *SearchCatalogItemsParams) SetPageToken(pageToken *string) {
	o.PageToken = pageToken
}

// WithSellerID adds the sellerID to the search catalog items params
func (o *SearchCatalogItemsParams) WithSellerID(sellerID *string) *SearchCatalogItemsParams {
	o.SetSellerID(sellerID)
	return o
}

// SetSellerID adds the sellerId to the search catalog items params
func (o *SearchCatalogItemsParams) SetSellerID(sellerID *string) {
	o.SellerID = sellerID
}

// WriteToRequest writes these params to a swagger request
func (o *SearchCatalogItemsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BrandNames != nil {

		// binding items for brandNames
		joinedBrandNames := o.bindParamBrandNames(reg)

		// query array param brandNames
		if err := r.SetQueryParam("brandNames", joinedBrandNames...); err != nil {
			return err
		}
	}

	if o.ClassificationIds != nil {

		// binding items for classificationIds
		joinedClassificationIds := o.bindParamClassificationIds(reg)

		// query array param classificationIds
		if err := r.SetQueryParam("classificationIds", joinedClassificationIds...); err != nil {
			return err
		}
	}

	if o.Identifiers != nil {

		// binding items for identifiers
		joinedIdentifiers := o.bindParamIdentifiers(reg)

		// query array param identifiers
		if err := r.SetQueryParam("identifiers", joinedIdentifiers...); err != nil {
			return err
		}
	}

	if o.IdentifiersType != nil {

		// query param identifiersType
		var qrIdentifiersType string

		if o.IdentifiersType != nil {
			qrIdentifiersType = *o.IdentifiersType
		}
		qIdentifiersType := qrIdentifiersType
		if qIdentifiersType != "" {

			if err := r.SetQueryParam("identifiersType", qIdentifiersType); err != nil {
				return err
			}
		}
	}

	if o.IncludedData != nil {

		// binding items for includedData
		joinedIncludedData := o.bindParamIncludedData(reg)

		// query array param includedData
		if err := r.SetQueryParam("includedData", joinedIncludedData...); err != nil {
			return err
		}
	}

	if o.Keywords != nil {

		// binding items for keywords
		joinedKeywords := o.bindParamKeywords(reg)

		// query array param keywords
		if err := r.SetQueryParam("keywords", joinedKeywords...); err != nil {
			return err
		}
	}

	if o.KeywordsLocale != nil {

		// query param keywordsLocale
		var qrKeywordsLocale string

		if o.KeywordsLocale != nil {
			qrKeywordsLocale = *o.KeywordsLocale
		}
		qKeywordsLocale := qrKeywordsLocale
		if qKeywordsLocale != "" {

			if err := r.SetQueryParam("keywordsLocale", qKeywordsLocale); err != nil {
				return err
			}
		}
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string

		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {

			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int64

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt64(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.PageToken != nil {

		// query param pageToken
		var qrPageToken string

		if o.PageToken != nil {
			qrPageToken = *o.PageToken
		}
		qPageToken := qrPageToken
		if qPageToken != "" {

			if err := r.SetQueryParam("pageToken", qPageToken); err != nil {
				return err
			}
		}
	}

	if o.SellerID != nil {

		// query param sellerId
		var qrSellerID string

		if o.SellerID != nil {
			qrSellerID = *o.SellerID
		}
		qSellerID := qrSellerID
		if qSellerID != "" {

			if err := r.SetQueryParam("sellerId", qSellerID); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchCatalogItems binds the parameter brandNames
func (o *SearchCatalogItemsParams) bindParamBrandNames(formats strfmt.Registry) []string {
	brandNamesIR := o.BrandNames

	var brandNamesIC []string
	for _, brandNamesIIR := range brandNamesIR { // explode []string

		brandNamesIIV := brandNamesIIR // string as string
		brandNamesIC = append(brandNamesIC, brandNamesIIV)
	}

	// items.CollectionFormat: "csv"
	brandNamesIS := swag.JoinByFormat(brandNamesIC, "csv")

	return brandNamesIS
}

// bindParamSearchCatalogItems binds the parameter classificationIds
func (o *SearchCatalogItemsParams) bindParamClassificationIds(formats strfmt.Registry) []string {
	classificationIdsIR := o.ClassificationIds

	var classificationIdsIC []string
	for _, classificationIdsIIR := range classificationIdsIR { // explode []string

		classificationIdsIIV := classificationIdsIIR // string as string
		classificationIdsIC = append(classificationIdsIC, classificationIdsIIV)
	}

	// items.CollectionFormat: "csv"
	classificationIdsIS := swag.JoinByFormat(classificationIdsIC, "csv")

	return classificationIdsIS
}

// bindParamSearchCatalogItems binds the parameter identifiers
func (o *SearchCatalogItemsParams) bindParamIdentifiers(formats strfmt.Registry) []string {
	identifiersIR := o.Identifiers

	var identifiersIC []string
	for _, identifiersIIR := range identifiersIR { // explode []string

		identifiersIIV := identifiersIIR // string as string
		identifiersIC = append(identifiersIC, identifiersIIV)
	}

	// items.CollectionFormat: "csv"
	identifiersIS := swag.JoinByFormat(identifiersIC, "csv")

	return identifiersIS
}

// bindParamSearchCatalogItems binds the parameter includedData
func (o *SearchCatalogItemsParams) bindParamIncludedData(formats strfmt.Registry) []string {
	includedDataIR := o.IncludedData

	var includedDataIC []string
	for _, includedDataIIR := range includedDataIR { // explode []string

		includedDataIIV := includedDataIIR // string as string
		includedDataIC = append(includedDataIC, includedDataIIV)
	}

	// items.CollectionFormat: "csv"
	includedDataIS := swag.JoinByFormat(includedDataIC, "csv")

	return includedDataIS
}

// bindParamSearchCatalogItems binds the parameter keywords
func (o *SearchCatalogItemsParams) bindParamKeywords(formats strfmt.Registry) []string {
	keywordsIR := o.Keywords

	var keywordsIC []string
	for _, keywordsIIR := range keywordsIR { // explode []string

		keywordsIIV := keywordsIIR // string as string
		keywordsIC = append(keywordsIC, keywordsIIV)
	}

	// items.CollectionFormat: "csv"
	keywordsIS := swag.JoinByFormat(keywordsIC, "csv")

	return keywordsIS
}

// bindParamSearchCatalogItems binds the parameter marketplaceIds
func (o *SearchCatalogItemsParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "csv")

	return marketplaceIdsIS
}
