// Code generated by go-swagger; DO NOT EDIT.

package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/application_2023-11-30/application_2023_11_30_models"
)

// RotateApplicationClientSecretReader is a Reader for the RotateApplicationClientSecret structure.
type RotateApplicationClientSecretReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RotateApplicationClientSecretReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRotateApplicationClientSecretNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewRotateApplicationClientSecretBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewRotateApplicationClientSecretForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRotateApplicationClientSecretNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewRotateApplicationClientSecretRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewRotateApplicationClientSecretUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewRotateApplicationClientSecretTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewRotateApplicationClientSecretInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewRotateApplicationClientSecretServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewRotateApplicationClientSecretNoContent creates a RotateApplicationClientSecretNoContent with default headers values
func NewRotateApplicationClientSecretNoContent() *RotateApplicationClientSecretNoContent {
	return &RotateApplicationClientSecretNoContent{}
}

/*
RotateApplicationClientSecretNoContent describes a response with status code 204, with default header values.

Success.
*/
type RotateApplicationClientSecretNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string
}

// IsSuccess returns true when this rotate application client secret no content response has a 2xx status code
func (o *RotateApplicationClientSecretNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this rotate application client secret no content response has a 3xx status code
func (o *RotateApplicationClientSecretNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret no content response has a 4xx status code
func (o *RotateApplicationClientSecretNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this rotate application client secret no content response has a 5xx status code
func (o *RotateApplicationClientSecretNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret no content response a status code equal to that given
func (o *RotateApplicationClientSecretNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *RotateApplicationClientSecretNoContent) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretNoContent ", 204)
}

func (o *RotateApplicationClientSecretNoContent) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretNoContent ", 204)
}

func (o *RotateApplicationClientSecretNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	return nil
}

// NewRotateApplicationClientSecretBadRequest creates a RotateApplicationClientSecretBadRequest with default headers values
func NewRotateApplicationClientSecretBadRequest() *RotateApplicationClientSecretBadRequest {
	return &RotateApplicationClientSecretBadRequest{}
}

/*
RotateApplicationClientSecretBadRequest describes a response with status code 400, with default header values.

Application is not enrolled for rotation notification. Please update application notification preference in Developer console.
*/
type RotateApplicationClientSecretBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret bad request response has a 2xx status code
func (o *RotateApplicationClientSecretBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret bad request response has a 3xx status code
func (o *RotateApplicationClientSecretBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret bad request response has a 4xx status code
func (o *RotateApplicationClientSecretBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate application client secret bad request response has a 5xx status code
func (o *RotateApplicationClientSecretBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret bad request response a status code equal to that given
func (o *RotateApplicationClientSecretBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *RotateApplicationClientSecretBadRequest) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretBadRequest  %+v", 400, o.Payload)
}

func (o *RotateApplicationClientSecretBadRequest) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretBadRequest  %+v", 400, o.Payload)
}

func (o *RotateApplicationClientSecretBadRequest) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretForbidden creates a RotateApplicationClientSecretForbidden with default headers values
func NewRotateApplicationClientSecretForbidden() *RotateApplicationClientSecretForbidden {
	return &RotateApplicationClientSecretForbidden{}
}

/*
RotateApplicationClientSecretForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type RotateApplicationClientSecretForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret forbidden response has a 2xx status code
func (o *RotateApplicationClientSecretForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret forbidden response has a 3xx status code
func (o *RotateApplicationClientSecretForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret forbidden response has a 4xx status code
func (o *RotateApplicationClientSecretForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate application client secret forbidden response has a 5xx status code
func (o *RotateApplicationClientSecretForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret forbidden response a status code equal to that given
func (o *RotateApplicationClientSecretForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *RotateApplicationClientSecretForbidden) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretForbidden  %+v", 403, o.Payload)
}

func (o *RotateApplicationClientSecretForbidden) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretForbidden  %+v", 403, o.Payload)
}

func (o *RotateApplicationClientSecretForbidden) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretNotFound creates a RotateApplicationClientSecretNotFound with default headers values
func NewRotateApplicationClientSecretNotFound() *RotateApplicationClientSecretNotFound {
	return &RotateApplicationClientSecretNotFound{}
}

/*
RotateApplicationClientSecretNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type RotateApplicationClientSecretNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret not found response has a 2xx status code
func (o *RotateApplicationClientSecretNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret not found response has a 3xx status code
func (o *RotateApplicationClientSecretNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret not found response has a 4xx status code
func (o *RotateApplicationClientSecretNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate application client secret not found response has a 5xx status code
func (o *RotateApplicationClientSecretNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret not found response a status code equal to that given
func (o *RotateApplicationClientSecretNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *RotateApplicationClientSecretNotFound) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretNotFound  %+v", 404, o.Payload)
}

func (o *RotateApplicationClientSecretNotFound) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretNotFound  %+v", 404, o.Payload)
}

func (o *RotateApplicationClientSecretNotFound) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretRequestEntityTooLarge creates a RotateApplicationClientSecretRequestEntityTooLarge with default headers values
func NewRotateApplicationClientSecretRequestEntityTooLarge() *RotateApplicationClientSecretRequestEntityTooLarge {
	return &RotateApplicationClientSecretRequestEntityTooLarge{}
}

/*
RotateApplicationClientSecretRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type RotateApplicationClientSecretRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret request entity too large response has a 2xx status code
func (o *RotateApplicationClientSecretRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret request entity too large response has a 3xx status code
func (o *RotateApplicationClientSecretRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret request entity too large response has a 4xx status code
func (o *RotateApplicationClientSecretRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate application client secret request entity too large response has a 5xx status code
func (o *RotateApplicationClientSecretRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret request entity too large response a status code equal to that given
func (o *RotateApplicationClientSecretRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *RotateApplicationClientSecretRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *RotateApplicationClientSecretRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *RotateApplicationClientSecretRequestEntityTooLarge) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretUnsupportedMediaType creates a RotateApplicationClientSecretUnsupportedMediaType with default headers values
func NewRotateApplicationClientSecretUnsupportedMediaType() *RotateApplicationClientSecretUnsupportedMediaType {
	return &RotateApplicationClientSecretUnsupportedMediaType{}
}

/*
RotateApplicationClientSecretUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type RotateApplicationClientSecretUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret unsupported media type response has a 2xx status code
func (o *RotateApplicationClientSecretUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret unsupported media type response has a 3xx status code
func (o *RotateApplicationClientSecretUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret unsupported media type response has a 4xx status code
func (o *RotateApplicationClientSecretUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate application client secret unsupported media type response has a 5xx status code
func (o *RotateApplicationClientSecretUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret unsupported media type response a status code equal to that given
func (o *RotateApplicationClientSecretUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *RotateApplicationClientSecretUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *RotateApplicationClientSecretUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *RotateApplicationClientSecretUnsupportedMediaType) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretTooManyRequests creates a RotateApplicationClientSecretTooManyRequests with default headers values
func NewRotateApplicationClientSecretTooManyRequests() *RotateApplicationClientSecretTooManyRequests {
	return &RotateApplicationClientSecretTooManyRequests{}
}

/*
RotateApplicationClientSecretTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type RotateApplicationClientSecretTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret too many requests response has a 2xx status code
func (o *RotateApplicationClientSecretTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret too many requests response has a 3xx status code
func (o *RotateApplicationClientSecretTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret too many requests response has a 4xx status code
func (o *RotateApplicationClientSecretTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this rotate application client secret too many requests response has a 5xx status code
func (o *RotateApplicationClientSecretTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this rotate application client secret too many requests response a status code equal to that given
func (o *RotateApplicationClientSecretTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *RotateApplicationClientSecretTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretTooManyRequests  %+v", 429, o.Payload)
}

func (o *RotateApplicationClientSecretTooManyRequests) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretTooManyRequests  %+v", 429, o.Payload)
}

func (o *RotateApplicationClientSecretTooManyRequests) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretInternalServerError creates a RotateApplicationClientSecretInternalServerError with default headers values
func NewRotateApplicationClientSecretInternalServerError() *RotateApplicationClientSecretInternalServerError {
	return &RotateApplicationClientSecretInternalServerError{}
}

/*
RotateApplicationClientSecretInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type RotateApplicationClientSecretInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret internal server error response has a 2xx status code
func (o *RotateApplicationClientSecretInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret internal server error response has a 3xx status code
func (o *RotateApplicationClientSecretInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret internal server error response has a 4xx status code
func (o *RotateApplicationClientSecretInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this rotate application client secret internal server error response has a 5xx status code
func (o *RotateApplicationClientSecretInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this rotate application client secret internal server error response a status code equal to that given
func (o *RotateApplicationClientSecretInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *RotateApplicationClientSecretInternalServerError) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *RotateApplicationClientSecretInternalServerError) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretInternalServerError  %+v", 500, o.Payload)
}

func (o *RotateApplicationClientSecretInternalServerError) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRotateApplicationClientSecretServiceUnavailable creates a RotateApplicationClientSecretServiceUnavailable with default headers values
func NewRotateApplicationClientSecretServiceUnavailable() *RotateApplicationClientSecretServiceUnavailable {
	return &RotateApplicationClientSecretServiceUnavailable{}
}

/*
RotateApplicationClientSecretServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type RotateApplicationClientSecretServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *application_2023_11_30_models.ErrorList
}

// IsSuccess returns true when this rotate application client secret service unavailable response has a 2xx status code
func (o *RotateApplicationClientSecretServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this rotate application client secret service unavailable response has a 3xx status code
func (o *RotateApplicationClientSecretServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this rotate application client secret service unavailable response has a 4xx status code
func (o *RotateApplicationClientSecretServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this rotate application client secret service unavailable response has a 5xx status code
func (o *RotateApplicationClientSecretServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this rotate application client secret service unavailable response a status code equal to that given
func (o *RotateApplicationClientSecretServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *RotateApplicationClientSecretServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RotateApplicationClientSecretServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /applications/2023-11-30/clientSecret][%d] rotateApplicationClientSecretServiceUnavailable  %+v", 503, o.Payload)
}

func (o *RotateApplicationClientSecretServiceUnavailable) GetPayload() *application_2023_11_30_models.ErrorList {
	return o.Payload
}

func (o *RotateApplicationClientSecretServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(application_2023_11_30_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
