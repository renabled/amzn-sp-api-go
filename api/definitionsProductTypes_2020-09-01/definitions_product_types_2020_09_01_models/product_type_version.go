// Code generated by go-swagger; DO NOT EDIT.

package definitions_product_types_2020_09_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductTypeVersion The version details for an Amazon product type.
//
// swagger:model ProductTypeVersion
type ProductTypeVersion struct {

	// When true, the version indicated by the version identifier is the latest available for the Amazon product type.
	// Required: true
	Latest *bool `json:"latest"`

	// When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.
	ReleaseCandidate bool `json:"releaseCandidate,omitempty"`

	// Version identifier.
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this product type version
func (m *ProductTypeVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLatest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductTypeVersion) validateLatest(formats strfmt.Registry) error {

	if err := validate.Required("latest", "body", m.Latest); err != nil {
		return err
	}

	return nil
}

func (m *ProductTypeVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this product type version based on context it is used
func (m *ProductTypeVersion) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProductTypeVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductTypeVersion) UnmarshalBinary(b []byte) error {
	var res ProductTypeVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
