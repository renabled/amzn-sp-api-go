// Code generated by go-swagger; DO NOT EDIT.

package definitions_product_types_2020_09_01_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductTypeDefinition A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.
//
// swagger:model ProductTypeDefinition
type ProductTypeDefinition struct {

	// Human-readable and localized description of the Amazon product type.
	// Required: true
	DisplayName *string `json:"displayName"`

	// Locale of the display elements contained in the product type definition.
	// Required: true
	Locale *string `json:"locale"`

	// Amazon marketplace identifiers for which the product type definition is applicable.
	// Required: true
	MarketplaceIds []string `json:"marketplaceIds"`

	// Link to meta-schema describing the vocabulary used by the product type schema.
	MetaSchema *SchemaLink `json:"metaSchema,omitempty"`

	// The name of the Amazon product type that this product type definition applies to.
	// Required: true
	ProductType *string `json:"productType"`

	// The version details for the Amazon product type.
	// Required: true
	ProductTypeVersion *ProductTypeVersion `json:"productTypeVersion"`

	// Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.
	// Required: true
	PropertyGroups map[string]PropertyGroup `json:"propertyGroups"`

	// Name of the requirements set represented in this product type definition.
	// Required: true
	// Enum: [LISTING LISTING_PRODUCT_ONLY LISTING_OFFER_ONLY]
	Requirements *string `json:"requirements"`

	// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
	// Required: true
	// Enum: [ENFORCED NOT_ENFORCED]
	RequirementsEnforced *string `json:"requirementsEnforced"`

	// Link to schema describing the attributes and requirements for the product type.
	// Required: true
	Schema *SchemaLink `json:"schema"`
}

// Validate validates this product type definition
func (m *ProductTypeDefinition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMetaSchema(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductTypeVersion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertyGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequirementsEnforced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchema(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductTypeDefinition) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *ProductTypeDefinition) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

func (m *ProductTypeDefinition) validateMarketplaceIds(formats strfmt.Registry) error {

	if err := validate.Required("marketplaceIds", "body", m.MarketplaceIds); err != nil {
		return err
	}

	return nil
}

func (m *ProductTypeDefinition) validateMetaSchema(formats strfmt.Registry) error {
	if swag.IsZero(m.MetaSchema) { // not required
		return nil
	}

	if m.MetaSchema != nil {
		if err := m.MetaSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaSchema")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTypeDefinition) validateProductType(formats strfmt.Registry) error {

	if err := validate.Required("productType", "body", m.ProductType); err != nil {
		return err
	}

	return nil
}

func (m *ProductTypeDefinition) validateProductTypeVersion(formats strfmt.Registry) error {

	if err := validate.Required("productTypeVersion", "body", m.ProductTypeVersion); err != nil {
		return err
	}

	if m.ProductTypeVersion != nil {
		if err := m.ProductTypeVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productTypeVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productTypeVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTypeDefinition) validatePropertyGroups(formats strfmt.Registry) error {

	if err := validate.Required("propertyGroups", "body", m.PropertyGroups); err != nil {
		return err
	}

	for k := range m.PropertyGroups {

		if err := validate.Required("propertyGroups"+"."+k, "body", m.PropertyGroups[k]); err != nil {
			return err
		}
		if val, ok := m.PropertyGroups[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("propertyGroups" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("propertyGroups" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

var productTypeDefinitionTypeRequirementsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LISTING","LISTING_PRODUCT_ONLY","LISTING_OFFER_ONLY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productTypeDefinitionTypeRequirementsPropEnum = append(productTypeDefinitionTypeRequirementsPropEnum, v)
	}
}

const (

	// ProductTypeDefinitionRequirementsLISTING captures enum value "LISTING"
	ProductTypeDefinitionRequirementsLISTING string = "LISTING"

	// ProductTypeDefinitionRequirementsLISTINGPRODUCTONLY captures enum value "LISTING_PRODUCT_ONLY"
	ProductTypeDefinitionRequirementsLISTINGPRODUCTONLY string = "LISTING_PRODUCT_ONLY"

	// ProductTypeDefinitionRequirementsLISTINGOFFERONLY captures enum value "LISTING_OFFER_ONLY"
	ProductTypeDefinitionRequirementsLISTINGOFFERONLY string = "LISTING_OFFER_ONLY"
)

// prop value enum
func (m *ProductTypeDefinition) validateRequirementsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productTypeDefinitionTypeRequirementsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductTypeDefinition) validateRequirements(formats strfmt.Registry) error {

	if err := validate.Required("requirements", "body", m.Requirements); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequirementsEnum("requirements", "body", *m.Requirements); err != nil {
		return err
	}

	return nil
}

var productTypeDefinitionTypeRequirementsEnforcedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENFORCED","NOT_ENFORCED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productTypeDefinitionTypeRequirementsEnforcedPropEnum = append(productTypeDefinitionTypeRequirementsEnforcedPropEnum, v)
	}
}

const (

	// ProductTypeDefinitionRequirementsEnforcedENFORCED captures enum value "ENFORCED"
	ProductTypeDefinitionRequirementsEnforcedENFORCED string = "ENFORCED"

	// ProductTypeDefinitionRequirementsEnforcedNOTENFORCED captures enum value "NOT_ENFORCED"
	ProductTypeDefinitionRequirementsEnforcedNOTENFORCED string = "NOT_ENFORCED"
)

// prop value enum
func (m *ProductTypeDefinition) validateRequirementsEnforcedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productTypeDefinitionTypeRequirementsEnforcedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductTypeDefinition) validateRequirementsEnforced(formats strfmt.Registry) error {

	if err := validate.Required("requirementsEnforced", "body", m.RequirementsEnforced); err != nil {
		return err
	}

	// value enum
	if err := m.validateRequirementsEnforcedEnum("requirementsEnforced", "body", *m.RequirementsEnforced); err != nil {
		return err
	}

	return nil
}

func (m *ProductTypeDefinition) validateSchema(formats strfmt.Registry) error {

	if err := validate.Required("schema", "body", m.Schema); err != nil {
		return err
	}

	if m.Schema != nil {
		if err := m.Schema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this product type definition based on the context it is used
func (m *ProductTypeDefinition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMetaSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProductTypeVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePropertyGroups(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSchema(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductTypeDefinition) contextValidateMetaSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.MetaSchema != nil {
		if err := m.MetaSchema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("metaSchema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("metaSchema")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTypeDefinition) contextValidateProductTypeVersion(ctx context.Context, formats strfmt.Registry) error {

	if m.ProductTypeVersion != nil {
		if err := m.ProductTypeVersion.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("productTypeVersion")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("productTypeVersion")
			}
			return err
		}
	}

	return nil
}

func (m *ProductTypeDefinition) contextValidatePropertyGroups(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.Required("propertyGroups", "body", m.PropertyGroups); err != nil {
		return err
	}

	for k := range m.PropertyGroups {

		if val, ok := m.PropertyGroups[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *ProductTypeDefinition) contextValidateSchema(ctx context.Context, formats strfmt.Registry) error {

	if m.Schema != nil {
		if err := m.Schema.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schema")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("schema")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductTypeDefinition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductTypeDefinition) UnmarshalBinary(b []byte) error {
	var res ProductTypeDefinition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
