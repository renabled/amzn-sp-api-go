// Code generated by go-swagger; DO NOT EDIT.

package definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/definitionsProductTypes_2020-09-01/definitions_product_types_2020_09_01_models"
)

// SearchDefinitionsProductTypesReader is a Reader for the SearchDefinitionsProductTypes structure.
type SearchDefinitionsProductTypesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SearchDefinitionsProductTypesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSearchDefinitionsProductTypesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSearchDefinitionsProductTypesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSearchDefinitionsProductTypesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSearchDefinitionsProductTypesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSearchDefinitionsProductTypesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSearchDefinitionsProductTypesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSearchDefinitionsProductTypesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSearchDefinitionsProductTypesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSearchDefinitionsProductTypesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSearchDefinitionsProductTypesOK creates a SearchDefinitionsProductTypesOK with default headers values
func NewSearchDefinitionsProductTypesOK() *SearchDefinitionsProductTypesOK {
	return &SearchDefinitionsProductTypesOK{}
}

/*
SearchDefinitionsProductTypesOK describes a response with status code 200, with default header values.

Successfully retrieved a list of Amazon product types that have definitions available.
*/
type SearchDefinitionsProductTypesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ProductTypeList
}

// IsSuccess returns true when this search definitions product types o k response has a 2xx status code
func (o *SearchDefinitionsProductTypesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this search definitions product types o k response has a 3xx status code
func (o *SearchDefinitionsProductTypesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types o k response has a 4xx status code
func (o *SearchDefinitionsProductTypesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this search definitions product types o k response has a 5xx status code
func (o *SearchDefinitionsProductTypesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types o k response a status code equal to that given
func (o *SearchDefinitionsProductTypesOK) IsCode(code int) bool {
	return code == 200
}

func (o *SearchDefinitionsProductTypesOK) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesOK  %+v", 200, o.Payload)
}

func (o *SearchDefinitionsProductTypesOK) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesOK  %+v", 200, o.Payload)
}

func (o *SearchDefinitionsProductTypesOK) GetPayload() *definitions_product_types_2020_09_01_models.ProductTypeList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ProductTypeList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesBadRequest creates a SearchDefinitionsProductTypesBadRequest with default headers values
func NewSearchDefinitionsProductTypesBadRequest() *SearchDefinitionsProductTypesBadRequest {
	return &SearchDefinitionsProductTypesBadRequest{}
}

/*
SearchDefinitionsProductTypesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SearchDefinitionsProductTypesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types bad request response has a 2xx status code
func (o *SearchDefinitionsProductTypesBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types bad request response has a 3xx status code
func (o *SearchDefinitionsProductTypesBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types bad request response has a 4xx status code
func (o *SearchDefinitionsProductTypesBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this search definitions product types bad request response has a 5xx status code
func (o *SearchDefinitionsProductTypesBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types bad request response a status code equal to that given
func (o *SearchDefinitionsProductTypesBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SearchDefinitionsProductTypesBadRequest) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesBadRequest  %+v", 400, o.Payload)
}

func (o *SearchDefinitionsProductTypesBadRequest) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesBadRequest  %+v", 400, o.Payload)
}

func (o *SearchDefinitionsProductTypesBadRequest) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesForbidden creates a SearchDefinitionsProductTypesForbidden with default headers values
func NewSearchDefinitionsProductTypesForbidden() *SearchDefinitionsProductTypesForbidden {
	return &SearchDefinitionsProductTypesForbidden{}
}

/*
SearchDefinitionsProductTypesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type SearchDefinitionsProductTypesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types forbidden response has a 2xx status code
func (o *SearchDefinitionsProductTypesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types forbidden response has a 3xx status code
func (o *SearchDefinitionsProductTypesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types forbidden response has a 4xx status code
func (o *SearchDefinitionsProductTypesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this search definitions product types forbidden response has a 5xx status code
func (o *SearchDefinitionsProductTypesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types forbidden response a status code equal to that given
func (o *SearchDefinitionsProductTypesForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *SearchDefinitionsProductTypesForbidden) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesForbidden  %+v", 403, o.Payload)
}

func (o *SearchDefinitionsProductTypesForbidden) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesForbidden  %+v", 403, o.Payload)
}

func (o *SearchDefinitionsProductTypesForbidden) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesNotFound creates a SearchDefinitionsProductTypesNotFound with default headers values
func NewSearchDefinitionsProductTypesNotFound() *SearchDefinitionsProductTypesNotFound {
	return &SearchDefinitionsProductTypesNotFound{}
}

/*
SearchDefinitionsProductTypesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SearchDefinitionsProductTypesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types not found response has a 2xx status code
func (o *SearchDefinitionsProductTypesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types not found response has a 3xx status code
func (o *SearchDefinitionsProductTypesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types not found response has a 4xx status code
func (o *SearchDefinitionsProductTypesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this search definitions product types not found response has a 5xx status code
func (o *SearchDefinitionsProductTypesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types not found response a status code equal to that given
func (o *SearchDefinitionsProductTypesNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *SearchDefinitionsProductTypesNotFound) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesNotFound  %+v", 404, o.Payload)
}

func (o *SearchDefinitionsProductTypesNotFound) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesNotFound  %+v", 404, o.Payload)
}

func (o *SearchDefinitionsProductTypesNotFound) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesRequestEntityTooLarge creates a SearchDefinitionsProductTypesRequestEntityTooLarge with default headers values
func NewSearchDefinitionsProductTypesRequestEntityTooLarge() *SearchDefinitionsProductTypesRequestEntityTooLarge {
	return &SearchDefinitionsProductTypesRequestEntityTooLarge{}
}

/*
SearchDefinitionsProductTypesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SearchDefinitionsProductTypesRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types request entity too large response has a 2xx status code
func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types request entity too large response has a 3xx status code
func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types request entity too large response has a 4xx status code
func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this search definitions product types request entity too large response has a 5xx status code
func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types request entity too large response a status code equal to that given
func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesUnsupportedMediaType creates a SearchDefinitionsProductTypesUnsupportedMediaType with default headers values
func NewSearchDefinitionsProductTypesUnsupportedMediaType() *SearchDefinitionsProductTypesUnsupportedMediaType {
	return &SearchDefinitionsProductTypesUnsupportedMediaType{}
}

/*
SearchDefinitionsProductTypesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type SearchDefinitionsProductTypesUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types unsupported media type response has a 2xx status code
func (o *SearchDefinitionsProductTypesUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types unsupported media type response has a 3xx status code
func (o *SearchDefinitionsProductTypesUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types unsupported media type response has a 4xx status code
func (o *SearchDefinitionsProductTypesUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this search definitions product types unsupported media type response has a 5xx status code
func (o *SearchDefinitionsProductTypesUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types unsupported media type response a status code equal to that given
func (o *SearchDefinitionsProductTypesUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *SearchDefinitionsProductTypesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SearchDefinitionsProductTypesUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *SearchDefinitionsProductTypesUnsupportedMediaType) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesTooManyRequests creates a SearchDefinitionsProductTypesTooManyRequests with default headers values
func NewSearchDefinitionsProductTypesTooManyRequests() *SearchDefinitionsProductTypesTooManyRequests {
	return &SearchDefinitionsProductTypesTooManyRequests{}
}

/*
SearchDefinitionsProductTypesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SearchDefinitionsProductTypesTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types too many requests response has a 2xx status code
func (o *SearchDefinitionsProductTypesTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types too many requests response has a 3xx status code
func (o *SearchDefinitionsProductTypesTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types too many requests response has a 4xx status code
func (o *SearchDefinitionsProductTypesTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this search definitions product types too many requests response has a 5xx status code
func (o *SearchDefinitionsProductTypesTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this search definitions product types too many requests response a status code equal to that given
func (o *SearchDefinitionsProductTypesTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *SearchDefinitionsProductTypesTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchDefinitionsProductTypesTooManyRequests) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesTooManyRequests  %+v", 429, o.Payload)
}

func (o *SearchDefinitionsProductTypesTooManyRequests) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesInternalServerError creates a SearchDefinitionsProductTypesInternalServerError with default headers values
func NewSearchDefinitionsProductTypesInternalServerError() *SearchDefinitionsProductTypesInternalServerError {
	return &SearchDefinitionsProductTypesInternalServerError{}
}

/*
SearchDefinitionsProductTypesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type SearchDefinitionsProductTypesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types internal server error response has a 2xx status code
func (o *SearchDefinitionsProductTypesInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types internal server error response has a 3xx status code
func (o *SearchDefinitionsProductTypesInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types internal server error response has a 4xx status code
func (o *SearchDefinitionsProductTypesInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this search definitions product types internal server error response has a 5xx status code
func (o *SearchDefinitionsProductTypesInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this search definitions product types internal server error response a status code equal to that given
func (o *SearchDefinitionsProductTypesInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *SearchDefinitionsProductTypesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchDefinitionsProductTypesInternalServerError) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesInternalServerError  %+v", 500, o.Payload)
}

func (o *SearchDefinitionsProductTypesInternalServerError) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSearchDefinitionsProductTypesServiceUnavailable creates a SearchDefinitionsProductTypesServiceUnavailable with default headers values
func NewSearchDefinitionsProductTypesServiceUnavailable() *SearchDefinitionsProductTypesServiceUnavailable {
	return &SearchDefinitionsProductTypesServiceUnavailable{}
}

/*
SearchDefinitionsProductTypesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SearchDefinitionsProductTypesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

// IsSuccess returns true when this search definitions product types service unavailable response has a 2xx status code
func (o *SearchDefinitionsProductTypesServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this search definitions product types service unavailable response has a 3xx status code
func (o *SearchDefinitionsProductTypesServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this search definitions product types service unavailable response has a 4xx status code
func (o *SearchDefinitionsProductTypesServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this search definitions product types service unavailable response has a 5xx status code
func (o *SearchDefinitionsProductTypesServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this search definitions product types service unavailable response a status code equal to that given
func (o *SearchDefinitionsProductTypesServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *SearchDefinitionsProductTypesServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SearchDefinitionsProductTypesServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes][%d] searchDefinitionsProductTypesServiceUnavailable  %+v", 503, o.Payload)
}

func (o *SearchDefinitionsProductTypesServiceUnavailable) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *SearchDefinitionsProductTypesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
