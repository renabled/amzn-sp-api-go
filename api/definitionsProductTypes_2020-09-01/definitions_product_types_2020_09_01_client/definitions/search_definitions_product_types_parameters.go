// Code generated by go-swagger; DO NOT EDIT.

package definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSearchDefinitionsProductTypesParams creates a new SearchDefinitionsProductTypesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewSearchDefinitionsProductTypesParams() *SearchDefinitionsProductTypesParams {
	return &SearchDefinitionsProductTypesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewSearchDefinitionsProductTypesParamsWithTimeout creates a new SearchDefinitionsProductTypesParams object
// with the ability to set a timeout on a request.
func NewSearchDefinitionsProductTypesParamsWithTimeout(timeout time.Duration) *SearchDefinitionsProductTypesParams {
	return &SearchDefinitionsProductTypesParams{
		timeout: timeout,
	}
}

// NewSearchDefinitionsProductTypesParamsWithContext creates a new SearchDefinitionsProductTypesParams object
// with the ability to set a context for a request.
func NewSearchDefinitionsProductTypesParamsWithContext(ctx context.Context) *SearchDefinitionsProductTypesParams {
	return &SearchDefinitionsProductTypesParams{
		Context: ctx,
	}
}

// NewSearchDefinitionsProductTypesParamsWithHTTPClient creates a new SearchDefinitionsProductTypesParams object
// with the ability to set a custom HTTPClient for a request.
func NewSearchDefinitionsProductTypesParamsWithHTTPClient(client *http.Client) *SearchDefinitionsProductTypesParams {
	return &SearchDefinitionsProductTypesParams{
		HTTPClient: client,
	}
}

/*
SearchDefinitionsProductTypesParams contains all the parameters to send to the API endpoint

	for the search definitions product types operation.

	Typically these are written to a http.Request.
*/
type SearchDefinitionsProductTypesParams struct {

	/* ItemName.

	   The title of the ASIN to get the product type recommendation. **Note:** Cannot be used with `keywords`.
	*/
	ItemName *string

	/* Keywords.

	   A comma-delimited list of keywords to search product types. **Note:** Cannot be used with `itemName`.
	*/
	Keywords []string

	/* Locale.

	   The locale for the display names in the response. Defaults to the primary locale of the marketplace.
	*/
	Locale *string

	/* MarketplaceIds.

	   A comma-delimited list of Amazon marketplace identifiers for the request.
	*/
	MarketplaceIds []string

	/* SearchLocale.

	   The locale used for the `keywords` and `itemName` parameters. Defaults to the primary locale of the marketplace.
	*/
	SearchLocale *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the search definitions product types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDefinitionsProductTypesParams) WithDefaults() *SearchDefinitionsProductTypesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the search definitions product types params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *SearchDefinitionsProductTypesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithTimeout(timeout time.Duration) *SearchDefinitionsProductTypesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithContext(ctx context.Context) *SearchDefinitionsProductTypesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithHTTPClient(client *http.Client) *SearchDefinitionsProductTypesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithItemName adds the itemName to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithItemName(itemName *string) *SearchDefinitionsProductTypesParams {
	o.SetItemName(itemName)
	return o
}

// SetItemName adds the itemName to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetItemName(itemName *string) {
	o.ItemName = itemName
}

// WithKeywords adds the keywords to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithKeywords(keywords []string) *SearchDefinitionsProductTypesParams {
	o.SetKeywords(keywords)
	return o
}

// SetKeywords adds the keywords to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetKeywords(keywords []string) {
	o.Keywords = keywords
}

// WithLocale adds the locale to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithLocale(locale *string) *SearchDefinitionsProductTypesParams {
	o.SetLocale(locale)
	return o
}

// SetLocale adds the locale to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetLocale(locale *string) {
	o.Locale = locale
}

// WithMarketplaceIds adds the marketplaceIds to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithMarketplaceIds(marketplaceIds []string) *SearchDefinitionsProductTypesParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithSearchLocale adds the searchLocale to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) WithSearchLocale(searchLocale *string) *SearchDefinitionsProductTypesParams {
	o.SetSearchLocale(searchLocale)
	return o
}

// SetSearchLocale adds the searchLocale to the search definitions product types params
func (o *SearchDefinitionsProductTypesParams) SetSearchLocale(searchLocale *string) {
	o.SearchLocale = searchLocale
}

// WriteToRequest writes these params to a swagger request
func (o *SearchDefinitionsProductTypesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ItemName != nil {

		// query param itemName
		var qrItemName string

		if o.ItemName != nil {
			qrItemName = *o.ItemName
		}
		qItemName := qrItemName
		if qItemName != "" {

			if err := r.SetQueryParam("itemName", qItemName); err != nil {
				return err
			}
		}
	}

	if o.Keywords != nil {

		// binding items for keywords
		joinedKeywords := o.bindParamKeywords(reg)

		// query array param keywords
		if err := r.SetQueryParam("keywords", joinedKeywords...); err != nil {
			return err
		}
	}

	if o.Locale != nil {

		// query param locale
		var qrLocale string

		if o.Locale != nil {
			qrLocale = *o.Locale
		}
		qLocale := qrLocale
		if qLocale != "" {

			if err := r.SetQueryParam("locale", qLocale); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.SearchLocale != nil {

		// query param searchLocale
		var qrSearchLocale string

		if o.SearchLocale != nil {
			qrSearchLocale = *o.SearchLocale
		}
		qSearchLocale := qrSearchLocale
		if qSearchLocale != "" {

			if err := r.SetQueryParam("searchLocale", qSearchLocale); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamSearchDefinitionsProductTypes binds the parameter keywords
func (o *SearchDefinitionsProductTypesParams) bindParamKeywords(formats strfmt.Registry) []string {
	keywordsIR := o.Keywords

	var keywordsIC []string
	for _, keywordsIIR := range keywordsIR { // explode []string

		keywordsIIV := keywordsIIR // string as string
		keywordsIC = append(keywordsIC, keywordsIIV)
	}

	// items.CollectionFormat: "csv"
	keywordsIS := swag.JoinByFormat(keywordsIC, "csv")

	return keywordsIS
}

// bindParamSearchDefinitionsProductTypes binds the parameter marketplaceIds
func (o *SearchDefinitionsProductTypesParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: "csv"
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "csv")

	return marketplaceIdsIS
}
