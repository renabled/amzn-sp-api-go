// Code generated by go-swagger; DO NOT EDIT.

package definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/definitionsProductTypes_2020-09-01/definitions_product_types_2020_09_01_models"
)

// GetDefinitionsProductTypeReader is a Reader for the GetDefinitionsProductType structure.
type GetDefinitionsProductTypeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetDefinitionsProductTypeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetDefinitionsProductTypeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetDefinitionsProductTypeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetDefinitionsProductTypeForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetDefinitionsProductTypeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetDefinitionsProductTypeRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetDefinitionsProductTypeUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetDefinitionsProductTypeTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetDefinitionsProductTypeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetDefinitionsProductTypeServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetDefinitionsProductTypeOK creates a GetDefinitionsProductTypeOK with default headers values
func NewGetDefinitionsProductTypeOK() *GetDefinitionsProductTypeOK {
	return &GetDefinitionsProductTypeOK{}
}

/* GetDefinitionsProductTypeOK describes a response with status code 200, with default header values.

Successfully retrieved an Amazon product type definition.
*/
type GetDefinitionsProductTypeOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ProductTypeDefinition
}

func (o *GetDefinitionsProductTypeOK) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeOK  %+v", 200, o.Payload)
}
func (o *GetDefinitionsProductTypeOK) GetPayload() *definitions_product_types_2020_09_01_models.ProductTypeDefinition {
	return o.Payload
}

func (o *GetDefinitionsProductTypeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ProductTypeDefinition)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeBadRequest creates a GetDefinitionsProductTypeBadRequest with default headers values
func NewGetDefinitionsProductTypeBadRequest() *GetDefinitionsProductTypeBadRequest {
	return &GetDefinitionsProductTypeBadRequest{}
}

/* GetDefinitionsProductTypeBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetDefinitionsProductTypeBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeBadRequest) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeBadRequest  %+v", 400, o.Payload)
}
func (o *GetDefinitionsProductTypeBadRequest) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeForbidden creates a GetDefinitionsProductTypeForbidden with default headers values
func NewGetDefinitionsProductTypeForbidden() *GetDefinitionsProductTypeForbidden {
	return &GetDefinitionsProductTypeForbidden{}
}

/* GetDefinitionsProductTypeForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetDefinitionsProductTypeForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeForbidden) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeForbidden  %+v", 403, o.Payload)
}
func (o *GetDefinitionsProductTypeForbidden) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeNotFound creates a GetDefinitionsProductTypeNotFound with default headers values
func NewGetDefinitionsProductTypeNotFound() *GetDefinitionsProductTypeNotFound {
	return &GetDefinitionsProductTypeNotFound{}
}

/* GetDefinitionsProductTypeNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetDefinitionsProductTypeNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeNotFound) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeNotFound  %+v", 404, o.Payload)
}
func (o *GetDefinitionsProductTypeNotFound) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeRequestEntityTooLarge creates a GetDefinitionsProductTypeRequestEntityTooLarge with default headers values
func NewGetDefinitionsProductTypeRequestEntityTooLarge() *GetDefinitionsProductTypeRequestEntityTooLarge {
	return &GetDefinitionsProductTypeRequestEntityTooLarge{}
}

/* GetDefinitionsProductTypeRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetDefinitionsProductTypeRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetDefinitionsProductTypeRequestEntityTooLarge) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeUnsupportedMediaType creates a GetDefinitionsProductTypeUnsupportedMediaType with default headers values
func NewGetDefinitionsProductTypeUnsupportedMediaType() *GetDefinitionsProductTypeUnsupportedMediaType {
	return &GetDefinitionsProductTypeUnsupportedMediaType{}
}

/* GetDefinitionsProductTypeUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetDefinitionsProductTypeUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetDefinitionsProductTypeUnsupportedMediaType) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeTooManyRequests creates a GetDefinitionsProductTypeTooManyRequests with default headers values
func NewGetDefinitionsProductTypeTooManyRequests() *GetDefinitionsProductTypeTooManyRequests {
	return &GetDefinitionsProductTypeTooManyRequests{}
}

/* GetDefinitionsProductTypeTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetDefinitionsProductTypeTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetDefinitionsProductTypeTooManyRequests) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeInternalServerError creates a GetDefinitionsProductTypeInternalServerError with default headers values
func NewGetDefinitionsProductTypeInternalServerError() *GetDefinitionsProductTypeInternalServerError {
	return &GetDefinitionsProductTypeInternalServerError{}
}

/* GetDefinitionsProductTypeInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetDefinitionsProductTypeInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeInternalServerError) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeInternalServerError  %+v", 500, o.Payload)
}
func (o *GetDefinitionsProductTypeInternalServerError) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetDefinitionsProductTypeServiceUnavailable creates a GetDefinitionsProductTypeServiceUnavailable with default headers values
func NewGetDefinitionsProductTypeServiceUnavailable() *GetDefinitionsProductTypeServiceUnavailable {
	return &GetDefinitionsProductTypeServiceUnavailable{}
}

/* GetDefinitionsProductTypeServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetDefinitionsProductTypeServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *definitions_product_types_2020_09_01_models.ErrorList
}

func (o *GetDefinitionsProductTypeServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /definitions/2020-09-01/productTypes/{productType}][%d] getDefinitionsProductTypeServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetDefinitionsProductTypeServiceUnavailable) GetPayload() *definitions_product_types_2020_09_01_models.ErrorList {
	return o.Payload
}

func (o *GetDefinitionsProductTypeServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(definitions_product_types_2020_09_01_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
