// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	AddAppointmentForServiceJobByServiceJobID(params *AddAppointmentForServiceJobByServiceJobIDParams, opts ...ClientOption) (*AddAppointmentForServiceJobByServiceJobIDOK, error)

	CancelServiceJobByServiceJobID(params *CancelServiceJobByServiceJobIDParams, opts ...ClientOption) (*CancelServiceJobByServiceJobIDOK, error)

	CompleteServiceJobByServiceJobID(params *CompleteServiceJobByServiceJobIDParams, opts ...ClientOption) (*CompleteServiceJobByServiceJobIDOK, error)

	GetServiceJobByServiceJobID(params *GetServiceJobByServiceJobIDParams, opts ...ClientOption) (*GetServiceJobByServiceJobIDOK, error)

	GetServiceJobs(params *GetServiceJobsParams, opts ...ClientOption) (*GetServiceJobsOK, error)

	RescheduleAppointmentForServiceJobByServiceJobID(params *RescheduleAppointmentForServiceJobByServiceJobIDParams, opts ...ClientOption) (*RescheduleAppointmentForServiceJobByServiceJobIDOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddAppointmentForServiceJobByServiceJobID Adds an appointment to the service job indicated by the service job identifier you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) AddAppointmentForServiceJobByServiceJobID(params *AddAppointmentForServiceJobByServiceJobIDParams, opts ...ClientOption) (*AddAppointmentForServiceJobByServiceJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddAppointmentForServiceJobByServiceJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "addAppointmentForServiceJobByServiceJobId",
		Method:             "POST",
		PathPattern:        "/service/v1/serviceJobs/{serviceJobId}/appointments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &AddAppointmentForServiceJobByServiceJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddAppointmentForServiceJobByServiceJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for addAppointmentForServiceJobByServiceJobId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CancelServiceJobByServiceJobID Cancels the service job indicated by the service job identifier you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) CancelServiceJobByServiceJobID(params *CancelServiceJobByServiceJobIDParams, opts ...ClientOption) (*CancelServiceJobByServiceJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelServiceJobByServiceJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "cancelServiceJobByServiceJobId",
		Method:             "PUT",
		PathPattern:        "/service/v1/serviceJobs/{serviceJobId}/cancellations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CancelServiceJobByServiceJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelServiceJobByServiceJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for cancelServiceJobByServiceJobId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CompleteServiceJobByServiceJobID Completes the service job indicated by the service job identifier you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) CompleteServiceJobByServiceJobID(params *CompleteServiceJobByServiceJobIDParams, opts ...ClientOption) (*CompleteServiceJobByServiceJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCompleteServiceJobByServiceJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "completeServiceJobByServiceJobId",
		Method:             "PUT",
		PathPattern:        "/service/v1/serviceJobs/{serviceJobId}/completions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CompleteServiceJobByServiceJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CompleteServiceJobByServiceJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for completeServiceJobByServiceJobId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceJobByServiceJobID Gets service job details for the service job indicated by the service job identifier you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 20 | 40 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetServiceJobByServiceJobID(params *GetServiceJobByServiceJobIDParams, opts ...ClientOption) (*GetServiceJobByServiceJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceJobByServiceJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceJobByServiceJobId",
		Method:             "GET",
		PathPattern:        "/service/v1/serviceJobs/{serviceJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceJobByServiceJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceJobByServiceJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceJobByServiceJobId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetServiceJobs Gets service job details for the specified filter query.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 10 | 40 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) GetServiceJobs(params *GetServiceJobsParams, opts ...ClientOption) (*GetServiceJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceJobsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceJobs",
		Method:             "GET",
		PathPattern:        "/service/v1/serviceJobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceJobsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceJobsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for getServiceJobs: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RescheduleAppointmentForServiceJobByServiceJobID Reschedules an appointment for the service job indicated by the service job identifier you specify.

**Usage Plan:**

| Rate (requests per second) | Burst |
| ---- | ---- |
| 5 | 20 |

For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
*/
func (a *Client) RescheduleAppointmentForServiceJobByServiceJobID(params *RescheduleAppointmentForServiceJobByServiceJobIDParams, opts ...ClientOption) (*RescheduleAppointmentForServiceJobByServiceJobIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRescheduleAppointmentForServiceJobByServiceJobIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "rescheduleAppointmentForServiceJobByServiceJobId",
		Method:             "POST",
		PathPattern:        "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RescheduleAppointmentForServiceJobByServiceJobIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RescheduleAppointmentForServiceJobByServiceJobIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for rescheduleAppointmentForServiceJobByServiceJobId: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
