// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// GetAppointmmentSlotsByJobIDReader is a Reader for the GetAppointmmentSlotsByJobID structure.
type GetAppointmmentSlotsByJobIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppointmmentSlotsByJobIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppointmmentSlotsByJobIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAppointmmentSlotsByJobIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAppointmmentSlotsByJobIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAppointmmentSlotsByJobIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAppointmmentSlotsByJobIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetAppointmmentSlotsByJobIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAppointmmentSlotsByJobIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAppointmmentSlotsByJobIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAppointmmentSlotsByJobIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAppointmmentSlotsByJobIDOK creates a GetAppointmmentSlotsByJobIDOK with default headers values
func NewGetAppointmmentSlotsByJobIDOK() *GetAppointmmentSlotsByJobIDOK {
	return &GetAppointmmentSlotsByJobIDOK{}
}

/*
GetAppointmmentSlotsByJobIDOK describes a response with status code 200, with default header values.

Success response.
*/
type GetAppointmmentSlotsByJobIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id o k response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get appointmment slots by job Id o k response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id o k response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get appointmment slots by job Id o k response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id o k response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAppointmmentSlotsByJobIDOK) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdOK  %+v", 200, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDOK) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdOK  %+v", 200, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDOK) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDBadRequest creates a GetAppointmmentSlotsByJobIDBadRequest with default headers values
func NewGetAppointmmentSlotsByJobIDBadRequest() *GetAppointmmentSlotsByJobIDBadRequest {
	return &GetAppointmmentSlotsByJobIDBadRequest{}
}

/*
GetAppointmmentSlotsByJobIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAppointmmentSlotsByJobIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id bad request response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id bad request response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id bad request response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointmment slots by job Id bad request response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id bad request response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAppointmmentSlotsByJobIDBadRequest) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDBadRequest) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDBadRequest) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDForbidden creates a GetAppointmmentSlotsByJobIDForbidden with default headers values
func NewGetAppointmmentSlotsByJobIDForbidden() *GetAppointmmentSlotsByJobIDForbidden {
	return &GetAppointmmentSlotsByJobIDForbidden{}
}

/*
GetAppointmmentSlotsByJobIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAppointmmentSlotsByJobIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id forbidden response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id forbidden response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id forbidden response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointmment slots by job Id forbidden response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id forbidden response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAppointmmentSlotsByJobIDForbidden) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdForbidden  %+v", 403, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDForbidden) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdForbidden  %+v", 403, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDForbidden) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDNotFound creates a GetAppointmmentSlotsByJobIDNotFound with default headers values
func NewGetAppointmmentSlotsByJobIDNotFound() *GetAppointmmentSlotsByJobIDNotFound {
	return &GetAppointmmentSlotsByJobIDNotFound{}
}

/*
GetAppointmmentSlotsByJobIDNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetAppointmmentSlotsByJobIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id not found response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id not found response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id not found response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointmment slots by job Id not found response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id not found response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAppointmmentSlotsByJobIDNotFound) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdNotFound  %+v", 404, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDNotFound) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdNotFound  %+v", 404, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDNotFound) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDUnsupportedMediaType creates a GetAppointmmentSlotsByJobIDUnsupportedMediaType with default headers values
func NewGetAppointmmentSlotsByJobIDUnsupportedMediaType() *GetAppointmmentSlotsByJobIDUnsupportedMediaType {
	return &GetAppointmmentSlotsByJobIDUnsupportedMediaType{}
}

/*
GetAppointmmentSlotsByJobIDUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetAppointmmentSlotsByJobIDUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id unsupported media type response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id unsupported media type response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id unsupported media type response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointmment slots by job Id unsupported media type response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id unsupported media type response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDUnprocessableEntity creates a GetAppointmmentSlotsByJobIDUnprocessableEntity with default headers values
func NewGetAppointmmentSlotsByJobIDUnprocessableEntity() *GetAppointmmentSlotsByJobIDUnprocessableEntity {
	return &GetAppointmmentSlotsByJobIDUnprocessableEntity{}
}

/*
GetAppointmmentSlotsByJobIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type GetAppointmmentSlotsByJobIDUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id unprocessable entity response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id unprocessable entity response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id unprocessable entity response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointmment slots by job Id unprocessable entity response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id unprocessable entity response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDTooManyRequests creates a GetAppointmmentSlotsByJobIDTooManyRequests with default headers values
func NewGetAppointmmentSlotsByJobIDTooManyRequests() *GetAppointmmentSlotsByJobIDTooManyRequests {
	return &GetAppointmmentSlotsByJobIDTooManyRequests{}
}

/*
GetAppointmmentSlotsByJobIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAppointmmentSlotsByJobIDTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id too many requests response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id too many requests response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id too many requests response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointmment slots by job Id too many requests response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointmment slots by job Id too many requests response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAppointmmentSlotsByJobIDTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDTooManyRequests) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDTooManyRequests) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDInternalServerError creates a GetAppointmmentSlotsByJobIDInternalServerError with default headers values
func NewGetAppointmmentSlotsByJobIDInternalServerError() *GetAppointmmentSlotsByJobIDInternalServerError {
	return &GetAppointmmentSlotsByJobIDInternalServerError{}
}

/*
GetAppointmmentSlotsByJobIDInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAppointmmentSlotsByJobIDInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id internal server error response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id internal server error response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id internal server error response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get appointmment slots by job Id internal server error response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get appointmment slots by job Id internal server error response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAppointmmentSlotsByJobIDInternalServerError) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDInternalServerError) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDInternalServerError) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmmentSlotsByJobIDServiceUnavailable creates a GetAppointmmentSlotsByJobIDServiceUnavailable with default headers values
func NewGetAppointmmentSlotsByJobIDServiceUnavailable() *GetAppointmmentSlotsByJobIDServiceUnavailable {
	return &GetAppointmmentSlotsByJobIDServiceUnavailable{}
}

/*
GetAppointmmentSlotsByJobIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAppointmmentSlotsByJobIDServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointmment slots by job Id service unavailable response has a 2xx status code
func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointmment slots by job Id service unavailable response has a 3xx status code
func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointmment slots by job Id service unavailable response has a 4xx status code
func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get appointmment slots by job Id service unavailable response has a 5xx status code
func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get appointmment slots by job Id service unavailable response a status code equal to that given
func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs/{serviceJobId}/appointmentSlots][%d] getAppointmmentSlotsByJobIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmmentSlotsByJobIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
