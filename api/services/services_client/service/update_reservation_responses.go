// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/services/services_models"
)

// UpdateReservationReader is a Reader for the UpdateReservation structure.
type UpdateReservationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateReservationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateReservationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewUpdateReservationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewUpdateReservationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateReservationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewUpdateReservationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewUpdateReservationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewUpdateReservationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewUpdateReservationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewUpdateReservationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewUpdateReservationOK creates a UpdateReservationOK with default headers values
func NewUpdateReservationOK() *UpdateReservationOK {
	return &UpdateReservationOK{}
}

/*
UpdateReservationOK describes a response with status code 200, with default header values.

Success response.
*/
type UpdateReservationOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation o k response has a 2xx status code
func (o *UpdateReservationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update reservation o k response has a 3xx status code
func (o *UpdateReservationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation o k response has a 4xx status code
func (o *UpdateReservationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update reservation o k response has a 5xx status code
func (o *UpdateReservationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation o k response a status code equal to that given
func (o *UpdateReservationOK) IsCode(code int) bool {
	return code == 200
}

func (o *UpdateReservationOK) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationOK  %+v", 200, o.Payload)
}

func (o *UpdateReservationOK) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationOK  %+v", 200, o.Payload)
}

func (o *UpdateReservationOK) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationBadRequest creates a UpdateReservationBadRequest with default headers values
func NewUpdateReservationBadRequest() *UpdateReservationBadRequest {
	return &UpdateReservationBadRequest{}
}

/*
UpdateReservationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type UpdateReservationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation bad request response has a 2xx status code
func (o *UpdateReservationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation bad request response has a 3xx status code
func (o *UpdateReservationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation bad request response has a 4xx status code
func (o *UpdateReservationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this update reservation bad request response has a 5xx status code
func (o *UpdateReservationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation bad request response a status code equal to that given
func (o *UpdateReservationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *UpdateReservationBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReservationBadRequest) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateReservationBadRequest) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationForbidden creates a UpdateReservationForbidden with default headers values
func NewUpdateReservationForbidden() *UpdateReservationForbidden {
	return &UpdateReservationForbidden{}
}

/*
UpdateReservationForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type UpdateReservationForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation forbidden response has a 2xx status code
func (o *UpdateReservationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation forbidden response has a 3xx status code
func (o *UpdateReservationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation forbidden response has a 4xx status code
func (o *UpdateReservationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update reservation forbidden response has a 5xx status code
func (o *UpdateReservationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation forbidden response a status code equal to that given
func (o *UpdateReservationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *UpdateReservationForbidden) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationForbidden  %+v", 403, o.Payload)
}

func (o *UpdateReservationForbidden) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationForbidden  %+v", 403, o.Payload)
}

func (o *UpdateReservationForbidden) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationNotFound creates a UpdateReservationNotFound with default headers values
func NewUpdateReservationNotFound() *UpdateReservationNotFound {
	return &UpdateReservationNotFound{}
}

/*
UpdateReservationNotFound describes a response with status code 404, with default header values.

The reservation specified does not exist.
*/
type UpdateReservationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation not found response has a 2xx status code
func (o *UpdateReservationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation not found response has a 3xx status code
func (o *UpdateReservationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation not found response has a 4xx status code
func (o *UpdateReservationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update reservation not found response has a 5xx status code
func (o *UpdateReservationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation not found response a status code equal to that given
func (o *UpdateReservationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *UpdateReservationNotFound) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationNotFound  %+v", 404, o.Payload)
}

func (o *UpdateReservationNotFound) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationNotFound  %+v", 404, o.Payload)
}

func (o *UpdateReservationNotFound) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationRequestEntityTooLarge creates a UpdateReservationRequestEntityTooLarge with default headers values
func NewUpdateReservationRequestEntityTooLarge() *UpdateReservationRequestEntityTooLarge {
	return &UpdateReservationRequestEntityTooLarge{}
}

/*
UpdateReservationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type UpdateReservationRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation request entity too large response has a 2xx status code
func (o *UpdateReservationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation request entity too large response has a 3xx status code
func (o *UpdateReservationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation request entity too large response has a 4xx status code
func (o *UpdateReservationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this update reservation request entity too large response has a 5xx status code
func (o *UpdateReservationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation request entity too large response a status code equal to that given
func (o *UpdateReservationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *UpdateReservationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateReservationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *UpdateReservationRequestEntityTooLarge) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationUnsupportedMediaType creates a UpdateReservationUnsupportedMediaType with default headers values
func NewUpdateReservationUnsupportedMediaType() *UpdateReservationUnsupportedMediaType {
	return &UpdateReservationUnsupportedMediaType{}
}

/*
UpdateReservationUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type UpdateReservationUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation unsupported media type response has a 2xx status code
func (o *UpdateReservationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation unsupported media type response has a 3xx status code
func (o *UpdateReservationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation unsupported media type response has a 4xx status code
func (o *UpdateReservationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this update reservation unsupported media type response has a 5xx status code
func (o *UpdateReservationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation unsupported media type response a status code equal to that given
func (o *UpdateReservationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *UpdateReservationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateReservationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *UpdateReservationUnsupportedMediaType) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationTooManyRequests creates a UpdateReservationTooManyRequests with default headers values
func NewUpdateReservationTooManyRequests() *UpdateReservationTooManyRequests {
	return &UpdateReservationTooManyRequests{}
}

/*
UpdateReservationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type UpdateReservationTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation too many requests response has a 2xx status code
func (o *UpdateReservationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation too many requests response has a 3xx status code
func (o *UpdateReservationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation too many requests response has a 4xx status code
func (o *UpdateReservationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this update reservation too many requests response has a 5xx status code
func (o *UpdateReservationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this update reservation too many requests response a status code equal to that given
func (o *UpdateReservationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *UpdateReservationTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateReservationTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationTooManyRequests  %+v", 429, o.Payload)
}

func (o *UpdateReservationTooManyRequests) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationInternalServerError creates a UpdateReservationInternalServerError with default headers values
func NewUpdateReservationInternalServerError() *UpdateReservationInternalServerError {
	return &UpdateReservationInternalServerError{}
}

/*
UpdateReservationInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type UpdateReservationInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation internal server error response has a 2xx status code
func (o *UpdateReservationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation internal server error response has a 3xx status code
func (o *UpdateReservationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation internal server error response has a 4xx status code
func (o *UpdateReservationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this update reservation internal server error response has a 5xx status code
func (o *UpdateReservationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this update reservation internal server error response a status code equal to that given
func (o *UpdateReservationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *UpdateReservationInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateReservationInternalServerError) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateReservationInternalServerError) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateReservationServiceUnavailable creates a UpdateReservationServiceUnavailable with default headers values
func NewUpdateReservationServiceUnavailable() *UpdateReservationServiceUnavailable {
	return &UpdateReservationServiceUnavailable{}
}

/*
UpdateReservationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type UpdateReservationServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.UpdateReservationResponse
}

// IsSuccess returns true when this update reservation service unavailable response has a 2xx status code
func (o *UpdateReservationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update reservation service unavailable response has a 3xx status code
func (o *UpdateReservationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update reservation service unavailable response has a 4xx status code
func (o *UpdateReservationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this update reservation service unavailable response has a 5xx status code
func (o *UpdateReservationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this update reservation service unavailable response a status code equal to that given
func (o *UpdateReservationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *UpdateReservationServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateReservationServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /service/v1/reservation/{reservationId}][%d] updateReservationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *UpdateReservationServiceUnavailable) GetPayload() *services_models.UpdateReservationResponse {
	return o.Payload
}

func (o *UpdateReservationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.UpdateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
