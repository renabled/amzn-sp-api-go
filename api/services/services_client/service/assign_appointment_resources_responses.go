// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// AssignAppointmentResourcesReader is a Reader for the AssignAppointmentResources structure.
type AssignAppointmentResourcesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AssignAppointmentResourcesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAssignAppointmentResourcesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAssignAppointmentResourcesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAssignAppointmentResourcesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAssignAppointmentResourcesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewAssignAppointmentResourcesRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewAssignAppointmentResourcesUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAssignAppointmentResourcesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAssignAppointmentResourcesTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAssignAppointmentResourcesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewAssignAppointmentResourcesServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAssignAppointmentResourcesOK creates a AssignAppointmentResourcesOK with default headers values
func NewAssignAppointmentResourcesOK() *AssignAppointmentResourcesOK {
	return &AssignAppointmentResourcesOK{}
}

/* AssignAppointmentResourcesOK describes a response with status code 200, with default header values.

Success response.
*/
type AssignAppointmentResourcesOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesOK) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesOK  %+v", 200, o.Payload)
}
func (o *AssignAppointmentResourcesOK) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesBadRequest creates a AssignAppointmentResourcesBadRequest with default headers values
func NewAssignAppointmentResourcesBadRequest() *AssignAppointmentResourcesBadRequest {
	return &AssignAppointmentResourcesBadRequest{}
}

/* AssignAppointmentResourcesBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type AssignAppointmentResourcesBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesBadRequest  %+v", 400, o.Payload)
}
func (o *AssignAppointmentResourcesBadRequest) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesForbidden creates a AssignAppointmentResourcesForbidden with default headers values
func NewAssignAppointmentResourcesForbidden() *AssignAppointmentResourcesForbidden {
	return &AssignAppointmentResourcesForbidden{}
}

/* AssignAppointmentResourcesForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type AssignAppointmentResourcesForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesForbidden) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesForbidden  %+v", 403, o.Payload)
}
func (o *AssignAppointmentResourcesForbidden) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesNotFound creates a AssignAppointmentResourcesNotFound with default headers values
func NewAssignAppointmentResourcesNotFound() *AssignAppointmentResourcesNotFound {
	return &AssignAppointmentResourcesNotFound{}
}

/* AssignAppointmentResourcesNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type AssignAppointmentResourcesNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesNotFound) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesNotFound  %+v", 404, o.Payload)
}
func (o *AssignAppointmentResourcesNotFound) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesRequestEntityTooLarge creates a AssignAppointmentResourcesRequestEntityTooLarge with default headers values
func NewAssignAppointmentResourcesRequestEntityTooLarge() *AssignAppointmentResourcesRequestEntityTooLarge {
	return &AssignAppointmentResourcesRequestEntityTooLarge{}
}

/* AssignAppointmentResourcesRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type AssignAppointmentResourcesRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *AssignAppointmentResourcesRequestEntityTooLarge) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesUnsupportedMediaType creates a AssignAppointmentResourcesUnsupportedMediaType with default headers values
func NewAssignAppointmentResourcesUnsupportedMediaType() *AssignAppointmentResourcesUnsupportedMediaType {
	return &AssignAppointmentResourcesUnsupportedMediaType{}
}

/* AssignAppointmentResourcesUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type AssignAppointmentResourcesUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *AssignAppointmentResourcesUnsupportedMediaType) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesUnprocessableEntity creates a AssignAppointmentResourcesUnprocessableEntity with default headers values
func NewAssignAppointmentResourcesUnprocessableEntity() *AssignAppointmentResourcesUnprocessableEntity {
	return &AssignAppointmentResourcesUnprocessableEntity{}
}

/* AssignAppointmentResourcesUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type AssignAppointmentResourcesUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *AssignAppointmentResourcesUnprocessableEntity) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesTooManyRequests creates a AssignAppointmentResourcesTooManyRequests with default headers values
func NewAssignAppointmentResourcesTooManyRequests() *AssignAppointmentResourcesTooManyRequests {
	return &AssignAppointmentResourcesTooManyRequests{}
}

/* AssignAppointmentResourcesTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type AssignAppointmentResourcesTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesTooManyRequests  %+v", 429, o.Payload)
}
func (o *AssignAppointmentResourcesTooManyRequests) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesInternalServerError creates a AssignAppointmentResourcesInternalServerError with default headers values
func NewAssignAppointmentResourcesInternalServerError() *AssignAppointmentResourcesInternalServerError {
	return &AssignAppointmentResourcesInternalServerError{}
}

/* AssignAppointmentResourcesInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type AssignAppointmentResourcesInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesInternalServerError  %+v", 500, o.Payload)
}
func (o *AssignAppointmentResourcesInternalServerError) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAssignAppointmentResourcesServiceUnavailable creates a AssignAppointmentResourcesServiceUnavailable with default headers values
func NewAssignAppointmentResourcesServiceUnavailable() *AssignAppointmentResourcesServiceUnavailable {
	return &AssignAppointmentResourcesServiceUnavailable{}
}

/* AssignAppointmentResourcesServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type AssignAppointmentResourcesServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.AssignAppointmentResourcesResponse
}

func (o *AssignAppointmentResourcesServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources][%d] assignAppointmentResourcesServiceUnavailable  %+v", 503, o.Payload)
}
func (o *AssignAppointmentResourcesServiceUnavailable) GetPayload() *services_models.AssignAppointmentResourcesResponse {
	return o.Payload
}

func (o *AssignAppointmentResourcesServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.AssignAppointmentResourcesResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
