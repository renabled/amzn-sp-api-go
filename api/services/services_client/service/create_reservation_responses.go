// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// CreateReservationReader is a Reader for the CreateReservation structure.
type CreateReservationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateReservationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateReservationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateReservationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateReservationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateReservationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateReservationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateReservationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateReservationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateReservationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateReservationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateReservationOK creates a CreateReservationOK with default headers values
func NewCreateReservationOK() *CreateReservationOK {
	return &CreateReservationOK{}
}

/* CreateReservationOK describes a response with status code 200, with default header values.

Success response.
*/
type CreateReservationOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationOK) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationOK  %+v", 200, o.Payload)
}
func (o *CreateReservationOK) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationBadRequest creates a CreateReservationBadRequest with default headers values
func NewCreateReservationBadRequest() *CreateReservationBadRequest {
	return &CreateReservationBadRequest{}
}

/* CreateReservationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateReservationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationBadRequest) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationBadRequest  %+v", 400, o.Payload)
}
func (o *CreateReservationBadRequest) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationForbidden creates a CreateReservationForbidden with default headers values
func NewCreateReservationForbidden() *CreateReservationForbidden {
	return &CreateReservationForbidden{}
}

/* CreateReservationForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateReservationForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationForbidden) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationForbidden  %+v", 403, o.Payload)
}
func (o *CreateReservationForbidden) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationNotFound creates a CreateReservationNotFound with default headers values
func NewCreateReservationNotFound() *CreateReservationNotFound {
	return &CreateReservationNotFound{}
}

/* CreateReservationNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateReservationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationNotFound) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationNotFound  %+v", 404, o.Payload)
}
func (o *CreateReservationNotFound) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationRequestEntityTooLarge creates a CreateReservationRequestEntityTooLarge with default headers values
func NewCreateReservationRequestEntityTooLarge() *CreateReservationRequestEntityTooLarge {
	return &CreateReservationRequestEntityTooLarge{}
}

/* CreateReservationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateReservationRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *CreateReservationRequestEntityTooLarge) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationUnsupportedMediaType creates a CreateReservationUnsupportedMediaType with default headers values
func NewCreateReservationUnsupportedMediaType() *CreateReservationUnsupportedMediaType {
	return &CreateReservationUnsupportedMediaType{}
}

/* CreateReservationUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CreateReservationUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *CreateReservationUnsupportedMediaType) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationTooManyRequests creates a CreateReservationTooManyRequests with default headers values
func NewCreateReservationTooManyRequests() *CreateReservationTooManyRequests {
	return &CreateReservationTooManyRequests{}
}

/* CreateReservationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateReservationTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationTooManyRequests  %+v", 429, o.Payload)
}
func (o *CreateReservationTooManyRequests) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationInternalServerError creates a CreateReservationInternalServerError with default headers values
func NewCreateReservationInternalServerError() *CreateReservationInternalServerError {
	return &CreateReservationInternalServerError{}
}

/* CreateReservationInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type CreateReservationInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationInternalServerError  %+v", 500, o.Payload)
}
func (o *CreateReservationInternalServerError) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateReservationServiceUnavailable creates a CreateReservationServiceUnavailable with default headers values
func NewCreateReservationServiceUnavailable() *CreateReservationServiceUnavailable {
	return &CreateReservationServiceUnavailable{}
}

/* CreateReservationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateReservationServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateReservationResponse
}

func (o *CreateReservationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /service/v1/reservation][%d] createReservationServiceUnavailable  %+v", 503, o.Payload)
}
func (o *CreateReservationServiceUnavailable) GetPayload() *services_models.CreateReservationResponse {
	return o.Payload
}

func (o *CreateReservationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
