// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewCancelServiceJobByServiceJobIDParams creates a new CancelServiceJobByServiceJobIDParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewCancelServiceJobByServiceJobIDParams() *CancelServiceJobByServiceJobIDParams {
	return &CancelServiceJobByServiceJobIDParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewCancelServiceJobByServiceJobIDParamsWithTimeout creates a new CancelServiceJobByServiceJobIDParams object
// with the ability to set a timeout on a request.
func NewCancelServiceJobByServiceJobIDParamsWithTimeout(timeout time.Duration) *CancelServiceJobByServiceJobIDParams {
	return &CancelServiceJobByServiceJobIDParams{
		timeout: timeout,
	}
}

// NewCancelServiceJobByServiceJobIDParamsWithContext creates a new CancelServiceJobByServiceJobIDParams object
// with the ability to set a context for a request.
func NewCancelServiceJobByServiceJobIDParamsWithContext(ctx context.Context) *CancelServiceJobByServiceJobIDParams {
	return &CancelServiceJobByServiceJobIDParams{
		Context: ctx,
	}
}

// NewCancelServiceJobByServiceJobIDParamsWithHTTPClient creates a new CancelServiceJobByServiceJobIDParams object
// with the ability to set a custom HTTPClient for a request.
func NewCancelServiceJobByServiceJobIDParamsWithHTTPClient(client *http.Client) *CancelServiceJobByServiceJobIDParams {
	return &CancelServiceJobByServiceJobIDParams{
		HTTPClient: client,
	}
}

/*
CancelServiceJobByServiceJobIDParams contains all the parameters to send to the API endpoint

	for the cancel service job by service job Id operation.

	Typically these are written to a http.Request.
*/
type CancelServiceJobByServiceJobIDParams struct {

	/* CancellationReasonCode.

	   A cancel reason code that specifies the reason for cancelling a service job.
	*/
	CancellationReasonCode string

	/* ServiceJobID.

	   An Amazon defined service job identifier.
	*/
	ServiceJobID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the cancel service job by service job Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelServiceJobByServiceJobIDParams) WithDefaults() *CancelServiceJobByServiceJobIDParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the cancel service job by service job Id params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *CancelServiceJobByServiceJobIDParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) WithTimeout(timeout time.Duration) *CancelServiceJobByServiceJobIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) WithContext(ctx context.Context) *CancelServiceJobByServiceJobIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) WithHTTPClient(client *http.Client) *CancelServiceJobByServiceJobIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCancellationReasonCode adds the cancellationReasonCode to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) WithCancellationReasonCode(cancellationReasonCode string) *CancelServiceJobByServiceJobIDParams {
	o.SetCancellationReasonCode(cancellationReasonCode)
	return o
}

// SetCancellationReasonCode adds the cancellationReasonCode to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) SetCancellationReasonCode(cancellationReasonCode string) {
	o.CancellationReasonCode = cancellationReasonCode
}

// WithServiceJobID adds the serviceJobID to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) WithServiceJobID(serviceJobID string) *CancelServiceJobByServiceJobIDParams {
	o.SetServiceJobID(serviceJobID)
	return o
}

// SetServiceJobID adds the serviceJobId to the cancel service job by service job Id params
func (o *CancelServiceJobByServiceJobIDParams) SetServiceJobID(serviceJobID string) {
	o.ServiceJobID = serviceJobID
}

// WriteToRequest writes these params to a swagger request
func (o *CancelServiceJobByServiceJobIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param cancellationReasonCode
	qrCancellationReasonCode := o.CancellationReasonCode
	qCancellationReasonCode := qrCancellationReasonCode
	if qCancellationReasonCode != "" {

		if err := r.SetQueryParam("cancellationReasonCode", qCancellationReasonCode); err != nil {
			return err
		}
	}

	// path param serviceJobId
	if err := r.SetPathParam("serviceJobId", o.ServiceJobID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
