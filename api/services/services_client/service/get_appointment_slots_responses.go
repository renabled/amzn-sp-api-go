// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/services/services_models"
)

// GetAppointmentSlotsReader is a Reader for the GetAppointmentSlots structure.
type GetAppointmentSlotsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetAppointmentSlotsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetAppointmentSlotsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetAppointmentSlotsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetAppointmentSlotsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetAppointmentSlotsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetAppointmentSlotsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetAppointmentSlotsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetAppointmentSlotsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetAppointmentSlotsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetAppointmentSlotsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetAppointmentSlotsOK creates a GetAppointmentSlotsOK with default headers values
func NewGetAppointmentSlotsOK() *GetAppointmentSlotsOK {
	return &GetAppointmentSlotsOK{}
}

/*
GetAppointmentSlotsOK describes a response with status code 200, with default header values.

Success response.
*/
type GetAppointmentSlotsOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots o k response has a 2xx status code
func (o *GetAppointmentSlotsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get appointment slots o k response has a 3xx status code
func (o *GetAppointmentSlotsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots o k response has a 4xx status code
func (o *GetAppointmentSlotsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get appointment slots o k response has a 5xx status code
func (o *GetAppointmentSlotsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots o k response a status code equal to that given
func (o *GetAppointmentSlotsOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetAppointmentSlotsOK) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsOK  %+v", 200, o.Payload)
}

func (o *GetAppointmentSlotsOK) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsOK  %+v", 200, o.Payload)
}

func (o *GetAppointmentSlotsOK) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsBadRequest creates a GetAppointmentSlotsBadRequest with default headers values
func NewGetAppointmentSlotsBadRequest() *GetAppointmentSlotsBadRequest {
	return &GetAppointmentSlotsBadRequest{}
}

/*
GetAppointmentSlotsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetAppointmentSlotsBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots bad request response has a 2xx status code
func (o *GetAppointmentSlotsBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots bad request response has a 3xx status code
func (o *GetAppointmentSlotsBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots bad request response has a 4xx status code
func (o *GetAppointmentSlotsBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointment slots bad request response has a 5xx status code
func (o *GetAppointmentSlotsBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots bad request response a status code equal to that given
func (o *GetAppointmentSlotsBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetAppointmentSlotsBadRequest) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppointmentSlotsBadRequest) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsBadRequest  %+v", 400, o.Payload)
}

func (o *GetAppointmentSlotsBadRequest) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsForbidden creates a GetAppointmentSlotsForbidden with default headers values
func NewGetAppointmentSlotsForbidden() *GetAppointmentSlotsForbidden {
	return &GetAppointmentSlotsForbidden{}
}

/*
GetAppointmentSlotsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetAppointmentSlotsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots forbidden response has a 2xx status code
func (o *GetAppointmentSlotsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots forbidden response has a 3xx status code
func (o *GetAppointmentSlotsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots forbidden response has a 4xx status code
func (o *GetAppointmentSlotsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointment slots forbidden response has a 5xx status code
func (o *GetAppointmentSlotsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots forbidden response a status code equal to that given
func (o *GetAppointmentSlotsForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetAppointmentSlotsForbidden) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsForbidden  %+v", 403, o.Payload)
}

func (o *GetAppointmentSlotsForbidden) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsForbidden  %+v", 403, o.Payload)
}

func (o *GetAppointmentSlotsForbidden) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsNotFound creates a GetAppointmentSlotsNotFound with default headers values
func NewGetAppointmentSlotsNotFound() *GetAppointmentSlotsNotFound {
	return &GetAppointmentSlotsNotFound{}
}

/*
GetAppointmentSlotsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetAppointmentSlotsNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots not found response has a 2xx status code
func (o *GetAppointmentSlotsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots not found response has a 3xx status code
func (o *GetAppointmentSlotsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots not found response has a 4xx status code
func (o *GetAppointmentSlotsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointment slots not found response has a 5xx status code
func (o *GetAppointmentSlotsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots not found response a status code equal to that given
func (o *GetAppointmentSlotsNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetAppointmentSlotsNotFound) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsNotFound  %+v", 404, o.Payload)
}

func (o *GetAppointmentSlotsNotFound) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsNotFound  %+v", 404, o.Payload)
}

func (o *GetAppointmentSlotsNotFound) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsUnsupportedMediaType creates a GetAppointmentSlotsUnsupportedMediaType with default headers values
func NewGetAppointmentSlotsUnsupportedMediaType() *GetAppointmentSlotsUnsupportedMediaType {
	return &GetAppointmentSlotsUnsupportedMediaType{}
}

/*
GetAppointmentSlotsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetAppointmentSlotsUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots unsupported media type response has a 2xx status code
func (o *GetAppointmentSlotsUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots unsupported media type response has a 3xx status code
func (o *GetAppointmentSlotsUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots unsupported media type response has a 4xx status code
func (o *GetAppointmentSlotsUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointment slots unsupported media type response has a 5xx status code
func (o *GetAppointmentSlotsUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots unsupported media type response a status code equal to that given
func (o *GetAppointmentSlotsUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetAppointmentSlotsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAppointmentSlotsUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetAppointmentSlotsUnsupportedMediaType) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsUnprocessableEntity creates a GetAppointmentSlotsUnprocessableEntity with default headers values
func NewGetAppointmentSlotsUnprocessableEntity() *GetAppointmentSlotsUnprocessableEntity {
	return &GetAppointmentSlotsUnprocessableEntity{}
}

/*
GetAppointmentSlotsUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type GetAppointmentSlotsUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots unprocessable entity response has a 2xx status code
func (o *GetAppointmentSlotsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots unprocessable entity response has a 3xx status code
func (o *GetAppointmentSlotsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots unprocessable entity response has a 4xx status code
func (o *GetAppointmentSlotsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointment slots unprocessable entity response has a 5xx status code
func (o *GetAppointmentSlotsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots unprocessable entity response a status code equal to that given
func (o *GetAppointmentSlotsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *GetAppointmentSlotsUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetAppointmentSlotsUnprocessableEntity) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetAppointmentSlotsUnprocessableEntity) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsTooManyRequests creates a GetAppointmentSlotsTooManyRequests with default headers values
func NewGetAppointmentSlotsTooManyRequests() *GetAppointmentSlotsTooManyRequests {
	return &GetAppointmentSlotsTooManyRequests{}
}

/*
GetAppointmentSlotsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetAppointmentSlotsTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots too many requests response has a 2xx status code
func (o *GetAppointmentSlotsTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots too many requests response has a 3xx status code
func (o *GetAppointmentSlotsTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots too many requests response has a 4xx status code
func (o *GetAppointmentSlotsTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get appointment slots too many requests response has a 5xx status code
func (o *GetAppointmentSlotsTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get appointment slots too many requests response a status code equal to that given
func (o *GetAppointmentSlotsTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetAppointmentSlotsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAppointmentSlotsTooManyRequests) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetAppointmentSlotsTooManyRequests) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsInternalServerError creates a GetAppointmentSlotsInternalServerError with default headers values
func NewGetAppointmentSlotsInternalServerError() *GetAppointmentSlotsInternalServerError {
	return &GetAppointmentSlotsInternalServerError{}
}

/*
GetAppointmentSlotsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetAppointmentSlotsInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots internal server error response has a 2xx status code
func (o *GetAppointmentSlotsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots internal server error response has a 3xx status code
func (o *GetAppointmentSlotsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots internal server error response has a 4xx status code
func (o *GetAppointmentSlotsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get appointment slots internal server error response has a 5xx status code
func (o *GetAppointmentSlotsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get appointment slots internal server error response a status code equal to that given
func (o *GetAppointmentSlotsInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetAppointmentSlotsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppointmentSlotsInternalServerError) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsInternalServerError  %+v", 500, o.Payload)
}

func (o *GetAppointmentSlotsInternalServerError) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetAppointmentSlotsServiceUnavailable creates a GetAppointmentSlotsServiceUnavailable with default headers values
func NewGetAppointmentSlotsServiceUnavailable() *GetAppointmentSlotsServiceUnavailable {
	return &GetAppointmentSlotsServiceUnavailable{}
}

/*
GetAppointmentSlotsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetAppointmentSlotsServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetAppointmentSlotsResponse
}

// IsSuccess returns true when this get appointment slots service unavailable response has a 2xx status code
func (o *GetAppointmentSlotsServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get appointment slots service unavailable response has a 3xx status code
func (o *GetAppointmentSlotsServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get appointment slots service unavailable response has a 4xx status code
func (o *GetAppointmentSlotsServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get appointment slots service unavailable response has a 5xx status code
func (o *GetAppointmentSlotsServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get appointment slots service unavailable response a status code equal to that given
func (o *GetAppointmentSlotsServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetAppointmentSlotsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAppointmentSlotsServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /service/v1/appointmentSlots][%d] getAppointmentSlotsServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetAppointmentSlotsServiceUnavailable) GetPayload() *services_models.GetAppointmentSlotsResponse {
	return o.Payload
}

func (o *GetAppointmentSlotsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetAppointmentSlotsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
