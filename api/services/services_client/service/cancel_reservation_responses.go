// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// CancelReservationReader is a Reader for the CancelReservation structure.
type CancelReservationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CancelReservationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCancelReservationNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCancelReservationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCancelReservationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCancelReservationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCancelReservationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCancelReservationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCancelReservationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCancelReservationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCancelReservationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCancelReservationNoContent creates a CancelReservationNoContent with default headers values
func NewCancelReservationNoContent() *CancelReservationNoContent {
	return &CancelReservationNoContent{}
}

/*
CancelReservationNoContent describes a response with status code 204, with default header values.

Success response.
*/
type CancelReservationNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation no content response has a 2xx status code
func (o *CancelReservationNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cancel reservation no content response has a 3xx status code
func (o *CancelReservationNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation no content response has a 4xx status code
func (o *CancelReservationNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel reservation no content response has a 5xx status code
func (o *CancelReservationNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation no content response a status code equal to that given
func (o *CancelReservationNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *CancelReservationNoContent) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationNoContent  %+v", 204, o.Payload)
}

func (o *CancelReservationNoContent) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationNoContent  %+v", 204, o.Payload)
}

func (o *CancelReservationNoContent) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationBadRequest creates a CancelReservationBadRequest with default headers values
func NewCancelReservationBadRequest() *CancelReservationBadRequest {
	return &CancelReservationBadRequest{}
}

/*
CancelReservationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CancelReservationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation bad request response has a 2xx status code
func (o *CancelReservationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation bad request response has a 3xx status code
func (o *CancelReservationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation bad request response has a 4xx status code
func (o *CancelReservationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel reservation bad request response has a 5xx status code
func (o *CancelReservationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation bad request response a status code equal to that given
func (o *CancelReservationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CancelReservationBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationBadRequest  %+v", 400, o.Payload)
}

func (o *CancelReservationBadRequest) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationBadRequest  %+v", 400, o.Payload)
}

func (o *CancelReservationBadRequest) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationForbidden creates a CancelReservationForbidden with default headers values
func NewCancelReservationForbidden() *CancelReservationForbidden {
	return &CancelReservationForbidden{}
}

/*
CancelReservationForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type CancelReservationForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation forbidden response has a 2xx status code
func (o *CancelReservationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation forbidden response has a 3xx status code
func (o *CancelReservationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation forbidden response has a 4xx status code
func (o *CancelReservationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel reservation forbidden response has a 5xx status code
func (o *CancelReservationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation forbidden response a status code equal to that given
func (o *CancelReservationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CancelReservationForbidden) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationForbidden  %+v", 403, o.Payload)
}

func (o *CancelReservationForbidden) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationForbidden  %+v", 403, o.Payload)
}

func (o *CancelReservationForbidden) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationNotFound creates a CancelReservationNotFound with default headers values
func NewCancelReservationNotFound() *CancelReservationNotFound {
	return &CancelReservationNotFound{}
}

/*
CancelReservationNotFound describes a response with status code 404, with default header values.

The reservation specified does not exist.
*/
type CancelReservationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation not found response has a 2xx status code
func (o *CancelReservationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation not found response has a 3xx status code
func (o *CancelReservationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation not found response has a 4xx status code
func (o *CancelReservationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel reservation not found response has a 5xx status code
func (o *CancelReservationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation not found response a status code equal to that given
func (o *CancelReservationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CancelReservationNotFound) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationNotFound  %+v", 404, o.Payload)
}

func (o *CancelReservationNotFound) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationNotFound  %+v", 404, o.Payload)
}

func (o *CancelReservationNotFound) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationRequestEntityTooLarge creates a CancelReservationRequestEntityTooLarge with default headers values
func NewCancelReservationRequestEntityTooLarge() *CancelReservationRequestEntityTooLarge {
	return &CancelReservationRequestEntityTooLarge{}
}

/*
CancelReservationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CancelReservationRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation request entity too large response has a 2xx status code
func (o *CancelReservationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation request entity too large response has a 3xx status code
func (o *CancelReservationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation request entity too large response has a 4xx status code
func (o *CancelReservationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel reservation request entity too large response has a 5xx status code
func (o *CancelReservationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation request entity too large response a status code equal to that given
func (o *CancelReservationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CancelReservationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CancelReservationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CancelReservationRequestEntityTooLarge) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationUnsupportedMediaType creates a CancelReservationUnsupportedMediaType with default headers values
func NewCancelReservationUnsupportedMediaType() *CancelReservationUnsupportedMediaType {
	return &CancelReservationUnsupportedMediaType{}
}

/*
CancelReservationUnsupportedMediaType describes a response with status code 415, with default header values.

The entity of the request is in a format not supported by the requested resource.
*/
type CancelReservationUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation unsupported media type response has a 2xx status code
func (o *CancelReservationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation unsupported media type response has a 3xx status code
func (o *CancelReservationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation unsupported media type response has a 4xx status code
func (o *CancelReservationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel reservation unsupported media type response has a 5xx status code
func (o *CancelReservationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation unsupported media type response a status code equal to that given
func (o *CancelReservationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CancelReservationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CancelReservationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CancelReservationUnsupportedMediaType) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationTooManyRequests creates a CancelReservationTooManyRequests with default headers values
func NewCancelReservationTooManyRequests() *CancelReservationTooManyRequests {
	return &CancelReservationTooManyRequests{}
}

/*
CancelReservationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CancelReservationTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation too many requests response has a 2xx status code
func (o *CancelReservationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation too many requests response has a 3xx status code
func (o *CancelReservationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation too many requests response has a 4xx status code
func (o *CancelReservationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this cancel reservation too many requests response has a 5xx status code
func (o *CancelReservationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this cancel reservation too many requests response a status code equal to that given
func (o *CancelReservationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CancelReservationTooManyRequests) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelReservationTooManyRequests) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CancelReservationTooManyRequests) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationInternalServerError creates a CancelReservationInternalServerError with default headers values
func NewCancelReservationInternalServerError() *CancelReservationInternalServerError {
	return &CancelReservationInternalServerError{}
}

/*
CancelReservationInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type CancelReservationInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation internal server error response has a 2xx status code
func (o *CancelReservationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation internal server error response has a 3xx status code
func (o *CancelReservationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation internal server error response has a 4xx status code
func (o *CancelReservationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel reservation internal server error response has a 5xx status code
func (o *CancelReservationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel reservation internal server error response a status code equal to that given
func (o *CancelReservationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CancelReservationInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelReservationInternalServerError) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationInternalServerError  %+v", 500, o.Payload)
}

func (o *CancelReservationInternalServerError) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCancelReservationServiceUnavailable creates a CancelReservationServiceUnavailable with default headers values
func NewCancelReservationServiceUnavailable() *CancelReservationServiceUnavailable {
	return &CancelReservationServiceUnavailable{}
}

/*
CancelReservationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CancelReservationServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CancelReservationResponse
}

// IsSuccess returns true when this cancel reservation service unavailable response has a 2xx status code
func (o *CancelReservationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cancel reservation service unavailable response has a 3xx status code
func (o *CancelReservationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cancel reservation service unavailable response has a 4xx status code
func (o *CancelReservationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this cancel reservation service unavailable response has a 5xx status code
func (o *CancelReservationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this cancel reservation service unavailable response a status code equal to that given
func (o *CancelReservationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CancelReservationServiceUnavailable) Error() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelReservationServiceUnavailable) String() string {
	return fmt.Sprintf("[DELETE /service/v1/reservation/{reservationId}][%d] cancelReservationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CancelReservationServiceUnavailable) GetPayload() *services_models.CancelReservationResponse {
	return o.Payload
}

func (o *CancelReservationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CancelReservationResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
