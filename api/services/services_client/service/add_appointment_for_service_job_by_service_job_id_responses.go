// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/services/services_models"
)

// AddAppointmentForServiceJobByServiceJobIDReader is a Reader for the AddAppointmentForServiceJobByServiceJobID structure.
type AddAppointmentForServiceJobByServiceJobIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AddAppointmentForServiceJobByServiceJobIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewAddAppointmentForServiceJobByServiceJobIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAddAppointmentForServiceJobByServiceJobIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewAddAppointmentForServiceJobByServiceJobIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewAddAppointmentForServiceJobByServiceJobIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewAddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewAddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewAddAppointmentForServiceJobByServiceJobIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewAddAppointmentForServiceJobByServiceJobIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewAddAppointmentForServiceJobByServiceJobIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewAddAppointmentForServiceJobByServiceJobIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAddAppointmentForServiceJobByServiceJobIDOK creates a AddAppointmentForServiceJobByServiceJobIDOK with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDOK() *AddAppointmentForServiceJobByServiceJobIDOK {
	return &AddAppointmentForServiceJobByServiceJobIDOK{}
}

/*
AddAppointmentForServiceJobByServiceJobIDOK describes a response with status code 200, with default header values.

Success response.
*/
type AddAppointmentForServiceJobByServiceJobIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id o k response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this add appointment for service job by service job Id o k response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id o k response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this add appointment for service job by service job Id o k response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id o k response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *AddAppointmentForServiceJobByServiceJobIDOK) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdOK  %+v", 200, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDOK) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdOK  %+v", 200, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDOK) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDBadRequest creates a AddAppointmentForServiceJobByServiceJobIDBadRequest with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDBadRequest() *AddAppointmentForServiceJobByServiceJobIDBadRequest {
	return &AddAppointmentForServiceJobByServiceJobIDBadRequest{}
}

/*
AddAppointmentForServiceJobByServiceJobIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type AddAppointmentForServiceJobByServiceJobIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id bad request response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id bad request response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id bad request response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id bad request response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id bad request response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDForbidden creates a AddAppointmentForServiceJobByServiceJobIDForbidden with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDForbidden() *AddAppointmentForServiceJobByServiceJobIDForbidden {
	return &AddAppointmentForServiceJobByServiceJobIDForbidden{}
}

/*
AddAppointmentForServiceJobByServiceJobIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type AddAppointmentForServiceJobByServiceJobIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id forbidden response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id forbidden response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id forbidden response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id forbidden response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id forbidden response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdForbidden  %+v", 403, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdForbidden  %+v", 403, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDNotFound creates a AddAppointmentForServiceJobByServiceJobIDNotFound with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDNotFound() *AddAppointmentForServiceJobByServiceJobIDNotFound {
	return &AddAppointmentForServiceJobByServiceJobIDNotFound{}
}

/*
AddAppointmentForServiceJobByServiceJobIDNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type AddAppointmentForServiceJobByServiceJobIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id not found response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id not found response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id not found response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id not found response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id not found response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdNotFound  %+v", 404, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdNotFound  %+v", 404, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge creates a AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge() *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge {
	return &AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge{}
}

/*
AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id request entity too large response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id request entity too large response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id request entity too large response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id request entity too large response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id request entity too large response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType creates a AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType() *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType {
	return &AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType{}
}

/*
AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id unsupported media type response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id unsupported media type response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id unsupported media type response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id unsupported media type response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id unsupported media type response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDUnprocessableEntity creates a AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDUnprocessableEntity() *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity {
	return &AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity{}
}

/*
AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id unprocessable entity response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id unprocessable entity response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id unprocessable entity response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id unprocessable entity response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id unprocessable entity response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDTooManyRequests creates a AddAppointmentForServiceJobByServiceJobIDTooManyRequests with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDTooManyRequests() *AddAppointmentForServiceJobByServiceJobIDTooManyRequests {
	return &AddAppointmentForServiceJobByServiceJobIDTooManyRequests{}
}

/*
AddAppointmentForServiceJobByServiceJobIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type AddAppointmentForServiceJobByServiceJobIDTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id too many requests response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id too many requests response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id too many requests response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this add appointment for service job by service job Id too many requests response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this add appointment for service job by service job Id too many requests response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDInternalServerError creates a AddAppointmentForServiceJobByServiceJobIDInternalServerError with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDInternalServerError() *AddAppointmentForServiceJobByServiceJobIDInternalServerError {
	return &AddAppointmentForServiceJobByServiceJobIDInternalServerError{}
}

/*
AddAppointmentForServiceJobByServiceJobIDInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type AddAppointmentForServiceJobByServiceJobIDInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id internal server error response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id internal server error response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id internal server error response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this add appointment for service job by service job Id internal server error response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this add appointment for service job by service job Id internal server error response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAddAppointmentForServiceJobByServiceJobIDServiceUnavailable creates a AddAppointmentForServiceJobByServiceJobIDServiceUnavailable with default headers values
func NewAddAppointmentForServiceJobByServiceJobIDServiceUnavailable() *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable {
	return &AddAppointmentForServiceJobByServiceJobIDServiceUnavailable{}
}

/*
AddAppointmentForServiceJobByServiceJobIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type AddAppointmentForServiceJobByServiceJobIDServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.SetAppointmentResponse
}

// IsSuccess returns true when this add appointment for service job by service job Id service unavailable response has a 2xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this add appointment for service job by service job Id service unavailable response has a 3xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this add appointment for service job by service job Id service unavailable response has a 4xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this add appointment for service job by service job Id service unavailable response has a 5xx status code
func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this add appointment for service job by service job Id service unavailable response a status code equal to that given
func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /service/v1/serviceJobs/{serviceJobId}/appointments][%d] addAppointmentForServiceJobByServiceJobIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) GetPayload() *services_models.SetAppointmentResponse {
	return o.Payload
}

func (o *AddAppointmentForServiceJobByServiceJobIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.SetAppointmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
