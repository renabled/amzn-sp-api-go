// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// GetServiceJobsReader is a Reader for the GetServiceJobs structure.
type GetServiceJobsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetServiceJobsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetServiceJobsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetServiceJobsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetServiceJobsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetServiceJobsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewGetServiceJobsRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetServiceJobsUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetServiceJobsTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetServiceJobsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetServiceJobsServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetServiceJobsOK creates a GetServiceJobsOK with default headers values
func NewGetServiceJobsOK() *GetServiceJobsOK {
	return &GetServiceJobsOK{}
}

/* GetServiceJobsOK describes a response with status code 200, with default header values.

Success response
*/
type GetServiceJobsOK struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsOK) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsOK  %+v", 200, o.Payload)
}
func (o *GetServiceJobsOK) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsBadRequest creates a GetServiceJobsBadRequest with default headers values
func NewGetServiceJobsBadRequest() *GetServiceJobsBadRequest {
	return &GetServiceJobsBadRequest{}
}

/* GetServiceJobsBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetServiceJobsBadRequest struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsBadRequest) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsBadRequest  %+v", 400, o.Payload)
}
func (o *GetServiceJobsBadRequest) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsForbidden creates a GetServiceJobsForbidden with default headers values
func NewGetServiceJobsForbidden() *GetServiceJobsForbidden {
	return &GetServiceJobsForbidden{}
}

/* GetServiceJobsForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetServiceJobsForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsForbidden) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsForbidden  %+v", 403, o.Payload)
}
func (o *GetServiceJobsForbidden) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsNotFound creates a GetServiceJobsNotFound with default headers values
func NewGetServiceJobsNotFound() *GetServiceJobsNotFound {
	return &GetServiceJobsNotFound{}
}

/* GetServiceJobsNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetServiceJobsNotFound struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsNotFound) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsNotFound  %+v", 404, o.Payload)
}
func (o *GetServiceJobsNotFound) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsRequestEntityTooLarge creates a GetServiceJobsRequestEntityTooLarge with default headers values
func NewGetServiceJobsRequestEntityTooLarge() *GetServiceJobsRequestEntityTooLarge {
	return &GetServiceJobsRequestEntityTooLarge{}
}

/* GetServiceJobsRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type GetServiceJobsRequestEntityTooLarge struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *GetServiceJobsRequestEntityTooLarge) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsUnsupportedMediaType creates a GetServiceJobsUnsupportedMediaType with default headers values
func NewGetServiceJobsUnsupportedMediaType() *GetServiceJobsUnsupportedMediaType {
	return &GetServiceJobsUnsupportedMediaType{}
}

/* GetServiceJobsUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetServiceJobsUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *GetServiceJobsUnsupportedMediaType) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsTooManyRequests creates a GetServiceJobsTooManyRequests with default headers values
func NewGetServiceJobsTooManyRequests() *GetServiceJobsTooManyRequests {
	return &GetServiceJobsTooManyRequests{}
}

/* GetServiceJobsTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetServiceJobsTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetServiceJobsTooManyRequests) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsInternalServerError creates a GetServiceJobsInternalServerError with default headers values
func NewGetServiceJobsInternalServerError() *GetServiceJobsInternalServerError {
	return &GetServiceJobsInternalServerError{}
}

/* GetServiceJobsInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetServiceJobsInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsInternalServerError  %+v", 500, o.Payload)
}
func (o *GetServiceJobsInternalServerError) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetServiceJobsServiceUnavailable creates a GetServiceJobsServiceUnavailable with default headers values
func NewGetServiceJobsServiceUnavailable() *GetServiceJobsServiceUnavailable {
	return &GetServiceJobsServiceUnavailable{}
}

/* GetServiceJobsServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetServiceJobsServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.GetServiceJobsResponse
}

func (o *GetServiceJobsServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /service/v1/serviceJobs][%d] getServiceJobsServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetServiceJobsServiceUnavailable) GetPayload() *services_models.GetServiceJobsResponse {
	return o.Payload
}

func (o *GetServiceJobsServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.GetServiceJobsResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
