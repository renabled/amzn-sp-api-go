// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/services/services_models"
)

// CreateServiceDocumentUploadDestinationReader is a Reader for the CreateServiceDocumentUploadDestination structure.
type CreateServiceDocumentUploadDestinationReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateServiceDocumentUploadDestinationReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateServiceDocumentUploadDestinationOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCreateServiceDocumentUploadDestinationBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCreateServiceDocumentUploadDestinationForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCreateServiceDocumentUploadDestinationNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCreateServiceDocumentUploadDestinationRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCreateServiceDocumentUploadDestinationUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateServiceDocumentUploadDestinationUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCreateServiceDocumentUploadDestinationTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCreateServiceDocumentUploadDestinationInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCreateServiceDocumentUploadDestinationServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCreateServiceDocumentUploadDestinationOK creates a CreateServiceDocumentUploadDestinationOK with default headers values
func NewCreateServiceDocumentUploadDestinationOK() *CreateServiceDocumentUploadDestinationOK {
	return &CreateServiceDocumentUploadDestinationOK{}
}

/*
CreateServiceDocumentUploadDestinationOK describes a response with status code 200, with default header values.

Successfully created an upload destination for the given resource.
*/
type CreateServiceDocumentUploadDestinationOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination o k response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create service document upload destination o k response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination o k response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create service document upload destination o k response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination o k response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationOK) IsCode(code int) bool {
	return code == 200
}

func (o *CreateServiceDocumentUploadDestinationOK) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationOK  %+v", 200, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationOK) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationOK  %+v", 200, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationOK) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-requestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationBadRequest creates a CreateServiceDocumentUploadDestinationBadRequest with default headers values
func NewCreateServiceDocumentUploadDestinationBadRequest() *CreateServiceDocumentUploadDestinationBadRequest {
	return &CreateServiceDocumentUploadDestinationBadRequest{}
}

/*
CreateServiceDocumentUploadDestinationBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CreateServiceDocumentUploadDestinationBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination bad request response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination bad request response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination bad request response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination bad request response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination bad request response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CreateServiceDocumentUploadDestinationBadRequest) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationBadRequest) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationBadRequest  %+v", 400, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationBadRequest) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationForbidden creates a CreateServiceDocumentUploadDestinationForbidden with default headers values
func NewCreateServiceDocumentUploadDestinationForbidden() *CreateServiceDocumentUploadDestinationForbidden {
	return &CreateServiceDocumentUploadDestinationForbidden{}
}

/*
CreateServiceDocumentUploadDestinationForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CreateServiceDocumentUploadDestinationForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination forbidden response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination forbidden response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination forbidden response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination forbidden response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination forbidden response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CreateServiceDocumentUploadDestinationForbidden) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationForbidden  %+v", 403, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationForbidden) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationForbidden  %+v", 403, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationForbidden) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationNotFound creates a CreateServiceDocumentUploadDestinationNotFound with default headers values
func NewCreateServiceDocumentUploadDestinationNotFound() *CreateServiceDocumentUploadDestinationNotFound {
	return &CreateServiceDocumentUploadDestinationNotFound{}
}

/*
CreateServiceDocumentUploadDestinationNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CreateServiceDocumentUploadDestinationNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination not found response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination not found response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination not found response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination not found response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination not found response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CreateServiceDocumentUploadDestinationNotFound) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationNotFound  %+v", 404, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationNotFound) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationNotFound  %+v", 404, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationNotFound) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationRequestEntityTooLarge creates a CreateServiceDocumentUploadDestinationRequestEntityTooLarge with default headers values
func NewCreateServiceDocumentUploadDestinationRequestEntityTooLarge() *CreateServiceDocumentUploadDestinationRequestEntityTooLarge {
	return &CreateServiceDocumentUploadDestinationRequestEntityTooLarge{}
}

/*
CreateServiceDocumentUploadDestinationRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CreateServiceDocumentUploadDestinationRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination request entity too large response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination request entity too large response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination request entity too large response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination request entity too large response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination request entity too large response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationUnsupportedMediaType creates a CreateServiceDocumentUploadDestinationUnsupportedMediaType with default headers values
func NewCreateServiceDocumentUploadDestinationUnsupportedMediaType() *CreateServiceDocumentUploadDestinationUnsupportedMediaType {
	return &CreateServiceDocumentUploadDestinationUnsupportedMediaType{}
}

/*
CreateServiceDocumentUploadDestinationUnsupportedMediaType describes a response with status code 415, with default header values.

The request's Content-Type header is invalid.
*/
type CreateServiceDocumentUploadDestinationUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestid string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination unsupported media type response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination unsupported media type response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination unsupported media type response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination unsupported media type response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination unsupported media type response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationUnprocessableEntity creates a CreateServiceDocumentUploadDestinationUnprocessableEntity with default headers values
func NewCreateServiceDocumentUploadDestinationUnprocessableEntity() *CreateServiceDocumentUploadDestinationUnprocessableEntity {
	return &CreateServiceDocumentUploadDestinationUnprocessableEntity{}
}

/*
CreateServiceDocumentUploadDestinationUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type CreateServiceDocumentUploadDestinationUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination unprocessable entity response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination unprocessable entity response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination unprocessable entity response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination unprocessable entity response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination unprocessable entity response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationTooManyRequests creates a CreateServiceDocumentUploadDestinationTooManyRequests with default headers values
func NewCreateServiceDocumentUploadDestinationTooManyRequests() *CreateServiceDocumentUploadDestinationTooManyRequests {
	return &CreateServiceDocumentUploadDestinationTooManyRequests{}
}

/*
CreateServiceDocumentUploadDestinationTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CreateServiceDocumentUploadDestinationTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestid string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination too many requests response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination too many requests response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination too many requests response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this create service document upload destination too many requests response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this create service document upload destination too many requests response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CreateServiceDocumentUploadDestinationTooManyRequests) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationTooManyRequests) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationTooManyRequests  %+v", 429, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationTooManyRequests) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-requestid
	hdrXAmznRequestid := response.GetHeader("x-amzn-requestid")

	if hdrXAmznRequestid != "" {
		o.XAmznRequestid = hdrXAmznRequestid
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationInternalServerError creates a CreateServiceDocumentUploadDestinationInternalServerError with default headers values
func NewCreateServiceDocumentUploadDestinationInternalServerError() *CreateServiceDocumentUploadDestinationInternalServerError {
	return &CreateServiceDocumentUploadDestinationInternalServerError{}
}

/*
CreateServiceDocumentUploadDestinationInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CreateServiceDocumentUploadDestinationInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination internal server error response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination internal server error response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination internal server error response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this create service document upload destination internal server error response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this create service document upload destination internal server error response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CreateServiceDocumentUploadDestinationInternalServerError) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationInternalServerError) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationInternalServerError) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateServiceDocumentUploadDestinationServiceUnavailable creates a CreateServiceDocumentUploadDestinationServiceUnavailable with default headers values
func NewCreateServiceDocumentUploadDestinationServiceUnavailable() *CreateServiceDocumentUploadDestinationServiceUnavailable {
	return &CreateServiceDocumentUploadDestinationServiceUnavailable{}
}

/*
CreateServiceDocumentUploadDestinationServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CreateServiceDocumentUploadDestinationServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload *services_models.CreateServiceDocumentUploadDestination
}

// IsSuccess returns true when this create service document upload destination service unavailable response has a 2xx status code
func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create service document upload destination service unavailable response has a 3xx status code
func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create service document upload destination service unavailable response has a 4xx status code
func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this create service document upload destination service unavailable response has a 5xx status code
func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this create service document upload destination service unavailable response a status code equal to that given
func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) Error() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) String() string {
	return fmt.Sprintf("[POST /service/v1/documents][%d] createServiceDocumentUploadDestinationServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) GetPayload() *services_models.CreateServiceDocumentUploadDestination {
	return o.Payload
}

func (o *CreateServiceDocumentUploadDestinationServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CreateServiceDocumentUploadDestination)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
