// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAppointmentSlotsParams creates a new GetAppointmentSlotsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAppointmentSlotsParams() *GetAppointmentSlotsParams {
	return &GetAppointmentSlotsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAppointmentSlotsParamsWithTimeout creates a new GetAppointmentSlotsParams object
// with the ability to set a timeout on a request.
func NewGetAppointmentSlotsParamsWithTimeout(timeout time.Duration) *GetAppointmentSlotsParams {
	return &GetAppointmentSlotsParams{
		timeout: timeout,
	}
}

// NewGetAppointmentSlotsParamsWithContext creates a new GetAppointmentSlotsParams object
// with the ability to set a context for a request.
func NewGetAppointmentSlotsParamsWithContext(ctx context.Context) *GetAppointmentSlotsParams {
	return &GetAppointmentSlotsParams{
		Context: ctx,
	}
}

// NewGetAppointmentSlotsParamsWithHTTPClient creates a new GetAppointmentSlotsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAppointmentSlotsParamsWithHTTPClient(client *http.Client) *GetAppointmentSlotsParams {
	return &GetAppointmentSlotsParams{
		HTTPClient: client,
	}
}

/* GetAppointmentSlotsParams contains all the parameters to send to the API endpoint
   for the get appointment slots operation.

   Typically these are written to a http.Request.
*/
type GetAppointmentSlotsParams struct {

	/* Asin.

	   ASIN associated with the service.
	*/
	Asin string

	/* EndTime.

	   A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days.
	*/
	EndTime *string

	/* MarketplaceIds.

	   An identifier for the marketplace for which appointment slots are queried
	*/
	MarketplaceIds []string

	/* StartTime.

	   A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration.
	*/
	StartTime *string

	/* StoreID.

	   Store identifier defining the region scope to retrive appointment slots.
	*/
	StoreID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get appointment slots params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAppointmentSlotsParams) WithDefaults() *GetAppointmentSlotsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get appointment slots params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAppointmentSlotsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithTimeout(timeout time.Duration) *GetAppointmentSlotsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithContext(ctx context.Context) *GetAppointmentSlotsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithHTTPClient(client *http.Client) *GetAppointmentSlotsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAsin adds the asin to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithAsin(asin string) *GetAppointmentSlotsParams {
	o.SetAsin(asin)
	return o
}

// SetAsin adds the asin to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetAsin(asin string) {
	o.Asin = asin
}

// WithEndTime adds the endTime to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithEndTime(endTime *string) *GetAppointmentSlotsParams {
	o.SetEndTime(endTime)
	return o
}

// SetEndTime adds the endTime to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetEndTime(endTime *string) {
	o.EndTime = endTime
}

// WithMarketplaceIds adds the marketplaceIds to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithMarketplaceIds(marketplaceIds []string) *GetAppointmentSlotsParams {
	o.SetMarketplaceIds(marketplaceIds)
	return o
}

// SetMarketplaceIds adds the marketplaceIds to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetMarketplaceIds(marketplaceIds []string) {
	o.MarketplaceIds = marketplaceIds
}

// WithStartTime adds the startTime to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithStartTime(startTime *string) *GetAppointmentSlotsParams {
	o.SetStartTime(startTime)
	return o
}

// SetStartTime adds the startTime to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetStartTime(startTime *string) {
	o.StartTime = startTime
}

// WithStoreID adds the storeID to the get appointment slots params
func (o *GetAppointmentSlotsParams) WithStoreID(storeID string) *GetAppointmentSlotsParams {
	o.SetStoreID(storeID)
	return o
}

// SetStoreID adds the storeId to the get appointment slots params
func (o *GetAppointmentSlotsParams) SetStoreID(storeID string) {
	o.StoreID = storeID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAppointmentSlotsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param asin
	qrAsin := o.Asin
	qAsin := qrAsin
	if qAsin != "" {

		if err := r.SetQueryParam("asin", qAsin); err != nil {
			return err
		}
	}

	if o.EndTime != nil {

		// query param endTime
		var qrEndTime string

		if o.EndTime != nil {
			qrEndTime = *o.EndTime
		}
		qEndTime := qrEndTime
		if qEndTime != "" {

			if err := r.SetQueryParam("endTime", qEndTime); err != nil {
				return err
			}
		}
	}

	if o.MarketplaceIds != nil {

		// binding items for marketplaceIds
		joinedMarketplaceIds := o.bindParamMarketplaceIds(reg)

		// query array param marketplaceIds
		if err := r.SetQueryParam("marketplaceIds", joinedMarketplaceIds...); err != nil {
			return err
		}
	}

	if o.StartTime != nil {

		// query param startTime
		var qrStartTime string

		if o.StartTime != nil {
			qrStartTime = *o.StartTime
		}
		qStartTime := qrStartTime
		if qStartTime != "" {

			if err := r.SetQueryParam("startTime", qStartTime); err != nil {
				return err
			}
		}
	}

	// query param storeId
	qrStoreID := o.StoreID
	qStoreID := qrStoreID
	if qStoreID != "" {

		if err := r.SetQueryParam("storeId", qStoreID); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetAppointmentSlots binds the parameter marketplaceIds
func (o *GetAppointmentSlotsParams) bindParamMarketplaceIds(formats strfmt.Registry) []string {
	marketplaceIdsIR := o.MarketplaceIds

	var marketplaceIdsIC []string
	for _, marketplaceIdsIIR := range marketplaceIdsIR { // explode []string

		marketplaceIdsIIV := marketplaceIdsIIR // string as string
		marketplaceIdsIC = append(marketplaceIdsIC, marketplaceIdsIIV)
	}

	// items.CollectionFormat: ""
	marketplaceIdsIS := swag.JoinByFormat(marketplaceIdsIC, "")

	return marketplaceIdsIS
}
