// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// SetAppointmentFulfillmentDataReader is a Reader for the SetAppointmentFulfillmentData structure.
type SetAppointmentFulfillmentDataReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SetAppointmentFulfillmentDataReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSetAppointmentFulfillmentDataNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSetAppointmentFulfillmentDataBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewSetAppointmentFulfillmentDataForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSetAppointmentFulfillmentDataNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewSetAppointmentFulfillmentDataRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewSetAppointmentFulfillmentDataUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSetAppointmentFulfillmentDataUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewSetAppointmentFulfillmentDataTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewSetAppointmentFulfillmentDataInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewSetAppointmentFulfillmentDataServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSetAppointmentFulfillmentDataNoContent creates a SetAppointmentFulfillmentDataNoContent with default headers values
func NewSetAppointmentFulfillmentDataNoContent() *SetAppointmentFulfillmentDataNoContent {
	return &SetAppointmentFulfillmentDataNoContent{}
}

/* SetAppointmentFulfillmentDataNoContent describes a response with status code 204, with default header values.

Success response.
*/
type SetAppointmentFulfillmentDataNoContent struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload string
}

func (o *SetAppointmentFulfillmentDataNoContent) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataNoContent  %+v", 204, o.Payload)
}
func (o *SetAppointmentFulfillmentDataNoContent) GetPayload() string {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataBadRequest creates a SetAppointmentFulfillmentDataBadRequest with default headers values
func NewSetAppointmentFulfillmentDataBadRequest() *SetAppointmentFulfillmentDataBadRequest {
	return &SetAppointmentFulfillmentDataBadRequest{}
}

/* SetAppointmentFulfillmentDataBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type SetAppointmentFulfillmentDataBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataBadRequest  %+v", 400, o.Payload)
}
func (o *SetAppointmentFulfillmentDataBadRequest) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataForbidden creates a SetAppointmentFulfillmentDataForbidden with default headers values
func NewSetAppointmentFulfillmentDataForbidden() *SetAppointmentFulfillmentDataForbidden {
	return &SetAppointmentFulfillmentDataForbidden{}
}

/* SetAppointmentFulfillmentDataForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type SetAppointmentFulfillmentDataForbidden struct {

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataForbidden) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataForbidden  %+v", 403, o.Payload)
}
func (o *SetAppointmentFulfillmentDataForbidden) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataNotFound creates a SetAppointmentFulfillmentDataNotFound with default headers values
func NewSetAppointmentFulfillmentDataNotFound() *SetAppointmentFulfillmentDataNotFound {
	return &SetAppointmentFulfillmentDataNotFound{}
}

/* SetAppointmentFulfillmentDataNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type SetAppointmentFulfillmentDataNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataNotFound) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataNotFound  %+v", 404, o.Payload)
}
func (o *SetAppointmentFulfillmentDataNotFound) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataRequestEntityTooLarge creates a SetAppointmentFulfillmentDataRequestEntityTooLarge with default headers values
func NewSetAppointmentFulfillmentDataRequestEntityTooLarge() *SetAppointmentFulfillmentDataRequestEntityTooLarge {
	return &SetAppointmentFulfillmentDataRequestEntityTooLarge{}
}

/* SetAppointmentFulfillmentDataRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type SetAppointmentFulfillmentDataRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataRequestEntityTooLarge  %+v", 413, o.Payload)
}
func (o *SetAppointmentFulfillmentDataRequestEntityTooLarge) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataUnsupportedMediaType creates a SetAppointmentFulfillmentDataUnsupportedMediaType with default headers values
func NewSetAppointmentFulfillmentDataUnsupportedMediaType() *SetAppointmentFulfillmentDataUnsupportedMediaType {
	return &SetAppointmentFulfillmentDataUnsupportedMediaType{}
}

/* SetAppointmentFulfillmentDataUnsupportedMediaType describes a response with status code 415, with default header values.

The entity of the request is in a format not supported by the requested resource.
*/
type SetAppointmentFulfillmentDataUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataUnsupportedMediaType  %+v", 415, o.Payload)
}
func (o *SetAppointmentFulfillmentDataUnsupportedMediaType) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataUnprocessableEntity creates a SetAppointmentFulfillmentDataUnprocessableEntity with default headers values
func NewSetAppointmentFulfillmentDataUnprocessableEntity() *SetAppointmentFulfillmentDataUnprocessableEntity {
	return &SetAppointmentFulfillmentDataUnprocessableEntity{}
}

/* SetAppointmentFulfillmentDataUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type SetAppointmentFulfillmentDataUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataUnprocessableEntity  %+v", 422, o.Payload)
}
func (o *SetAppointmentFulfillmentDataUnprocessableEntity) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataTooManyRequests creates a SetAppointmentFulfillmentDataTooManyRequests with default headers values
func NewSetAppointmentFulfillmentDataTooManyRequests() *SetAppointmentFulfillmentDataTooManyRequests {
	return &SetAppointmentFulfillmentDataTooManyRequests{}
}

/* SetAppointmentFulfillmentDataTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type SetAppointmentFulfillmentDataTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataTooManyRequests  %+v", 429, o.Payload)
}
func (o *SetAppointmentFulfillmentDataTooManyRequests) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataInternalServerError creates a SetAppointmentFulfillmentDataInternalServerError with default headers values
func NewSetAppointmentFulfillmentDataInternalServerError() *SetAppointmentFulfillmentDataInternalServerError {
	return &SetAppointmentFulfillmentDataInternalServerError{}
}

/* SetAppointmentFulfillmentDataInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type SetAppointmentFulfillmentDataInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataInternalServerError  %+v", 500, o.Payload)
}
func (o *SetAppointmentFulfillmentDataInternalServerError) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSetAppointmentFulfillmentDataServiceUnavailable creates a SetAppointmentFulfillmentDataServiceUnavailable with default headers values
func NewSetAppointmentFulfillmentDataServiceUnavailable() *SetAppointmentFulfillmentDataServiceUnavailable {
	return &SetAppointmentFulfillmentDataServiceUnavailable{}
}

/* SetAppointmentFulfillmentDataServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type SetAppointmentFulfillmentDataServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference id.
	 */
	XAmznRequestID string

	Payload services_models.ErrorList
}

func (o *SetAppointmentFulfillmentDataServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment][%d] setAppointmentFulfillmentDataServiceUnavailable  %+v", 503, o.Payload)
}
func (o *SetAppointmentFulfillmentDataServiceUnavailable) GetPayload() services_models.ErrorList {
	return o.Payload
}

func (o *SetAppointmentFulfillmentDataServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
