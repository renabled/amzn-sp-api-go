// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/services/services_models"
)

// CompleteServiceJobByServiceJobIDReader is a Reader for the CompleteServiceJobByServiceJobID structure.
type CompleteServiceJobByServiceJobIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CompleteServiceJobByServiceJobIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCompleteServiceJobByServiceJobIDOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewCompleteServiceJobByServiceJobIDBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewCompleteServiceJobByServiceJobIDForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCompleteServiceJobByServiceJobIDNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 413:
		result := NewCompleteServiceJobByServiceJobIDRequestEntityTooLarge()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewCompleteServiceJobByServiceJobIDUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCompleteServiceJobByServiceJobIDUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewCompleteServiceJobByServiceJobIDTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewCompleteServiceJobByServiceJobIDInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewCompleteServiceJobByServiceJobIDServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewCompleteServiceJobByServiceJobIDOK creates a CompleteServiceJobByServiceJobIDOK with default headers values
func NewCompleteServiceJobByServiceJobIDOK() *CompleteServiceJobByServiceJobIDOK {
	return &CompleteServiceJobByServiceJobIDOK{}
}

/*
CompleteServiceJobByServiceJobIDOK describes a response with status code 200, with default header values.

Success response.
*/
type CompleteServiceJobByServiceJobIDOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id o k response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this complete service job by service job Id o k response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id o k response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this complete service job by service job Id o k response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDOK) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id o k response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDOK) IsCode(code int) bool {
	return code == 200
}

func (o *CompleteServiceJobByServiceJobIDOK) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdOK  %+v", 200, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDOK) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdOK  %+v", 200, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDOK) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDBadRequest creates a CompleteServiceJobByServiceJobIDBadRequest with default headers values
func NewCompleteServiceJobByServiceJobIDBadRequest() *CompleteServiceJobByServiceJobIDBadRequest {
	return &CompleteServiceJobByServiceJobIDBadRequest{}
}

/*
CompleteServiceJobByServiceJobIDBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type CompleteServiceJobByServiceJobIDBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id bad request response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id bad request response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id bad request response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id bad request response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id bad request response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *CompleteServiceJobByServiceJobIDBadRequest) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDBadRequest) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdBadRequest  %+v", 400, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDBadRequest) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDForbidden creates a CompleteServiceJobByServiceJobIDForbidden with default headers values
func NewCompleteServiceJobByServiceJobIDForbidden() *CompleteServiceJobByServiceJobIDForbidden {
	return &CompleteServiceJobByServiceJobIDForbidden{}
}

/*
CompleteServiceJobByServiceJobIDForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type CompleteServiceJobByServiceJobIDForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id forbidden response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id forbidden response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id forbidden response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id forbidden response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id forbidden response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *CompleteServiceJobByServiceJobIDForbidden) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdForbidden  %+v", 403, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDForbidden) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdForbidden  %+v", 403, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDForbidden) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDNotFound creates a CompleteServiceJobByServiceJobIDNotFound with default headers values
func NewCompleteServiceJobByServiceJobIDNotFound() *CompleteServiceJobByServiceJobIDNotFound {
	return &CompleteServiceJobByServiceJobIDNotFound{}
}

/*
CompleteServiceJobByServiceJobIDNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type CompleteServiceJobByServiceJobIDNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id not found response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id not found response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id not found response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id not found response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id not found response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *CompleteServiceJobByServiceJobIDNotFound) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdNotFound  %+v", 404, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDNotFound) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdNotFound  %+v", 404, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDNotFound) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDRequestEntityTooLarge creates a CompleteServiceJobByServiceJobIDRequestEntityTooLarge with default headers values
func NewCompleteServiceJobByServiceJobIDRequestEntityTooLarge() *CompleteServiceJobByServiceJobIDRequestEntityTooLarge {
	return &CompleteServiceJobByServiceJobIDRequestEntityTooLarge{}
}

/*
CompleteServiceJobByServiceJobIDRequestEntityTooLarge describes a response with status code 413, with default header values.

The request size exceeded the maximum accepted size.
*/
type CompleteServiceJobByServiceJobIDRequestEntityTooLarge struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id request entity too large response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id request entity too large response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id request entity too large response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id request entity too large response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id request entity too large response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) IsCode(code int) bool {
	return code == 413
}

func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdRequestEntityTooLarge  %+v", 413, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDRequestEntityTooLarge) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDUnsupportedMediaType creates a CompleteServiceJobByServiceJobIDUnsupportedMediaType with default headers values
func NewCompleteServiceJobByServiceJobIDUnsupportedMediaType() *CompleteServiceJobByServiceJobIDUnsupportedMediaType {
	return &CompleteServiceJobByServiceJobIDUnsupportedMediaType{}
}

/*
CompleteServiceJobByServiceJobIDUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type CompleteServiceJobByServiceJobIDUnsupportedMediaType struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id unsupported media type response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id unsupported media type response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id unsupported media type response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id unsupported media type response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id unsupported media type response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDUnprocessableEntity creates a CompleteServiceJobByServiceJobIDUnprocessableEntity with default headers values
func NewCompleteServiceJobByServiceJobIDUnprocessableEntity() *CompleteServiceJobByServiceJobIDUnprocessableEntity {
	return &CompleteServiceJobByServiceJobIDUnprocessableEntity{}
}

/*
CompleteServiceJobByServiceJobIDUnprocessableEntity describes a response with status code 422, with default header values.

Unprocessable Entity. Unable to process the contained instructions.
*/
type CompleteServiceJobByServiceJobIDUnprocessableEntity struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id unprocessable entity response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id unprocessable entity response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id unprocessable entity response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id unprocessable entity response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id unprocessable entity response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDTooManyRequests creates a CompleteServiceJobByServiceJobIDTooManyRequests with default headers values
func NewCompleteServiceJobByServiceJobIDTooManyRequests() *CompleteServiceJobByServiceJobIDTooManyRequests {
	return &CompleteServiceJobByServiceJobIDTooManyRequests{}
}

/*
CompleteServiceJobByServiceJobIDTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type CompleteServiceJobByServiceJobIDTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id too many requests response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id too many requests response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id too many requests response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this complete service job by service job Id too many requests response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this complete service job by service job Id too many requests response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *CompleteServiceJobByServiceJobIDTooManyRequests) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDTooManyRequests) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdTooManyRequests  %+v", 429, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDTooManyRequests) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDInternalServerError creates a CompleteServiceJobByServiceJobIDInternalServerError with default headers values
func NewCompleteServiceJobByServiceJobIDInternalServerError() *CompleteServiceJobByServiceJobIDInternalServerError {
	return &CompleteServiceJobByServiceJobIDInternalServerError{}
}

/*
CompleteServiceJobByServiceJobIDInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type CompleteServiceJobByServiceJobIDInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id internal server error response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id internal server error response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id internal server error response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this complete service job by service job Id internal server error response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this complete service job by service job Id internal server error response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *CompleteServiceJobByServiceJobIDInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDInternalServerError) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdInternalServerError  %+v", 500, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDInternalServerError) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCompleteServiceJobByServiceJobIDServiceUnavailable creates a CompleteServiceJobByServiceJobIDServiceUnavailable with default headers values
func NewCompleteServiceJobByServiceJobIDServiceUnavailable() *CompleteServiceJobByServiceJobIDServiceUnavailable {
	return &CompleteServiceJobByServiceJobIDServiceUnavailable{}
}

/*
CompleteServiceJobByServiceJobIDServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type CompleteServiceJobByServiceJobIDServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	**Note:** For this status code, the rate limit header is deprecated and no longer returned.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *services_models.CompleteServiceJobByServiceJobIDResponse
}

// IsSuccess returns true when this complete service job by service job Id service unavailable response has a 2xx status code
func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this complete service job by service job Id service unavailable response has a 3xx status code
func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this complete service job by service job Id service unavailable response has a 4xx status code
func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this complete service job by service job Id service unavailable response has a 5xx status code
func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this complete service job by service job Id service unavailable response a status code equal to that given
func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) Error() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) String() string {
	return fmt.Sprintf("[PUT /service/v1/serviceJobs/{serviceJobId}/completions][%d] completeServiceJobByServiceJobIdServiceUnavailable  %+v", 503, o.Payload)
}

func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) GetPayload() *services_models.CompleteServiceJobByServiceJobIDResponse {
	return o.Payload
}

func (o *CompleteServiceJobByServiceJobIDServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(services_models.CompleteServiceJobByServiceJobIDResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
