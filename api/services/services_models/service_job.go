// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceJob The job details of a service.
//
// swagger:model ServiceJob
type ServiceJob struct {

	// A list of appointments.
	Appointments []*Appointment `json:"appointments"`

	// A list of items associated with the service job.
	AssociatedItems []*AssociatedItem `json:"associatedItems"`

	// Information about the buyer.
	Buyer *Buyer `json:"buyer,omitempty"`

	// The date and time of the creation of the job, in ISO 8601 format.
	// Format: date-time
	CreateTime strfmt.DateTime `json:"createTime,omitempty"`

	// The marketplace identifier.
	// Pattern: ^[A-Z0-9]*$
	MarketplaceID string `json:"marketplaceId,omitempty"`

	// A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.
	PreferredAppointmentTimes []*AppointmentTime `json:"preferredAppointmentTimes"`

	// The scope of work for the order.
	ScopeOfWork *ScopeOfWork `json:"scopeOfWork,omitempty"`

	// Information about the seller of the service job.
	Seller *Seller `json:"seller,omitempty"`

	// The service job identifier.
	ServiceJobID ServiceJobID `json:"serviceJobId,omitempty"`

	// Information about the service job provider.
	ServiceJobProvider *ServiceJobProvider `json:"serviceJobProvider,omitempty"`

	// The status of the service job.
	// Enum: [NOT_SERVICED CANCELLED COMPLETED PENDING_SCHEDULE NOT_FULFILLABLE HOLD PAYMENT_DECLINED]
	ServiceJobStatus string `json:"serviceJobStatus,omitempty"`

	// Information about the location of the service job.
	ServiceLocation *ServiceLocation `json:"serviceLocation,omitempty"`

	// The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
	ServiceOrderID OrderID `json:"serviceOrderId,omitempty"`
}

// Validate validates this service job
func (m *ServiceJob) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssociatedItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBuyer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarketplaceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePreferredAppointmentTimes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopeOfWork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeller(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceJobProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceJobStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceJob) validateAppointments(formats strfmt.Registry) error {
	if swag.IsZero(m.Appointments) { // not required
		return nil
	}

	for i := 0; i < len(m.Appointments); i++ {
		if swag.IsZero(m.Appointments[i]) { // not required
			continue
		}

		if m.Appointments[i] != nil {
			if err := m.Appointments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appointments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceJob) validateAssociatedItems(formats strfmt.Registry) error {
	if swag.IsZero(m.AssociatedItems) { // not required
		return nil
	}

	for i := 0; i < len(m.AssociatedItems); i++ {
		if swag.IsZero(m.AssociatedItems[i]) { // not required
			continue
		}

		if m.AssociatedItems[i] != nil {
			if err := m.AssociatedItems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceJob) validateBuyer(formats strfmt.Registry) error {
	if swag.IsZero(m.Buyer) { // not required
		return nil
	}

	if m.Buyer != nil {
		if err := m.Buyer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyer")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) validateCreateTime(formats strfmt.Registry) error {
	if swag.IsZero(m.CreateTime) { // not required
		return nil
	}

	if err := validate.FormatOf("createTime", "body", "date-time", m.CreateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ServiceJob) validateMarketplaceID(formats strfmt.Registry) error {
	if swag.IsZero(m.MarketplaceID) { // not required
		return nil
	}

	if err := validate.Pattern("marketplaceId", "body", m.MarketplaceID, `^[A-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

func (m *ServiceJob) validatePreferredAppointmentTimes(formats strfmt.Registry) error {
	if swag.IsZero(m.PreferredAppointmentTimes) { // not required
		return nil
	}

	for i := 0; i < len(m.PreferredAppointmentTimes); i++ {
		if swag.IsZero(m.PreferredAppointmentTimes[i]) { // not required
			continue
		}

		if m.PreferredAppointmentTimes[i] != nil {
			if err := m.PreferredAppointmentTimes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferredAppointmentTimes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preferredAppointmentTimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceJob) validateScopeOfWork(formats strfmt.Registry) error {
	if swag.IsZero(m.ScopeOfWork) { // not required
		return nil
	}

	if m.ScopeOfWork != nil {
		if err := m.ScopeOfWork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopeOfWork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopeOfWork")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) validateSeller(formats strfmt.Registry) error {
	if swag.IsZero(m.Seller) { // not required
		return nil
	}

	if m.Seller != nil {
		if err := m.Seller.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seller")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seller")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) validateServiceJobID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceJobID) { // not required
		return nil
	}

	if err := m.ServiceJobID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceJobId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceJobId")
		}
		return err
	}

	return nil
}

func (m *ServiceJob) validateServiceJobProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceJobProvider) { // not required
		return nil
	}

	if m.ServiceJobProvider != nil {
		if err := m.ServiceJobProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceJobProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceJobProvider")
			}
			return err
		}
	}

	return nil
}

var serviceJobTypeServiceJobStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NOT_SERVICED","CANCELLED","COMPLETED","PENDING_SCHEDULE","NOT_FULFILLABLE","HOLD","PAYMENT_DECLINED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		serviceJobTypeServiceJobStatusPropEnum = append(serviceJobTypeServiceJobStatusPropEnum, v)
	}
}

const (

	// ServiceJobServiceJobStatusNOTSERVICED captures enum value "NOT_SERVICED"
	ServiceJobServiceJobStatusNOTSERVICED string = "NOT_SERVICED"

	// ServiceJobServiceJobStatusCANCELLED captures enum value "CANCELLED"
	ServiceJobServiceJobStatusCANCELLED string = "CANCELLED"

	// ServiceJobServiceJobStatusCOMPLETED captures enum value "COMPLETED"
	ServiceJobServiceJobStatusCOMPLETED string = "COMPLETED"

	// ServiceJobServiceJobStatusPENDINGSCHEDULE captures enum value "PENDING_SCHEDULE"
	ServiceJobServiceJobStatusPENDINGSCHEDULE string = "PENDING_SCHEDULE"

	// ServiceJobServiceJobStatusNOTFULFILLABLE captures enum value "NOT_FULFILLABLE"
	ServiceJobServiceJobStatusNOTFULFILLABLE string = "NOT_FULFILLABLE"

	// ServiceJobServiceJobStatusHOLD captures enum value "HOLD"
	ServiceJobServiceJobStatusHOLD string = "HOLD"

	// ServiceJobServiceJobStatusPAYMENTDECLINED captures enum value "PAYMENT_DECLINED"
	ServiceJobServiceJobStatusPAYMENTDECLINED string = "PAYMENT_DECLINED"
)

// prop value enum
func (m *ServiceJob) validateServiceJobStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, serviceJobTypeServiceJobStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ServiceJob) validateServiceJobStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceJobStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceJobStatusEnum("serviceJobStatus", "body", m.ServiceJobStatus); err != nil {
		return err
	}

	return nil
}

func (m *ServiceJob) validateServiceLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceLocation) { // not required
		return nil
	}

	if m.ServiceLocation != nil {
		if err := m.ServiceLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceLocation")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) validateServiceOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceOrderID) { // not required
		return nil
	}

	if err := m.ServiceOrderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceOrderId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceOrderId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this service job based on the context it is used
func (m *ServiceJob) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssociatedItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBuyer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePreferredAppointmentTimes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScopeOfWork(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSeller(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceJobID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceJobProvider(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateServiceOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceJob) contextValidateAppointments(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Appointments); i++ {

		if m.Appointments[i] != nil {
			if err := m.Appointments[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("appointments" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("appointments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceJob) contextValidateAssociatedItems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssociatedItems); i++ {

		if m.AssociatedItems[i] != nil {
			if err := m.AssociatedItems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("associatedItems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("associatedItems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceJob) contextValidateBuyer(ctx context.Context, formats strfmt.Registry) error {

	if m.Buyer != nil {
		if err := m.Buyer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buyer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("buyer")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) contextValidatePreferredAppointmentTimes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.PreferredAppointmentTimes); i++ {

		if m.PreferredAppointmentTimes[i] != nil {
			if err := m.PreferredAppointmentTimes[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("preferredAppointmentTimes" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("preferredAppointmentTimes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ServiceJob) contextValidateScopeOfWork(ctx context.Context, formats strfmt.Registry) error {

	if m.ScopeOfWork != nil {
		if err := m.ScopeOfWork.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scopeOfWork")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("scopeOfWork")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) contextValidateSeller(ctx context.Context, formats strfmt.Registry) error {

	if m.Seller != nil {
		if err := m.Seller.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("seller")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("seller")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) contextValidateServiceJobID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceJobID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceJobId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceJobId")
		}
		return err
	}

	return nil
}

func (m *ServiceJob) contextValidateServiceJobProvider(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceJobProvider != nil {
		if err := m.ServiceJobProvider.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceJobProvider")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceJobProvider")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) contextValidateServiceLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.ServiceLocation != nil {
		if err := m.ServiceLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("serviceLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("serviceLocation")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceJob) contextValidateServiceOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ServiceOrderID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("serviceOrderId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("serviceOrderId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceJob) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceJob) UnmarshalBinary(b []byte) error {
	var res ServiceJob
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
