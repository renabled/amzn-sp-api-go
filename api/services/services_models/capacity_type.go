// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CapacityType Type of capacity
//
// swagger:model CapacityType
type CapacityType string

func NewCapacityType(value CapacityType) *CapacityType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated CapacityType.
func (m CapacityType) Pointer() *CapacityType {
	return &m
}

const (

	// CapacityTypeSCHEDULEDCAPACITY captures enum value "SCHEDULED_CAPACITY"
	CapacityTypeSCHEDULEDCAPACITY CapacityType = "SCHEDULED_CAPACITY"

	// CapacityTypeAVAILABLECAPACITY captures enum value "AVAILABLE_CAPACITY"
	CapacityTypeAVAILABLECAPACITY CapacityType = "AVAILABLE_CAPACITY"

	// CapacityTypeENCUMBEREDCAPACITY captures enum value "ENCUMBERED_CAPACITY"
	CapacityTypeENCUMBEREDCAPACITY CapacityType = "ENCUMBERED_CAPACITY"

	// CapacityTypeRESERVEDCAPACITY captures enum value "RESERVED_CAPACITY"
	CapacityTypeRESERVEDCAPACITY CapacityType = "RESERVED_CAPACITY"
)

// for schema
var capacityTypeEnum []interface{}

func init() {
	var res []CapacityType
	if err := json.Unmarshal([]byte(`["SCHEDULED_CAPACITY","AVAILABLE_CAPACITY","ENCUMBERED_CAPACITY","RESERVED_CAPACITY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		capacityTypeEnum = append(capacityTypeEnum, v)
	}
}

func (m CapacityType) validateCapacityTypeEnum(path, location string, value CapacityType) error {
	if err := validate.EnumCase(path, location, value, capacityTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this capacity type
func (m CapacityType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCapacityTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this capacity type based on context it is used
func (m CapacityType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
