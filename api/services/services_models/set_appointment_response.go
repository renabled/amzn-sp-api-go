// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SetAppointmentResponse Response schema for the `addAppointmentForServiceJobByServiceJobId` and `rescheduleAppointmentForServiceJobByServiceJobId` operations.
//
// swagger:model SetAppointmentResponse
type SetAppointmentResponse struct {

	// New appointment identifier generated during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
	AppointmentID AppointmentID `json:"appointmentId,omitempty"`

	// Errors occurred during during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
	Errors ErrorList `json:"errors,omitempty"`

	// Warnings generated during the `addAppointmentForServiceJobByServiceJobId` or `rescheduleAppointmentForServiceJobByServiceJobId` operations.
	Warnings WarningList `json:"warnings,omitempty"`
}

// Validate validates this set appointment response
func (m *SetAppointmentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetAppointmentResponse) validateAppointmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentID) { // not required
		return nil
	}

	if err := m.AppointmentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appointmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("appointmentId")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if err := m.Errors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentResponse) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	if err := m.Warnings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("warnings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("warnings")
		}
		return err
	}

	return nil
}

// ContextValidate validate this set appointment response based on the context it is used
func (m *SetAppointmentResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetAppointmentResponse) contextValidateAppointmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AppointmentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appointmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("appointmentId")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Errors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentResponse) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Warnings.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("warnings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("warnings")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetAppointmentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetAppointmentResponse) UnmarshalBinary(b []byte) error {
	var res SetAppointmentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
