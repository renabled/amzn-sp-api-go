// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FixedSlotCapacity Response schema for the `getFixedSlotCapacity` operation.
//
// swagger:model FixedSlotCapacity
type FixedSlotCapacity struct {

	// Array of capacity slots in fixed slot format.
	Capacities []*FixedSlot `json:"capacities"`

	// Next page token, if there are more pages.
	NextPageToken string `json:"nextPageToken,omitempty"`

	// Resource Identifier.
	ResourceID string `json:"resourceId,omitempty"`

	// The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 <= `slotDuration` <= 360.
	// Multiple Of: 5
	SlotDuration int32 `json:"slotDuration,omitempty"`
}

// Validate validates this fixed slot capacity
func (m *FixedSlotCapacity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacities(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FixedSlotCapacity) validateCapacities(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacities) { // not required
		return nil
	}

	for i := 0; i < len(m.Capacities); i++ {
		if swag.IsZero(m.Capacities[i]) { // not required
			continue
		}

		if m.Capacities[i] != nil {
			if err := m.Capacities[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("capacities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FixedSlotCapacity) validateSlotDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.SlotDuration) { // not required
		return nil
	}

	if err := validate.MultipleOfInt("slotDuration", "body", int64(m.SlotDuration), 5); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fixed slot capacity based on the context it is used
func (m *FixedSlotCapacity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacities(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FixedSlotCapacity) contextValidateCapacities(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Capacities); i++ {

		if m.Capacities[i] != nil {
			if err := m.Capacities[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("capacities" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("capacities" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FixedSlotCapacity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FixedSlotCapacity) UnmarshalBinary(b []byte) error {
	var res FixedSlotCapacity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
