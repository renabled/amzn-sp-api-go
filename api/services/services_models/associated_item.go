// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssociatedItem Information about an item associated with the service job.
//
// swagger:model AssociatedItem
type AssociatedItem struct {

	// The Amazon Standard Identification Number (ASIN) of the item.
	Asin string `json:"asin,omitempty"`

	// The brand name of the item.
	BrandName string `json:"brandName,omitempty"`

	// Delivery information for the item.
	ItemDelivery *ItemDelivery `json:"itemDelivery,omitempty"`

	// The status of the item.
	// Enum: [ACTIVE CANCELLED SHIPPED DELIVERED]
	ItemStatus string `json:"itemStatus,omitempty"`

	// The Amazon-defined identifier for an order placed by the buyer in 3-7-7 format.
	OrderID OrderID `json:"orderId,omitempty"`

	// The total number of items included in the order.
	Quantity int64 `json:"quantity,omitempty"`

	// The title of the item.
	Title string `json:"title,omitempty"`
}

// Validate validates this associated item
func (m *AssociatedItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateItemDelivery(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssociatedItem) validateItemDelivery(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemDelivery) { // not required
		return nil
	}

	if m.ItemDelivery != nil {
		if err := m.ItemDelivery.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemDelivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemDelivery")
			}
			return err
		}
	}

	return nil
}

var associatedItemTypeItemStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","CANCELLED","SHIPPED","DELIVERED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		associatedItemTypeItemStatusPropEnum = append(associatedItemTypeItemStatusPropEnum, v)
	}
}

const (

	// AssociatedItemItemStatusACTIVE captures enum value "ACTIVE"
	AssociatedItemItemStatusACTIVE string = "ACTIVE"

	// AssociatedItemItemStatusCANCELLED captures enum value "CANCELLED"
	AssociatedItemItemStatusCANCELLED string = "CANCELLED"

	// AssociatedItemItemStatusSHIPPED captures enum value "SHIPPED"
	AssociatedItemItemStatusSHIPPED string = "SHIPPED"

	// AssociatedItemItemStatusDELIVERED captures enum value "DELIVERED"
	AssociatedItemItemStatusDELIVERED string = "DELIVERED"
)

// prop value enum
func (m *AssociatedItem) validateItemStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, associatedItemTypeItemStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssociatedItem) validateItemStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateItemStatusEnum("itemStatus", "body", m.ItemStatus); err != nil {
		return err
	}

	return nil
}

func (m *AssociatedItem) validateOrderID(formats strfmt.Registry) error {
	if swag.IsZero(m.OrderID) { // not required
		return nil
	}

	if err := m.OrderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this associated item based on the context it is used
func (m *AssociatedItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemDelivery(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrderID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssociatedItem) contextValidateItemDelivery(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemDelivery != nil {
		if err := m.ItemDelivery.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemDelivery")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemDelivery")
			}
			return err
		}
	}

	return nil
}

func (m *AssociatedItem) contextValidateOrderID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.OrderID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("orderId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("orderId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssociatedItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssociatedItem) UnmarshalBinary(b []byte) error {
	var res AssociatedItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
