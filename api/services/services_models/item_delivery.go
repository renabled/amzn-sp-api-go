// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ItemDelivery Delivery information for the item.
//
// swagger:model ItemDelivery
type ItemDelivery struct {

	// The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
	// Format: date-time
	EstimatedDeliveryDate strfmt.DateTime `json:"estimatedDeliveryDate,omitempty"`

	// Promised delivery information for the item.
	ItemDeliveryPromise *ItemDeliveryPromise `json:"itemDeliveryPromise,omitempty"`
}

// Validate validates this item delivery
func (m *ItemDelivery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEstimatedDeliveryDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItemDeliveryPromise(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemDelivery) validateEstimatedDeliveryDate(formats strfmt.Registry) error {
	if swag.IsZero(m.EstimatedDeliveryDate) { // not required
		return nil
	}

	if err := validate.FormatOf("estimatedDeliveryDate", "body", "date-time", m.EstimatedDeliveryDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ItemDelivery) validateItemDeliveryPromise(formats strfmt.Registry) error {
	if swag.IsZero(m.ItemDeliveryPromise) { // not required
		return nil
	}

	if m.ItemDeliveryPromise != nil {
		if err := m.ItemDeliveryPromise.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemDeliveryPromise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemDeliveryPromise")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this item delivery based on the context it is used
func (m *ItemDelivery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateItemDeliveryPromise(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemDelivery) contextValidateItemDeliveryPromise(ctx context.Context, formats strfmt.Registry) error {

	if m.ItemDeliveryPromise != nil {
		if err := m.ItemDeliveryPromise.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("itemDeliveryPromise")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("itemDeliveryPromise")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemDelivery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemDelivery) UnmarshalBinary(b []byte) error {
	var res ItemDelivery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
