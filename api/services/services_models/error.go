// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Error Error response returned when the request is unsuccessful.
//
// swagger:model Error
type Error struct {

	// An error code that identifies the type of error that occurred.
	// Required: true
	Code *string `json:"code"`

	// Additional details that can help the caller understand or fix the issue.
	Details string `json:"details,omitempty"`

	// The type of error.
	// Enum: [ERROR WARNING]
	ErrorLevel string `json:"errorLevel,omitempty"`

	// A message that describes the error condition in a human-readable form.
	// Required: true
	Message *string `json:"message"`
}

// Validate validates this error
func (m *Error) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrorLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Error) validateCode(formats strfmt.Registry) error {

	if err := validate.Required("code", "body", m.Code); err != nil {
		return err
	}

	return nil
}

var errorTypeErrorLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ERROR","WARNING"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorTypeErrorLevelPropEnum = append(errorTypeErrorLevelPropEnum, v)
	}
}

const (

	// ErrorErrorLevelERROR captures enum value "ERROR"
	ErrorErrorLevelERROR string = "ERROR"

	// ErrorErrorLevelWARNING captures enum value "WARNING"
	ErrorErrorLevelWARNING string = "WARNING"
)

// prop value enum
func (m *Error) validateErrorLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, errorTypeErrorLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Error) validateErrorLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorLevelEnum("errorLevel", "body", m.ErrorLevel); err != nil {
		return err
	}

	return nil
}

func (m *Error) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error based on context it is used
func (m *Error) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Error) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Error) UnmarshalBinary(b []byte) error {
	var res Error
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
