// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Poa Proof of Appointment (POA) details.
//
// swagger:model Poa
type Poa struct {

	// The time of the appointment window.
	AppointmentTime *AppointmentTime `json:"appointmentTime,omitempty"`

	// The type of POA uploaded.
	// Enum: [NO_SIGNATURE_DUMMY_POS CUSTOMER_SIGNATURE DUMMY_RECEIPT POA_RECEIPT]
	PoaType string `json:"poaType,omitempty"`

	// A list of technicians.
	// Min Items: 1
	Technicians []*Technician `json:"technicians"`

	// The date and time when the POA was uploaded, in ISO 8601 format.
	// Format: date-time
	UploadTime strfmt.DateTime `json:"uploadTime,omitempty"`

	// The identifier of the technician who uploaded the POA.
	// Pattern: ^[A-Z0-9]*$
	UploadingTechnician string `json:"uploadingTechnician,omitempty"`
}

// Validate validates this poa
func (m *Poa) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointmentTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnicians(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUploadingTechnician(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Poa) validateAppointmentTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentTime) { // not required
		return nil
	}

	if m.AppointmentTime != nil {
		if err := m.AppointmentTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentTime")
			}
			return err
		}
	}

	return nil
}

var poaTypePoaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NO_SIGNATURE_DUMMY_POS","CUSTOMER_SIGNATURE","DUMMY_RECEIPT","POA_RECEIPT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		poaTypePoaTypePropEnum = append(poaTypePoaTypePropEnum, v)
	}
}

const (

	// PoaPoaTypeNOSIGNATUREDUMMYPOS captures enum value "NO_SIGNATURE_DUMMY_POS"
	PoaPoaTypeNOSIGNATUREDUMMYPOS string = "NO_SIGNATURE_DUMMY_POS"

	// PoaPoaTypeCUSTOMERSIGNATURE captures enum value "CUSTOMER_SIGNATURE"
	PoaPoaTypeCUSTOMERSIGNATURE string = "CUSTOMER_SIGNATURE"

	// PoaPoaTypeDUMMYRECEIPT captures enum value "DUMMY_RECEIPT"
	PoaPoaTypeDUMMYRECEIPT string = "DUMMY_RECEIPT"

	// PoaPoaTypePOARECEIPT captures enum value "POA_RECEIPT"
	PoaPoaTypePOARECEIPT string = "POA_RECEIPT"
)

// prop value enum
func (m *Poa) validatePoaTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, poaTypePoaTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Poa) validatePoaType(formats strfmt.Registry) error {
	if swag.IsZero(m.PoaType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePoaTypeEnum("poaType", "body", m.PoaType); err != nil {
		return err
	}

	return nil
}

func (m *Poa) validateTechnicians(formats strfmt.Registry) error {
	if swag.IsZero(m.Technicians) { // not required
		return nil
	}

	iTechniciansSize := int64(len(m.Technicians))

	if err := validate.MinItems("technicians", "body", iTechniciansSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Technicians); i++ {
		if swag.IsZero(m.Technicians[i]) { // not required
			continue
		}

		if m.Technicians[i] != nil {
			if err := m.Technicians[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("technicians" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("technicians" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Poa) validateUploadTime(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadTime) { // not required
		return nil
	}

	if err := validate.FormatOf("uploadTime", "body", "date-time", m.UploadTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Poa) validateUploadingTechnician(formats strfmt.Registry) error {
	if swag.IsZero(m.UploadingTechnician) { // not required
		return nil
	}

	if err := validate.Pattern("uploadingTechnician", "body", m.UploadingTechnician, `^[A-Z0-9]*$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this poa based on the context it is used
func (m *Poa) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointmentTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTechnicians(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Poa) contextValidateAppointmentTime(ctx context.Context, formats strfmt.Registry) error {

	if m.AppointmentTime != nil {
		if err := m.AppointmentTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentTime")
			}
			return err
		}
	}

	return nil
}

func (m *Poa) contextValidateTechnicians(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Technicians); i++ {

		if m.Technicians[i] != nil {
			if err := m.Technicians[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("technicians" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("technicians" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Poa) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Poa) UnmarshalBinary(b []byte) error {
	var res Poa
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
