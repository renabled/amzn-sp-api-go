// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Address The shipping address for the service job.
//
// swagger:model Address
type Address struct {

	// The first line of the address.
	// Required: true
	AddressLine1 *string `json:"addressLine1"`

	// Additional address information, if required.
	AddressLine2 string `json:"addressLine2,omitempty"`

	// Additional address information, if required.
	AddressLine3 string `json:"addressLine3,omitempty"`

	// The city.
	City string `json:"city,omitempty"`

	// The two digit country code, in ISO 3166-1 alpha-2 format.
	CountryCode string `json:"countryCode,omitempty"`

	// The county.
	County string `json:"county,omitempty"`

	// The district.
	District string `json:"district,omitempty"`

	// The name of the person, business, or institution.
	// Required: true
	Name *string `json:"name"`

	// The phone number.
	Phone string `json:"phone,omitempty"`

	// The postal code. This can contain letters, digits, spaces, and/or punctuation.
	PostalCode string `json:"postalCode,omitempty"`

	// The state or region.
	StateOrRegion string `json:"stateOrRegion,omitempty"`
}

// Validate validates this address
func (m *Address) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddressLine1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Address) validateAddressLine1(formats strfmt.Registry) error {

	if err := validate.Required("addressLine1", "body", m.AddressLine1); err != nil {
		return err
	}

	return nil
}

func (m *Address) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this address based on context it is used
func (m *Address) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Address) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Address) UnmarshalBinary(b []byte) error {
	var res Address
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
