// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RescheduleAppointmentRequest Input for rescheduled appointment operation.
//
// swagger:model RescheduleAppointmentRequest
type RescheduleAppointmentRequest struct {

	// Input appointment time details.
	// Required: true
	AppointmentTime *AppointmentTimeInput `json:"appointmentTime"`

	// Input appointment reschedule reason.
	// Required: true
	RescheduleReasonCode *RescheduleReasonCode `json:"rescheduleReasonCode"`
}

// Validate validates this reschedule appointment request
func (m *RescheduleAppointmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointmentTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescheduleReasonCode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RescheduleAppointmentRequest) validateAppointmentTime(formats strfmt.Registry) error {

	if err := validate.Required("appointmentTime", "body", m.AppointmentTime); err != nil {
		return err
	}

	if m.AppointmentTime != nil {
		if err := m.AppointmentTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentTime")
			}
			return err
		}
	}

	return nil
}

func (m *RescheduleAppointmentRequest) validateRescheduleReasonCode(formats strfmt.Registry) error {

	if err := validate.Required("rescheduleReasonCode", "body", m.RescheduleReasonCode); err != nil {
		return err
	}

	if err := validate.Required("rescheduleReasonCode", "body", m.RescheduleReasonCode); err != nil {
		return err
	}

	if m.RescheduleReasonCode != nil {
		if err := m.RescheduleReasonCode.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rescheduleReasonCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rescheduleReasonCode")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this reschedule appointment request based on the context it is used
func (m *RescheduleAppointmentRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointmentTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRescheduleReasonCode(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RescheduleAppointmentRequest) contextValidateAppointmentTime(ctx context.Context, formats strfmt.Registry) error {

	if m.AppointmentTime != nil {
		if err := m.AppointmentTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentTime")
			}
			return err
		}
	}

	return nil
}

func (m *RescheduleAppointmentRequest) contextValidateRescheduleReasonCode(ctx context.Context, formats strfmt.Registry) error {

	if m.RescheduleReasonCode != nil {
		if err := m.RescheduleReasonCode.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rescheduleReasonCode")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rescheduleReasonCode")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RescheduleAppointmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RescheduleAppointmentRequest) UnmarshalBinary(b []byte) error {
	var res RescheduleAppointmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
