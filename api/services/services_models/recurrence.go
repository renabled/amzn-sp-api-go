// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Recurrence Repeated occurrence of an event in a time range.
//
// swagger:model Recurrence
type Recurrence struct {

	// Days of the month when recurrence is valid.
	DaysOfMonth []int64 `json:"daysOfMonth"`

	// Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list.
	DaysOfWeek []DayOfWeek `json:"daysOfWeek"`

	// End time of the recurrence.
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"endTime"`
}

// Validate validates this recurrence
func (m *Recurrence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDaysOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaysOfWeek(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recurrence) validateDaysOfMonth(formats strfmt.Registry) error {
	if swag.IsZero(m.DaysOfMonth) { // not required
		return nil
	}

	for i := 0; i < len(m.DaysOfMonth); i++ {

		if err := validate.MinimumInt("daysOfMonth"+"."+strconv.Itoa(i), "body", m.DaysOfMonth[i], 1, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("daysOfMonth"+"."+strconv.Itoa(i), "body", m.DaysOfMonth[i], 31, false); err != nil {
			return err
		}

	}

	return nil
}

func (m *Recurrence) validateDaysOfWeek(formats strfmt.Registry) error {
	if swag.IsZero(m.DaysOfWeek) { // not required
		return nil
	}

	for i := 0; i < len(m.DaysOfWeek); i++ {

		if err := m.DaysOfWeek[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daysOfWeek" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daysOfWeek" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *Recurrence) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this recurrence based on the context it is used
func (m *Recurrence) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDaysOfWeek(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Recurrence) contextValidateDaysOfWeek(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.DaysOfWeek); i++ {

		if err := m.DaysOfWeek[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daysOfWeek" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daysOfWeek" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Recurrence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Recurrence) UnmarshalBinary(b []byte) error {
	var res Recurrence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
