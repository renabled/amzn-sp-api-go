// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SetAppointmentFulfillmentDataRequest Input for set appointment fulfillment data operation.
//
// swagger:model SetAppointmentFulfillmentDataRequest
type SetAppointmentFulfillmentDataRequest struct {

	// Resources involved in appointment fulfillment.
	AppointmentResources AppointmentResources `json:"appointmentResources,omitempty"`

	// Documents specific to appointment fulfillment.
	FulfillmentDocuments FulfillmentDocuments `json:"fulfillmentDocuments,omitempty"`

	// Input appointment time details.
	FulfillmentTime *FulfillmentTime `json:"fulfillmentTime,omitempty"`
}

// Validate validates this set appointment fulfillment data request
func (m *SetAppointmentFulfillmentDataRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointmentResources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentDocuments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFulfillmentTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetAppointmentFulfillmentDataRequest) validateAppointmentResources(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentResources) { // not required
		return nil
	}

	if err := m.AppointmentResources.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appointmentResources")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("appointmentResources")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentFulfillmentDataRequest) validateFulfillmentDocuments(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentDocuments) { // not required
		return nil
	}

	if err := m.FulfillmentDocuments.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentDocuments")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentFulfillmentDataRequest) validateFulfillmentTime(formats strfmt.Registry) error {
	if swag.IsZero(m.FulfillmentTime) { // not required
		return nil
	}

	if m.FulfillmentTime != nil {
		if err := m.FulfillmentTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfillmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulfillmentTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this set appointment fulfillment data request based on the context it is used
func (m *SetAppointmentFulfillmentDataRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointmentResources(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentDocuments(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFulfillmentTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SetAppointmentFulfillmentDataRequest) contextValidateAppointmentResources(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AppointmentResources.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appointmentResources")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("appointmentResources")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentFulfillmentDataRequest) contextValidateFulfillmentDocuments(ctx context.Context, formats strfmt.Registry) error {

	if err := m.FulfillmentDocuments.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fulfillmentDocuments")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("fulfillmentDocuments")
		}
		return err
	}

	return nil
}

func (m *SetAppointmentFulfillmentDataRequest) contextValidateFulfillmentTime(ctx context.Context, formats strfmt.Registry) error {

	if m.FulfillmentTime != nil {
		if err := m.FulfillmentTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fulfillmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fulfillmentTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SetAppointmentFulfillmentDataRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SetAppointmentFulfillmentDataRequest) UnmarshalBinary(b []byte) error {
	var res SetAppointmentFulfillmentDataRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
