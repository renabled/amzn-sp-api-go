// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvailabilityRecord `AvailabilityRecord` to represent the capacity of a resource over a time range.
//
// swagger:model AvailabilityRecord
type AvailabilityRecord struct {

	// Signifies the capacity of a resource which is available.
	// Minimum: 1
	Capacity int64 `json:"capacity,omitempty"`

	// Denotes the time till when the resource is available in a day in ISO-8601 format.
	// Required: true
	// Format: date-time
	EndTime *strfmt.DateTime `json:"endTime"`

	// Recurrence object containing the recurrence pattern of schedule.
	Recurrence *Recurrence `json:"recurrence,omitempty"`

	// Denotes the time from when the resource is available in a day in ISO-8601 format.
	// Required: true
	// Format: date-time
	StartTime *strfmt.DateTime `json:"startTime"`
}

// Validate validates this availability record
func (m *AvailabilityRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityRecord) validateCapacity(formats strfmt.Registry) error {
	if swag.IsZero(m.Capacity) { // not required
		return nil
	}

	if err := validate.MinimumInt("capacity", "body", m.Capacity, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityRecord) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *AvailabilityRecord) validateRecurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.Recurrence) { // not required
		return nil
	}

	if m.Recurrence != nil {
		if err := m.Recurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recurrence")
			}
			return err
		}
	}

	return nil
}

func (m *AvailabilityRecord) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this availability record based on the context it is used
func (m *AvailabilityRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRecurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvailabilityRecord) contextValidateRecurrence(ctx context.Context, formats strfmt.Registry) error {

	if m.Recurrence != nil {
		if err := m.Recurrence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("recurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("recurrence")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AvailabilityRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvailabilityRecord) UnmarshalBinary(b []byte) error {
	var res AvailabilityRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
