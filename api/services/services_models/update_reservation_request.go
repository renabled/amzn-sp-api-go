// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateReservationRequest Request schema for the `updateReservation` operation.
//
// swagger:model UpdateReservationRequest
type UpdateReservationRequest struct {

	// `Reservation` object to reduce the capacity of a resource.
	// Required: true
	Reservation *Reservation `json:"reservation"`

	// Resource (store) identifier.
	// Required: true
	ResourceID *string `json:"resourceId"`
}

// Validate validates this update reservation request
func (m *UpdateReservationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReservation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReservationRequest) validateReservation(formats strfmt.Registry) error {

	if err := validate.Required("reservation", "body", m.Reservation); err != nil {
		return err
	}

	if m.Reservation != nil {
		if err := m.Reservation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reservation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reservation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateReservationRequest) validateResourceID(formats strfmt.Registry) error {

	if err := validate.Required("resourceId", "body", m.ResourceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update reservation request based on the context it is used
func (m *UpdateReservationRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateReservation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReservationRequest) contextValidateReservation(ctx context.Context, formats strfmt.Registry) error {

	if m.Reservation != nil {
		if err := m.Reservation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reservation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reservation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateReservationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateReservationRequest) UnmarshalBinary(b []byte) error {
	var res UpdateReservationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
