// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateReservationRecord `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`.
//
// swagger:model UpdateReservationRecord
type UpdateReservationRecord struct {

	// Errors encountered, if any.
	Errors ErrorList `json:"errors,omitempty"`

	// Reservation record if the operation failed. It will only contain the new `reservationId` if the operation is successful.
	Reservation *Reservation `json:"reservation,omitempty"`

	// Warnings encountered, if any.
	Warnings WarningList `json:"warnings,omitempty"`
}

// Validate validates this update reservation record
func (m *UpdateReservationRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReservation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReservationRecord) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if err := m.Errors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *UpdateReservationRecord) validateReservation(formats strfmt.Registry) error {
	if swag.IsZero(m.Reservation) { // not required
		return nil
	}

	if m.Reservation != nil {
		if err := m.Reservation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reservation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reservation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateReservationRecord) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	if err := m.Warnings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("warnings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("warnings")
		}
		return err
	}

	return nil
}

// ContextValidate validate this update reservation record based on the context it is used
func (m *UpdateReservationRecord) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateReservation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateReservationRecord) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Errors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *UpdateReservationRecord) contextValidateReservation(ctx context.Context, formats strfmt.Registry) error {

	if m.Reservation != nil {
		if err := m.Reservation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("reservation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("reservation")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateReservationRecord) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Warnings.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("warnings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("warnings")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateReservationRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateReservationRecord) UnmarshalBinary(b []byte) error {
	var res UpdateReservationRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
