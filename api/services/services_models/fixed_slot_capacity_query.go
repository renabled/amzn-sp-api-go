// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FixedSlotCapacityQuery Request schema for the `getFixedSlotCapacity` operation. This schema is used to define the time range, capacity types and slot duration which are being queried.
//
// swagger:model FixedSlotCapacityQuery
type FixedSlotCapacityQuery struct {

	// An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`.
	CapacityTypes []CapacityType `json:"capacityTypes"`

	// End date time up to which the capacity slots are being requested in ISO 8601 format.
	// Required: true
	// Format: date-time
	EndDateTime *strfmt.DateTime `json:"endDateTime"`

	// Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.
	// Multiple Of: 5
	SlotDuration int32 `json:"slotDuration,omitempty"`

	// Start date time from which the capacity slots are being requested in ISO 8601 format.
	// Required: true
	// Format: date-time
	StartDateTime *strfmt.DateTime `json:"startDateTime"`
}

// Validate validates this fixed slot capacity query
func (m *FixedSlotCapacityQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacityTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSlotDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FixedSlotCapacityQuery) validateCapacityTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.CapacityTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.CapacityTypes); i++ {

		if err := m.CapacityTypes[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacityTypes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capacityTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *FixedSlotCapacityQuery) validateEndDateTime(formats strfmt.Registry) error {

	if err := validate.Required("endDateTime", "body", m.EndDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("endDateTime", "body", "date-time", m.EndDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *FixedSlotCapacityQuery) validateSlotDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.SlotDuration) { // not required
		return nil
	}

	if err := validate.MultipleOfInt("slotDuration", "body", int64(m.SlotDuration), 5); err != nil {
		return err
	}

	return nil
}

func (m *FixedSlotCapacityQuery) validateStartDateTime(formats strfmt.Registry) error {

	if err := validate.Required("startDateTime", "body", m.StartDateTime); err != nil {
		return err
	}

	if err := validate.FormatOf("startDateTime", "body", "date-time", m.StartDateTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this fixed slot capacity query based on the context it is used
func (m *FixedSlotCapacityQuery) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCapacityTypes(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FixedSlotCapacityQuery) contextValidateCapacityTypes(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CapacityTypes); i++ {

		if err := m.CapacityTypes[i].ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("capacityTypes" + "." + strconv.Itoa(i))
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("capacityTypes" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FixedSlotCapacityQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FixedSlotCapacityQuery) UnmarshalBinary(b []byte) error {
	var res FixedSlotCapacityQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
