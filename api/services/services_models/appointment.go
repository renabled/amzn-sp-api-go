// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Appointment The details of an appointment.
//
// swagger:model Appointment
type Appointment struct {

	// The appointment identifier.
	AppointmentID AppointmentID `json:"appointmentId,omitempty"`

	// The status of the appointment.
	// Enum: [ACTIVE CANCELLED COMPLETED]
	AppointmentStatus string `json:"appointmentStatus,omitempty"`

	// The time of the appointment window.
	AppointmentTime *AppointmentTime `json:"appointmentTime,omitempty"`

	// A list of technicians assigned to the service job.
	// Min Items: 1
	AssignedTechnicians []*Technician `json:"assignedTechnicians"`

	// Proof of Appointment (POA) details.
	Poa *Poa `json:"poa,omitempty"`

	// The identifier of a rescheduled appointment.
	RescheduledAppointmentID AppointmentID `json:"rescheduledAppointmentId,omitempty"`
}

// Validate validates this appointment
func (m *Appointment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppointmentID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppointmentStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppointmentTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAssignedTechnicians(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePoa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRescheduledAppointmentID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Appointment) validateAppointmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentID) { // not required
		return nil
	}

	if err := m.AppointmentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appointmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("appointmentId")
		}
		return err
	}

	return nil
}

var appointmentTypeAppointmentStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","CANCELLED","COMPLETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appointmentTypeAppointmentStatusPropEnum = append(appointmentTypeAppointmentStatusPropEnum, v)
	}
}

const (

	// AppointmentAppointmentStatusACTIVE captures enum value "ACTIVE"
	AppointmentAppointmentStatusACTIVE string = "ACTIVE"

	// AppointmentAppointmentStatusCANCELLED captures enum value "CANCELLED"
	AppointmentAppointmentStatusCANCELLED string = "CANCELLED"

	// AppointmentAppointmentStatusCOMPLETED captures enum value "COMPLETED"
	AppointmentAppointmentStatusCOMPLETED string = "COMPLETED"
)

// prop value enum
func (m *Appointment) validateAppointmentStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appointmentTypeAppointmentStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Appointment) validateAppointmentStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAppointmentStatusEnum("appointmentStatus", "body", m.AppointmentStatus); err != nil {
		return err
	}

	return nil
}

func (m *Appointment) validateAppointmentTime(formats strfmt.Registry) error {
	if swag.IsZero(m.AppointmentTime) { // not required
		return nil
	}

	if m.AppointmentTime != nil {
		if err := m.AppointmentTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentTime")
			}
			return err
		}
	}

	return nil
}

func (m *Appointment) validateAssignedTechnicians(formats strfmt.Registry) error {
	if swag.IsZero(m.AssignedTechnicians) { // not required
		return nil
	}

	iAssignedTechniciansSize := int64(len(m.AssignedTechnicians))

	if err := validate.MinItems("assignedTechnicians", "body", iAssignedTechniciansSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.AssignedTechnicians); i++ {
		if swag.IsZero(m.AssignedTechnicians[i]) { // not required
			continue
		}

		if m.AssignedTechnicians[i] != nil {
			if err := m.AssignedTechnicians[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedTechnicians" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignedTechnicians" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Appointment) validatePoa(formats strfmt.Registry) error {
	if swag.IsZero(m.Poa) { // not required
		return nil
	}

	if m.Poa != nil {
		if err := m.Poa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poa")
			}
			return err
		}
	}

	return nil
}

func (m *Appointment) validateRescheduledAppointmentID(formats strfmt.Registry) error {
	if swag.IsZero(m.RescheduledAppointmentID) { // not required
		return nil
	}

	if err := m.RescheduledAppointmentID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rescheduledAppointmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rescheduledAppointmentId")
		}
		return err
	}

	return nil
}

// ContextValidate validate this appointment based on the context it is used
func (m *Appointment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppointmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppointmentTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAssignedTechnicians(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePoa(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRescheduledAppointmentID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Appointment) contextValidateAppointmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.AppointmentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("appointmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("appointmentId")
		}
		return err
	}

	return nil
}

func (m *Appointment) contextValidateAppointmentTime(ctx context.Context, formats strfmt.Registry) error {

	if m.AppointmentTime != nil {
		if err := m.AppointmentTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appointmentTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appointmentTime")
			}
			return err
		}
	}

	return nil
}

func (m *Appointment) contextValidateAssignedTechnicians(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AssignedTechnicians); i++ {

		if m.AssignedTechnicians[i] != nil {
			if err := m.AssignedTechnicians[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("assignedTechnicians" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("assignedTechnicians" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Appointment) contextValidatePoa(ctx context.Context, formats strfmt.Registry) error {

	if m.Poa != nil {
		if err := m.Poa.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("poa")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("poa")
			}
			return err
		}
	}

	return nil
}

func (m *Appointment) contextValidateRescheduledAppointmentID(ctx context.Context, formats strfmt.Registry) error {

	if err := m.RescheduledAppointmentID.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("rescheduledAppointmentId")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("rescheduledAppointmentId")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Appointment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Appointment) UnmarshalBinary(b []byte) error {
	var res Appointment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
