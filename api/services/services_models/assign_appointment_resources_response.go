// Code generated by go-swagger; DO NOT EDIT.

package services_models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AssignAppointmentResourcesResponse Response schema for the `assignAppointmentResources` operation.
//
// swagger:model AssignAppointmentResourcesResponse
type AssignAppointmentResourcesResponse struct {

	// Errors occurred during during the `assignAppointmentResources` operation.
	Errors ErrorList `json:"errors,omitempty"`

	// payload
	Payload *AssignAppointmentResourcesResponsePayload `json:"payload,omitempty"`
}

// Validate validates this assign appointment resources response
func (m *AssignAppointmentResourcesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayload(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignAppointmentResourcesResponse) validateErrors(formats strfmt.Registry) error {
	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	if err := m.Errors.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *AssignAppointmentResourcesResponse) validatePayload(formats strfmt.Registry) error {
	if swag.IsZero(m.Payload) { // not required
		return nil
	}

	if m.Payload != nil {
		if err := m.Payload.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payload")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this assign appointment resources response based on the context it is used
func (m *AssignAppointmentResourcesResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateErrors(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignAppointmentResourcesResponse) contextValidateErrors(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Errors.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("errors")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("errors")
		}
		return err
	}

	return nil
}

func (m *AssignAppointmentResourcesResponse) contextValidatePayload(ctx context.Context, formats strfmt.Registry) error {

	if m.Payload != nil {
		if err := m.Payload.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payload")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payload")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssignAppointmentResourcesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignAppointmentResourcesResponse) UnmarshalBinary(b []byte) error {
	var res AssignAppointmentResourcesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// AssignAppointmentResourcesResponsePayload The payload for the `assignAppointmentResource` operation.
//
// swagger:model AssignAppointmentResourcesResponsePayload
type AssignAppointmentResourcesResponsePayload struct {

	// Warnings generated during the `assignAppointmentResources` operation.
	Warnings WarningList `json:"warnings,omitempty"`
}

// Validate validates this assign appointment resources response payload
func (m *AssignAppointmentResourcesResponsePayload) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignAppointmentResourcesResponsePayload) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	if err := m.Warnings.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payload" + "." + "warnings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payload" + "." + "warnings")
		}
		return err
	}

	return nil
}

// ContextValidate validate this assign appointment resources response payload based on the context it is used
func (m *AssignAppointmentResourcesResponsePayload) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AssignAppointmentResourcesResponsePayload) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Warnings.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("payload" + "." + "warnings")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("payload" + "." + "warnings")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssignAppointmentResourcesResponsePayload) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssignAppointmentResourcesResponsePayload) UnmarshalBinary(b []byte) error {
	var res AssignAppointmentResourcesResponsePayload
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
