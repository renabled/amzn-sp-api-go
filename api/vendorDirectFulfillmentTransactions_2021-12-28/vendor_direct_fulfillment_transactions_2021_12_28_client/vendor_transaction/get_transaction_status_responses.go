// Code generated by go-swagger; DO NOT EDIT.

package vendor_transaction

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/renabled/amzn-sp-api-go/api/vendorDirectFulfillmentTransactions_2021-12-28/vendor_direct_fulfillment_transactions_2021_12_28_models"
)

// GetTransactionStatusReader is a Reader for the GetTransactionStatus structure.
type GetTransactionStatusReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetTransactionStatusReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetTransactionStatusOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetTransactionStatusBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetTransactionStatusUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetTransactionStatusForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetTransactionStatusNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 415:
		result := NewGetTransactionStatusUnsupportedMediaType()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetTransactionStatusTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetTransactionStatusInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetTransactionStatusServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetTransactionStatusOK creates a GetTransactionStatusOK with default headers values
func NewGetTransactionStatusOK() *GetTransactionStatusOK {
	return &GetTransactionStatusOK{}
}

/*
GetTransactionStatusOK describes a response with status code 200, with default header values.

Success.
*/
type GetTransactionStatusOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.TransactionStatus
}

// IsSuccess returns true when this get transaction status o k response has a 2xx status code
func (o *GetTransactionStatusOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get transaction status o k response has a 3xx status code
func (o *GetTransactionStatusOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status o k response has a 4xx status code
func (o *GetTransactionStatusOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction status o k response has a 5xx status code
func (o *GetTransactionStatusOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status o k response a status code equal to that given
func (o *GetTransactionStatusOK) IsCode(code int) bool {
	return code == 200
}

func (o *GetTransactionStatusOK) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusOK  %+v", 200, o.Payload)
}

func (o *GetTransactionStatusOK) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusOK  %+v", 200, o.Payload)
}

func (o *GetTransactionStatusOK) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.TransactionStatus {
	return o.Payload
}

func (o *GetTransactionStatusOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.TransactionStatus)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusBadRequest creates a GetTransactionStatusBadRequest with default headers values
func NewGetTransactionStatusBadRequest() *GetTransactionStatusBadRequest {
	return &GetTransactionStatusBadRequest{}
}

/*
GetTransactionStatusBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetTransactionStatusBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.ErrorList
}

// IsSuccess returns true when this get transaction status bad request response has a 2xx status code
func (o *GetTransactionStatusBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status bad request response has a 3xx status code
func (o *GetTransactionStatusBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status bad request response has a 4xx status code
func (o *GetTransactionStatusBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction status bad request response has a 5xx status code
func (o *GetTransactionStatusBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status bad request response a status code equal to that given
func (o *GetTransactionStatusBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *GetTransactionStatusBadRequest) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionStatusBadRequest) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusBadRequest  %+v", 400, o.Payload)
}

func (o *GetTransactionStatusBadRequest) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.ErrorList {
	return o.Payload
}

func (o *GetTransactionStatusBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.ErrorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusUnauthorized creates a GetTransactionStatusUnauthorized with default headers values
func NewGetTransactionStatusUnauthorized() *GetTransactionStatusUnauthorized {
	return &GetTransactionStatusUnauthorized{}
}

/*
GetTransactionStatusUnauthorized describes a response with status code 401, with default header values.

The request's authorization header is not formatted correctly or does not contain a valid token.
*/
type GetTransactionStatusUnauthorized struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status unauthorized response has a 2xx status code
func (o *GetTransactionStatusUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status unauthorized response has a 3xx status code
func (o *GetTransactionStatusUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status unauthorized response has a 4xx status code
func (o *GetTransactionStatusUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction status unauthorized response has a 5xx status code
func (o *GetTransactionStatusUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status unauthorized response a status code equal to that given
func (o *GetTransactionStatusUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *GetTransactionStatusUnauthorized) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionStatusUnauthorized) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusUnauthorized  %+v", 401, o.Payload)
}

func (o *GetTransactionStatusUnauthorized) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusForbidden creates a GetTransactionStatusForbidden with default headers values
func NewGetTransactionStatusForbidden() *GetTransactionStatusForbidden {
	return &GetTransactionStatusForbidden{}
}

/*
GetTransactionStatusForbidden describes a response with status code 403, with default header values.

Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature.
*/
type GetTransactionStatusForbidden struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status forbidden response has a 2xx status code
func (o *GetTransactionStatusForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status forbidden response has a 3xx status code
func (o *GetTransactionStatusForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status forbidden response has a 4xx status code
func (o *GetTransactionStatusForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction status forbidden response has a 5xx status code
func (o *GetTransactionStatusForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status forbidden response a status code equal to that given
func (o *GetTransactionStatusForbidden) IsCode(code int) bool {
	return code == 403
}

func (o *GetTransactionStatusForbidden) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetTransactionStatusForbidden) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusForbidden  %+v", 403, o.Payload)
}

func (o *GetTransactionStatusForbidden) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusNotFound creates a GetTransactionStatusNotFound with default headers values
func NewGetTransactionStatusNotFound() *GetTransactionStatusNotFound {
	return &GetTransactionStatusNotFound{}
}

/*
GetTransactionStatusNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetTransactionStatusNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status not found response has a 2xx status code
func (o *GetTransactionStatusNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status not found response has a 3xx status code
func (o *GetTransactionStatusNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status not found response has a 4xx status code
func (o *GetTransactionStatusNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction status not found response has a 5xx status code
func (o *GetTransactionStatusNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status not found response a status code equal to that given
func (o *GetTransactionStatusNotFound) IsCode(code int) bool {
	return code == 404
}

func (o *GetTransactionStatusNotFound) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionStatusNotFound) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusNotFound  %+v", 404, o.Payload)
}

func (o *GetTransactionStatusNotFound) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusUnsupportedMediaType creates a GetTransactionStatusUnsupportedMediaType with default headers values
func NewGetTransactionStatusUnsupportedMediaType() *GetTransactionStatusUnsupportedMediaType {
	return &GetTransactionStatusUnsupportedMediaType{}
}

/*
GetTransactionStatusUnsupportedMediaType describes a response with status code 415, with default header values.

The request payload is in an unsupported format.
*/
type GetTransactionStatusUnsupportedMediaType struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status unsupported media type response has a 2xx status code
func (o *GetTransactionStatusUnsupportedMediaType) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status unsupported media type response has a 3xx status code
func (o *GetTransactionStatusUnsupportedMediaType) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status unsupported media type response has a 4xx status code
func (o *GetTransactionStatusUnsupportedMediaType) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction status unsupported media type response has a 5xx status code
func (o *GetTransactionStatusUnsupportedMediaType) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status unsupported media type response a status code equal to that given
func (o *GetTransactionStatusUnsupportedMediaType) IsCode(code int) bool {
	return code == 415
}

func (o *GetTransactionStatusUnsupportedMediaType) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTransactionStatusUnsupportedMediaType) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusUnsupportedMediaType  %+v", 415, o.Payload)
}

func (o *GetTransactionStatusUnsupportedMediaType) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusUnsupportedMediaType) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusTooManyRequests creates a GetTransactionStatusTooManyRequests with default headers values
func NewGetTransactionStatusTooManyRequests() *GetTransactionStatusTooManyRequests {
	return &GetTransactionStatusTooManyRequests{}
}

/*
GetTransactionStatusTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetTransactionStatusTooManyRequests struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status too many requests response has a 2xx status code
func (o *GetTransactionStatusTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status too many requests response has a 3xx status code
func (o *GetTransactionStatusTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status too many requests response has a 4xx status code
func (o *GetTransactionStatusTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get transaction status too many requests response has a 5xx status code
func (o *GetTransactionStatusTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get transaction status too many requests response a status code equal to that given
func (o *GetTransactionStatusTooManyRequests) IsCode(code int) bool {
	return code == 429
}

func (o *GetTransactionStatusTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTransactionStatusTooManyRequests) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusTooManyRequests  %+v", 429, o.Payload)
}

func (o *GetTransactionStatusTooManyRequests) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusInternalServerError creates a GetTransactionStatusInternalServerError with default headers values
func NewGetTransactionStatusInternalServerError() *GetTransactionStatusInternalServerError {
	return &GetTransactionStatusInternalServerError{}
}

/*
GetTransactionStatusInternalServerError describes a response with status code 500, with default header values.

An unexpected condition occurred that prevented the server from fulfilling the request.
*/
type GetTransactionStatusInternalServerError struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status internal server error response has a 2xx status code
func (o *GetTransactionStatusInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status internal server error response has a 3xx status code
func (o *GetTransactionStatusInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status internal server error response has a 4xx status code
func (o *GetTransactionStatusInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction status internal server error response has a 5xx status code
func (o *GetTransactionStatusInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this get transaction status internal server error response a status code equal to that given
func (o *GetTransactionStatusInternalServerError) IsCode(code int) bool {
	return code == 500
}

func (o *GetTransactionStatusInternalServerError) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTransactionStatusInternalServerError) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusInternalServerError  %+v", 500, o.Payload)
}

func (o *GetTransactionStatusInternalServerError) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetTransactionStatusServiceUnavailable creates a GetTransactionStatusServiceUnavailable with default headers values
func NewGetTransactionStatusServiceUnavailable() *GetTransactionStatusServiceUnavailable {
	return &GetTransactionStatusServiceUnavailable{}
}

/*
GetTransactionStatusServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetTransactionStatusServiceUnavailable struct {

	/* Unique request reference identifier.
	 */
	XAmznRequestID string

	Payload *vendor_direct_fulfillment_transactions_2021_12_28_models.Error
}

// IsSuccess returns true when this get transaction status service unavailable response has a 2xx status code
func (o *GetTransactionStatusServiceUnavailable) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get transaction status service unavailable response has a 3xx status code
func (o *GetTransactionStatusServiceUnavailable) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get transaction status service unavailable response has a 4xx status code
func (o *GetTransactionStatusServiceUnavailable) IsClientError() bool {
	return false
}

// IsServerError returns true when this get transaction status service unavailable response has a 5xx status code
func (o *GetTransactionStatusServiceUnavailable) IsServerError() bool {
	return true
}

// IsCode returns true when this get transaction status service unavailable response a status code equal to that given
func (o *GetTransactionStatusServiceUnavailable) IsCode(code int) bool {
	return code == 503
}

func (o *GetTransactionStatusServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTransactionStatusServiceUnavailable) String() string {
	return fmt.Sprintf("[GET /vendor/directFulfillment/transactions/2021-12-28/transactions/{transactionId}][%d] getTransactionStatusServiceUnavailable  %+v", 503, o.Payload)
}

func (o *GetTransactionStatusServiceUnavailable) GetPayload() *vendor_direct_fulfillment_transactions_2021_12_28_models.Error {
	return o.Payload
}

func (o *GetTransactionStatusServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(vendor_direct_fulfillment_transactions_2021_12_28_models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
