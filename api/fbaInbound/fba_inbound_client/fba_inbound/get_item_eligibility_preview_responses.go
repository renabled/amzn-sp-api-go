// Code generated by go-swagger; DO NOT EDIT.

package fba_inbound

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/xamandar/amzn-sp-api-go/api/fbaInbound/fba_inbound_models"
)

// GetItemEligibilityPreviewReader is a Reader for the GetItemEligibilityPreview structure.
type GetItemEligibilityPreviewReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetItemEligibilityPreviewReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetItemEligibilityPreviewOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGetItemEligibilityPreviewBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewGetItemEligibilityPreviewUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewGetItemEligibilityPreviewForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetItemEligibilityPreviewNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetItemEligibilityPreviewTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewGetItemEligibilityPreviewInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 503:
		result := NewGetItemEligibilityPreviewServiceUnavailable()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewGetItemEligibilityPreviewOK creates a GetItemEligibilityPreviewOK with default headers values
func NewGetItemEligibilityPreviewOK() *GetItemEligibilityPreviewOK {
	return &GetItemEligibilityPreviewOK{}
}

/* GetItemEligibilityPreviewOK describes a response with status code 200, with default header values.

Success.
*/
type GetItemEligibilityPreviewOK struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewOK) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewOK  %+v", 200, o.Payload)
}
func (o *GetItemEligibilityPreviewOK) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewBadRequest creates a GetItemEligibilityPreviewBadRequest with default headers values
func NewGetItemEligibilityPreviewBadRequest() *GetItemEligibilityPreviewBadRequest {
	return &GetItemEligibilityPreviewBadRequest{}
}

/* GetItemEligibilityPreviewBadRequest describes a response with status code 400, with default header values.

Request has missing or invalid parameters and cannot be parsed.
*/
type GetItemEligibilityPreviewBadRequest struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewBadRequest) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewBadRequest  %+v", 400, o.Payload)
}
func (o *GetItemEligibilityPreviewBadRequest) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewUnauthorized creates a GetItemEligibilityPreviewUnauthorized with default headers values
func NewGetItemEligibilityPreviewUnauthorized() *GetItemEligibilityPreviewUnauthorized {
	return &GetItemEligibilityPreviewUnauthorized{}
}

/* GetItemEligibilityPreviewUnauthorized describes a response with status code 401, with default header values.

The request's Authorization header is not formatted correctly or does not contain a valid token.
*/
type GetItemEligibilityPreviewUnauthorized struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewUnauthorized  %+v", 401, o.Payload)
}
func (o *GetItemEligibilityPreviewUnauthorized) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewForbidden creates a GetItemEligibilityPreviewForbidden with default headers values
func NewGetItemEligibilityPreviewForbidden() *GetItemEligibilityPreviewForbidden {
	return &GetItemEligibilityPreviewForbidden{}
}

/* GetItemEligibilityPreviewForbidden describes a response with status code 403, with default header values.

403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found.
*/
type GetItemEligibilityPreviewForbidden struct {

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewForbidden) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewForbidden  %+v", 403, o.Payload)
}
func (o *GetItemEligibilityPreviewForbidden) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewNotFound creates a GetItemEligibilityPreviewNotFound with default headers values
func NewGetItemEligibilityPreviewNotFound() *GetItemEligibilityPreviewNotFound {
	return &GetItemEligibilityPreviewNotFound{}
}

/* GetItemEligibilityPreviewNotFound describes a response with status code 404, with default header values.

The resource specified does not exist.
*/
type GetItemEligibilityPreviewNotFound struct {

	/* Your rate limit (requests per second) for this operation.
	 */
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewNotFound) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewNotFound  %+v", 404, o.Payload)
}
func (o *GetItemEligibilityPreviewNotFound) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewTooManyRequests creates a GetItemEligibilityPreviewTooManyRequests with default headers values
func NewGetItemEligibilityPreviewTooManyRequests() *GetItemEligibilityPreviewTooManyRequests {
	return &GetItemEligibilityPreviewTooManyRequests{}
}

/* GetItemEligibilityPreviewTooManyRequests describes a response with status code 429, with default header values.

The frequency of requests was greater than allowed.
*/
type GetItemEligibilityPreviewTooManyRequests struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewTooManyRequests  %+v", 429, o.Payload)
}
func (o *GetItemEligibilityPreviewTooManyRequests) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewInternalServerError creates a GetItemEligibilityPreviewInternalServerError with default headers values
func NewGetItemEligibilityPreviewInternalServerError() *GetItemEligibilityPreviewInternalServerError {
	return &GetItemEligibilityPreviewInternalServerError{}
}

/* GetItemEligibilityPreviewInternalServerError describes a response with status code 500, with default header values.

Encountered an unexpected condition which prevented the server from fulfilling the request.
*/
type GetItemEligibilityPreviewInternalServerError struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewInternalServerError  %+v", 500, o.Payload)
}
func (o *GetItemEligibilityPreviewInternalServerError) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetItemEligibilityPreviewServiceUnavailable creates a GetItemEligibilityPreviewServiceUnavailable with default headers values
func NewGetItemEligibilityPreviewServiceUnavailable() *GetItemEligibilityPreviewServiceUnavailable {
	return &GetItemEligibilityPreviewServiceUnavailable{}
}

/* GetItemEligibilityPreviewServiceUnavailable describes a response with status code 503, with default header values.

Temporary overloading or maintenance of the server.
*/
type GetItemEligibilityPreviewServiceUnavailable struct {

	/* Your rate limit (requests per second) for this operation.
	_Note:_ For this status code, the rate limit header is deprecated and no longer returned.
	*/
	XAmznRateLimitLimit string

	/* Unique request reference ID.
	 */
	XAmznRequestID string

	Payload *fba_inbound_models.GetItemEligibilityPreviewResponse
}

func (o *GetItemEligibilityPreviewServiceUnavailable) Error() string {
	return fmt.Sprintf("[GET /fba/inbound/v1/eligibility/itemPreview][%d] getItemEligibilityPreviewServiceUnavailable  %+v", 503, o.Payload)
}
func (o *GetItemEligibilityPreviewServiceUnavailable) GetPayload() *fba_inbound_models.GetItemEligibilityPreviewResponse {
	return o.Payload
}

func (o *GetItemEligibilityPreviewServiceUnavailable) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header x-amzn-RateLimit-Limit
	hdrXAmznRateLimitLimit := response.GetHeader("x-amzn-RateLimit-Limit")

	if hdrXAmznRateLimitLimit != "" {
		o.XAmznRateLimitLimit = hdrXAmznRateLimitLimit
	}

	// hydrates response header x-amzn-RequestId
	hdrXAmznRequestID := response.GetHeader("x-amzn-RequestId")

	if hdrXAmznRequestID != "" {
		o.XAmznRequestID = hdrXAmznRequestID
	}

	o.Payload = new(fba_inbound_models.GetItemEligibilityPreviewResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
